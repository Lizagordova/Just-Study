[{"C:\\SuperSoft\\SuperSoft\\client\\src\\index.tsx":"1","C:\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts":"2","C:\\SuperSoft\\SuperSoft\\client\\src\\App.tsx":"3","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx":"4","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx":"5","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Main\\Main.tsx":"6","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyWorkPage.tsx":"7","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\ProjectsPage.tsx":"8","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\UsersPage.tsx":"9","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\ProjectStore.tsx":"10","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx":"11","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\CommentsStore.tsx":"12","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyTasks.tsx":"13","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskStatus.ts":"14","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddProject.tsx":"15","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Projects.tsx":"16"},{"size":704,"mtime":1607787725088,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":1607420618541,"results":"19","hashOfConfig":"18"},{"size":821,"mtime":1607787714332,"results":"20","hashOfConfig":"18"},{"size":817,"mtime":1607860334709,"results":"21","hashOfConfig":"18"},{"size":978,"mtime":1607860536356,"results":"22","hashOfConfig":"18"},{"size":2126,"mtime":1607853872924,"results":"23","hashOfConfig":"18"},{"size":3749,"mtime":1607853965447,"results":"24","hashOfConfig":"18"},{"size":821,"mtime":1607859475569,"results":"25","hashOfConfig":"18"},{"size":271,"mtime":1607763534463,"results":"26","hashOfConfig":"18"},{"size":1244,"mtime":1607863945315,"results":"27","hashOfConfig":"18"},{"size":1193,"mtime":1607930299574,"results":"28","hashOfConfig":"18"},{"size":62,"mtime":1607764508300,"results":"29","hashOfConfig":"18"},{"size":2607,"mtime":1607930826131,"results":"30","hashOfConfig":"18"},{"size":253,"mtime":1607930319106,"results":"31","hashOfConfig":"18"},{"size":5552,"mtime":1607864156033,"results":"32","hashOfConfig":"18"},{"size":2080,"mtime":1607860657794,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1ttbku6",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"50","usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"67","usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"74","usedDeprecatedRules":"36"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"77","usedDeprecatedRules":"36"},"C:\\SuperSoft\\SuperSoft\\client\\src\\index.tsx",[],["78","79"],"C:\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\App.tsx",["80","81"],"import React, { Component } from \"react\";\nimport './App.css';\nimport { RootStore } from \"./stores/RootStore\";\nimport { Main } from \"./components/Main/Main\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-social/bootstrap-social.css';\nimport './styles/common.css';\nimport { BrowserRouter } from \"react-router-dom\";\nimport { observer, Provider } from  \"mobx-react\";\nimport {observable} from \"mobx\";\n\ninterface Props {\n    store: RootStore;\n}\n\n@observer\nclass App extends Component<Props> {\n   render() {\n       const { store } = this.props;\n       return(\n           <div>\n               <BrowserRouter>\n                   <div className=\"App\">\n                       <Main store={store}/>\n                   </div>\n               </BrowserRouter>\n           </div>\n       );\n   }\n\n\n}\n\nexport default App;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx",["82","83"],"﻿import { action, observable, makeObservable } from \"mobx\";\r\nimport UserStore from \"./UserStore\";\r\nimport ProjectStore from \"./ProjectStore\";\r\nimport TaskStore from \"./TaskStore\";\r\nimport CommentsStore from \"./CommentsStore\";\r\n\r\nexport class RootStore {\r\n    userStore: UserStore;\r\n    taskStore: TaskStore;\r\n    projectStore: ProjectStore;\r\n    commentStore: CommentsStore;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            userStore: observable,\r\n            taskStore: observable,\r\n            projectStore: observable,\r\n            commentStore: observable\r\n        });\r\n        this.userStore = new UserStore();\r\n        this.taskStore = new TaskStore();\r\n        this.projectStore = new ProjectStore();\r\n        this.commentStore = new CommentsStore();\r\n    }\r\n}\r\n\r\nexport default RootStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx",["84"],"﻿import { UserViewModel } from \"../Typings/viewModels/UserViewModel\";\r\nimport {makeObservable, observable} from \"mobx\";\r\n\r\nclass UserStore {\r\n    currentUser: UserViewModel;\r\n    users: UserViewModel[];\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            users: observable,\r\n            currentUser: observable\r\n        });\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        this.getCurrentUser()\r\n            .then((user) => {\r\n                this.currentUser = user\r\n            });\r\n        this.getUsers()\r\n            .then((users) => {\r\n                this.users = users;\r\n            });\r\n    }\r\n\r\n    async getCurrentUser(): Promise<UserViewModel> {\r\n        const response = await fetch(\"bundled\");\r\n        return await response.json();\r\n    }\r\n\r\n    async getUsers(): Promise<UserViewModel[]> {\r\n        const response = await fetch(\"/getusers\");\r\n        return await response.json();\r\n    }\r\n}\r\n\r\nexport default UserStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Main\\Main.tsx",["85"],"﻿import React from \"react\";\r\nimport { IMainProps } from \"./IMainProps\";\r\nimport { Card, CardHeader, Nav, NavItem } from \"reactstrap\";\r\nimport { NavLink, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { MyWorkPage } from \"../MyWork/MyWorkPage\";\r\nimport { ProjectsPage } from \"../Projects/ProjectsPage\";\r\nimport { UsersPage } from \"../Users/UsersPage\";\r\nimport { observer } from  \"mobx-react\";\r\n\r\n@observer\r\nexport class Main extends React.Component<IMainProps> {\r\n    render() {\r\n        return(\r\n            <>\r\n                <Card>\r\n                    <CardHeader>\r\n                        <Nav tabs className=\"nav\">\r\n                              <NavItem>\r\n                                  <NavLink to=\"/mywork\" exact className=\"nav-link\" activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>МОЯ РАБОТА</NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink to=\"/projects\" exact className=\"nav-link\" activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>ПРОЕКТЫ</NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink to=\"/users\" exact className=\"nav-link\" activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>ПОЛЬЗОВАТЕЛИ</NavLink>\r\n                              </NavItem>\r\n                        </Nav>\r\n                    </CardHeader>\r\n                </Card>\r\n                <Switch>\r\n                    <Route exact path=\"/mywork\" \r\n                         render={(props) => <MyWorkPage store={this.props.store} />} />\r\n                    <Route exact path=\"/projects\"\r\n                         render={(props) => <ProjectsPage store={this.props.store} />} />\r\n                    <Route exact path=\"/users\"\r\n                         render={(props) => <UsersPage store={this.props.store} />} />\r\n                    <Redirect to=\"/mywork\" />\r\n                </Switch>\r\n            </>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyWorkPage.tsx",["86"],"﻿import React from \"react\";\r\nimport {Col, Nav, NavItem, Row, TabContent, TabPane} from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport classnames from \"classnames\";\r\nimport {MyTasks} from \"./MyTasks\";\r\nimport { observer } from \"mobx-react\";\r\nimport {action, makeObservable, observable} from \"mobx\";\r\nimport {IMyWorkProps} from \"./IMyWorkProps\";\r\nimport {TaskStatus} from \"../../Typings/enums/TaskStatus\";\r\n\r\n@observer\r\nexport class  MyWorkPage extends React.Component<IMyWorkProps> {\r\n    activeTab: string = \"1\";\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n           activeTab: observable\r\n       })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{marginTop: 35}} className=\"container-fluid\">\r\n                <Row>\r\n                    <Col sm=\"12\">\r\n                        <Nav tabs>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                    className={classnames({ active: this.activeTab === \"1\"})}\r\n                                    onClick={(e) => this.toggleTab(\"1\")}\r\n                                    >Текущие</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                    className={classnames({ active: this.activeTab === \"2\"})}\r\n                                    onClick={(e) => this.toggleTab(\"2\")}>Законченные</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                    className={classnames({ active: this.activeTab === \"3\"})}\r\n                                    onClick={(e) => this.toggleTab(\"3\")}>Будущие</NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                        <TabContent activeTab={this.activeTab}>\r\n                            <TabPane tabId=\"1\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <MyTasks store={this.props.store} tasksStatus={TaskStatus.Current}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                            <TabPane tabId=\"2\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <MyTasks store={this.props.store} tasksStatus={TaskStatus.Completed}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                            <TabPane tabId=\"3\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <MyTasks store={this.props.store} tasksStatus={TaskStatus.Future}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                        </TabContent>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    @action\r\n    toggleTab(activeTab: string): void {\r\n        this.activeTab = activeTab;\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\ProjectsPage.tsx",["87"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport {AddProject} from \"./AddProject\";\r\nimport {Projects} from \"./Projects\";\r\n\r\nexport class  ProjectsPage extends React.Component<IProjectsProps> {\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\">\r\n                \r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-12\">\r\n                        <AddProject store={this.props.store} />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-12\">\r\n                        <Projects store={this.props.store} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\UsersPage.tsx",["88"],"﻿import React from \"react\";\r\nimport { IUsersProps } from \"./IUsersProps\";\r\n\r\nexport class  UsersPage extends React.Component<IUsersProps> {\r\n    render() {\r\n        return(\r\n            <>\r\n                Пользователи\r\n            </>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\ProjectStore.tsx",["89"],"﻿import { ProjectViewModel } from \"../Typings/viewModels/ProjectViewModel\";\r\nimport {makeObservable, observable} from \"mobx\";\r\n\r\nclass ProjectStore {\r\n    projects: ProjectViewModel[];\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            projects: observable\r\n        });\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        this.getProjects()\r\n            .then((projects) => {\r\n                this.projects = projects;\r\n            });\r\n    }\r\n\r\n    async getProjects() {\r\n        const response = await fetch(\"/getprojects\");\r\n\r\n        return await response.json();\r\n    }\r\n    \r\n    async addNewProject(name: string, description: string, startDate: Date | Date[], deadlineDate: Date | Date[], responsibleId: number) {\r\n        const response = await fetch(\"/addorupdateproject\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify({name: name, desciption: description, startDate: startDate, deadlineDate: deadlineDate, responsiblePerson: responsibleId})\r\n        });\r\n        if(response.status === 200) {\r\n            const project = await response.json();\r\n            this.projects.push(project);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default ProjectStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx",["90"],"C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\CommentsStore.tsx",["91"],"﻿class CommentsStore {\r\n\r\n}\r\n\r\nexport default CommentsStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyTasks.tsx",["92","93","94"],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskStatus.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddProject.tsx",["95"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input, Dropdown, DropdownToggle, DropdownItem, DropdownMenu } from \"reactstrap\";\r\nimport Calendar from \"react-calendar\";\r\n\r\n@observer\r\nexport class AddProject extends React.Component<IProjectsProps> {\r\n    addProjectWindowOpen: boolean;\r\n    projectName: string = \"\";\r\n    description: string = \"\";\r\n    responsibleDropdownOpen: boolean;\r\n    startDate: Date | Date[];\r\n    deadline: Date | Date[];\r\n    responsiblePerson: number;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addProjectWindowOpen: observable\r\n        });\r\n    }\r\n\r\n    toggleAddProjectWindow() {\r\n        this.addProjectWindowOpen = !this.addProjectWindowOpen;\r\n    }\r\n\r\n    toggleResponsibleDropdownOpen() {\r\n        this.responsibleDropdownOpen = !this.responsibleDropdownOpen;\r\n    }\r\n\r\n    renderAddProjectWindow() {\r\n        let users = this.props.store.userStore.users;\r\n        return(\r\n            <Modal isOpen={this.addProjectWindowOpen} toggle={this.toggleAddProjectWindow}>\r\n                <ModalHeader>\r\n                    СОЗДАНИЕ ПРОЕКТА\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"row justify-content-center\">\r\n                        <label>Название проекта</label>\r\n                        <Input onChange={(e) => this.inputProjectName(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <label>Описание проекта</label>\r\n                        <Input onChange={(e) => this.inputDescription(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <label>Дата начала</label>\r\n                            <Calendar\r\n                                value={this.startDate}\r\n                                onChange={(date) => this.inputDate(date, \"startDate\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <label>Дедлайн</label>\r\n                            <Calendar\r\n                                value={this.deadline}\r\n                                onChange={(date) => this.inputDate(date, \"deadline\")}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <label>Ответственный</label>\r\n                        <Dropdown isOpen={this.responsibleDropdownOpen} toggle={this.toggleResponsibleDropdownOpen}>\r\n                            <DropdownToggle/>\r\n                            <DropdownMenu>\r\n                                {users.map((user, index) => {\r\n                                    return(\r\n                                        <>\r\n                                            {index === 0 && <DropdownItem key={index} header onClick={() => this.chooseResponsiblePerson(user.id)}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                                            {index !== 0 && <DropdownItem key={index}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                                        </>\r\n                                    );\r\n                                })}\r\n                            </DropdownMenu>\r\n                        </Dropdown>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                    onClick={this.saveProject}>СОХРАНИТЬ</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-lg-2 col-lg-offset-10 col-md-4 col-md-offset-8 col-sm-6 col-sm-offet-3 col-xs-12\">\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={this.toggleAddProjectWindow}>Создать проект</Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.addProjectWindowOpen && this.renderAddProjectWindow()}\r\n                {!this.addProjectWindowOpen && this.renderButton()}\r\n            </>\r\n        )\r\n    }\r\n\r\n    inputProjectName(event: React.FormEvent<HTMLInputElement>) {\r\n        this.projectName = event.currentTarget.value;\r\n        console.log(\"this\", this);\r\n    }\r\n\r\n    inputDescription(event: React.FormEvent<HTMLInputElement>) {\r\n        this.description = event.currentTarget.value;\r\n    }\r\n\r\n    inputDate(date: Date | Date[], dateType: string) {\r\n        if(dateType === \"startDate\") {\r\n            this.startDate = date;\r\n        } else if(dateType === \"deadline\") {\r\n            this.deadline = date;\r\n        }\r\n    }\r\n\r\n    chooseResponsiblePerson(userId: number) {\r\n        this.responsiblePerson = userId;\r\n    }\r\n\r\n    saveProject() {\r\n        this.props.store.projectStore.addNewProject(this.projectName, this.description, this.startDate, this.deadline, this.responsiblePerson);\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Projects.tsx",["96"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { ProjectViewModel } from \"../../Typings/viewModels/ProjectViewModel\";\r\nimport { Table } from \"reactstrap\";\r\nimport {UserViewModel} from \"../../Typings/viewModels/UserViewModel\";\r\n\r\nexport class Projects extends React.Component<IProjectsProps> {\r\n    getResponsible(userId: number): UserViewModel {\r\n        return this.props.store.userStore.users.find(u => u.id === userId) as UserViewModel;\r\n    }\r\n\r\n    renderProjects(projects: ProjectViewModel[]) {\r\n        return(\r\n            <Table bordered style={{backgroundColor: \"#C4DFE6\", color:\"003b46\"}}>\r\n                <thead>\r\n                <tr>\r\n                    <th>Номер</th>\r\n                    <th>Название</th>\r\n                    <th>Дата начала</th>\r\n                    <th>Дедлайн</th>\r\n                    <th>Ответственный</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr key=\"1\">\r\n                    <th>id</th>\r\n                    <th>name</th>\r\n                    <th>startDate</th>\r\n                    <th>deadlineDate</th>\r\n                    <th>responsible</th>\r\n                </tr>\r\n                {projects.map((project) => {\r\n                    let responsible = this.getResponsible(project.id);//здесь project.responsibleId\r\n                    return(\r\n                        <tr key={project.id}>\r\n                            <th>{project.name}</th>\r\n                            <th>{project.startDate}</th>\r\n                            <th>{project.deadlineDate}</th>\r\n                            <th>{responsible.firstName + responsible.lastName}</th>\r\n                        </tr>\r\n                    )\r\n                })}\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        let projects = this.props.store.projectStore.projects;\r\n        return(\r\n            <>\r\n                {this.renderProjects(projects)}\r\n            </>\r\n        )\r\n    }\r\n}",{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":9,"column":20,"nodeType":"103","messageId":"104","endLine":9,"endColumn":28},{"ruleId":"101","severity":1,"message":"105","line":10,"column":9,"nodeType":"103","messageId":"104","endLine":10,"endColumn":19},{"ruleId":"106","severity":1,"message":"107","line":1,"column":1,"nodeType":"108","messageId":"109","fix":"110"},{"ruleId":"101","severity":1,"message":"111","line":1,"column":10,"nodeType":"103","messageId":"104","endLine":1,"endColumn":16},{"ruleId":"106","severity":1,"message":"107","line":1,"column":1,"nodeType":"108","messageId":"109","fix":"112"},{"ruleId":"106","severity":1,"message":"107","line":1,"column":1,"nodeType":"108","messageId":"109","fix":"113"},{"ruleId":"106","severity":1,"message":"107","line":1,"column":1,"nodeType":"108","messageId":"109","fix":"114"},{"ruleId":"106","severity":1,"message":"107","line":1,"column":1,"nodeType":"108","messageId":"109","fix":"115"},{"ruleId":"106","severity":1,"message":"107","line":1,"column":1,"nodeType":"108","messageId":"109","fix":"116"},{"ruleId":"106","severity":1,"message":"107","line":1,"column":1,"nodeType":"108","messageId":"109","fix":"117"},{"ruleId":"106","severity":1,"message":"107","line":1,"column":1,"nodeType":"108","messageId":"109","fix":"118"},{"ruleId":"106","severity":1,"message":"107","line":1,"column":1,"nodeType":"108","messageId":"109","fix":"119"},{"ruleId":"106","severity":1,"message":"107","line":1,"column":1,"nodeType":"108","messageId":"109","fix":"120"},{"ruleId":"101","severity":1,"message":"121","line":6,"column":10,"nodeType":"103","messageId":"104","endLine":6,"endColumn":15},{"ruleId":"122","severity":1,"message":"123","line":22,"column":59,"nodeType":"124","messageId":"125","endLine":22,"endColumn":61,"fix":"126"},{"ruleId":"106","severity":1,"message":"107","line":1,"column":1,"nodeType":"108","messageId":"109","fix":"127"},{"ruleId":"106","severity":1,"message":"107","line":1,"column":1,"nodeType":"108","messageId":"109","fix":"128"},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"@typescript-eslint/no-unused-vars","'Provider' is defined but never used.","Identifier","unusedVar","'observable' is defined but never used.","unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"131","text":"132"},"'action' is defined but never used.",{"range":"133","text":"132"},{"range":"134","text":"132"},{"range":"135","text":"132"},{"range":"136","text":"132"},{"range":"137","text":"132"},{"range":"138","text":"132"},{"range":"139","text":"132"},{"range":"140","text":"132"},{"range":"141","text":"132"},"'Alert' is defined but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"142","text":"143"},{"range":"144","text":"132"},{"range":"145","text":"132"},"no-global-assign","no-unsafe-negation",[-1,0],"",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[859,875],"\r\n            ?.",[-1,0],[-1,0]]