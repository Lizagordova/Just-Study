[{"C:\\SuperSoft\\SuperSoft\\client\\src\\index.tsx":"1","C:\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts":"2","C:\\SuperSoft\\SuperSoft\\client\\src\\App.tsx":"3","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx":"4","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx":"5","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Main\\Main.tsx":"6","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyWorkPage.tsx":"7","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\ProjectsPage.tsx":"8","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\UsersPage.tsx":"9","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\ProjectStore.tsx":"10","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx":"11","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\CommentsStore.tsx":"12","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyTasks.tsx":"13","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskStatus.ts":"14","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddProject.tsx":"15","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Projects.tsx":"16","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Project.tsx":"17","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddUserToProject.tsx":"18","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\AddTask.tsx":"19","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Tasks.tsx":"20","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskRole.ts":"21","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\Users.tsx":"22","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentGroupViewModel.ts":"23","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserReadModel.ts":"24","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\Role.ts":"25","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\User.tsx":"26","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\AddUser.tsx":"27","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\ProjectViewModel.ts":"28","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserViewModel.ts":"29","C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\renderSpinner.tsx":"30","C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\translater.tsx":"31","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Authorization.tsx":"32","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Task.tsx":"33","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\TaskViewModel.ts":"34","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskPriority.ts":"35","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskType.ts":"36","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\ProjectRole.ts":"37","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Comments\\Comments.tsx":"38","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Comments\\AddComment.tsx":"39","C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\formatDate.tsx":"40","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\index.tsx":"41","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts":"42","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\App.tsx":"43","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx":"44","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx":"45","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Authorization.tsx":"46","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentGroupViewModel.ts":"47","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserViewModel.ts":"48","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\formatDate.tsx":"49","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\renderSpinner.tsx":"50","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\translater.tsx":"51","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\TaskViewModel.ts":"52","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Registration.tsx":"53","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Main\\AdminMain.tsx":"54","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Main\\UserMain.tsx":"55","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\CourseStore.tsx":"56","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\LessonStore.tsx":"57","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CourseViewModel.ts":"58","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserCourseViewModel.ts":"59","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\LessonViewModel.ts":"60","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx":"61","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\UserRole.ts":"62","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserSubtaskViewModel.ts":"63","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\WordStore.tsx":"64","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Courses\\CoursesPage.tsx":"65","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\DictionaryPage.tsx":"66","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Courses\\Course.tsx":"67","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Courses\\AddNewCourse.tsx":"68","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\LessonsMenu.tsx":"69","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\LessonPage.tsx":"70","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\CompletedHomeworkPage.tsx":"71","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Homework\\HomeworkPage.tsx":"72","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Lesson\\Lesson.tsx":"73","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\AddOrUpdateNewLesson.tsx":"74","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\UserHomework.tsx":"75","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Lesson\\Content.tsx":"76","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\ContentUpload.tsx":"77","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\TaskUpload.tsx":"78","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\Task.tsx":"79","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\CompletedHomework.tsx":"80","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\SubtaskType.ts":"81","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserTaskViewModel.ts":"82","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Lesson\\Material.tsx":"83","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\TaskReadModel.ts":"84","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\TaskUploadWindow.tsx":"85","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\DetailedAnswerSubtask.tsx":"86","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\TaskEdit.tsx":"87","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\FillGapsSubtask.tsx":"88","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\LoadAudioSubtask.tsx":"89","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\RightVerbFormSubtask.tsx":"90","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\LoadFileSubtask.tsx":"91","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\consts\\TaskTypeTranslater.tsx":"92","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\CompletedTask.tsx":"93","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserSubtaskReadModel.ts":"94","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\SubtaskReadModel.ts":"95","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\SubtaskViewModel.ts":"96","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserSubtaskAnswerGroupReadModel.ts":"97","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskType.ts":"98","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\SubtaskUploadWindow.tsx":"99","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\getTaskTitle.tsx":"100","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\subtaskTranspiler.tsx":"101","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\getTooltipText.tsx":"102","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\WordReadModel.ts":"103","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserWordViewModel.ts":"104","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\WordsTrainingPage.tsx":"105","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\Words.tsx":"106","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\Word.tsx":"107","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\WordViewModel.ts":"108","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\PartOfSpeech.ts":"109","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\transformer.tsx":"110","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\ExampleReadModel.ts":"111","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\WordTrainingType.ts":"112","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\Settings.tsx":"113","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\CompletingStatus.ts":"114","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\TrainingTypes\\ShowWordTraining.tsx":"115","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\TrainingStore.tsx":"116","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Training\\TrainingPage.tsx":"117","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Training\\TrainingContent.tsx":"118","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\Search.tsx":"119","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\TagReadModel.ts":"120","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserWordReadModel.ts":"121","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\TrainingTypes\\EnglishWordRussianMeaningTraining.tsx":"122","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\TrainingTypes\\RussianWordEnglishWordTraining.tsx":"123","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\shuffleWords.tsx":"124","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\AddSubtask.tsx":"125","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Users\\UsersPage.tsx":"126","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Users\\Users.tsx":"127","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Participants\\ParticipantsPage.tsx":"128","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\WordsOfADay\\WordsOfADay.tsx":"129","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Participants\\Participants.tsx":"130","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Participants\\Participant.tsx":"131","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\WordsOfADay\\WordOfADay.tsx":"132","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\CommentedEntityType.ts":"133","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\WordsOfADay\\AnswerToWordOfADay.tsx":"134","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\WordsOfADay\\UserAnswers.tsx":"135","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Comments\\CommentGroup.tsx":"136","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\WordOfADayReadModel.ts":"137","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentViewModel.ts":"138","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\CommentReadModel.ts":"139","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\mapper.tsx":"140","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\WordsOfADay\\UserAnswer.tsx":"141","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Comments\\Comment.tsx":"142","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\Tarif.ts":"143","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Users\\AddOrUpdateUserWindow.tsx":"144","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Users\\User.tsx":"145","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Home\\HomePage.tsx":"146","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\MyLessons\\MyLessonsPage.tsx":"147","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Home\\OverallProgress.tsx":"148","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\TrackerStore.tsx":"149","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\TrackerViewModel.ts":"150","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\MyLessons\\LessonPage.tsx":"151","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Tracker\\Tracker.tsx":"152","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\MyLessons\\Homework.tsx":"153","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Tracker\\Types\\NaStarteTracker.tsx":"154","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\NavigationType.tsx":"155","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\MyLessons\\HomeworkTask.tsx":"156","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\TrackerByDayReadModel.ts":"157","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\TrackerReadModel.ts":"158","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\NotificationStore.tsx":"159","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Notifications\\Notifications.tsx":"160","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Notifications\\Notification.tsx":"161","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserReadModel.ts":"162","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\CourseRole.ts":"163","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserNotificationReadModel.ts":"164","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\SubtaskAnswerGroupViewModel.ts":"165","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserSubtaskAnswerGroupViewModel.ts":"166","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\TrackerByDayViewModel.ts":"167","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\AddOrUpdateWord.tsx":"168"},{"size":704,"mtime":1607787725088,"results":"169","hashOfConfig":"170"},{"size":425,"mtime":1607420618541,"results":"171","hashOfConfig":"170"},{"size":1092,"mtime":1608407182954,"results":"172","hashOfConfig":"170"},{"size":1207,"mtime":1608718514662,"results":"173","hashOfConfig":"170"},{"size":2405,"mtime":1608718319712,"results":"174","hashOfConfig":"170"},{"size":2558,"mtime":1608717577926,"results":"175","hashOfConfig":"170"},{"size":3541,"mtime":1608557262746,"results":"176","hashOfConfig":"170"},{"size":1005,"mtime":1608490669706,"results":"177","hashOfConfig":"170"},{"size":673,"mtime":1608370217935,"results":"178","hashOfConfig":"170"},{"size":3086,"mtime":1608720092368,"results":"179","hashOfConfig":"170"},{"size":2923,"mtime":1608619065455,"results":"180","hashOfConfig":"170"},{"size":1835,"mtime":1608718968831,"results":"181","hashOfConfig":"170"},{"size":4419,"mtime":1608733592437,"results":"182","hashOfConfig":"170"},{"size":256,"mtime":1608743121589,"results":"183","hashOfConfig":"170"},{"size":6943,"mtime":1608709178403,"results":"184","hashOfConfig":"170"},{"size":3253,"mtime":1608618370542,"results":"185","hashOfConfig":"170"},{"size":8107,"mtime":1608719005032,"results":"186","hashOfConfig":"170"},{"size":6274,"mtime":1608734357365,"results":"187","hashOfConfig":"170"},{"size":12974,"mtime":1608743524781,"results":"188","hashOfConfig":"170"},{"size":3481,"mtime":1608744419351,"results":"189","hashOfConfig":"170"},{"size":252,"mtime":1608743121581,"results":"190","hashOfConfig":"170"},{"size":1206,"mtime":1608370045224,"results":"191","hashOfConfig":"170"},{"size":366,"mtime":1608743121494,"results":"192","hashOfConfig":"170"},{"size":399,"mtime":1608743121559,"results":"193","hashOfConfig":"170"},{"size":290,"mtime":1608743121586,"results":"194","hashOfConfig":"170"},{"size":3678,"mtime":1608530673218,"results":"195","hashOfConfig":"170"},{"size":6700,"mtime":1608617434826,"results":"196","hashOfConfig":"170"},{"size":376,"mtime":1608743121526,"results":"197","hashOfConfig":"170"},{"size":403,"mtime":1608743121537,"results":"198","hashOfConfig":"170"},{"size":164,"mtime":1608361997793,"results":"199","hashOfConfig":"170"},{"size":2531,"mtime":1608734413778,"results":"200","hashOfConfig":"170"},{"size":3093,"mtime":1608489549893,"results":"201","hashOfConfig":"170"},{"size":11518,"mtime":1608555987750,"results":"202","hashOfConfig":"170"},{"size":665,"mtime":1608743121531,"results":"203","hashOfConfig":"170"},{"size":247,"mtime":1608743121594,"results":"204","hashOfConfig":"170"},{"size":230,"mtime":1608743121591,"results":"205","hashOfConfig":"170"},{"size":268,"mtime":1608743121583,"results":"206","hashOfConfig":"170"},{"size":2264,"mtime":1608719008227,"results":"207","hashOfConfig":"170"},{"size":2052,"mtime":1608718971081,"results":"208","hashOfConfig":"170"},{"size":237,"mtime":1608621198055,"results":"209","hashOfConfig":"170"},{"size":704,"mtime":1607787725088,"results":"210","hashOfConfig":"211"},{"size":425,"mtime":1607420618541,"results":"212","hashOfConfig":"211"},{"size":3140,"mtime":1613634224834,"results":"213","hashOfConfig":"211"},{"size":2120,"mtime":1612856607649,"results":"214","hashOfConfig":"211"},{"size":3149,"mtime":1613292101354,"results":"215","hashOfConfig":"211"},{"size":3548,"mtime":1613066122542,"results":"216","hashOfConfig":"211"},{"size":338,"mtime":1609924088938,"results":"217","hashOfConfig":"218"},{"size":463,"mtime":1613753554055,"results":"219","hashOfConfig":"211"},{"size":237,"mtime":1608621198055,"results":"220","hashOfConfig":"218"},{"size":164,"mtime":1608361997793,"results":"221","hashOfConfig":"211"},{"size":2400,"mtime":1613577475212,"results":"222","hashOfConfig":"211"},{"size":546,"mtime":1613753554046,"results":"223","hashOfConfig":"211"},{"size":5261,"mtime":1612976078481,"results":"224","hashOfConfig":"211"},{"size":3985,"mtime":1613634228208,"results":"225","hashOfConfig":"211"},{"size":7378,"mtime":1613731035204,"results":"226","hashOfConfig":"211"},{"size":5572,"mtime":1613632413235,"results":"227","hashOfConfig":"211"},{"size":4014,"mtime":1613739448918,"results":"228","hashOfConfig":"211"},{"size":286,"mtime":1613753554032,"results":"229","hashOfConfig":"211"},{"size":469,"mtime":1613753554050,"results":"230","hashOfConfig":"211"},{"size":361,"mtime":1613753554035,"results":"231","hashOfConfig":"211"},{"size":9266,"mtime":1613578939341,"results":"232","hashOfConfig":"211"},{"size":229,"mtime":1613753554111,"results":"233","hashOfConfig":"211"},{"size":567,"mtime":1613753554052,"results":"234","hashOfConfig":"211"},{"size":7830,"mtime":1613752676629,"results":"235","hashOfConfig":"211"},{"size":4737,"mtime":1613495849513,"results":"236","hashOfConfig":"211"},{"size":4379,"mtime":1613753146768,"results":"237","hashOfConfig":"211"},{"size":3927,"mtime":1613495842705,"results":"238","hashOfConfig":"211"},{"size":5048,"mtime":1613071507664,"results":"239","hashOfConfig":"211"},{"size":5990,"mtime":1613292094987,"results":"240","hashOfConfig":"211"},{"size":3457,"mtime":1613145082495,"results":"241","hashOfConfig":"211"},{"size":688,"mtime":1610358768866,"results":"242","hashOfConfig":"211"},{"size":1505,"mtime":1613574210686,"results":"243","hashOfConfig":"211"},{"size":1578,"mtime":1610357685459,"results":"244","hashOfConfig":"211"},{"size":8998,"mtime":1613375671907,"results":"245","hashOfConfig":"211"},{"size":1750,"mtime":1613495827304,"results":"246","hashOfConfig":"211"},{"size":1322,"mtime":1613144571265,"results":"247","hashOfConfig":"211"},{"size":2806,"mtime":1613739428979,"results":"248","hashOfConfig":"211"},{"size":4167,"mtime":1613467573967,"results":"249","hashOfConfig":"211"},{"size":7834,"mtime":1613733658005,"results":"250","hashOfConfig":"211"},{"size":1219,"mtime":1610439306270,"results":"251","hashOfConfig":"211"},{"size":330,"mtime":1613753554110,"results":"252","hashOfConfig":"211"},{"size":332,"mtime":1613753554053,"results":"253","hashOfConfig":"211"},{"size":1859,"mtime":1613574221173,"results":"254","hashOfConfig":"211"},{"size":587,"mtime":1613753554078,"results":"255","hashOfConfig":"211"},{"size":7053,"mtime":1613732162102,"results":"256","hashOfConfig":"211"},{"size":4754,"mtime":1613496189132,"results":"257","hashOfConfig":"211"},{"size":1959,"mtime":1612856889932,"results":"258","hashOfConfig":"211"},{"size":9087,"mtime":1613736835420,"results":"259","hashOfConfig":"211"},{"size":5863,"mtime":1613737735423,"results":"260","hashOfConfig":"211"},{"size":9443,"mtime":1613733555325,"results":"261","hashOfConfig":"211"},{"size":5623,"mtime":1613496287432,"results":"262","hashOfConfig":"211"},{"size":637,"mtime":1610097038609,"results":"263","hashOfConfig":"211"},{"size":1823,"mtime":1613495811453,"results":"264","hashOfConfig":"211"},{"size":443,"mtime":1613753554090,"results":"265","hashOfConfig":"211"},{"size":439,"mtime":1613753554073,"results":"266","hashOfConfig":"211"},{"size":531,"mtime":1613753554042,"results":"267","hashOfConfig":"211"},{"size":367,"mtime":1613753554089,"results":"268","hashOfConfig":"211"},{"size":327,"mtime":1613753554112,"results":"269","hashOfConfig":"211"},{"size":4244,"mtime":1613732146867,"results":"270","hashOfConfig":"211"},{"size":922,"mtime":1610266646824,"results":"271","hashOfConfig":"211"},{"size":844,"mtime":1610267491403,"results":"272","hashOfConfig":"211"},{"size":1826,"mtime":1610268304124,"results":"273","hashOfConfig":"211"},{"size":536,"mtime":1613753554096,"results":"274","hashOfConfig":"211"},{"size":454,"mtime":1613753554058,"results":"275","hashOfConfig":"211"},{"size":7963,"mtime":1613752377375,"results":"276","hashOfConfig":"211"},{"size":2355,"mtime":1613753842088,"results":"277","hashOfConfig":"211"},{"size":5254,"mtime":1613751716437,"results":"278","hashOfConfig":"211"},{"size":445,"mtime":1613753554059,"results":"279","hashOfConfig":"211"},{"size":265,"mtime":1613753554114,"results":"280","hashOfConfig":"211"},{"size":1159,"mtime":1613578838320,"results":"281","hashOfConfig":"211"},{"size":260,"mtime":1613753554065,"results":"282","hashOfConfig":"211"},{"size":242,"mtime":1613753554115,"results":"283","hashOfConfig":"211"},{"size":4600,"mtime":1613752284222,"results":"284","hashOfConfig":"211"},{"size":313,"mtime":1613753554109,"results":"285","hashOfConfig":"211"},{"size":1286,"mtime":1612858253716,"results":"286","hashOfConfig":"211"},{"size":409,"mtime":1610974495381,"results":"287","hashOfConfig":"211"},{"size":3753,"mtime":1613496545550,"results":"288","hashOfConfig":"211"},{"size":3196,"mtime":1612978981392,"results":"289","hashOfConfig":"211"},{"size":3179,"mtime":1612857878498,"results":"290","hashOfConfig":"211"},{"size":253,"mtime":1613753554074,"results":"291","hashOfConfig":"211"},{"size":509,"mtime":1613753554093,"results":"292","hashOfConfig":"211"},{"size":3021,"mtime":1610908909781,"results":"293","hashOfConfig":"211"},{"size":3095,"mtime":1610908908507,"results":"294","hashOfConfig":"211"},{"size":335,"mtime":1610907535944,"results":"295","hashOfConfig":"211"},{"size":3829,"mtime":1613732195061,"results":"296","hashOfConfig":"211"},{"size":1036,"mtime":1613288780020,"results":"297","hashOfConfig":"211"},{"size":1333,"mtime":1613290242343,"results":"298","hashOfConfig":"211"},{"size":5671,"mtime":1613405935442,"results":"299","hashOfConfig":"211"},{"size":1734,"mtime":1613410750502,"results":"300","hashOfConfig":"211"},{"size":1529,"mtime":1613296473763,"results":"301","hashOfConfig":"211"},{"size":8019,"mtime":1613631778874,"results":"302","hashOfConfig":"211"},{"size":8907,"mtime":1613750452391,"results":"303","hashOfConfig":"211"},{"size":264,"mtime":1613753554113,"results":"304","hashOfConfig":"211"},{"size":2914,"mtime":1613496374678,"results":"305","hashOfConfig":"211"},{"size":2415,"mtime":1613410755596,"results":"306","hashOfConfig":"211"},{"size":6369,"mtime":1610465486765,"results":"307","hashOfConfig":"211"},{"size":345,"mtime":1613753554094,"results":"308","hashOfConfig":"211"},{"size":309,"mtime":1613753554030,"results":"309","hashOfConfig":"211"},{"size":309,"mtime":1613753554062,"results":"310","hashOfConfig":"211"},{"size":5408,"mtime":1613636682656,"results":"311","hashOfConfig":"211"},{"size":3217,"mtime":1613406990774,"results":"312","hashOfConfig":"211"},{"size":4001,"mtime":1613496466073,"results":"313","hashOfConfig":"211"},{"size":229,"mtime":1613753554108,"results":"314","hashOfConfig":"211"},{"size":8082,"mtime":1613289314677,"results":"315","hashOfConfig":"211"},{"size":3694,"mtime":1613290481206,"results":"316","hashOfConfig":"211"},{"size":2607,"mtime":1612978888976,"results":"317","hashOfConfig":"211"},{"size":4653,"mtime":1613496465996,"results":"318","hashOfConfig":"211"},{"size":1295,"mtime":1611560514900,"results":"319","hashOfConfig":"211"},{"size":1478,"mtime":1613635165786,"results":"320","hashOfConfig":"211"},{"size":356,"mtime":1613753554048,"results":"321","hashOfConfig":"211"},{"size":2527,"mtime":1612858320989,"results":"322","hashOfConfig":"211"},{"size":1681,"mtime":1613635439095,"results":"323","hashOfConfig":"211"},{"size":3032,"mtime":1613496427516,"results":"324","hashOfConfig":"211"},{"size":6644,"mtime":1613736728343,"results":"325","hashOfConfig":"211"},{"size":58,"mtime":1611738335944,"results":"326","hashOfConfig":"211"},{"size":2740,"mtime":1613496431664,"results":"327","hashOfConfig":"211"},{"size":435,"mtime":1613753554080,"results":"328","hashOfConfig":"211"},{"size":403,"mtime":1613753554082,"results":"329","hashOfConfig":"211"},{"size":1508,"mtime":1611906912957,"results":"330","hashOfConfig":"211"},{"size":1720,"mtime":1611906939847,"results":"331","hashOfConfig":"211"},{"size":2292,"mtime":1613496183135,"results":"332","hashOfConfig":"211"},{"size":459,"mtime":1613753554087,"results":"333","hashOfConfig":"211"},{"size":234,"mtime":1613753554117,"results":"334","hashOfConfig":"211"},{"size":304,"mtime":1613753554086,"results":"335","hashOfConfig":"211"},{"size":364,"mtime":1613753554039,"results":"336","hashOfConfig":"211"},{"size":389,"mtime":1613753554051,"results":"337","hashOfConfig":"211"},{"size":435,"mtime":1613753554047,"results":"338","hashOfConfig":"211"},{"size":10793,"mtime":1613753502753,"results":"339","hashOfConfig":"211"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},"18g08rn",{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"349","usedDeprecatedRules":"342"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"352","usedDeprecatedRules":"342"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"355","usedDeprecatedRules":"342"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"358","usedDeprecatedRules":"342"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"361","usedDeprecatedRules":"342"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"364","usedDeprecatedRules":"342"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"367","usedDeprecatedRules":"342"},{"filePath":"368","messages":"369","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"370","usedDeprecatedRules":"342"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"373","usedDeprecatedRules":"342"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"376","usedDeprecatedRules":"342"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"381","usedDeprecatedRules":"342"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"384","usedDeprecatedRules":"342"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"387","usedDeprecatedRules":"342"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"390","usedDeprecatedRules":"342"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"393","usedDeprecatedRules":"342"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"396","usedDeprecatedRules":"342"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"401","usedDeprecatedRules":"342"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"410","usedDeprecatedRules":"342"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"413","usedDeprecatedRules":"342"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"420","usedDeprecatedRules":"342"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"423","usedDeprecatedRules":"342"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"426","usedDeprecatedRules":"342"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"429","usedDeprecatedRules":"342"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"342"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"440","usedDeprecatedRules":"342"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"443","usedDeprecatedRules":"444"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"447","usedDeprecatedRules":"342"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},"1xtkd6x",{"filePath":"451","messages":"452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"455","messages":"456","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"457","usedDeprecatedRules":"450"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"460","usedDeprecatedRules":"450"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"463","usedDeprecatedRules":"450"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pty4v8",{"filePath":"466","messages":"467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"468","messages":"469","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"470","messages":"471","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"420","usedDeprecatedRules":"450"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"474","usedDeprecatedRules":"450"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"477","messages":"478","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"479","usedDeprecatedRules":"450"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"482","usedDeprecatedRules":"450"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"485","usedDeprecatedRules":"450"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"488","usedDeprecatedRules":"450"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"491","usedDeprecatedRules":"450"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"494","messages":"495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"496","messages":"497","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"498","messages":"499","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"500","usedDeprecatedRules":"450"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"503","messages":"504","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"505","messages":"506","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"507","usedDeprecatedRules":"450"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"510","usedDeprecatedRules":"450"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"513","usedDeprecatedRules":"450"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"516","usedDeprecatedRules":"450"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"519","usedDeprecatedRules":"450"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"522","usedDeprecatedRules":"450"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"525","usedDeprecatedRules":"450"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"528","usedDeprecatedRules":"450"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"531","usedDeprecatedRules":"450"},{"filePath":"532","messages":"533","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"534","usedDeprecatedRules":"450"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"537","usedDeprecatedRules":"450"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"540","usedDeprecatedRules":"450"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"543","usedDeprecatedRules":"450"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"546","usedDeprecatedRules":"450"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"549","usedDeprecatedRules":"450"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"552","usedDeprecatedRules":"450"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"555","usedDeprecatedRules":"450"},{"filePath":"556","messages":"557","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"558","messages":"559","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"560","messages":"561","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"562","usedDeprecatedRules":"450"},{"filePath":"563","messages":"564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"565","messages":"566","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"567","usedDeprecatedRules":"450"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"570","usedDeprecatedRules":"450"},{"filePath":"571","messages":"572","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"573","usedDeprecatedRules":"450"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"576","usedDeprecatedRules":"450"},{"filePath":"577","messages":"578","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"579","usedDeprecatedRules":"450"},{"filePath":"580","messages":"581","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"582","usedDeprecatedRules":"450"},{"filePath":"583","messages":"584","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"585","usedDeprecatedRules":"450"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"588","usedDeprecatedRules":"450"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"591","usedDeprecatedRules":"450"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"594","messages":"595","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"596","messages":"597","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"598","messages":"599","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"600","messages":"601","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"602","messages":"603","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"604","usedDeprecatedRules":"450"},{"filePath":"605","messages":"606","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"607","usedDeprecatedRules":"450"},{"filePath":"608","messages":"609","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"610","usedDeprecatedRules":"450"},{"filePath":"611","messages":"612","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"613","usedDeprecatedRules":"450"},{"filePath":"614","messages":"615","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"616","messages":"617","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"618","messages":"619","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"620","usedDeprecatedRules":"450"},{"filePath":"621","messages":"622","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"623","messages":"624","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"625","usedDeprecatedRules":"450"},{"filePath":"626","messages":"627","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"628","messages":"629","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"630","messages":"631","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"632","usedDeprecatedRules":"450"},{"filePath":"633","messages":"634","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"635","messages":"636","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"637","messages":"638","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"639","usedDeprecatedRules":"450"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"642","messages":"643","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"644","usedDeprecatedRules":"450"},{"filePath":"645","messages":"646","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"647","usedDeprecatedRules":"450"},{"filePath":"648","messages":"649","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"650","usedDeprecatedRules":"450"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"653","usedDeprecatedRules":"450"},{"filePath":"654","messages":"655","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"656","usedDeprecatedRules":"450"},{"filePath":"657","messages":"658","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"659","messages":"660","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"661","messages":"662","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"663","usedDeprecatedRules":"450"},{"filePath":"664","messages":"665","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"666","usedDeprecatedRules":"450"},{"filePath":"667","messages":"668","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"669","usedDeprecatedRules":"450"},{"filePath":"670","messages":"671","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"672","messages":"673","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"450"},{"filePath":"674","messages":"675","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"676","usedDeprecatedRules":"450"},{"filePath":"677","messages":"678","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"679","usedDeprecatedRules":"450"},{"filePath":"680","messages":"681","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"682","usedDeprecatedRules":"450"},{"filePath":"683","messages":"684","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"685","usedDeprecatedRules":"450"},{"filePath":"686","messages":"687","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"688","usedDeprecatedRules":"450"},{"filePath":"689","messages":"690","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"691","usedDeprecatedRules":"450"},{"filePath":"692","messages":"693","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"694","messages":"695","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"696","usedDeprecatedRules":"450"},{"filePath":"697","messages":"698","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"699","usedDeprecatedRules":"450"},{"filePath":"700","messages":"701","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"702","usedDeprecatedRules":"450"},{"filePath":"703","messages":"704","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"705","messages":"706","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"707","messages":"708","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"709","messages":"710","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"711","usedDeprecatedRules":"450"},{"filePath":"712","messages":"713","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"714","usedDeprecatedRules":"450"},{"filePath":"715","messages":"716","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"717","usedDeprecatedRules":"450"},{"filePath":"718","messages":"719","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"720","messages":"721","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"722","usedDeprecatedRules":"450"},{"filePath":"723","messages":"724","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"725","usedDeprecatedRules":"450"},{"filePath":"726","messages":"727","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"728","usedDeprecatedRules":"450"},{"filePath":"729","messages":"730","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"731","usedDeprecatedRules":"450"},{"filePath":"732","messages":"733","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"734","usedDeprecatedRules":"450"},{"filePath":"735","messages":"736","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"737","usedDeprecatedRules":"450"},{"filePath":"738","messages":"739","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"740","messages":"741","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"742","usedDeprecatedRules":"450"},{"filePath":"743","messages":"744","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"745","usedDeprecatedRules":"450"},{"filePath":"746","messages":"747","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"748","usedDeprecatedRules":"450"},{"filePath":"749","messages":"750","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"751","usedDeprecatedRules":"450"},{"filePath":"752","messages":"753","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"754","usedDeprecatedRules":"450"},{"filePath":"755","messages":"756","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"757","usedDeprecatedRules":"450"},{"filePath":"758","messages":"759","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"760","messages":"761","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"762","messages":"763","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"764","usedDeprecatedRules":"450"},{"filePath":"765","messages":"766","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"767","usedDeprecatedRules":"450"},{"filePath":"768","messages":"769","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"770","usedDeprecatedRules":"450"},{"filePath":"771","messages":"772","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"773","messages":"774","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"775","messages":"776","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"777","messages":"778","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"779","messages":"780","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"781","messages":"782","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"783","messages":"784","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"785","usedDeprecatedRules":"450"},"C:\\SuperSoft\\SuperSoft\\client\\src\\index.tsx",[],["786","787"],"C:\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\App.tsx",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx",["788","789"],"﻿import {observable, makeObservable, extendObservable} from \"mobx\";\r\nimport UserStore from \"./UserStore\";\r\nimport ProjectStore from \"./ProjectStore\";\r\nimport TaskStore from \"./TaskStore\";\r\nimport CommentsStore from \"./CommentsStore\";\r\n\r\nexport class RootStore {\r\n    userStore: UserStore;\r\n    taskStore: TaskStore;\r\n    projectStore: ProjectStore;\r\n    commentStore: CommentsStore;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            userStore: observable,\r\n            taskStore: observable,\r\n            projectStore: observable,\r\n            commentStore: observable\r\n        });\r\n        this.userStore = new UserStore();\r\n        this.taskStore = new TaskStore();\r\n        this.projectStore = new ProjectStore();\r\n        this.commentStore = new CommentsStore();\r\n    }\r\n\r\n    reset() {\r\n        this.exit().then(() => {\r\n            this.userStore = new UserStore();\r\n            this.taskStore = new TaskStore();\r\n            this.projectStore = new ProjectStore();\r\n            this.commentStore = new CommentsStore();\r\n        });\r\n    }\r\n\r\n    async exit() {\r\n        const response = await fetch(\"/exit\");\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default RootStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx",["790"],"﻿import { UserViewModel } from \"../Typings/viewModels/UserViewModel\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport { UserReadModel } from \"../Typings/viewModels/UserReadModel\";\r\n\r\nclass UserStore {\r\n    currentUser: UserViewModel;\r\n    users: UserViewModel[];\r\n    authorizationRequired: boolean = true;\r\n    wrongCredetianals: boolean = false;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            users: observable,\r\n            currentUser: observable,\r\n            authorizationRequired: observable,\r\n            wrongCredetianals: observable,\r\n        });\r\n        this.users = new Array<UserViewModel>();\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        this.getCurrentUser();\r\n        this.getUsers();\r\n    }\r\n\r\n    async getCurrentUser() {\r\n        const response = await fetch(\"/getcurrentuser\");\r\n        if(response.status === 200) {\r\n            this.currentUser = await response.json();\r\n            this.authorizationRequired = false;\r\n        } else {\r\n            this.authorizationRequired = true;\r\n        }\r\n    }\r\n\r\n    async getUsers() {\r\n        const response = await fetch(\"/getusers\");\r\n        this.users = await response.json();\r\n    }\r\n\r\n    async deleteUser(userId: number) {\r\n        const response = await fetch(\"/deleteuser\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: userId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getUsers();\r\n        }\r\n    }\r\n\r\n    async addOrUpdateUser(user: UserReadModel) {\r\n        const response = await fetch(\"/addorupdateuser\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: user.id, firstName: user.firstName, lastName: user.lastName, email: user.email, role: user.role, password: user.password})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getUsers();\r\n        }\r\n        return response.status;\r\n    }\r\n\r\n    @action\r\n    authorizationRequire(required: boolean) {\r\n        this.authorizationRequired = required;\r\n    }\r\n\r\n    @action\r\n    wrongCredetianalsToggle(turn: boolean) {\r\n        this.wrongCredetianals = turn;\r\n    }\r\n}\r\n\r\nexport default UserStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Main\\Main.tsx",["791"],"﻿import React from \"react\";\r\nimport { IMainProps } from \"./IMainProps\";\r\nimport { Card, CardHeader, Nav, NavItem, Button } from \"reactstrap\";\r\nimport { NavLink, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { MyWorkPage } from \"../MyWork/MyWorkPage\";\r\nimport { ProjectsPage } from \"../Projects/ProjectsPage\";\r\nimport { UsersPage } from \"../Users/UsersPage\";\r\nimport { observer } from  \"mobx-react\";\r\nimport 'react-calendar/dist/Calendar.css'\r\n\r\n@observer\r\nexport class Main extends React.Component<IMainProps> {\r\n    render() {\r\n        return(\r\n            <>\r\n                <Card>\r\n                    <CardHeader>\r\n                        <Nav tabs className=\"nav\">\r\n                              <NavItem>\r\n                                  <NavLink to=\"/mywork\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}} activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>МОЯ РАБОТА</NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink to=\"/projects\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}} activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>ПРОЕКТЫ</NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink to=\"/users\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}} activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>ПОЛЬЗОВАТЕЛИ</NavLink>\r\n                              </NavItem>\r\n                            <Button\r\n                                outline color=\"primary\"\r\n                                onClick={() => this.exit()}>\r\n                                ВЫЙТИ\r\n                            </Button>\r\n                        </Nav>\r\n                    </CardHeader>\r\n                </Card>\r\n                <Switch>\r\n                    <Route exact path=\"/mywork\" \r\n                         render={(props) => <MyWorkPage store={this.props.store} />} />\r\n                    <Route exact path=\"/projects\"\r\n                         render={(props) => <ProjectsPage store={this.props.store} />} />\r\n                    <Route exact path=\"/users\"\r\n                         render={(props) => <UsersPage store={this.props.store} />} />\r\n                    <Redirect to=\"/mywork\" />\r\n                </Switch>\r\n            </>\r\n        );\r\n    }\r\n\r\n    exit() {\r\n        this.props.store.reset();\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyWorkPage.tsx",["792"],"﻿import React from \"react\";\r\nimport { Col, Nav, NavItem, Row, TabContent, TabPane, NavLink } from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\nimport { MyTasks } from \"./MyTasks\";\r\nimport { observer } from \"mobx-react\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport { IMyWorkProps } from \"./IMyWorkProps\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\n\r\n@observer\r\nexport class  MyWorkPage extends React.Component<IMyWorkProps> {\r\n    activeTab: string = \"1\";\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n           activeTab: observable\r\n       });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{marginTop: 35}} className=\"container-fluid\">\r\n            <Row>\r\n                <Col sm=\"12\">\r\n                    <Nav tabs style={{fontSize: \"1.4em\"}}>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                to=\"#\"\r\n                                activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                className={classnames({ active: this.activeTab === \"1\"})}\r\n                                onClick={(e) => this.toggleTab(\"1\")}\r\n                            >Текущие</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                to=\"#\"\r\n                                activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                className={classnames({ active: this.activeTab === \"2\"})}\r\n                                onClick={(e) => this.toggleTab(\"2\")}>Законченные</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                to=\"#\"\r\n                                activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                className={classnames({ active: this.activeTab === \"3\"})}\r\n                                onClick={(e) => this.toggleTab(\"3\")}>Будущие</NavLink>\r\n                        </NavItem>\r\n                    </Nav>\r\n                    <TabContent activeTab={this.activeTab}>\r\n                        <TabPane tabId=\"1\">\r\n                            <Row>\r\n                                <Col sm=\"12\">\r\n                                    <MyTasks store={this.props.store} tasksStatus={TaskStatus.InProgress}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </TabPane>\r\n                        <TabPane tabId=\"2\">\r\n                            <Row>\r\n                                <Col sm=\"12\">\r\n                                    <MyTasks store={this.props.store} tasksStatus={TaskStatus.Completed}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </TabPane>\r\n                        <TabPane tabId=\"3\">\r\n                            <Row>\r\n                                <Col sm=\"12\">\r\n                                    <MyTasks store={this.props.store} tasksStatus={TaskStatus.Future}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </TabPane>\r\n                    </TabContent>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n    }\r\n\r\n    @action\r\n    toggleTab(activeTab: string): void {\r\n        this.activeTab = activeTab;\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\ProjectsPage.tsx",["793"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { AddProject } from \"./AddProject\";\r\nimport { Projects } from \"./Projects\";\r\nimport { makeObservable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nexport class  ProjectsPage extends React.Component<IProjectsProps> {\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\" style={{marginTop: \"30px\"}}>\r\n                <div className=\"row justify-content-center\">\r\n                    <AddProject store={this.props.store} />\r\n                </div>\r\n                <div className=\"row justify-content-center\" style={{marginTop: \"20px\"}}>\r\n                    <div className=\"col-lg-12 col-sm-12\">\r\n                        <Projects store={this.props.store} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\UsersPage.tsx",["794"],"﻿import React from \"react\";\r\nimport { IUsersProps } from \"./IUsersProps\";\r\nimport { Users } from \"./Users\";\r\nimport {AddUser} from \"./AddUser\";\r\n\r\nexport class  UsersPage extends React.Component<IUsersProps> {\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\" style={{marginTop: \"30px\"}}>\r\n                <div className=\"row justify-content-center\">\r\n                    <AddUser store={this.props.store}/>\r\n                </div>\r\n                <div className=\"row justify-content-center\" style={{marginTop: \"20px\"}}>\r\n                    <Users store={this.props.store}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\ProjectStore.tsx",["795"],"﻿import { ProjectViewModel } from \"../Typings/viewModels/ProjectViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { ProjectRole } from \"../Typings/enums/ProjectRole\";\r\nimport { UserViewModel } from \"../Typings/viewModels/UserViewModel\";\r\n\r\nclass ProjectStore {\r\n    public projects: ProjectViewModel[] = new Array<ProjectViewModel>(0);\r\n    public choosenProject: ProjectViewModel = new ProjectViewModel();\r\n    public choosenProjectUsers: UserViewModel[] = new Array<UserViewModel>(0);\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            projects: observable,\r\n            choosenProject: observable,\r\n            choosenProjectUsers: observable\r\n        });\r\n        this.getProjects();\r\n    }\r\n\r\n    setChoosenProject(project: ProjectViewModel): void {\r\n        this.choosenProject = project;\r\n    }\r\n\r\n    async getProjectUsers(projectId: number) {\r\n        const response = await fetch(\"/getprojectusers\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: projectId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.choosenProjectUsers = await response.json();\r\n        }\r\n    }\r\n\r\n    async getProjects() {\r\n        const response = await fetch(\"/getprojects\");\r\n        if(response.status === 200) {\r\n            let projects = await response.json();\r\n            this.projects = projects;\r\n            this.choosenProject = projects[0];\r\n        } else {\r\n            return new Array<ProjectViewModel>(0);\r\n        }\r\n    }\r\n\r\n    async addNewProject(name: string, description: string, startDate: Date | Date[], deadlineDate: Date | Date[], responsibleId: number) {\r\n        const response = await fetch(\"/addorupdateproject\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({ name: name, description: description,startDate: startDate, deadlineDate: deadlineDate, responsiblePerson: responsibleId })\r\n        });\r\n        if(response.status === 200) {\r\n            this.getProjects();\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n    \r\n    async attachUserToProject(projectId: number, userId: number, projectRole: ProjectRole) {\r\n        const response = await fetch(\"/attachusertoproject\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({userId: userId, role: projectRole, projectId: projectId})\r\n        });\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async deleteProject(projectId: number) {\r\n        const response = await fetch(\"/deleteproject\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: projectId})\r\n        });\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default ProjectStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx",["796"],"﻿import { makeObservable, observable } from \"mobx\";\r\nimport { UserTaskViewModel } from \"../Typings/viewModels/UserTaskViewModel\";\r\nimport { TaskViewModel } from \"../Typings/viewModels/TaskViewModel\";\r\nimport { TaskStatus } from \"../Typings/enums/TaskStatus\";\r\nimport { TaskType } from \"../Typings/enums/TaskType\";\r\nimport {TaskPriority} from \"../Typings/enums/TaskPriority\";\r\n\r\nclass TaskStore {\r\n    currentUserTasks: UserTaskViewModel[];\r\n    currentProjectTasks: TaskViewModel[] = new Array<TaskViewModel>();\r\n    public completedPercentage: number = 0;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            currentUserTasks: observable,\r\n            currentProjectTasks: observable,\r\n            completedPercentage: observable\r\n        });\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        this.getCurrentUserTasks();\r\n    }\r\n\r\n    async getCurrentUserTasks() {\r\n        const response = await fetch(\"/getusertasks\");\r\n        if(response.status === 200) {\r\n            this.currentUserTasks = await response.json();\r\n        } else {\r\n            this.currentUserTasks = new Array<UserTaskViewModel>(0);\r\n        }\r\n    }\r\n\r\n    async getTasks(projectId: number) {\r\n        const response = await fetch(\"/gettasks\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: projectId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.currentProjectTasks = await response.json();\r\n            this.computeCompletedPercentage();\r\n        }\r\n    }\r\n\r\n    computeCompletedPercentage() {\r\n        let completedTasks = this.currentProjectTasks.filter(t => t.status === TaskStatus.Completed);\r\n        let percentage = completedTasks.length / this.currentProjectTasks.length * 100;\r\n        this.completedPercentage = isNaN(percentage) ? 100 : percentage;\r\n    }\r\n\r\n    async addOrUpdateTask(header: string, description: string, startDate: Date | Date[], deadlineDate: Date | Date[], taskType: TaskType, status: TaskStatus, priority: TaskPriority, tester: number, responsible: number, author: number, id: number = 0, projectId: number = 0) {\r\n        const response = await fetch(\"/addorupdatetask\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: id, projectId: projectId, header: header, description: description, startDate: startDate, deadlineDate: deadlineDate, taskType: taskType, status: status, priority: priority, tester: tester, responsible: responsible, author: author})\r\n        });\r\n        if(response.status === 200) {\r\n            const task = await response.json();\r\n            this.currentProjectTasks.push(task);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default TaskStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\CommentsStore.tsx",["797"],"﻿import { CommentGroupViewModel } from \"../Typings/viewModels/CommentGroupViewModel\";\r\nimport { UserReadModel } from \"../Typings/viewModels/UserReadModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\n\r\nclass CommentsStore {\r\n    currentCommentGroup: CommentGroupViewModel = new CommentGroupViewModel();\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            currentCommentGroup: observable\r\n        });\r\n    }\r\n\r\n    async getCurrentTaskComments(taskId: number) {\r\n        const response = await fetch(\"/getcurrenttaskcommentgroup\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({taskId: taskId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.currentCommentGroup = await response.json();\r\n        } else {\r\n            this.currentCommentGroup = new CommentGroupViewModel();\r\n        }\r\n    }\r\n\r\n    async addComment(text: string, userId: number, groupId: number): Promise<number> {\r\n        const user = new UserReadModel();\r\n        user.id = userId;\r\n        const response = await fetch(\"/addorupdatecomment\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({text: text, groupId: groupId, user: user})\r\n        });\r\n        return response.status;\r\n    }\r\n\r\n    async deleteComment(commentId: number) {\r\n        const response = await fetch(\"/deletecomment\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: commentId})\r\n        });\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default CommentsStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyTasks.tsx",["798","799"],"﻿import React from \"react\";\r\nimport { IMyTasksProps } from \"./IMyTasksProps\";\r\nimport { Alert, Modal, Table } from 'reactstrap';\r\nimport { TaskViewModel } from \"../../Typings/viewModels/TaskViewModel\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { Task } from \"../Tasks/Task\";\r\nimport { UserTaskViewModel } from \"../../Typings/viewModels/UserTaskViewModel\";\r\nimport { translatePriority, translateTaskRole, translateTaskType } from \"../../functions/translater\";\r\nimport { formatDate } from \"../../functions/formatDate\";\r\n\r\n@observer\r\nexport class MyTasks extends React.Component<IMyTasksProps> {\r\n    taskOpen: boolean;\r\n    taskToRender: TaskViewModel;\r\n    sortDescendent: boolean = false;\r\n\r\n    componentDidMount(): void {\r\n        this.props.store.taskStore.getCurrentUserTasks();\r\n    }\r\n\r\n    sort() {\r\n        this.props.store.taskStore.currentUserTasks.sort();\r\n        this.sortDescendent = !this.sortDescendent;\r\n    }\r\n    renderSortIcon() {\r\n        return (\r\n            <>\r\n                {this.sortDescendent\r\n                    ? <i className=\"fa fa-chevron-circle-down\" aria-hidden=\"true\" onClick={() => this.sort()}/>\r\n                    : <i className=\"fa fa-chevron-circle-up\" aria-hidden=\"true\" onClick={() => this.sort()}/>\r\n                }\r\n                </>\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            taskOpen: observable\r\n        });\r\n    }\r\n\r\n    filterTasks(taskStatus: TaskStatus, currentUserTasks: UserTaskViewModel[]): UserTaskViewModel[] {\r\n        return currentUserTasks?.\r\n            filter(ut => ut.task.status === taskStatus);\r\n    }\r\n\r\n    renderAlert() {\r\n        return(\r\n            <Alert color=\"primary\">Задач пока нет!!!</Alert>\r\n        );\r\n    }\r\n\r\n    renderMyTasks(userTasks: UserTaskViewModel[]) {\r\n        return(\r\n            <Table bordered style={{backgroundColor: \"#fff\", color:\"#003B46\", marginTop: \"2%\", fontSize: \"1.2em\"}}>\r\n                {userTasks.length === 0 && this.renderAlert()}\r\n                {userTasks.length !== 0 && <thead style={{color:\"fff\"}}>\r\n                    <tr>\r\n                        <th>Номер</th>\r\n                        <th>Задача</th>\r\n                        <th>Дедлайн</th>\r\n                        <th>Приоритет{this.renderSortIcon()}</th>\r\n                        <th>Роль</th>\r\n                        <th>Тип</th>\r\n                    </tr>\r\n                </thead>}\r\n                {userTasks.length !== 0 && <tbody>\r\n                    {userTasks.map((ut) => {\r\n                        return(\r\n                            <tr key={ut.task.id} onClick={() => this.taskOpenToggle(ut.task)}>\r\n                                <th>{ut.task.id}</th>\r\n                                <th>{ut.task.header}</th>\r\n                                <th>{formatDate(ut.task.deadlineDate)}</th>\r\n                                <th>{translatePriority(ut.task.priority)}</th>\r\n                                <th>{translateTaskRole(ut.role)}</th>\r\n                                <th>{translateTaskType(ut.task.taskType)}</th>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>}\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    renderTask() {\r\n        return(\r\n            <Modal\r\n                isOpen={this.taskOpen}\r\n                toggle={() => this.taskOpenToggle()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                   onClick={() => this.taskOpenToggle()}/>\r\n                <Task store={this.props.store} task={this.taskToRender}/>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let currentTasks = this.props.store.taskStore.currentUserTasks;\r\n        let tasks = this.filterTasks(this.props.tasksStatus, currentTasks);\r\n        return(\r\n            <>\r\n                {tasks !== undefined && this.renderMyTasks(tasks)}\r\n                {tasks === undefined && this.renderAlert()}\r\n                {this.taskOpen && this.renderTask()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    taskOpenToggle(task: TaskViewModel = new TaskViewModel()) {\r\n        this.taskOpen = !this.taskOpen;\r\n        this.taskToRender = task;\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskStatus.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddProject.tsx",["800"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input, Dropdown, DropdownToggle, DropdownItem, DropdownMenu, Label } from \"reactstrap\";\r\nimport Calendar from \"react-calendar\";\r\nimport {UserViewModel} from \"../../Typings/viewModels/UserViewModel\";\r\n\r\n@observer\r\nexport class AddProject extends React.Component<IProjectsProps> {\r\n    addProjectWindowOpen: boolean;\r\n    projectName: string = \"\";\r\n    description: string = \"\";\r\n    responsibleDropdownOpen: boolean;\r\n    startDate: Date | Date[] = new Date();\r\n    deadline: Date | Date[] = new Date();\r\n    responsiblePerson: UserViewModel = new UserViewModel();\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addProjectWindowOpen: observable,\r\n            projectName: observable,\r\n            description: observable,\r\n            responsibleDropdownOpen: observable,\r\n            startDate: observable,\r\n            deadline: observable,\r\n            responsiblePerson: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.responsiblePerson = this.props.store.userStore.users[0];\r\n    }\r\n\r\n    toggleAddProjectWindow() {\r\n        this.addProjectWindowOpen = !this.addProjectWindowOpen;\r\n    }\r\n\r\n    toggleResponsibleDropdown() {\r\n        this.responsibleDropdownOpen = !this.responsibleDropdownOpen;\r\n    }\r\n\r\n    renderAddProjectWindow() {\r\n        let users = this.props.store.userStore.users;\r\n        let responsible = this.responsiblePerson;\r\n        return(\r\n            <Modal isOpen={this.addProjectWindowOpen} toggle={() => this.toggleAddProjectWindow()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                   onClick={() => this.toggleAddProjectWindow()}/>\r\n                <ModalHeader>\r\n                    СОЗДАНИЕ ПРОЕКТА\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label style={{width: \"100%\"}} align=\"center\">Название проекта</Label>\r\n                        <Input style={{width: \"90%\"}} onChange={(e) => this.inputProjectName(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\" style={{marginTop: \"10px\"}}>\r\n                        <Label style={{width: \"100%\"}} align=\"center\">Описание проекта</Label>\r\n                        <textarea style={{width: \"90%\"}} onChange={(e) => this.inputDescription(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">Дата начала</Label>\r\n                            <div style={{width: \"100%\", paddingLeft: \"15%\"}}>\r\n                                <Calendar\r\n                                    value={this.startDate}\r\n                                    onChange={(date) => this.inputDate(date, \"startDate\")}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">Дедлайн</Label>\r\n                            <div style={{width: \"100%\", paddingLeft: \"15%\"}}>\r\n                                <Calendar\r\n                                    value={this.deadline}\r\n                                    onChange={(date) => this.inputDate(date, \"deadline\")}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label style={{width: \"100%\"}} align=\"center\">Ответственный</Label>\r\n                        <Dropdown isOpen={this.responsibleDropdownOpen} toggle={() => this.toggleResponsibleDropdown()}>\r\n                            <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{responsible !== undefined ? `${responsible.firstName} ${responsible.lastName}` : \"Пока нет пользователей\"}</DropdownToggle>\r\n                            <DropdownMenu>\r\n                                {users.map((user, index) => {\r\n                                    return(\r\n                                        <>\r\n                                            <DropdownItem key={index} onClick={() => this.chooseResponsiblePerson(user)}>{user.firstName + \" \" + user.lastName}</DropdownItem>\r\n                                        </>\r\n                                    );\r\n                                })}\r\n                            </DropdownMenu>\r\n                        </Dropdown>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.saveProject()}>\r\n                        СОХРАНИТЬ\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <>\r\n                <div className=\"col-6\"/>\r\n                <div className=\"col-6\">\r\n                    <Button\r\n                        style={{width: \"100%\", borderColor: \"#66A5AD\", color: \"#66A5AD\", backgroundColor: \"#fff\"}}\r\n                        onClick={() => this.toggleAddProjectWindow()}>Создать проект</Button>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.addProjectWindowOpen && this.renderAddProjectWindow()}\r\n                {!this.addProjectWindowOpen && this.renderButton()}\r\n            </>\r\n        )\r\n    }\r\n\r\n    inputProjectName(event: React.FormEvent<HTMLInputElement>) {\r\n        this.projectName = event.currentTarget.value;\r\n    }\r\n\r\n    inputDescription(event: React.FormEvent<HTMLTextAreaElement>) {\r\n        this.description = event.currentTarget.value;\r\n    }\r\n\r\n    inputDate(date: Date | Date[], dateType: string) {\r\n        if(dateType === \"startDate\") {\r\n            this.startDate = date;\r\n        } else if(dateType === \"deadline\") {\r\n            this.deadline = date;\r\n        }\r\n    }\r\n\r\n    chooseResponsiblePerson(user: UserViewModel) {\r\n        this.responsiblePerson = user;\r\n    }\r\n\r\n    saveProject() {\r\n        this.props.store.projectStore\r\n            .addNewProject(this.projectName, this.description, this.startDate, this.deadline, this.responsiblePerson.id)\r\n            .then(() => this.addProjectWindowOpen = false);\r\n}\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Projects.tsx",["801"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { ProjectViewModel } from \"../../Typings/viewModels/ProjectViewModel\";\r\nimport { Tab, Nav, Alert } from \"react-bootstrap\";\r\nimport { Project } from \"./Project\";\r\nimport { observer } from \"mobx-react\";\r\nimport { renderSpinner } from \"../../functions/renderSpinner\";\r\n\r\n@observer\r\nexport class Projects extends React.Component<IProjectsProps> {\r\n    renderMenu(projects: ProjectViewModel[], choosenProject: ProjectViewModel) {\r\n        // @ts-ignore\r\n        return(\r\n            <Tab.Container defaultActiveKey={`${choosenProject.id === undefined ? 0 : choosenProject.id.toString()}`}>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-4\">\r\n                        <Nav variant=\"pills\" className=\"flex-column\" activeKey={`${choosenProject.id === undefined ? 0 : choosenProject.id.toString()}`}>\r\n                            <div className=\"container\">\r\n                                {projects.map((project) => {\r\n                                    return (\r\n                                        <div className=\"row\">\r\n                                            <Nav.Item key={project.id}\r\n                                                 style={{width: \"100%\"}}\r\n                                                 onClick={() => {this.changeData(project)}}>\r\n                                                <Nav.Link eventKey={project.id}>{project.name}</Nav.Link>\r\n                                            </Nav.Item>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </Nav>\r\n                    </div>\r\n                    <div className=\"col-8\">\r\n                        <Tab.Content>\r\n                            {projects.map((project) => {\r\n                                return (\r\n                                    <Tab.Pane eventKey={project.id}\r\n                                         key={project.id}>\r\n                                        <Project store={this.props.store} />\r\n                                    </Tab.Pane>\r\n                                );\r\n                            })}\r\n                        </Tab.Content>\r\n                    </div>\r\n                </div>\r\n            </Tab.Container>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let projects = this.props.store.projectStore.projects;\r\n        let choosenProject =  this.props.store.projectStore.choosenProject;\r\n        return(\r\n            <>\r\n                {projects.length === 0 && <Alert variant=\"primary\">\r\n                    <span>Пока нет никаких проектов</span>\r\n                </Alert>}\r\n                {choosenProject !== undefined && this.renderMenu(projects, choosenProject)}\r\n                {choosenProject === undefined && renderSpinner()}\r\n            </>\r\n        )\r\n    }\r\n\r\n    changeData(project: ProjectViewModel) {\r\n        this.props.store.projectStore.setChoosenProject(project);\r\n        this.props.store.projectStore.getProjectUsers(project.id);\r\n        this.props.store.taskStore.getTasks(project.id)\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Project.tsx",["802"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { AddTask } from \"../Tasks/AddTask\";\r\nimport { AddUserToProject } from \"./AddUserToProject\";\r\nimport { Tasks } from \"../Tasks/Tasks\";\r\nimport { ProjectViewModel } from \"../../Typings/viewModels/ProjectViewModel\";\r\nimport { Card, CardText, CardTitle, Label } from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\nimport { Col, Nav, NavItem, Row, TabContent, TabPane, NavLink, Alert } from \"reactstrap\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { renderSpinner } from \"../../functions/renderSpinner\";\r\nimport { observer } from \"mobx-react\";\r\nimport Circle from \"react-circle\";\r\nimport { formatDate } from \"../../functions/formatDate\";\r\n\r\n@observer\r\nexport class Project extends React.Component<IProjectsProps> {\r\n    activeTab: string = \"1\";\r\n    loaded: boolean;\r\n    notDeleted: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            activeTab: observable,\r\n            loaded: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.props.store.projectStore.getProjects();\r\n        this.props.store.taskStore.getTasks(this.props.store.projectStore.choosenProject.id)\r\n            .then(() => this.loaded = true);\r\n    }\r\n\r\n    renderProjectDiagram() {\r\n        let completedPercentage = this.props.store.taskStore.completedPercentage;\r\n        return (\r\n            <Circle\r\n                size=\"300\"\r\n                progress={completedPercentage}\r\n                />\r\n        );\r\n    }\r\n\r\n    getResponsible(responsibleId: number) {\r\n        let responsible = this.props.store.userStore.users.filter(u => u.id === responsibleId)[0];\r\n        if(responsible === undefined) {\r\n            return undefined;\r\n        } else {\r\n            return responsible;\r\n        }\r\n    }\r\n\r\n    renderResponsible(responsible: UserViewModel | undefined) {\r\n        if(responsible === undefined) {\r\n            return(\r\n                <Alert>Руководитель не выбран</Alert>\r\n            );\r\n        } else {\r\n            return(\r\n                <CardText>Руководитель: <span>{responsible?.firstName} {responsible?.lastName}</span></CardText>\r\n            )\r\n        }\r\n    }\r\n\r\n    renderProjectInfo(project: ProjectViewModel) {\r\n        let responsible = this.getResponsible(project.responsiblePerson);\r\n        return (\r\n            <div className=\"row justify-content-center\" style={{marginTop: \"35px\"}}>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                    <Card style={{backgroundColor: \"#66A5AD\", color: \"#fff\"}}>\r\n                        <CardTitle style={{fontSize: \"1.3em\"}}>{project.name}</CardTitle>\r\n                        {this.renderResponsible(responsible)}\r\n                        <CardText><Label style={{width: \"100%\", fontSize: \"1.2em\"}}>Дата начала:</Label> {formatDate(project.startDate)}</CardText>\r\n                        <CardText><Label style={{width: \"100%\", fontSize: \"1.2em\"}}>Дедлайн:</Label> {formatDate(project.deadlineDate)}</CardText>\r\n                        <CardText><Label style={{width: \"100%\", fontSize: \"1.2em\"}}>Описание:</Label> {project.description}</CardText>\r\n                    </Card>\r\n                </div>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                    {this.renderProjectDiagram()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderTasksMenu() {\r\n        return(\r\n            <div style={{marginTop: 35}} className=\"container-fluid\">\r\n                <Row>\r\n                    <Col sm=\"12\">\r\n                        <Nav tabs>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    className={classnames({ active: this.activeTab === \"1\"})}\r\n                                    onClick={(e) => this.toggleTab(\"1\")}\r\n                                >Текущие</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    className={classnames({ active: this.activeTab === \"2\"})}\r\n                                    onClick={(e) => this.toggleTab(\"2\")}>Законченные</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    className={classnames({ active: this.activeTab === \"3\"})}\r\n                                    onClick={(e) => this.toggleTab(\"3\")}>Будущие</NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                        <TabContent activeTab={this.activeTab}>\r\n                            <TabPane tabId=\"1\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <Tasks store={this.props.store} status={TaskStatus.InProgress}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                            <TabPane tabId=\"2\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <Tasks store={this.props.store} status={TaskStatus.Completed}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                            <TabPane tabId=\"3\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <Tasks store={this.props.store} status={TaskStatus.Future}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                        </TabContent>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row justify-content-center\">\r\n                    {this.notDeleted && <Alert color=\"danger\">Что-то пошло не так и проект не удалился :(</Alert>}\r\n                    <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                       onClick={() => this.deleteProject(this.props.store.projectStore.choosenProject.id)}/>\r\n                </div>\r\n                {this.renderProjectInfo(this.props.store.projectStore.choosenProject)}\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-lg-3 col-sm-6\">\r\n                        <AddTask store={this.props.store}/>\r\n                    </div>\r\n                    <div className=\"col-lg-3 col-sm-6\">\r\n                        <AddUserToProject store={this.props.store}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.loaded && this.renderTasksMenu()}\r\n                    {!this.loaded && renderSpinner()}\r\n                </div>\r\n            </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    @action\r\n    toggleTab(activeTab: string): void {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    deleteProject(projectId: number) {\r\n        this.props.store.projectStore.deleteProject(projectId)\r\n            .then((status) => {\r\n                if(status === 200) {\r\n                    this.props.store.projectStore.getProjects();\r\n                    this.notDeleted = false;\r\n                } else {\r\n                    this.notDeleted = true;\r\n                }\r\n            });\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddUserToProject.tsx",["803"],"﻿import React from \"react\";\r\nimport RootStore from \"../../stores/RootStore\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport {\r\n    Button,\r\n    Dropdown,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    Modal,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalHeader,\r\n    Alert\r\n} from \"reactstrap\";\r\nimport { ProjectRole } from \"../../Typings/enums/ProjectRole\";\r\nimport { translateProjectRole } from \"../../functions/translater\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\n\r\nexport interface IAddUserToProjectProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nexport class AddUserToProject extends React.Component<IAddUserToProjectProps> {\r\n    addUserToProjectWindowOpen: boolean;\r\n    roleDropdownOpen: boolean;\r\n    usersDropdownOpen: boolean;\r\n    choosenUser: UserViewModel;\r\n    role: ProjectRole = ProjectRole.Head;\r\n    notAttached: boolean;\r\n\r\n    componentDidMount(): void {\r\n        this.choosenUser = this.props.store.userStore.users[0];\r\n    }\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addUserToProjectWindowOpen: observable,\r\n            usersDropdownOpen: observable,\r\n            roleDropdownOpen: observable\r\n        })\r\n    }\r\n\r\n    toggleWindow() {\r\n        this.addUserToProjectWindowOpen = !this.addUserToProjectWindowOpen;\r\n    }\r\n\r\n    toggleUserDropdown() {\r\n        this.usersDropdownOpen = !this.usersDropdownOpen;\r\n    }\r\n\r\n    toggleRoleDropdown() {\r\n        this.roleDropdownOpen = !this.roleDropdownOpen;\r\n    }\r\n\r\n    renderAddUserToProjectWindow() {\r\n        let users = this.props.store.userStore.users;\r\n        let choosenUser = this.choosenUser;\r\n        return(\r\n            <Modal\r\n                style={{backgroundColor: \"#003b46\", color: \"#003b46\", fontSize: \"1.4em\"}}\r\n                isOpen={this.addUserToProjectWindowOpen}\r\n                toggle={() => this.toggleWindow()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                   onClick={() => this.toggleWindow()}/>\r\n                {this.notAttached && <Alert color=\"primary\">Что-то пошло не так и пользователь не прикрепился :(</Alert>}\r\n                <ModalHeader>ПРИКРЕПЛЕНИЕ ПОЛЬЗОВАТЕЛЯ</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-sm-6\">\r\n                            <Dropdown isOpen={this.usersDropdownOpen} toggle={() => this.toggleUserDropdown()}>\r\n                                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{choosenUser !== undefined ? `${choosenUser.firstName} ${choosenUser.lastName}` : \"Пока нет пользователей\"}</DropdownToggle>\r\n                                <DropdownMenu>\r\n                                    {users.map((user, index) => {\r\n                                        return(\r\n                                            <>\r\n                                                {<DropdownItem onClick={() => this.choosenUser = user}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                                            </>\r\n                                        );\r\n                                    })}\r\n                                </DropdownMenu>\r\n                            </Dropdown>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-sm-6\">\r\n                            <Dropdown isOpen={this.roleDropdownOpen} toggle={() => this.toggleRoleDropdown()}>\r\n                                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateProjectRole(this.role)}</DropdownToggle>\r\n                                <DropdownMenu>\r\n                                    <DropdownItem onClick={() => this.role = ProjectRole.Head}>{translateProjectRole(ProjectRole.Head)}</DropdownItem>\r\n                                    <DropdownItem onClick={() => this.role = ProjectRole.Executor}>{translateProjectRole(ProjectRole.Executor)}</DropdownItem>\r\n                                    <DropdownItem onClick={() => this.role = ProjectRole.Developer}>{translateProjectRole(ProjectRole.Developer)}</DropdownItem>\r\n                                    <DropdownItem onClick={() => this.role = ProjectRole.Tester}>{translateProjectRole(ProjectRole.Tester)}</DropdownItem>\r\n                                </DropdownMenu>\r\n                            </Dropdown>\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.attach()}\r\n                    >\r\n                        Прикрепить\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <div className=\"row justify-content-center\" style={{marginTop: \"5%\"}}>\r\n                <Button\r\n                    style={{width: \"80%\", borderColor: \"#66A5AD\", color: \"#66A5AD\", backgroundColor: \"#fff\"}}\r\n                    onClick={() => this.toggleWindow()}>Прикрепить участников</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {!this.addUserToProjectWindowOpen && this.renderButton()}\r\n                {this.addUserToProjectWindowOpen && this.renderAddUserToProjectWindow()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    attach() {\r\n        this.props.store.projectStore.attachUserToProject(this.props.store.projectStore.choosenProject.id, this.choosenUser.id, this.role)\r\n            .then((status) => {\r\n                if(status === 200) {\r\n                    this.props.store.projectStore.getProjectUsers(this.props.store.projectStore.choosenProject.id);\r\n                    this.addUserToProjectWindowOpen = false;\r\n                    this.notAttached = false;\r\n                } else {\r\n                    this.notAttached = true;\r\n                }\r\n            });\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\AddTask.tsx",["804"],"﻿import React from \"react\";\r\nimport { IAddTasksProps } from \"./IAddTasksProps\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport {\r\n    Button,\r\n    Dropdown,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    Input,\r\n    Label,\r\n    Modal,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalHeader,\r\n    Alert\r\n} from \"reactstrap\";\r\nimport Calendar from \"react-calendar\";\r\nimport { TaskType } from \"../../Typings/enums/TaskType\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\nimport { observer } from \"mobx-react\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { TaskPriority } from \"../../Typings/enums/TaskPriority\";\r\nimport { translatePriority, translateTaskType } from \"../../functions/translater\";\r\n\r\n@observer\r\nexport class AddTask extends React.Component<IAddTasksProps> {\r\n    addTaskWindowOpen: boolean;\r\n    responsibleDropdownOpen: boolean;\r\n    testerDropdownOpen: boolean;\r\n    taskTypeDropdownOpen: boolean;\r\n    priorityDropdownOpen: boolean;\r\n    taskName: string;\r\n    description: string;\r\n    startDate: Date | Date[] = new Date();\r\n    deadline: Date | Date[] = new Date();\r\n    priority: TaskPriority = TaskPriority.Average;\r\n    responsiblePerson: UserViewModel;\r\n    tester: UserViewModel;\r\n    taskType: TaskType = TaskType.Feature;\r\n    taskStatus: TaskStatus;\r\n    notSaved: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addTaskWindowOpen: observable,\r\n            responsibleDropdownOpen: observable,\r\n            testerDropdownOpen: observable,\r\n            taskTypeDropdownOpen: observable,\r\n            priorityDropdownOpen: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.responsiblePerson = this.props.store.projectStore.choosenProjectUsers[0];\r\n        this.tester = this.props.store.projectStore.choosenProjectUsers[0];\r\n    }\r\n\r\n    @action\r\n    toggleAddTaskWindow() {\r\n        this.addTaskWindowOpen = !this.addTaskWindowOpen;\r\n    }\r\n\r\n    @action\r\n    toggleResponsibleDropdown() {\r\n        this.responsibleDropdownOpen = !this.responsibleDropdownOpen;\r\n    }\r\n\r\n    toggleTesterDropdown() {\r\n        this.testerDropdownOpen = !this.testerDropdownOpen;\r\n    }\r\n\r\n    toggleTaskTypeDropdown() {\r\n        this.taskTypeDropdownOpen = !this.taskTypeDropdownOpen;\r\n    }\r\n\r\n    togglePriorityDropdown() {\r\n        this.priorityDropdownOpen = !this.priorityDropdownOpen;\r\n    }\r\n\r\n    renderTaskType() {\r\n        return(\r\n            <Dropdown \r\n                isOpen={this.taskTypeDropdownOpen}\r\n                toggle={() => this.toggleTaskTypeDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateTaskType(this.taskType)}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem onClick={() => this.taskType = TaskType.Feature}>Фича</DropdownItem>\r\n                    <DropdownItem onClick={() => this.taskType = TaskType.Bug}>Баг</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderPriority() {\r\n        return(\r\n            <Dropdown\r\n                isOpen={this.priorityDropdownOpen}\r\n                toggle={() => this.togglePriorityDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translatePriority(this.priority)}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem onClick={() => this.priority = TaskPriority.Average}>Средняя</DropdownItem>\r\n                    <DropdownItem onClick={() => this.priority = TaskPriority.High}>Высокая</DropdownItem>\r\n                    <DropdownItem onClick={() => this.priority = TaskPriority.Low}>Низкая</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        )\r\n    }\r\n\r\n    renderResponsibleDropdown() {\r\n        let users = this.props.store.projectStore.choosenProjectUsers;\r\n        let responsible = this.responsiblePerson;\r\n        return(\r\n            <Dropdown isOpen={this.responsibleDropdownOpen} toggle={() => this.toggleResponsibleDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{responsible !== undefined ? `${responsible.firstName} ${responsible.lastName}` : \"Пока нет пользователей\"}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    {users.map((user, index) => {\r\n                        return(\r\n                            <>\r\n                              {<DropdownItem key={index}  onClick={() => this.choosePerson(user, \"responsible\")}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                            </>\r\n                        );\r\n                    })}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderTesterDropdown() {\r\n        let users = this.props.store.projectStore.choosenProjectUsers;\r\n        let tester = this.tester;\r\n        return(\r\n            <Dropdown isOpen={this.testerDropdownOpen} toggle={() => this.toggleTesterDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{tester !== undefined ? `${tester.firstName} ${tester.lastName}` : \"Пока нет пользователей\"}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    {users.map((user, index) => {\r\n                        return(\r\n                            <>\r\n                                {<DropdownItem key={index}  onClick={() => this.choosePerson(user, \"tester\")}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                            </>\r\n                        );\r\n                    })}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderAddTaskWindow() {\r\n        let currentUser = this.props.store.userStore.currentUser;\r\n        return(\r\n            <Modal \r\n                style={{backgroundColor: \"#003b46\", color: \"#003b46\", fontSize: \"1.4em\"}}\r\n                isOpen={this.addTaskWindowOpen}\r\n                size=\"lg\"\r\n                centered\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                toggle={() => this.toggleAddTaskWindow()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                   onClick={() => this.toggleAddTaskWindow()}/>\r\n                <ModalHeader closeButton>СОЗДАНИЕ ЗАДАЧИ</ModalHeader>\r\n                {this.notSaved && <Alert color=\"primary\">Что-то пошло не так и задача не сохранилась!!!</Alert>}\r\n                <ModalBody>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label style={{width: \"100%\"}} align=\"center\">НАЗВАНИЕ</Label>\r\n                        <Input style={{width: \"90%\"}} onChange={(e) => this.inputTaskName(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\" style={{marginTop: \"10px\"}}>\r\n                        <Label style={{width: \"100%\"}} align=\"center\">ОПИСАНИЕ</Label>\r\n                        <textarea style={{width: \"90%\"}} onChange={(e) => this.inputDescription(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ДАТА НАЧАЛА</Label>\r\n                            <div style={{width: \"100%\", paddingLeft: \"15%\"}}>\r\n                                <Calendar\r\n                                    value={this.startDate}\r\n                                    onChange={(date) => this.inputDate(date, \"startDate\")}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ДЕДЛАЙН</Label>\r\n                            <div style={{width: \"100%\", paddingLeft: \"15%\"}}>\r\n                                <Calendar\r\n                                    value={this.deadline}\r\n                                    onChange={(date) => this.inputDate(date, \"deadline\")}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ТЕСТИРОВЩИК</Label>\r\n                            <div className=\"row justify-content-center\">\r\n                                {this.renderTesterDropdown()}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ОТВЕТСТВЕННЫЙ</Label>\r\n                            <div className=\"row justify-content-center\">\r\n                                {this.renderResponsibleDropdown()}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ТИП</Label>\r\n                            <div className=\"row justify-content-center\">\r\n                                {this.renderTaskType()}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ПРИОРИТЕТ</Label>\r\n                            <div className=\"row justify-content-center\">\r\n                                {this.renderPriority()}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label style={{width: \"100%\"}} align=\"center\">Автор:\r\n                            <span>{currentUser.firstName} {currentUser.lastName}</span>\r\n                        </Label>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.saveTask()}>\r\n                        СОХРАНИТЬ\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <div className=\"row justify-content-center\" style={{marginTop: \"5%\"}}>\r\n                <Button\r\n                    style={{width: \"80%\", borderColor: \"#66A5AD\", color: \"#66A5AD\", backgroundColor: \"#fff\"}}\r\n                    onClick={() => this.toggleAddTaskWindow()}>Создать задачу</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.addTaskWindowOpen && this.renderAddTaskWindow()}\r\n                {!this.addTaskWindowOpen && this.renderButton()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    inputTaskName(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.taskName = event.currentTarget.value;\r\n    }\r\n\r\n    inputDescription(event: React.FormEvent<HTMLTextAreaElement>): void {\r\n        this.description = event.currentTarget.value;\r\n    }\r\n\r\n    inputDate(date: Date | Date[], dateType: string): void {\r\n        if(dateType === \"startDate\") {\r\n            this.startDate = date;\r\n        } else if(dateType === \"deadline\") {\r\n            this.deadline = date;\r\n        }\r\n    }\r\n\r\n    choosePerson(user: UserViewModel, type: string): void {\r\n        if(type === \"responsible\") {\r\n            this.responsiblePerson = user;\r\n        } else if(type === \"tester\") {\r\n            this.tester = user;\r\n        }\r\n    }\r\n\r\n    saveTask() {\r\n        this.props.store.taskStore.addOrUpdateTask(this.taskName, this.description, this.startDate, this.deadline, this.taskType, this.taskStatus, this.priority, this.tester.id, this.responsiblePerson.id, this.props.store.userStore.currentUser.id, 0, this.props.store.projectStore.choosenProject.id)\r\n            .then((status) => {\r\n                if(status === 200) {\r\n                    this.props.store.taskStore.getTasks(this.props.store.projectStore.choosenProject.id);\r\n                    this.addTaskWindowOpen = false;\r\n                    this.notSaved = false;\r\n                } else {\r\n                    this.notSaved = true;\r\n                    this.addTaskWindowOpen = false;\r\n                }\r\n            });\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Tasks.tsx",["805","806"],"﻿import React from \"react\";\r\nimport { ITasksProps } from \"./ITasksProps\";\r\nimport { TaskViewModel } from \"../../Typings/viewModels/TaskViewModel\";\r\nimport { Table, Modal, Alert } from \"reactstrap\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { makeObservable, observable, toJS } from \"mobx\";\r\nimport { Task } from \"./Task\";\r\nimport { observer } from \"mobx-react\";\r\nimport { translateTaskType } from \"../../functions/translater\";\r\nimport { formatDate } from \"../../functions/formatDate\";\r\n\r\n@observer\r\nexport class Tasks extends React.Component<ITasksProps> {\r\n    taskOpen: boolean;\r\n    taskToRender: TaskViewModel;\r\n\r\n    getResponsible(responsible: number): UserViewModel {\r\n        return this.props.store.userStore.users\r\n            .filter(u => u.id === responsible)[0];\r\n    }\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            taskOpen: observable\r\n        });\r\n    }\r\n\r\n    renderTask() {\r\n        return(\r\n            <Modal\r\n                isOpen={this.taskOpen}\r\n                toggle={() => this.taskOpenToggle()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                   onClick={() => this.taskOpenToggle()}/>\r\n                <Task store={this.props.store} task={this.taskToRender}/>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    renderAlert() {\r\n        return(\r\n            <Alert color=\"primary\">Задач пока нет!!!</Alert>\r\n        );\r\n    }\r\n\r\n    renderTasks(tasks: TaskViewModel[]) {\r\n        return(\r\n            <Table bordered style={{backgroundColor: \"#fff\", color:\"#003B46\", marginTop: \"2%\", fontSize: \"1.2em\"}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Номер</th>\r\n                        <th>Задача</th>\r\n                        <th>Дедлайн</th>\r\n                        <th>Тип задачи</th>\r\n                        <th>Ответственный</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {tasks.map((task) => {\r\n                    let responsible = this.getResponsible(task.responsible);//вообще здесь лучше дропдаун сделать\r\n                    return(\r\n                        <tr key={task.id} onClick={() => this.taskOpenToggle(task)}>\r\n                            <th>{task.id}</th>\r\n                            <th>{task.header}</th>\r\n                            <th>{formatDate(task.deadlineDate)}</th>\r\n                            <th>{translateTaskType(task.taskType)}</th>\r\n                            <th>{responsible?.firstName + \" \" + responsible?.lastName}</th>\r\n                        </tr>\r\n                    );\r\n                })}\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let currentProjectTasks = this.props.store.taskStore.currentProjectTasks;\r\n        let tasks = currentProjectTasks.filter(t => t.status === this.props.status);\r\n        return(\r\n            <>\r\n                {tasks !== undefined && this.renderTasks(tasks)}\r\n                {(tasks === undefined || tasks.length === 0) && this.renderAlert()}\r\n                {this.taskOpen && this.renderTask()}\r\n            </>\r\n        )\r\n    }\r\n\r\n    taskOpenToggle(task: TaskViewModel = new TaskViewModel()) {\r\n        this.taskOpen = !this.taskOpen;\r\n        this.taskToRender = task;\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskRole.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\Users.tsx",["807"],"﻿import React from \"react\";\r\nimport { IUsersProps } from \"./IUsersProps\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { Table } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport { User } from \"./User\";\r\n\r\n@observer\r\nexport class  Users extends React.Component<IUsersProps> {\r\n    renderUsers(users: UserViewModel[]) {\r\n        return(\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Id</th>\r\n                        <th>Имя Фамилия</th>\r\n                        <th>Email</th>\r\n                        <th>Роль</th>\r\n                        <th>Управление</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {users.map(user => {\r\n                        return(\r\n                           <User store={this.props.store} currentUser={user}/>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderUsers(this.props.store.userStore.users)}\r\n            </>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentGroupViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserReadModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\Role.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\User.tsx",["808"],"﻿import React from \"react\";\r\nimport { IUserProps } from \"./IUserProps\";\r\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Button } from \"reactstrap\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Role } from \"../../Typings/enums/Role\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { observer } from \"mobx-react\";\r\nimport {UserReadModel} from \"../../Typings/viewModels/UserReadModel\";\r\nimport {translateRole} from \"../../functions/translater\";\r\n\r\n@observer\r\nexport class User extends React.Component<IUserProps> {\r\n    roleDropdownOpen: boolean;\r\n    role: Role;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            roleDropdownOpen: observable,\r\n            role: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.role = this.props.currentUser.role;\r\n    }\r\n\r\n    toggleRoleDropdown() {\r\n        this.roleDropdownOpen = !this.roleDropdownOpen;\r\n    }\r\n\r\n    chooseUserRole(role: Role) {\r\n        this.role = role;\r\n    }\r\n\r\n    renderRoleDropdown(role: Role) {\r\n        return(\r\n            <Dropdown isOpen={this.roleDropdownOpen} toggle={() => this.toggleRoleDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateRole(role)}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Developer)}>{translateRole(Role.Developer)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Tester)}>{translateRole(Role.Tester)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Administrator)}>{translateRole(Role.Administrator)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Accounter)}>{translateRole(Role.Accounter)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Marketolog)}>{translateRole(Role.Marketolog)}</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderUser(user: UserViewModel) {\r\n        return(\r\n            <tr>\r\n                <th>{user.id}</th>\r\n                <th>{user.firstName} {user.lastName}</th>\r\n                <th>{user.email}</th>\r\n                <th>{this.renderRoleDropdown(this.role)}</th>\r\n                <th>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Button color=\"success\" \r\n                            className=\"controlButton\"\r\n                            onClick={() => this.updateUser()}>СОХРАНИТЬ</Button>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Button color=\"danger\"\r\n                            className=\"controlButton\"\r\n                            onClick={() => this.deleteUser()}>УДАЛИТЬ</Button>\r\n                    </div>\r\n                </th>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let user = this.props.currentUser;\r\n        return(\r\n            <>{this.renderUser(user)}</>\r\n        );\r\n    }\r\n\r\n    updateUser() {\r\n        let currentUser = this.props.currentUser;\r\n        let user = new UserReadModel();\r\n        user.id = currentUser.id;\r\n        user.role = this.role;\r\n        user.firstName = currentUser.firstName;\r\n        user.lastName = currentUser.lastName;\r\n        user.email = currentUser.email;\r\n        this.props.store.userStore.addOrUpdateUser(user);\r\n    }\r\n\r\n    deleteUser() {\r\n        this.props.store.userStore.deleteUser(this.props.currentUser.id);\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\AddUser.tsx",["809"],"﻿import React from \"react\";\r\nimport {IUsersProps} from \"./IUsersProps\";\r\nimport {makeObservable, observable} from \"mobx\";\r\nimport {\r\n    Button,\r\n    Dropdown,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    Input,\r\n    Label,\r\n    Modal,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalHeader\r\n} from \"reactstrap\";\r\nimport {Alert} from \"react-bootstrap\";\r\nimport {Role} from \"../../Typings/enums/Role\";\r\nimport {observer} from \"mobx-react\";\r\nimport {UserReadModel} from \"../../Typings/viewModels/UserReadModel\";\r\nimport {translateRole} from \"../../functions/translater\";\r\n\r\n@observer\r\nexport class AddUser extends React.Component<IUsersProps>{\r\n    addUserWindowOpen: boolean;\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    password: string;\r\n    roleDropdownOpen: boolean;\r\n    role: Role;\r\n    notSaved: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addUserWindowOpen: observable,\r\n            roleDropdownOpen: observable\r\n        });\r\n        this.role = Role.Developer;\r\n    }\r\n\r\n    isAuthor(role: Role) {\r\n        return role === Role.Administrator;\r\n    }\r\n\r\n    toggleAddUserWindow() {\r\n        this.addUserWindowOpen = !this.addUserWindowOpen;\r\n    }\r\n\r\n    toggleRoleDropdown() {\r\n        this.roleDropdownOpen = !this.roleDropdownOpen;\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <>\r\n                <div className=\"col-6\">\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.toggleAddUserWindow()}>Добавить пользователя</Button>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderRoleDropdown() {\r\n        return(\r\n            <Dropdown isOpen={this.roleDropdownOpen} toggle={() => this.toggleRoleDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateRole(this.role)}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Developer)}>{translateRole(Role.Developer)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Administrator)}>{translateRole(Role.Administrator)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Tester)}>{translateRole(Role.Tester)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Accounter)}>{translateRole(Role.Accounter)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Marketolog)}>{translateRole(Role.Marketolog)}</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderAddUserWindow() {\r\n        return(\r\n            <Modal\r\n                isOpen={this.addUserWindowOpen}\r\n                toggle={() => this.toggleAddUserWindow()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                onClick={() => this.toggleAddUserWindow()}/>\r\n                {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и пользователь не сохранился!</Alert>}\r\n                <ModalHeader closeButton>ДОБАВЛЕНИЕ НОВОГО ПОЛЬЗОВАТЕЛЯ</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                            <Label>Имя</Label>\r\n                            <Input onChange={(e) => this.inputFirstName(e)}/>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                            <Label>Фамилия</Label>\r\n                            <Input onChange={(e) => this.inputLastName(e)}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                            <Label>Email</Label>\r\n                            <Input onChange={(e) => this.inputEmail(e)}/>\r\n                        </div>\r\n                        {this.isAuthor(this.props.store.userStore.currentUser?.role) &&\r\n                            <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                                <Label>Password</Label>\r\n                                <Input onChange={(e) => this.inputPassword(e)}/>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                            {this.renderRoleDropdown()}\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.saveUser()}>\r\n                        СОХРАНИТЬ\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.addUserWindowOpen && this.renderAddUserWindow()}\r\n                {!this.addUserWindowOpen && this.renderButton()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    inputFirstName(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.firstName = event.currentTarget.value;\r\n    }\r\n\r\n    inputLastName(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.lastName = event.currentTarget.value;\r\n    }\r\n\r\n    inputEmail(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.email = event.currentTarget.value;\r\n    }\r\n\r\n    inputPassword(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.password = event.currentTarget.value;\r\n    }\r\n\r\n    chooseRole(role: Role) {\r\n        this.role = role;\r\n    }\r\n\r\n    saveUser() {\r\n        let user = new UserReadModel();\r\n        user.firstName = this.firstName;\r\n        user.lastName = this.lastName;\r\n        user.email = this.email;\r\n        user.role = this.role;\r\n        user.password = this.password;\r\n        this.props.store.userStore.addOrUpdateUser(user)\r\n            .then(status => {\r\n                if(status !== 200) {\r\n                    this.notSaved = true;\r\n                } else {\r\n                    this.notSaved = false;\r\n                    this.addUserWindowOpen = false;\r\n                }\r\n            });\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\ProjectViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\renderSpinner.tsx",["810"],"﻿import React from \"react\";\r\nimport { Spinner } from 'reactstrap';\r\n\r\nexport function renderSpinner() {\r\n    return(\r\n        <Spinner color=\"primary\"/>\r\n    )\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\translater.tsx",["811"],"﻿import {Role} from \"../Typings/enums/Role\";\r\nimport {TaskType} from \"../Typings/enums/TaskType\";\r\nimport {TaskPriority} from \"../Typings/enums/TaskPriority\";\r\nimport {ProjectRole} from \"../Typings/enums/ProjectRole\";\r\nimport {TaskRole} from \"../Typings/enums/TaskRole\";\r\nimport {TaskStatus} from \"../Typings/enums/TaskStatus\";\r\n\r\nexport function translateRole(role: Role): string {\r\n    if(role === Role.Developer) {\r\n        return \"Разработчик\";\r\n    } else if(role === Role.Marketolog) {\r\n        return \"Маркетолог\";\r\n    } else if(role === Role.Accounter) {\r\n        return \"Бухгалтер\";\r\n    } else if(role === Role.Administrator) {\r\n        return \"Администратор\";\r\n    } else if(role === Role.Tester) {\r\n        return \"Тестировщик\";\r\n    } \r\n    return \"\";\r\n}\r\n\r\nexport function translateTaskType(taskType: TaskType): string {\r\n    if(taskType === TaskType.Bug) {\r\n        return \"Баг\"\r\n    } else if(taskType === TaskType.Feature) {\r\n        return \"Фича\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport function translatePriority(priority: TaskPriority): string {\r\n    if(priority === TaskPriority.High) {\r\n        return \"Высокая\";\r\n    } else if(priority === TaskPriority.Average) {\r\n        return \"Средняя\";\r\n    } else if(priority === TaskPriority.Low) {\r\n        return \"Низкая\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport function translateProjectRole(role: ProjectRole): string {\r\n    if(role === ProjectRole.Head) {\r\n        return \"Руководитель\";\r\n    } else if(role === ProjectRole.Executor) {\r\n        return \"Исполнитель\";\r\n    } else if(role === ProjectRole.Developer) {\r\n        return \"Разработчик\";\r\n    } else if(role === ProjectRole.Tester) {\r\n        return \"Тестировщик\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport function translateTaskRole(role: TaskRole) : string {\r\n    if(role === TaskRole.Responsible) {\r\n        return \"Ответственный\";\r\n    } else if(role === TaskRole.Author) {\r\n        return \"Автор\";\r\n    } else if(role === TaskRole.Tester) {\r\n        return \"Тестировщик\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport function translateStatus(status: TaskStatus): string {\r\n    if(status ===  TaskStatus.InProgress) {\r\n        return \"В прогрессе\";\r\n    } else if(status === TaskStatus.Completed) {\r\n        return \"Завершена\";\r\n    } else if(status === TaskStatus.Future) {\r\n        return \"Еще не начата\";\r\n    }\r\n    return \"\";\r\n} ","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Authorization.tsx",["812"],"﻿import React from \"react\";\r\nimport RootStore from \"../../stores/RootStore\";\r\nimport { Label, Input, Button, Alert }from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\n\r\ninterface IAuthorizationProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nexport class Authorization extends React.Component<IAuthorizationProps> {\r\n    email: string;\r\n    password: string;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            email: observable,\r\n            password: observable\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container\" style={{backgroundColor:\"#66A5AD\", marginTop: \"5%\", color: \"#fff\", fontSize: \"1.5em\"}}>\r\n                {this.props.store.userStore.wrongCredetianals && <div className=\"row justify-content-center\">\r\n                    <Alert color=\"danger\">Пользователя с такими данными не существует. Попробуйте ещё раз</Alert>\r\n                </div> }\r\n                <div className=\"row justify-content-center\">\r\n                    <Label style={{width: \"100%\", marginTop: \"10px\"}}>EMAIL</Label>\r\n                    <Input\r\n                        style={{width: \"80%\"}}\r\n                        onChange={(e) => this.inputEmail(e)}/>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <Label style={{width: \"100%\"}}>ПАРОЛЬ</Label>\r\n                    <Input\r\n                        style={{width: \"80%\"}}\r\n                        type=\"password\"\r\n                        onChange={(e) => this.inputPassword(e)}/>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <Button\r\n                        style={{width: \"80%\", backgroundColor: \"#07575b\", marginTop: \"25px\", marginBottom: \"15px\"}}\r\n                        onClick={() => this.authorize()}>\r\n                        ВОЙТИ\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    inputEmail(event: React.FormEvent<HTMLInputElement>) {\r\n        this.email = event.currentTarget.value;\r\n    }\r\n\r\n    inputPassword(event: React.FormEvent<HTMLInputElement>) {\r\n        this.password = event.currentTarget.value;\r\n    }\r\n\r\n    async authorize() {\r\n        const response = await fetch(\"/authorization\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({email: this.email, password: this.password})\r\n        });\r\n        if(response.status === 200) {\r\n            this.props.store.userStore.authorizationRequire(false);\r\n            this.props.store.userStore.wrongCredetianalsToggle(false);\r\n            this.props.store.userStore.getCurrentUser();\r\n        } else {\r\n            this.props.store.userStore.authorizationRequire(true);\r\n            this.props.store.userStore.wrongCredetianalsToggle(true);\r\n        }\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Task.tsx",["813"],"﻿import React from \"react\";\r\nimport { ITaskProps } from \"../MyWork/ITaskProps\";\r\nimport {\r\n    Button,\r\n    Dropdown,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalHeader,\r\n    Label\r\n} from \"reactstrap\";\r\nimport { TaskViewModel } from \"../../Typings/viewModels/TaskViewModel\";\r\nimport { renderSpinner } from \"../../functions/renderSpinner\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\nimport { TaskType } from \"../../Typings/enums/TaskType\";\r\nimport { TaskPriority } from \"../../Typings/enums/TaskPriority\";\r\nimport { translatePriority, translateStatus, translateTaskType } from \"../../functions/translater\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport Calendar from \"react-calendar\";\r\nimport {Comments} from \"../Comments/Comments\";\r\n\r\n@observer\r\nexport class Task extends React.Component<ITaskProps> {\r\n    task: TaskViewModel;\r\n    statusDropdownOpen: boolean;\r\n    priorityDropdownOpen: boolean;\r\n    typeDropdownOpen: boolean;\r\n    testerDropdownOpen: boolean;\r\n    responsibleDropdownOpen: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            statusDropdownOpen: observable,\r\n            priorityDropdownOpen: observable,\r\n            typeDropdownOpen: observable,\r\n            task: observable,\r\n            testerDropdownOpen: observable,\r\n            responsibleDropdownOpen: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.task = this.props.task;\r\n    }\r\n\r\n    renderStatusDropdown() {\r\n        return(\r\n            <>\r\n                <Dropdown\r\n                    isOpen={this.statusDropdownOpen}\r\n                    toggle={() => this.toggleStatus()}>\r\n                    <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateStatus(this.task.status)}</DropdownToggle>\r\n                    <DropdownMenu>\r\n                        <DropdownItem onClick={() => this.task.status = TaskStatus.InProgress}>{translateStatus(TaskStatus.InProgress)}</DropdownItem>\r\n                        <DropdownItem onClick={() => this.task.status = TaskStatus.Completed}>{translateStatus(TaskStatus.Completed)}</DropdownItem>\r\n                        <DropdownItem onClick={() => this.task.status = TaskStatus.Future}>{translateStatus(TaskStatus.Future)}</DropdownItem>\r\n                    </DropdownMenu>\r\n                </Dropdown>\r\n            </>\r\n        );\r\n    }\r\n\r\n    toggleStatus() {\r\n        this.statusDropdownOpen = !this.statusDropdownOpen;\r\n    }\r\n\r\n    togglePriority() {\r\n        this.priorityDropdownOpen = !this.priorityDropdownOpen;\r\n    }\r\n\r\n    toggleTypeDropdown() {\r\n        this.typeDropdownOpen = !this.typeDropdownOpen;\r\n    }\r\n\r\n    toggleResponsibleDropdown() {\r\n        this.responsibleDropdownOpen = !this.responsibleDropdownOpen;\r\n    }\r\n\r\n    toggleTesterDropdown() {\r\n        this.testerDropdownOpen = !this.testerDropdownOpen;\r\n    }\r\n\r\n    renderResponsible() {\r\n        let users = this.props.store.userStore.users;\r\n        let responsible = this.props.store.userStore.users.filter(u => u.id === this.task.responsible)[0];\r\n        return(\r\n            <Dropdown isOpen={this.responsibleDropdownOpen} toggle={() => this.toggleResponsibleDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{responsible !== undefined ? `${responsible.firstName} ${responsible.lastName}` : \"Пока нет пользователей\"}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    {users.map((user, index) => {\r\n                        return(\r\n                            <>\r\n                                {<DropdownItem key={index} onClick={() => this.task.responsible = user.id}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                            </>\r\n                        );\r\n                    })}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n    \r\n    renderTester() {\r\n        let users = this.props.store.userStore.users;\r\n        let tester = this.props.store.userStore.users.filter(u => u.id === this.task.tester)[0];\r\n        return(\r\n            <Dropdown isOpen={this.testerDropdownOpen} toggle={() => this.toggleTesterDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{tester !== undefined ? `${tester.firstName} ${tester.lastName}` : \"Пока нет пользователей\"}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    {users.map((user, index) => {\r\n                        return(\r\n                            <>\r\n                                {<DropdownItem key={index}  onClick={() => this.task.tester = user.id}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                            </>\r\n                        );\r\n                    })}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderTaskPriority() {\r\n        return(\r\n            <>\r\n                <Dropdown\r\n                    isOpen={this.priorityDropdownOpen}\r\n                    toggle={() => this.togglePriority()}>\r\n                    <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translatePriority(this.task.priority)}</DropdownToggle>\r\n                    <DropdownMenu>\r\n                        <DropdownItem onClick={() => this.task.priority = TaskPriority.Average}>{translatePriority(TaskPriority.Average)}</DropdownItem>\r\n                        <DropdownItem onClick={() => this.task.priority = TaskPriority.Low}>{translatePriority(TaskPriority.Low)}</DropdownItem>\r\n                        <DropdownItem onClick={() => this.task.priority = TaskPriority.High}>{translatePriority(TaskPriority.High)}</DropdownItem>\r\n                    </DropdownMenu>\r\n                </Dropdown>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderTypeDropdown() {\r\n        return(\r\n            <>\r\n                <Dropdown\r\n                    isOpen={this.typeDropdownOpen}\r\n                    toggle={() => this.toggleTypeDropdown()}>\r\n                    <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateTaskType(this.task.taskType)}</DropdownToggle>\r\n                    <DropdownMenu>\r\n                        <DropdownItem onClick={() => this.task.taskType = TaskType.Feature}>{translateTaskType(TaskType.Feature)}</DropdownItem>\r\n                        <DropdownItem onClick={() => this.task.taskType = TaskType.Bug}>{translateTaskType(TaskType.Bug)}</DropdownItem>\r\n                    </DropdownMenu>\r\n                </Dropdown>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderTask(task: TaskViewModel) {\r\n        let author = this.props.store.userStore.users.filter(u => u.id === task.author)[0];\r\n        return(\r\n            <>\r\n                <ModalHeader style={{fontSize: \"1.5em\"}}>{task.header}</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row justify-content-center\">\r\n                                <div className=\"col-12\">\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <p style={{fontSize: \"1.2em\"}}>{task.description}</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-lg-3 col-md-3 col-sm-12 col-xs-12\">\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <Label style={{width: \"100%\"}} align=\"center\">Приоритет: </Label>\r\n                                        {this.renderTaskPriority()}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-lg-3 col-md-3 col-sm-12 col-xs-12\">\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <Label style={{width: \"100%\"}} align=\"center\">Статус: </Label>\r\n                                        {this.renderStatusDropdown()}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-lg-3 col-md-3 col-sm-12 col-xs-12\">\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <Label style={{width: \"100%\"}} align=\"center\">Тип: </Label>\r\n                                        {this.renderTypeDropdown()}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"row justify-content-center\">\r\n                                    <Label style={{width: \"100%\"}} align=\"center\">Ответственный: </Label>\r\n                                    {this.renderResponsible()}\r\n                                </div>\r\n                                <div className=\"row justify-content-center\">\r\n                                    <Label style={{width: \"100%\"}} align=\"center\">Тестировщик: </Label>\r\n                                    {this.renderTester()}\r\n                                </div>\r\n                                <div className=\"row justify-content-center\">\r\n                                    <Label>Автор: </Label>\r\n                                    {author.firstName} {author.lastName}\r\n                                </div>\r\n                                <div className=\"row justify-content-center\">\r\n                                    <Label style={{width: \"100%\"}} align=\"center\">Дата начала: </Label>\r\n                                    <Calendar\r\n                                        value={new Date(this.task.startDate)}\r\n                                        onChange={(date) => this.task.startDate = date}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"row justify-content-center\">\r\n                                    <Label style={{width: \"100%\"}} align=\"center\">Дедлайн: </Label>\r\n                                    <Calendar\r\n                                        value={new Date(this.task.deadlineDate)}\r\n                                        onChange={(date) => this.task.deadlineDate = date}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                    </div>\r\n                    <Comments taskId={this.props.task.id} store={this.props.store}/>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.save()}>\r\n                        СОХРАНИТЬ\r\n                    </Button>\r\n                </ModalFooter>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.task !== undefined && this.renderTask(this.task)}\r\n                {this.task === undefined && renderSpinner()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    save() {\r\n        let task = this.task;\r\n        this.props.store.taskStore.addOrUpdateTask(task.header, task.description, task.startDate, task.deadlineDate, task.taskType, task.status, task.priority, task.tester,task.responsible,task.author, task.id, 0)\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\TaskViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskPriority.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskType.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\ProjectRole.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Comments\\Comments.tsx",["814"],"﻿import React from \"react\";\r\nimport { ICommentsProps } from \"./ICommentsProps\";\r\nimport { CommentViewModel } from \"../../Typings/viewModels/CommentViewModel\";\r\nimport { observer } from \"mobx-react\";\r\nimport { AddComment } from \"./AddComment\";\r\nimport { Card, CardText, CardTitle, Label } from \"reactstrap\";\r\n\r\n@observer\r\nexport class Comments extends React.Component<ICommentsProps> {\r\n    componentDidMount(): void {\r\n        this.props.store.commentStore.getCurrentTaskComments(this.props.taskId);\r\n    }\r\n\r\n    deleteComment(commentId: number) {\r\n        this.props.store.commentStore.deleteComment(commentId)\r\n            .then(() => this.props.store.commentStore.getCurrentTaskComments(this.props.taskId));\r\n    }\r\n\r\n    isAuthor(userId: number): boolean {\r\n        return this.props.store.userStore.currentUser.id === userId;\r\n    }\r\n\r\n    renderComments(comments: CommentViewModel[]) {\r\n        return (\r\n            <>\r\n                {comments.map(comment => {\r\n                    return(\r\n                        <Card sm=\"12\">\r\n                            <div className=\"row justify-content-center\">\r\n                                {this.isAuthor(comment.user.id) && <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                                   onClick={() => this.deleteComment(comment.id)}/>}\r\n                                <CardTitle>{comment.user.firstName} {comment.user.lastName}</CardTitle>\r\n                            </div>\r\n                            <div className=\"row justify-content-center\">\r\n                                <CardText>{comment.text}</CardText>\r\n                            </div>\r\n                        </Card>\r\n                    );\r\n                })}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let commentGroup = this.props.store.commentStore.currentCommentGroup;\r\n        let comments = commentGroup.comments;\r\n        return(\r\n            <>\r\n                <Label style={{width: \"100%\"}} align=\"center\">КОММЕНТАРИИ</Label>\r\n                <AddComment store={this.props.store} taskId={this.props.taskId} groupId={commentGroup.id}/>\r\n                {comments.length > 0 && this.renderComments(comments)}\r\n            </>\r\n        )\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Comments\\AddComment.tsx",["815"],"﻿import React from \"react\";\r\nimport { Input, Button, Alert } from \"reactstrap\";\r\nimport { IAddCommentsProps } from \"./IAddCommentsProps\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\n\r\n@observer\r\nexport class AddComment extends React.Component<IAddCommentsProps>{\r\n    commentText: string;\r\n    notSaved: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            commentText: observable\r\n        })\r\n    }\r\n    render() {\r\n        return(\r\n            <>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-9\">\r\n                        <Input placeholder=\"Добавить комментарий\" value={this.commentText} onChange={(e) => { this.inputComment(e) }}/>\r\n                    </div>\r\n                    <div className=\"col-3\">\r\n                        <Button style={{width: \"100%\", backgroundColor: \"#07575b\"}} \r\n                             onClick={() => this.addComment()}>Добавить</Button>\r\n                    </div>\r\n                    {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и комментарий не сохранился</Alert>}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    inputComment(event: React.FormEvent<HTMLInputElement>) {\r\n        this.commentText = event.currentTarget.value;\r\n    }\r\n\r\n    addComment() {\r\n        let commentStore = this.props.store.commentStore;\r\n        let userStore = this.props.store.userStore;\r\n        commentStore.addComment(this.commentText, userStore.currentUser.id, this.props.groupId)\r\n            .then((status) => {\r\n                if (status === 200) {\r\n                    \r\n                    commentStore.getCurrentTaskComments(this.props.taskId);\r\n                    this.commentText = \"\";\r\n                    this.notSaved = false;\r\n                } else {\r\n                    this.notSaved = true;\r\n                }\r\n            });\r\n    }\r\n}",["816","817"],"C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\formatDate.tsx",["818"],"﻿export function formatDate(dateStr: string) {\r\n    let date = new Date(dateStr);\r\n\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth() + 1;\r\n    let day = date.getDate();\r\n    return day + '-' + month + '-' + year;\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\index.tsx",[],["819","820"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\App.tsx",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx",["821"],"﻿import { observable, makeObservable } from \"mobx\";\r\nimport UserStore from \"./UserStore\";\r\nimport CourseStore from \"./CourseStore\";\r\nimport LessonStore from \"./LessonStore\";\r\nimport TaskStore from \"./TaskStore\";\r\nimport WordStore from \"./WordStore\";\r\nimport TrainingStore from \"./TrainingStore\";\r\nimport TrackerStore from \"./TrackerStore\";\r\nimport NotificationStore from \"./NotificationStore\";\r\n\r\nexport class RootStore {\r\n    userStore: UserStore;\r\n    courseStore: CourseStore;\r\n    lessonStore: LessonStore;\r\n    taskStore: TaskStore;\r\n    wordStore: WordStore;\r\n    trainingStore: TrainingStore;\r\n    trackerStore: TrackerStore;\r\n    notificationStore: NotificationStore;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            userStore: observable,\r\n            courseStore: observable,\r\n            lessonStore: observable,\r\n            taskStore: observable,\r\n            wordStore: observable,\r\n            trainingStore: observable,\r\n            trackerStore: observable,\r\n            notificationStore: observable,\r\n        });\r\n        this.userStore = new UserStore();\r\n        this.courseStore = new CourseStore();\r\n        this.lessonStore = new LessonStore();\r\n        this.taskStore = new TaskStore();\r\n        this.wordStore = new WordStore();\r\n        this.trainingStore = new TrainingStore();\r\n        this.trackerStore = new TrackerStore();\r\n        this.notificationStore = new NotificationStore();\r\n    }\r\n\r\n    reset() {\r\n        this.exit()\r\n            .then(() => {\r\n                this.userStore = new UserStore();\r\n                this.courseStore = new CourseStore();\r\n                this.lessonStore = new LessonStore();\r\n                this.taskStore = new TaskStore();\r\n                this.wordStore = new WordStore();\r\n                this.trainingStore = new TrainingStore();\r\n                this.trackerStore = new TrackerStore();\r\n                this.notificationStore = new NotificationStore();\r\n            });\r\n    }\r\n\r\n    async exit() {\r\n        const response = await fetch(\"/exit\");\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default RootStore;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx",["822"],"﻿import { UserViewModel } from \"../Typings/viewModels/UserViewModel\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport { UserReadModel } from \"../Typings/readModels/UserReadModel\";\r\n\r\nclass UserStore {\r\n    currentUser: UserViewModel;\r\n    authorizationRequired: boolean = true;\r\n    registrationRequired: boolean = false;\r\n    wrongCredetianals: boolean = false;\r\n    users: UserViewModel[] = new Array<UserViewModel>();\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            currentUser: observable,\r\n            authorizationRequired: observable,\r\n            wrongCredetianals: observable,\r\n            registrationRequired: observable,\r\n            users: observable\r\n        });\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        this.getCurrentUser();\r\n        this.getUsers();\r\n    }\r\n\r\n    async getCurrentUser() {\r\n        const response = await fetch(\"/checktoken\");\r\n        if(response.status === 200) {\r\n            this.currentUser = await response.json();\r\n            this.authorizationRequired = false;\r\n        } else {\r\n            this.authorizationRequired = true;\r\n            this.registrationRequired = false;\r\n        }\r\n    }\r\n\r\n    async getUsers() {\r\n        const response = await fetch(\"/getusers\");\r\n        if(response.status === 200) {\r\n            this.users = await response.json();\r\n        }\r\n    }\r\n\r\n    @action\r\n    authorizationRequire(required: boolean) {\r\n        this.authorizationRequired = required;\r\n    }\r\n\r\n    @action\r\n    registrationRequire(required: boolean) {\r\n        this.registrationRequired = required;\r\n    }\r\n\r\n    @action\r\n    registrationToggle() {\r\n        this.registrationRequired = !this.registrationRequired;\r\n        this.authorizationRequired = !this.authorizationRequired;\r\n    }\r\n\r\n    @action\r\n    wrongCredetianalsToggle(turn: boolean) {\r\n        this.wrongCredetianals = turn;\r\n    }\r\n\r\n    async addOrUpdateUser(user: UserReadModel): Promise<number> {\r\n        const response = await fetch(\"/addorupdateuser\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                id: user.id, firstName: user.firstName,\r\n                lastName: user.lastName, email: user.email,\r\n                login: user.login, role: user.role,\r\n                // todo: подумать как и когда их передавать::: passwordHash: user.passwordHash, token: user.token\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            this.getUsers();\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n    \r\n    async deleteUser(userId: number): Promise<number> {\r\n        const response = await fetch(\"/deleteuser\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: userId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getUsers();\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default UserStore;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Authorization.tsx",["823"],"﻿import React from \"react\";\r\nimport RootStore from \"../../stores/RootStore\";\r\nimport { Label, Input, Button, Alert }from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\n\r\ninterface IAuthorizationProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nexport class Authorization extends React.Component<IAuthorizationProps> {\r\n    login: string;\r\n    password: string;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            login: observable,\r\n            password: observable\r\n        });\r\n    }\r\n\r\n    renderWarnings() {\r\n        return(\r\n            <>\r\n                {this.props.store.userStore.wrongCredetianals && <div className=\"row justify-content-center\">\r\n                    <Alert color=\"danger\">Пользователя с такими данными не существует. Попробуйте ещё раз</Alert>\r\n                </div> }\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderLoginInput() {\r\n        return (\r\n            <>\r\n                <Label className=\"formLabel\">ЛОГИН</Label>\r\n                <Input\r\n                    style={{width: \"80%\"}}\r\n                    onChange={(e) => this.inputLogin(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderPasswordInput() {\r\n        return (\r\n            <>\r\n                <Label className=\"formLabel\">ПАРОЛЬ</Label>\r\n                <Input\r\n                    style={{width: \"80%\"}}\r\n                    type=\"password\"\r\n                    onChange={(e) => this.inputPassword(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderEnterButton() {\r\n        return(\r\n            <Button\r\n                style={{width: \"80%\", backgroundColor: \"#07575b\", marginTop: \"25px\", marginBottom: \"15px\"}}\r\n                onClick={() => this.authorize()}>\r\n                ВОЙТИ\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid authorizationForm\">\r\n                {this.renderWarnings()}\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderLoginInput()}\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderPasswordInput()}\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderEnterButton()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    inputLogin(event: React.FormEvent<HTMLInputElement>) {\r\n        this.login = event.currentTarget.value;\r\n    }\r\n\r\n    inputPassword(event: React.FormEvent<HTMLInputElement>) {\r\n        this.password = event.currentTarget.value;\r\n    }\r\n\r\n    async authorize() {\r\n        const response = await fetch(\"/authorization\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({login: this.login, password: this.password})\r\n        });\r\n        if(response.status === 200) {\r\n            this.props.store.userStore.getCurrentUser()\r\n                .then(() => {\r\n                    this.props.store.userStore.authorizationRequire(false);\r\n                    this.props.store.userStore.wrongCredetianalsToggle(false);\r\n                });\r\n        } else {\r\n            this.props.store.userStore.authorizationRequire(true);\r\n            this.props.store.userStore.wrongCredetianalsToggle(true);\r\n        }\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentGroupViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\formatDate.tsx",["824"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\renderSpinner.tsx",["825"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\translater.tsx",["826"],"﻿import {PartOfSpeech} from \"../Typings/enums/PartOfSpeech\";\r\nimport {Tarif} from \"../Typings/enums/Tarif\";\r\nimport {UserRole} from \"../Typings/enums/UserRole\";\r\nimport {CourseRole} from \"../Typings/enums/CourseRole\";\r\nimport {SubtaskType} from \"../Typings/enums/SubtaskType\";\r\n\r\nexport function translatePartOfSpeech(partOfSpeech: PartOfSpeech): string {\r\n    if(partOfSpeech === PartOfSpeech.Adjective) {\r\n        return \"Прилагательное\";\r\n    } else if(partOfSpeech === PartOfSpeech.Adverb) {\r\n        return \"Наречие\";\r\n    } else if(partOfSpeech === PartOfSpeech.Noun) {\r\n        return \"Существительное\";\r\n    } else if(partOfSpeech === PartOfSpeech.Verb) {\r\n        return \"Глагол\";\r\n    }\r\n\r\n    return \"\";\r\n}\r\n\r\nexport function translateTarif(tarif: Tarif): string {\r\n    if(tarif === Tarif.Usual) {\r\n        return \"Обычный\";\r\n    } else if(tarif === Tarif.Premium) {\r\n        return \"Премиум\";\r\n    }\r\n\r\n    return \"\";\r\n}\r\n\r\nexport function translateRole(role: UserRole): string {\r\n    if(role === UserRole.User) {\r\n        return \"Пользователь\";\r\n    } else if(role === UserRole.Admin) {\r\n        return \"Администратор\"\r\n    }\r\n\r\n    return \"\";\r\n}\r\n\r\nexport function translateCourseRole(role: CourseRole): string {\r\n    if(role === CourseRole.Pupil) {\r\n        return \"Ученик\";\r\n    } else if(role === CourseRole.Teacher) {\r\n        return \"Учитель\"\r\n    }\r\n\r\n    return \"\";\r\n}\r\n\r\nexport function translateSubtaskType(subtaskType: SubtaskType): string {\r\n    if(subtaskType === SubtaskType.DetailedAnswer) {\r\n        return \"Задание на загрузку развёрнутого ответа\";\r\n    } else if(subtaskType === SubtaskType.RightVerbForm) {\r\n        return \"Выбрать правильную форму глагола\"\r\n    } else if(subtaskType === SubtaskType.LoadAudio) {\r\n        return \"Задание на загрузку аудио\"\r\n    } else if(subtaskType === SubtaskType.FillGaps) {\r\n        return \"Задание на заполнение пропусков\"\r\n    } else if(subtaskType === SubtaskType.LoadFile) {\r\n        return \"Задание на загрузку файла\"\r\n    } else if(subtaskType === SubtaskType.InsertWordsIntoGaps) {\r\n        return \"Задание вставить слова в пропуски\"\r\n    }\r\n\r\n    return \"\";\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\TaskViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Registration.tsx",["827"],"﻿import React from \"react\";\r\nimport RootStore from \"../../stores/RootStore\";\r\nimport { Label, Input, Button, Alert } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\n\r\ninterface IRegistrationProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nexport class Registration extends React.Component<IRegistrationProps> {\r\n    email: string;\r\n    password: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    login: string;\r\n    notRegistered: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            email: observable,\r\n            password: observable,\r\n            firstName: observable,\r\n            lastName: observable,\r\n            login: observable,\r\n            notRegistered: observable,\r\n        });\r\n    }\r\n\r\n    renderFirstNameInput() {\r\n        return(\r\n            <>\r\n                <Label className=\"formLabel\">ИМЯ</Label>\r\n                <Input\r\n                    style={{width: \"80%\"}}\r\n                    onChange={(e) => this.inputFirstName(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderLastNameInput() {\r\n        return(\r\n            <>\r\n                <Label className=\"formLabel\">ФАМИЛИЯ</Label>\r\n                <Input\r\n                    style={{width: \"80%\"}}\r\n                    onChange={(e) => this.inputLastName(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderLoginInput() {\r\n        return(\r\n            <>\r\n                <Label className=\"formLabel\">ЛОГИН</Label>\r\n                <Input\r\n                    style={{width: \"80%\"}}\r\n                    onChange={(e) => this.inputLogin(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderEmailInput() {\r\n        return(\r\n            <>\r\n                <Label className=\"formLabel\">Email</Label>\r\n                <Input\r\n                    style={{width: \"80%\"}}\r\n                    onChange={(e) => this.inputEmail(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderPasswordInput() {\r\n        return(\r\n            <>\r\n                <Label className=\"formLabel\">ПАРОЛЬ</Label>\r\n                <Input\r\n                    style={{width: \"80%\"}}\r\n                    type=\"password\"\r\n                    onChange={(e) => this.inputPassword(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderRegisterButton() {\r\n        return(\r\n            <Button\r\n                style={{width: \"80%\", backgroundColor: \"#07575b\", marginTop: \"25px\", marginBottom: \"15px\"}}\r\n                onClick={() => this.register()}>\r\n                ЗАРЕГИСТРИРОВАТЬСЯ\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderWarnings() {\r\n        return(\r\n            <>\r\n            {this.notRegistered && <Alert color=\"danger\">Что-то пошло не так и не удалось зарегистрироваться :(</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"col-12 authorizationForm\">\r\n                {this.renderWarnings()}\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderFirstNameInput()}\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderLastNameInput()}\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderLoginInput()}\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderEmailInput()}\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderPasswordInput()}\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderRegisterButton()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    inputEmail(event: React.FormEvent<HTMLInputElement>) {\r\n        this.email = event.currentTarget.value;\r\n    }\r\n\r\n    inputPassword(event: React.FormEvent<HTMLInputElement>) {\r\n        this.password = event.currentTarget.value;\r\n    }\r\n\r\n    inputFirstName(event: React.FormEvent<HTMLInputElement>) {\r\n        this.firstName = event.currentTarget.value;\r\n    }\r\n\r\n    inputLastName(event: React.FormEvent<HTMLInputElement>) {\r\n        this.lastName = event.currentTarget.value;\r\n    }\r\n\r\n    inputLogin(event: React.FormEvent<HTMLInputElement>) {\r\n        this.login = event.currentTarget.value;\r\n    }\r\n\r\n    async register() {\r\n        const response = await fetch(\"/registration\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({login: this.login, email: this.email, password: this.password, firstName: this.firstName, lastName: this.lastName})\r\n        });\r\n        if(response.status === 200) {\r\n            this.props.store.userStore.getCurrentUser()\r\n                .then(() => {\r\n                    this.props.store.userStore.registrationRequire(false);\r\n                    this.props.store.userStore.wrongCredetianalsToggle(false);\r\n                });\r\n        } else {\r\n            \r\n        }\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Main\\AdminMain.tsx",["828"],"﻿import React from \"react\";\r\nimport { observer } from  \"mobx-react\";\r\nimport { IAdminMainProps } from \"./IAdminMainProps\";\r\nimport { Card, CardHeader, Nav, NavItem, Button } from \"reactstrap\";\r\nimport { NavLink, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport CoursesPage from \"../Courses/CoursesPage\";\r\nimport DictionaryPage from \"../../Common/Dictionary/DictionaryPage\";\r\nimport TrainingPage from \"../../Common/Training/TrainingPage\";\r\nimport UsersPage from \"../Users/UsersPage\";\r\n\r\n\r\n@observer\r\nexport class AdminMain extends React.Component<IAdminMainProps> {\r\n    render() {\r\n        return (\r\n            <>\r\n                <Card>\r\n                    <CardHeader className=\"mainMenuHeader\">\r\n                        <Nav tabs className=\"nav\">\r\n                            <NavItem>\r\n                                <NavLink to=\"/courses\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}}\r\n                                    activeStyle={{\r\n                                    color: '#ffffff',\r\n                                    backgroundColor: '#4169E1',\r\n                                    textDecoration: 'none'\r\n                                    }}>\r\n                                    КУРСЫ\r\n                                </NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink to=\"/users\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}}\r\n                                    activeStyle={{\r\n                                    color: '#ffffff',\r\n                                    backgroundColor: '#4169E1',\r\n                                    textDecoration: 'none'\r\n                                    }}>\r\n                                    ПОЛЬЗОВАТЕЛИ\r\n                                </NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink to=\"/dictionary\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}}\r\n                                     activeStyle={{\r\n                                     color: '#ffffff',\r\n                                     backgroundColor: '#4169E1',\r\n                                     textDecoration: 'none'\r\n                                    }}>СЛОВАРЬ</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink to=\"/trainings\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}}\r\n                                     activeStyle={{\r\n                                     color: '#ffffff',\r\n                                     backgroundColor: '#4169E1',\r\n                                     textDecoration: 'none'\r\n                                     }}>ТРЕНИРОВКИ</NavLink>\r\n                            </NavItem>\r\n                            <Button\r\n                                outline color=\"primary\"\r\n                                onClick={() => this.exit()}>\r\n                                ВЫЙТИ\r\n                            </Button>\r\n                        </Nav>\r\n                    </CardHeader>\r\n                </Card>\r\n                <Switch>\r\n                    <Route exact path=\"/courses\"\r\n                           render={(props) => <CoursesPage store={this.props.store} />} />\r\n                    {<Route exact path=\"/users\"\r\n                           render={(props) => <UsersPage store={this.props.store} />} />}\r\n                    <Route exact path=\"/dictionary\"\r\n                           render={(props) => <DictionaryPage store={this.props.store} />} />\r\n                    {<Route exact path=\"/trainings\"\r\n                           render={(props) => <TrainingPage store={this.props.store} />} />}\r\n                    <Redirect to=\"/courses\" />\r\n                </Switch>\r\n            </>\r\n        );\r\n    }\r\n\r\n    exit() {\r\n        this.props.store.reset();\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Main\\UserMain.tsx",["829"],"﻿import React from \"react\";\r\nimport { observer } from  \"mobx-react\";\r\nimport { Card, CardHeader, Nav, NavItem, Button, ButtonDropdown, DropdownItem, DropdownMenu, DropdownToggle } from \"reactstrap\";\r\nimport { NavLink, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { IUserMainProps } from \"./IUserMainProps\";\r\nimport DictionaryPage from \"../../Common/Dictionary/DictionaryPage\";\r\nimport TrainingPage from \"../../Common/Training/TrainingPage\";\r\nimport HomePage from \"../Home/HomePage\";\r\nimport MyLessonsPage from \"../MyLessons/MyLessonsPage\";\r\nimport { CourseViewModel } from \"../../../Typings/viewModels/CourseViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport Notifications from \"../../Common/Notifications/Notifications\";\r\n\r\n@observer\r\nexport class UserMain extends React.Component<IUserMainProps> {\r\n    courseMenuOpen: boolean;\r\n    notificationsOpen: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            courseMenuOpen: observable,\r\n            notificationsOpen: observable,\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        let courseStore = this.props.store.courseStore;\r\n        courseStore.getUserCourses()\r\n            .then((status) => {\r\n                if(status === 200) {\r\n                    let userCoursesIds = this.props.store.courseStore.userCourses.map(c => {\r\n                        return c.courseId\r\n                    });\r\n                    console.log(\"userCoursesIds\", userCoursesIds);\r\n                    courseStore.getCoursesInfo(userCoursesIds);\r\n                }\r\n            });\r\n        let userId = this.props.store.userStore.currentUser.id;\r\n        this.props.store.notificationStore.getNotifications(userId);\r\n    }\r\n\r\n    renderNotifications() {\r\n        return(\r\n            <>\r\n                {this.notificationsOpen && <Notifications toggle={this.toggleNotifications()} notificationStore={this.props.store.notificationStore} userStore={this.props.store.userStore} />}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Card>\r\n                    <CardHeader className=\"mainMenuHeader\">\r\n                        <Nav tabs className=\"nav\">\r\n                            <NavItem>\r\n                                {this.renderCoursesToggler(this.props.store.courseStore.coursesInfo)}\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink to=\"/home\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}}\r\n                                     activeStyle={{\r\n                                         color: '#ffffff',\r\n                                         backgroundColor: '#4169E1',\r\n                                         textDecoration: 'none'\r\n                                     }}>ГЛАВНАЯ</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink to=\"/mylessons\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}}\r\n                                         activeStyle={{\r\n                                             color: '#ffffff',\r\n                                             backgroundColor: '#4169E1',\r\n                                             textDecoration: 'none'\r\n                                         }}>МОИ УРОКИ</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink to=\"/dictionary\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}}\r\n                                         activeStyle={{\r\n                                            color: '#ffffff',\r\n                                             backgroundColor: '#4169E1',\r\n                                             textDecoration: 'none'\r\n                                         }}>СЛОВАРЬ</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink to=\"/trainings\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}}\r\n                                         activeStyle={{\r\n                                             color: '#ffffff',\r\n                                             backgroundColor: '#4169E1',\r\n                                             textDecoration: 'none'\r\n                                         }}>ТРЕНИРОВКИ</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <i className=\"icon-notification\" onClick={() => this.toggleNotifications()} />\r\n                            </NavItem>\r\n                            <Button\r\n                                outline color=\"primary\"\r\n                                onClick={() => this.exit()}>\r\n                                ВЫЙТИ\r\n                            </Button>\r\n                        </Nav>\r\n                    </CardHeader>\r\n                    {this.renderNotifications()}\r\n                </Card>\r\n                <Switch>\r\n                    <Route exact path=\"/home\"\r\n                           render={(props) => <HomePage store={this.props.store} />} />\r\n                    <Route exact path=\"/mylessons\"\r\n                           render={(props) => <MyLessonsPage store={this.props.store} />} />\r\n                    <Route exact path=\"/dictionary\"\r\n                           render={(props) => <DictionaryPage store={this.props.store} />} />\r\n                    <Route exact path=\"/trainings\"\r\n                           render={(props) => <TrainingPage store={this.props.store} />} />\r\n                    <Redirect to=\"/home\" />\r\n                </Switch>\r\n            </>\r\n        );\r\n    }\r\n\r\n    async exit() {\r\n        const response = await fetch(\"/exit\");\r\n        if(response.status === 200) {\r\n            this.props.store.reset();\r\n        }\r\n    }\r\n\r\n    renderCoursesToggler(courses: CourseViewModel[]) {\r\n        let choosenCourse = this.props.store.courseStore.choosenCourse;\r\n        return(\r\n            <ButtonDropdown isOpen={this.courseMenuOpen} toggle={() => this.toggleCourseMenuOpen()}>\r\n                <DropdownToggle caret outline color=\"primary\">\r\n                    {choosenCourse.name}\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                    {courses.map((course) => {\r\n                        return(\r\n                            <DropdownItem\r\n                                onClick={(e) => this.toggleCourse(course)}\r\n                                id={course.id.toString()}\r\n                            >{course.name}</DropdownItem>\r\n                        );\r\n                    })}\r\n                </DropdownMenu>\r\n            </ButtonDropdown>\r\n        );\r\n    }\r\n\r\n    toggleCourseMenuOpen() {\r\n        this.courseMenuOpen = !this.courseMenuOpen;\r\n    }\r\n\r\n    toggleCourse(course: CourseViewModel) {\r\n        this.props.store.courseStore.setChoosenCourse(course);\r\n        this.props.store.lessonStore.getLessonsByCourse(course.id);\r\n        let choosenLessonId = this.props.store.lessonStore.choosenLesson.id;\r\n        this.props.store.taskStore.getTasksByLesson(choosenLessonId);\r\n    }\r\n\r\n    toggleNotifications() {\r\n        this.notificationsOpen = !this.notificationsOpen;\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\CourseStore.tsx",["830","831"],"﻿import { CourseViewModel } from \"../Typings/viewModels/CourseViewModel\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport { UserCourseViewModel } from \"../Typings/viewModels/UserCourseViewModel\";\r\n\r\nclass CourseStore {\r\n    coursesForTeacher: CourseViewModel[] = new Array<CourseViewModel>();\r\n    userCourses: UserCourseViewModel[] = new Array<UserCourseViewModel>();\r\n    choosenCourse: CourseViewModel = new CourseViewModel();\r\n    usersByCourse: UserCourseViewModel[] = new Array<UserCourseViewModel>();\r\n    coursesInfo: CourseViewModel[] = new Array<CourseViewModel>();\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            coursesForTeacher: observable,\r\n            userCourses: observable,\r\n            choosenCourse: observable,\r\n            usersByCourse: observable\r\n        });\r\n    }\r\n\r\n    async getCoursesForTeacher() {\r\n        const response = await fetch(\"/getcoursesforteacher\");\r\n        if (response.status === 200) {\r\n            this.coursesForTeacher = await response.json();\r\n        } else {\r\n            this.coursesForTeacher = new Array<CourseViewModel>();\r\n        }\r\n    }\r\n\r\n    async getUserCourses(): Promise<number> {\r\n        const response = await fetch(\"/getusercourses\");\r\n        if(response.status === 200) {\r\n            let courses = await response.json();\r\n            console.log(\"courses\", courses);\r\n            this.userCourses = courses;\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async getCoursesInfo(ids: number[]) {\r\n        const response = await fetch(\"/getcoursesinfo\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({coursesIds: ids})\r\n        });\r\n        if(response.status === 200) {\r\n            let coursesInfo = await response.json();\r\n            console.log(\"coursesInfo\", coursesInfo);\r\n            this.coursesInfo = coursesInfo;\r\n            if(coursesInfo.length > 0) {\r\n                this.choosenCourse = coursesInfo[0];\r\n            }\r\n        }\r\n    }\r\n\r\n    async getUsersByCourse(courseId: number) {\r\n        const response = await fetch(\"/getusersbycourse\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: courseId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.usersByCourse = await response.json();\r\n        }\r\n    }\r\n\r\n    async addOrUpdateCourse(id: number, name: string, description: string): Promise<number> {\r\n        const response = await fetch(\"addorupdatecourse\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: id, name: name, description: description})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getCoursesForTeacher();\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async deleteCourse(courseId: number): Promise<number> {\r\n        const response = await fetch(\"/deletecourse\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: courseId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getCoursesForTeacher();\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async addOrUpdateParticipantsList(participants: number[], courseId: number): Promise<number> {\r\n        const response = await fetch(\"/addorupdateparticipantslist\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({participantsIds: participants, id: courseId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getUsersByCourse(courseId);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async addOrUpdateUserCourseDetails(details: UserCourseViewModel): Promise<number> {\r\n        const response = await fetch(\"/addorupdateusercoursedetails\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({userId: details.userId,\r\n            courseRole: details.courseRole, tarif: details.tarif, startDate: details.startDate,\r\n            expireDate: details.expireDate, courseId: details.courseId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getUsersByCourse(details.courseId);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async computeUserCourseProgress(userId: number, courseId: number): Promise<number> {//todo: доделать + сделать модельку под прогресс\r\n        return 200;\r\n    }\r\n\r\n    async deleteUserFromCourse(userId: number, courseId: number): Promise<number> {\r\n        const response = await fetch(\"/deleteuserfromcourse\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({userId: userId, courseId: courseId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getUsersByCourse(courseId);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    setChoosenCourse(course: CourseViewModel): void {\r\n        this.choosenCourse = course;\r\n    }\r\n}\r\n\r\nexport default CourseStore;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\LessonStore.tsx",["832"],"﻿import { makeObservable, observable } from \"mobx\";\r\nimport { LessonViewModel } from \"../Typings/viewModels/LessonViewModel\";\r\nimport { LessonMaterialViewModel } from \"../Typings/viewModels/LessonMaterialViewModel\";\r\n\r\nclass LessonStore {\r\n    lessonsByChoosenCourse: LessonViewModel[] = new Array<LessonViewModel>();\r\n    choosenLesson: LessonViewModel = new LessonViewModel();\r\n    materialsByChoosenLesson: LessonMaterialViewModel[] = new Array<LessonMaterialViewModel>();\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            lessonsByChoosenCourse: observable,\r\n            choosenLesson: observable,\r\n            materialsByChoosenLesson: observable,\r\n        });\r\n    }\r\n\r\n    setChoosenLesson(lesson: LessonViewModel) {\r\n        this.choosenLesson = lesson;\r\n        this.getMaterialsByLesson(lesson.id);\r\n    }\r\n\r\n    async getLessonsByCourse(courseId: number) {\r\n        const response = await fetch(\"getlessonsbycourse\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: courseId})\r\n        });\r\n        if(response.status === 200) {\r\n            const data = await response.json();\r\n            this.lessonsByChoosenCourse = data;\r\n            this.choosenLesson = data[0];\r\n        }\r\n    }\r\n\r\n    async addOrUpdateLesson(id: number, order: number, courseId: number, name: string, description: string, startDate: Date | Date[], expireDate: Date | Date[]): Promise<number> {\r\n        const response = await fetch(\"addorupdatelesson\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: id, courseId: courseId, name: name, description: description, startDate: startDate, expireDate: expireDate})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getLessonsByCourse(courseId);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async deleteLesson(lessonId: number, courseId: number): Promise<number> {\r\n        const response = await fetch(\"deletelesson\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: lessonId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getLessonsByCourse(courseId);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async getMaterialsByLesson(lessonId: number): Promise<number> {\r\n        const response = await fetch(\"getmaterialsbylesson\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: lessonId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.materialsByChoosenLesson = await response.json();\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async deleteMaterial(materialId: number): Promise<number> {\r\n        const response = await fetch(\"deletematerial\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: materialId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getMaterialsByLesson(this.choosenLesson.id);\r\n        }\r\n\r\n        return response.json();\r\n    }\r\n\r\n    async addOrUpdateMaterial(file: File): Promise<number> {\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n        formData.append(\"lessonId\", this.choosenLesson.id.toString());\r\n        const response = await fetch(\"/addorupdatematerial\", {\r\n            body: formData,\r\n            method: \"POST\"\r\n        });\r\n        if(response.status === 200) {\r\n            this.getMaterialsByLesson(this.choosenLesson.id);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default LessonStore;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CourseViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserCourseViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\LessonViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx",["833","834","835"],"﻿import {makeObservable, observable, toJS} from \"mobx\";\r\nimport { TaskViewModel } from \"../Typings/viewModels/TaskViewModel\";\r\nimport {TaskReadModel} from \"../Typings/readModels/TaskReadModel\";\r\nimport {SubtaskReadModel} from \"../Typings/readModels/SubtaskReadModel\";\r\nimport {TagViewModel} from \"../Typings/viewModels/TagViewModel\";\r\nimport {UserSubtaskReadModel} from \"../Typings/readModels/UserSubtaskReadModel\";\r\nimport {UserSubtaskAnswerGroupReadModel} from \"../Typings/readModels/UserSubtaskAnswerGroupReadModel\";\r\nimport {UserSubtaskViewModel} from \"../Typings/viewModels/UserSubtaskViewModel\";\r\nimport {UserSubtaskAnswerGroupViewModel} from \"../Typings/viewModels/UserSubtaskAnswerGroupViewModel\";\r\nimport {TagReadModel} from \"../Typings/readModels/TagReadModel\";\r\n\r\nclass TaskStore {\r\n    tasksByChoosenLesson: TaskViewModel[] = new Array<TaskViewModel>();\r\n    tags: TagViewModel[] = new Array<TagViewModel>();\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            tasksByChoosenLesson: observable,\r\n            tags: observable\r\n        });\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        this.getTags();\r\n    }\r\n\r\n    async getTags() {\r\n        const response = await fetch(\"/gettags\");\r\n        if(response.status === 200) {\r\n            this.tags = await response.json();\r\n        }\r\n    }\r\n\r\n    async getTasksByLesson(lessonId: number) {\r\n        console.log(\"i start to get tasks\");\r\n        const response = await fetch(\"/gettasksbychoosenlesson\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: lessonId})\r\n        });\r\n        if(response.status === 200) {\r\n            let tasksByChoosenLesson = await response.json();\r\n            this.tasksByChoosenLesson = tasksByChoosenLesson;\r\n        }\r\n    }\r\n\r\n    async addOrUpdateTask(task: TaskReadModel, lessonId: number): Promise<number> {\r\n        const formData = this.getFormDataForTask(task, lessonId);\r\n        const response = await fetch(\"/addorupdatetask\", {\r\n            method: \"POST\",\r\n            body: formData\r\n        });\r\n        if(response.status === 200) {\r\n            let taskId = await response.json();\r\n            task.subtasks.forEach((sub, i) => {\r\n                sub.taskId = taskId;\r\n                this.addOrUpdateSubtask(sub);\r\n            });\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    getFormDataForTask(task: TaskReadModel, lessonId: number): FormData {\r\n        let formData = new FormData();\r\n        formData.append(\"lessonId\", lessonId.toString());\r\n        if(task.id !== undefined) {\r\n            formData.append(\"id\", task.id.toString());\r\n        }\r\n        if(task.taskType !== undefined) {\r\n            formData.append(\"taskType\", task.taskType.toString());\r\n        }\r\n        if(task.text !== undefined) {\r\n            formData.append(\"text\", task.text.toString());\r\n        }\r\n        if(task.instruction !== undefined) {\r\n            formData.append(\"instruction\", task.instruction.toString());\r\n        }\r\n        if(task.subtasks !== undefined) {\r\n            // @ts-ignore\r\n            formData.append(\"subtasks\", task.subtasks);\r\n        }\r\n        if(task.tags !== undefined) {\r\n            formData.append(\"tags\", task.tags.toString());\r\n        }\r\n\r\n        return formData;\r\n    }\r\n\r\n    async addOrUpdateSubtask(subtask: SubtaskReadModel): Promise<number> {\r\n        const formData = this.getFormDataForSubtask(subtask);\r\n        const response = await fetch(\"/addorupdatesubtask\", {\r\n            method: \"POST\",\r\n            body: formData\r\n        });\r\n        if(response.status === 200) {\r\n            this.updateTaskByTaskId(subtask.taskId);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    getFormDataForSubtask(subtask: SubtaskReadModel): FormData {\r\n        const formData = new FormData();\r\n        formData.append(\"subtaskType\", subtask.subtaskType.toString());\r\n        if(subtask.order !== undefined) {\r\n            formData.append(\"order\", subtask.order.toString());\r\n        }\r\n        if(subtask.text !== undefined) {\r\n            formData.append(\"text\", subtask.text.toString());\r\n        }\r\n        if(subtask.path !== undefined) {\r\n            formData.append(\"path\", subtask.path.toString());\r\n        }\r\n        if(subtask.id !== undefined) {\r\n            formData.append(\"path\", subtask.id.toString());\r\n        }\r\n        if(subtask.id !== undefined) {\r\n            formData.append(\"id\", subtask.id.toString());\r\n        }\r\n        if(subtask.taskId !== undefined) {\r\n            formData.append(\"taskId\", subtask.taskId.toString());\r\n        }\r\n        if(subtask.taskId !== undefined) {\r\n            formData.append(\"file\", subtask.file);\r\n        }\r\n        \r\n        return formData;\r\n    }\r\n\r\n    async deleteTask(taskId: number, lessonId: number) {\r\n        const response = await fetch(\"/deletetask\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                id: taskId\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            this.getTasksByLesson(lessonId);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async deleteSubtask(subtaskId: number, taskId: number) {\r\n        const response = await fetch(\"/deletesubtask\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                id: subtaskId\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            this.updateTaskByTaskId(taskId);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async addOrUpdateUserSubtask(userSubtask: UserSubtaskReadModel): Promise<number> {\r\n        let formData = this.getFormDataForUserSubtask(userSubtask);\r\n        const response = await fetch(\"/addorupdateusersubtask\", {\r\n            method: \"POST\",\r\n            body: formData\r\n        });\r\n\r\n        return response.status;\r\n    }\r\n\r\n    getFormDataForUserSubtask(userSubtask: UserSubtaskReadModel): FormData {\r\n        let formData = new FormData();\r\n        //todo: тут добавить проверку на undefined\r\n        formData.append(\"userId\", userSubtask.userId.toString());\r\n        formData.append(\"answer\", userSubtask.answer.toString());\r\n        formData.append(\"status\", userSubtask.status.toString());\r\n        formData.append(\"subtaskId\", userSubtask.subtaskId.toString());\r\n        formData.append(\"taskId\", userSubtask.subtaskId.toString());\r\n        formData.append(\"files\", userSubtask.files.toString());\r\n\r\n        return formData;\r\n    }\r\n\r\n    async addOrUpdateUserSubtaskAnswerGroup(userSubtaskAnswerGroup: UserSubtaskAnswerGroupReadModel): Promise<number> {\r\n        const response = await fetch(\"/addorupdateusersubtaskanswergroup\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                userId: userSubtaskAnswerGroup.userId, answerGroupId: userSubtaskAnswerGroup.answerGroupId,\r\n                subtaskId: userSubtaskAnswerGroup.subtaskId, status: userSubtaskAnswerGroup.status,\r\n                lastAnswer: userSubtaskAnswerGroup.lastAnswer\r\n            })\r\n        });\r\n        return response.status;\r\n    }\r\n\r\n    async getUserSubtask(subtaskId: number, userId: number): Promise<UserSubtaskViewModel> {\r\n        let userSubtask =  new UserSubtaskViewModel();\r\n        const response = await fetch(\"/getusersubtask\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                userId: userId, subtaskId: subtaskId\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            userSubtask = await response.json();\r\n        }\r\n\r\n        return userSubtask;\r\n    }\r\n\r\n    async getTasks(tags: TagReadModel[]): Promise<TaskViewModel[]> {\r\n        let tagIds = tags.map(t => t.id);\r\n        let tasks = new Array<TaskViewModel>();\r\n        const response = await fetch(\"/gettasks\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                tagIds: tagIds\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            tasks = await response.json();\r\n        }\r\n\r\n        return tasks;\r\n    }\r\n\r\n    async updateTaskByTaskId(taskId: number) {\r\n        const response = await fetch(\"/gettaskbyid\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                id: taskId\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            let taskIndex = this.tasksByChoosenLesson.findIndex(t => t.id === taskId);\r\n            this.tasksByChoosenLesson[taskIndex] =  await response.json();\r\n        }\r\n    }\r\n}\r\n\r\nexport default TaskStore;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\UserRole.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserSubtaskViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\WordStore.tsx",["836"],"﻿import { WordViewModel } from \"../Typings/viewModels/WordViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { UserWordViewModel } from \"../Typings/viewModels/UserWordViewModel\";\r\nimport { WordReadModel } from \"../Typings/readModels/WordReadModel\";\r\nimport { UserWordReadModel } from \"../Typings/readModels/UserWordReadModel\";\r\nimport {WordOfADayReadModel} from \"../Typings/readModels/WordOfADayReadModel\";\r\n\r\nclass WordStore {\r\n    dictionary: WordViewModel[] = new Array<WordViewModel>();\r\n    userDictionary: UserWordViewModel[] = new Array<UserWordViewModel>();\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            dictionary: observable,\r\n            userDictionary: observable,\r\n        });\r\n    }\r\n\r\n   async deleteWordFromDictionary(wordId: number): Promise<number> {\r\n       const response = await fetch(\"/deletewordfromdictionary\", {\r\n           method: \"POST\",\r\n           headers: {\r\n               'Content-Type': 'application/json;charset=utf-8'\r\n           },\r\n           body: JSON.stringify({id: wordId})\r\n       });\r\n       if(response.status === 200) {\r\n           this.getDictionary();\r\n       }\r\n\r\n       return response.status;\r\n    }\r\n\r\n   async deleteWordFromUserDictionary(wordId: number, userId: number): Promise<number> {\r\n        let word = new WordReadModel();\r\n        word.id = wordId;\r\n       const response = await fetch(\"/deletewordfromuserdictionary\", {\r\n           method: \"POST\",\r\n           headers: {\r\n               'Content-Type': 'application/json;charset=utf-8'\r\n           },\r\n           body: JSON.stringify({userId: userId, word: word})\r\n       });\r\n       if(response.status === 200) {\r\n           this.getUserDictionary(userId);\r\n       }\r\n\r\n       return response.status;\r\n   }\r\n\r\n   async getDictionary(): Promise<number> {\r\n        const response = await fetch(\"/getdictionary\");\r\n        if(response.status === 200) {\r\n            this.dictionary = await response.json();\r\n        }\r\n\r\n        return response.status;\r\n   }\r\n\r\n   async getUserDictionary(userId: number): Promise<number> {\r\n       const response = await fetch(\"/getuserdictionary\", {\r\n           method: \"POST\",\r\n           headers: {\r\n               'Content-Type': 'application/json;charset=utf-8'\r\n           },\r\n           body: JSON.stringify({id: userId})\r\n       });\r\n       if(response.status === 200) {\r\n           this.userDictionary = await response.json();\r\n       }\r\n\r\n        return response.status;\r\n   }\r\n\r\n   async addOrUpdateWordToDictionary(word: WordReadModel): Promise<number> {\r\n       const response = await fetch(\"/addorupdatewordtodictionary\", {\r\n           method: \"POST\",\r\n           headers: {\r\n               'Content-Type': 'application/json;charset=utf-8'\r\n           },\r\n           body: JSON.stringify({\r\n               id: word.id, word: word.word,\r\n               russianMeaning: word.russianMeaning, englishMeaning: word.englishMeaning, \r\n               partOfSpeech: word.partOfSpeech, examples: word.examples\r\n           })\r\n       });\r\n       if(response.status === 200) {\r\n           this.getDictionary();\r\n       }\r\n\r\n       return response.status;\r\n   }\r\n\r\n    async addOrUpdateWordToUserDictionary(word: WordReadModel, userId: number): Promise<number> {\r\n        console.log(\"i am in addOrUpdateWordToUserDictionary\", word);\r\n        const response = await fetch(\"/addorupdatewordtouserdictionary\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                word: word,\r\n                userId: userId\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            this.getDictionary();\r\n            this.getUserDictionary(userId);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async addOrUpdateUserWordsProgress(userWords: UserWordReadModel[]) {\r\n        const response = await fetch(\"/addorupdateuserwordsprogress\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                userWords: userWords\r\n            })\r\n        });\r\n        if(response.status !== 200) {\r\n            this.addOrUpdateUserWordsProgress(userWords);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async deleteWordOfADay(wordId: number): Promise<number> {\r\n        const response = await fetch(\"/deletewordofaday\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                id: wordId\r\n            })\r\n        });\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async getWordOfADay(date: Date | Date[], courseId: number): Promise<WordViewModel> {\r\n        let wordOfADay = new WordViewModel();\r\n        const response = await fetch(\"/getwordofaday\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                courseId: courseId, date: date\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            wordOfADay = await response.json();\r\n        }\r\n\r\n        return wordOfADay;\r\n    }\r\n\r\n    async addOrUpdateWordOfADay(wordOfADay: WordOfADayReadModel): Promise<number> {\r\n        const response = await fetch(\"/addorupdatewordofaday\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                word: wordOfADay.word,\r\n                courseId: wordOfADay.courseId,\r\n                date: wordOfADay.date\r\n            })\r\n        });\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async getUserWordsProgress(wordId: number, userId: number): Promise<UserWordViewModel> {\r\n        let userWord = new UserWordViewModel();\r\n        let word = new WordReadModel();\r\n        word.id = wordId;\r\n        const response = await fetch(\"/getuserwordsprogress\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                userId: userId,\r\n                word: word\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            userWord = await response.json();\r\n        }\r\n \r\n        return userWord;\r\n    }\r\n\r\n    async addOrUpdateUserWordProgress(userWord: UserWordReadModel): Promise<number> {\r\n        const response = await fetch(\"/addorupdateuserword\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                userId: userWord.userId, word: userWord.word,\r\n                rightAnswers: userWord.rightAnswers, answer: userWord.answer,\r\n                countOfAttempts: userWord.countOfAttempts, status: userWord.status\r\n            })\r\n        });\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async getAnswersToWordOfADayByWord(wordId: number, courseId: number): Promise<UserWordViewModel[]> {\r\n        let userWords = new Array<UserWordViewModel>();\r\n        const response = await fetch(\"/getanswerstowordofadaybyword\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n               id: wordId,\r\n                courseId: courseId\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            userWords = await response.json();\r\n        }\r\n\r\n        return userWords;\r\n    }\r\n}\r\n\r\nexport default WordStore;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Courses\\CoursesPage.tsx",["837","838","839"],"﻿import React, { Component } from 'react';\r\nimport  { Tab, Nav } from \"react-bootstrap\";\r\nimport { Alert, Button, Col, Row }from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport { observable, makeObservable, action } from \"mobx\";\r\nimport { CourseViewModel } from \"../../../Typings/viewModels/CourseViewModel\";\r\nimport { renderSpinner } from \"../../../functions/renderSpinner\";\r\nimport { AddNewCourse } from \"./AddNewCourse\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport {Course} from \"./Course\";\r\n\r\nclass ICoursesPageProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass CoursesPage extends Component<ICoursesPageProps> {\r\n    notDeleted: boolean = false;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            notDeleted: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.props.store.courseStore.getCoursesForTeacher();\r\n    }\r\n\r\n    renderCourse() {\r\n        let coursesExists = this.props.store.courseStore.coursesForTeacher.length !== 0;\r\n        if(!coursesExists) {\r\n            return(\r\n                <Alert>Добавьте курсы. Пока нет ни одного курса.</Alert>\r\n            );\r\n        } else {\r\n            return (\r\n                <Course store={this.props.store}/>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderCoursesMenu(courses: CourseViewModel[]) {\r\n            return (\r\n                <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\r\n                    {this.notDeleted && <Alert>Что-то пошло не так и курс не удалился</Alert>}\r\n                    <Row>\r\n                        <Col sm={2}>\r\n                            <Nav variant=\"pills\" className=\"flex-column\">\r\n                                <div className=\"container-fluid\">\r\n                                    {courses.map((course) => {\r\n                                        return (\r\n                                            <Nav.Item key={course.id}>\r\n                                                <div className=\"row\" key={course.id}>\r\n                                                    <div className=\"col-8\">\r\n                                                        <Nav.Link\r\n                                                            eventKey={course.id}\r\n                                                            className=\"nav-link lesson\"\r\n                                                            onClick={() => this.changeCourse(course)}>\r\n                                                            {course.name}\r\n                                                        </Nav.Link>\r\n                                                    </div>\r\n                                                    <div className=\"col-2 col-lg-offset-10\">\r\n                                                        <i className=\"fa fa-window-close\"\r\n                                                           aria-hidden=\"true\"\r\n                                                           onClick={() => this.deleteCourse(course.id)}/>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </Nav.Item>\r\n                                        );\r\n                                    })}\r\n                                    {<AddNewCourse courseStore={this.props.store.courseStore}/>}\r\n                                </div>\r\n                            </Nav>\r\n                        </Col>\r\n                        <Col sm={10}>\r\n                            {this.renderCourse()}\r\n                        </Col>\r\n                    </Row>\r\n                </Tab.Container>\r\n            );\r\n    }\r\n\r\n    render() {\r\n        let courses = this.props.store.courseStore.coursesForTeacher;\r\n        return (\r\n            <>\r\n                {courses !== undefined && this.renderCoursesMenu(courses)}\r\n                {courses === undefined && renderSpinner()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    deleteCourse(courseId: number) {\r\n        let result = window.confirm('Вы уверены, что хотите удалить этот курс?');\r\n        if(result) {\r\n            this.props.store.courseStore.deleteCourse(courseId)\r\n                .then((status) => {\r\n                    this.notDeleted = status !== 200;\r\n            });\r\n        }\r\n    }\r\n\r\n    changeCourse(course: CourseViewModel) {\r\n        this.props.store.courseStore.setChoosenCourse(course);\r\n        this.props.store.courseStore.getUsersByCourse(course.id);\r\n        this.props.store.lessonStore.getLessonsByCourse(course.id);\r\n    }\r\n}\r\n\r\nexport default CoursesPage;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\DictionaryPage.tsx",["840"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport { Button } from 'reactstrap';\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { UserRole } from \"../../../Typings/enums/UserRole\";\r\nimport Words from \"./Words\";\r\nimport WordsTrainingPage from \"../../User/Dictionary/WordsTrainingPage\";\r\nimport Search from \"./Search\";\r\nimport \"../../../styles/dictionary.css\";\r\nimport { WordViewModel } from \"../../../Typings/viewModels/WordViewModel\";\r\nimport AddOrUpdateWord from \"./AddOrUpdateWord\";\r\n\r\nclass IDictionaryPageProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass DictionaryPage extends Component<IDictionaryPageProps> {\r\n    addNewWord: boolean;\r\n    training: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addNewWord: observable,\r\n            training: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        let role = this.props.store.userStore.currentUser.role;\r\n        this.props.store.wordStore.getDictionary();\r\n        if(role === UserRole.User) {\r\n            let userId = this.props.store.userStore.currentUser.id;\r\n            this.props.store.wordStore.getUserDictionary(userId);\r\n        }\r\n    }\r\n\r\n    addNewWordToggle = () => {\r\n        this.addNewWord = !this.addNewWord;\r\n    };\r\n\r\n    trainingToggle = () => {\r\n        this.training = !this.training;\r\n    };\r\n\r\n    renderSearch() {\r\n        return(\r\n            <div className=\"col-lg-6 col-md-6 col-sm-12\" style={{marginTop: \"10px\"}}>\r\n                <Search wordStore={this.props.store.wordStore} user={this.props.store.userStore.currentUser} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderAddNewWordButton() {\r\n        return(\r\n            <div className=\"col-lg-6 col-md-6 col-sm-12\" style={{marginTop: \"10px\", marginBottom: \"10px\"}}>\r\n                <Button\r\n                    outline\r\n                    color=\"primary\"\r\n                    onClick={() => this.addNewWordToggle()}>\r\n                    Добавить новое слово\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderAddNewWordWindow() {\r\n        return(\r\n            <>\r\n                {this.addNewWord && <div className=\"row justify-content-center\">\r\n                    <AddOrUpdateWord word={new WordViewModel()} wordStore={this.props.store.wordStore} cancelEdit={this.addNewWordToggle} courseId={undefined} currentUser={this.props.store.userStore.currentUser} date={undefined} isWordOfADay={false}/>\r\n                </div>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderTrainingButton() {\r\n        let role = this.props.store.userStore.currentUser.role;\r\n        if(role === UserRole.User) {\r\n            return(\r\n                <div className=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\" style={{marginTop: 10, marginBottom: 10}}>\r\n                    <Button\r\n                        disabled={false}\r\n                        color=\"primary trainingButton\"\r\n                        onClick={() => this.trainingToggle()}>\r\n                        Тренировка\r\n                    </Button>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderWordTrainingPage() {\r\n        return(\r\n            <>\r\n                {this.training && <WordsTrainingPage onToggle={this.trainingToggle} wordStore={this.props.store.wordStore} userId={this.props.store.userStore.currentUser.id}/>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderWords() {\r\n        return(\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-12\">\r\n                    <Words userStore={this.props.store.userStore} wordStore={this.props.store.wordStore}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderSearch()}\r\n                    {this.renderAddNewWordButton()}\r\n                    {this.renderTrainingButton()}\r\n                    {this.renderWordTrainingPage()}\r\n                </div>\r\n                {this.renderAddNewWordWindow()}\r\n                {this.renderWords()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DictionaryPage;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Courses\\Course.tsx",["841"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { Card, CardHeader, Alert } from \"reactstrap\";\r\nimport { Nav, Tab } from \"react-bootstrap\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { LessonsMenu } from \"../Lessons/LessonsMenu\";\r\nimport WordsOfADay from \"../WordsOfADay/WordsOfADay\";\r\nimport ParticipantsPage from \"../Participants/ParticipantsPage\";\r\n\r\nclass ICourseProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nexport class Course extends Component<ICourseProps> {\r\n    lessonsActive: boolean = true;\r\n    wordsOfADay: boolean = false;\r\n    participants: boolean = false;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            lessonsActive: observable,\r\n            wordsOfADay: observable,\r\n            participants: observable,\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        let courseId = this.props.store.courseStore.choosenCourse.id;\r\n        this.props.store.lessonStore.getLessonsByCourse(courseId);\r\n    }\r\n\r\n    renderCourseContent() {\r\n            return(\r\n                <>\r\n                    {this.lessonsActive && <LessonsMenu store={this.props.store}/>}\r\n                    {this.wordsOfADay && <WordsOfADay store={this.props.store} />}\r\n                    {this.participants && <ParticipantsPage courseStore={this.props.store.courseStore} userStore={this.props.store.userStore} />}\r\n                </>\r\n            );\r\n    }\r\n\r\n    renderCourseMenu() {\r\n        return(\r\n            <Tab.Container>\r\n                <Card>\r\n                    <CardHeader className=\"menuCourseHeader\">\r\n                        <Nav variant=\"pills\">\r\n                            <Nav.Item>\r\n                                <Nav.Link\r\n                                    onClick={() => this.menuToggle(\"lessons\")}\r\n                                    className=\"nav-link\"\r\n                                    eventKey=\"lessons\">\r\n                                    УРОКИ\r\n                                </Nav.Link>\r\n                            </Nav.Item>\r\n                            <Nav.Item>\r\n                                <Nav.Link\r\n                                    onClick={() => this.menuToggle(\"wordsOfADay\")}\r\n                                    className=\"nav-link\"\r\n                                    eventKey=\"wordsOfADay\">\r\n                                    СЛОВА ДНЯ\r\n                                </Nav.Link>\r\n                            </Nav.Item>\r\n                            <Nav.Item>\r\n                                <Nav.Link\r\n                                    onClick={() => this.menuToggle(\"participants\")}\r\n                                    className=\"nav-link\"\r\n                                    eventKey=\"participants\">\r\n                                    УЧАСТНИКИ\r\n                                </Nav.Link>\r\n                            </Nav.Item>\r\n                        </Nav>\r\n                    </CardHeader>\r\n                </Card>\r\n                {this.renderCourseContent()}\r\n            </Tab.Container>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let courseChoosen = this.props.store.courseStore.choosenCourse.id !== undefined;\r\n        return(\r\n            <>\r\n                {courseChoosen && this.renderCourseMenu()}\r\n                {!courseChoosen && <Alert>Выберите курс</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    menuToggle(turnOn: string) {\r\n        this.lessonsActive = false;\r\n        this.wordsOfADay = false;\r\n        this.participants = false;\r\n        if(turnOn === \"lessons\") {\r\n            this.lessonsActive = true;\r\n        } else if(turnOn === \"wordsOfADay\") {\r\n            this.wordsOfADay = true;\r\n        } else if(turnOn === \"participants\") {\r\n            this.participants = true;\r\n        }\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Courses\\AddNewCourse.tsx",["842","843","844"],"﻿import React, { Component } from \"react\";\r\nimport CourseStore from \"../../../stores/CourseStore\";\r\nimport { Alert, Button, Modal, ModalBody, ModalFooter, ModalHeader, Label, Input } from \"reactstrap\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nclass IAddNewCourseProps {\r\n    courseStore: CourseStore;\r\n}\r\n\r\n@observer\r\nexport class AddNewCourse extends Component<IAddNewCourseProps> {\r\n    addNewCourse: boolean = false;\r\n    id: number = 0;\r\n    name: string = \"\";\r\n    description: string = \"\";\r\n    notSaved: boolean = false;\r\n    saved: boolean = false;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addNewCourse: observable,\r\n            id: observable,\r\n            name: observable,\r\n            description: observable,\r\n            notSaved: observable,\r\n            saved: observable\r\n        });\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <>\r\n                <Button outline color=\"primary\" onClick={() => this.addNewCourseToggle()}>\r\n                    Добавить курс\r\n                </Button>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderCourseNameInput() {\r\n        return(\r\n            <>\r\n                <Label>\r\n                    Введите название курса\r\n                </Label>\r\n                <Input\r\n                    style={{width: \"70%\"}}\r\n                    onChange={(e) => this.inputName(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderDescriptionInput() {\r\n        return(\r\n            <>\r\n                <Label>Введите описание курса</Label>\r\n                <Input\r\n                    style={{width: \"70%\"}}\r\n                    onChange={(e) => this.inputDescription(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderSaveButton() {\r\n        return(\r\n            <Button\r\n                style={{width: \"80%\", marginBottom: \"10px\"}}\r\n                outline color=\"success\"\r\n                onClick={() => this.addCourse()}>\r\n                Сохранить курс\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderWarnings() {\r\n        return (\r\n            <>\r\n                {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и курс не сохранилось</Alert>}\r\n                {this.saved && <Alert color=\"success\">Всё удачно сохранилось</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderBody() {\r\n        return(\r\n            <>\r\n                <ModalBody>\r\n                    {this.renderWarnings()}\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderCourseNameInput()}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderDescriptionInput()}\r\n                    </div>\r\n                </ModalBody>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderSaveButton()}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderCancelButton() {\r\n        return(\r\n            <Button\r\n                color=\"primary\"\r\n                onClick={() => this.addNewCourseToggle()}>\r\n                ОТМЕНИТЬ\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderAddNewCourseWindow() {\r\n        return(\r\n            <Modal\r\n                centered={true}\r\n                size=\"lg\"\r\n                isOpen={this.addNewCourse}\r\n                toggle={() => this.addNewCourseToggle()}\r\n            >\r\n                <i style={{marginLeft: '96%', width: '2%'}}\r\n                   onClick={() => this.addNewCourseToggle()}\r\n                   className=\"fa fa-window-close\" aria-hidden=\"true\"/>\r\n                <div className=\"row justify-content-center\">\r\n                    СОЗДАНИЕ НОВОГО КУРСА\r\n                </div>\r\n                {this.renderBody()}\r\n                {this.renderCancelButton()}\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {!this.addNewCourse && this.renderButton()}\r\n                {this.addNewCourse && this.renderAddNewCourseWindow()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    @action\r\n    addNewCourseToggle() {\r\n        this.addNewCourse = !this.addNewCourse;\r\n        this.initialState();\r\n    }\r\n\r\n    initialState() {\r\n        this.notSaved = false;\r\n        this.saved = false;\r\n    }\r\n\r\n    addCourse() {\r\n        this.props.courseStore\r\n            .addOrUpdateCourse(this.id, this.name, this.description)\r\n            .then((status) => {\r\n                this.notSaved = status !== 200;\r\n                this.saved = status === 200;\r\n        });\r\n    }\r\n\r\n    inputName(event: React.FormEvent<HTMLInputElement>) {\r\n        this.name = event.currentTarget.value;\r\n    }\r\n\r\n    inputDescription(event: React.FormEvent<HTMLInputElement>) {\r\n        this.description = event.currentTarget.value;\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\LessonsMenu.tsx",["845","846"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { LessonViewModel } from \"../../../Typings/viewModels/LessonViewModel\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Tab, Nav } from \"react-bootstrap\";\r\nimport { Alert, Button, Col, Collapse, Row } from \"reactstrap\";\r\nimport { renderSpinner } from \"../../../functions/renderSpinner\";\r\nimport { AddOrUpdateNewLesson } from \"./AddOrUpdateNewLesson\";\r\nimport { LessonPage } from \"./LessonPage\";\r\n\r\nclass ILessonsMenuProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nexport class LessonsMenu extends Component<ILessonsMenuProps> {\r\n    editLesson: boolean = false;\r\n    lessonToEdit: LessonViewModel = new LessonViewModel();\r\n    notDeleted: boolean = false;\r\n    deleted: boolean = false;\r\n    isNavOpen: boolean = true;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            editLesson: observable,\r\n            lessonToEdit: observable,\r\n            notDeleted: observable,\r\n            deleted: observable,\r\n            isNavOpen: observable,\r\n        });\r\n    }\r\n\r\n    toggleNav() {\r\n        this.isNavOpen = !this.isNavOpen;\r\n    }\r\n\r\n    editToggle = () => {\r\n        this.editLesson = !this.editLesson;\r\n    };\r\n\r\n    editLessonToggle(lesson: LessonViewModel) {\r\n        this.editLesson = true;\r\n        this.lessonToEdit = lesson;\r\n    }\r\n\r\n    lessonToggle(lesson: LessonViewModel) {\r\n        this.props.store.lessonStore.setChoosenLesson(lesson);\r\n        this.props.store.taskStore.getTasksByLesson(lesson.id);\r\n    }\r\n\r\n    renderLessonsMenu(lessons: LessonViewModel[]) {\r\n        return(\r\n            <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\r\n                {this.notDeleted && <Alert color=\"danger\">Что-то пошло не так и урок не удалился</Alert>}\r\n                <Row>\r\n                    <Col sm={2}>\r\n                        <Button color=\"primary\" onClick={() => this.toggleNav()}>УРОКИ</Button>\r\n                        <Collapse isOpen={this.isNavOpen}>\r\n                            <Nav variant=\"pills\" className=\"flex-column\">\r\n                                {lessons.map((lesson) => {\r\n                                    // @ts-ignore\r\n                                    let isDisabled = new Date() < Date.parse(lesson.expireDate)  && new Date() > Date.parse(lesson.startDate);\r\n                                    return (\r\n                                        <>\r\n                                            <Nav.Item key={lesson.id}>\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col-8\">\r\n                                                        <Nav.Link\r\n                                                             eventKey={lesson.id}\r\n                                                             className=\"nav-link lesson\"\r\n                                                             onClick={() => this.lessonToggle(lesson)}>\r\n                                                            {lesson.name}\r\n                                                        </Nav.Link>\r\n                                                    </div>\r\n                                                    <div className=\"col-4\">\r\n                                                        <i className=\"fa fa-window-close\"\r\n                                                           aria-hidden=\"true\"\r\n                                                           onClick={() => this.deleteLesson(lesson.id)}/>\r\n                                                        <i className=\"fa fa-edit\"\r\n                                                           aria-hidden=\"true\"\r\n                                                           onClick={() => this.editLessonToggle(lesson)}/>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </Nav.Item>\r\n                                        </>\r\n                                    );\r\n                                })}\r\n                            </Nav>\r\n                        </Collapse>\r\n                        <AddOrUpdateNewLesson store={this.props.store} edit={false} lessonToEdit={undefined} cancelEdit={undefined}/>\r\n                    </Col>\r\n                    <Col sm={10}>\r\n                        {this.renderLessonPage()}\r\n                    </Col>\r\n                    {this.editLesson && <AddOrUpdateNewLesson store={this.props.store} edit={true} lessonToEdit={this.lessonToEdit} cancelEdit={this.editToggle}/>}\r\n                </Row>\r\n            </Tab.Container>\r\n        );\r\n    }\r\n\r\n    renderLessonPage() {\r\n        let lessonChoosen = this.props.store.lessonStore.choosenLesson !== undefined;\r\n        return(\r\n            <>\r\n                {lessonChoosen && <LessonPage store={this.props.store}/>}\r\n                {!lessonChoosen && <Alert color=\"success\">Выберите или добавьте урок:)</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let lessons = this.props.store.lessonStore.lessonsByChoosenCourse;\r\n        return(\r\n            <>\r\n                {lessons !== undefined && this.renderLessonsMenu(lessons)}\r\n                {lessons === undefined && renderSpinner()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    deleteLesson(lessonId: number) {\r\n        let result = window.confirm('Вы уверены, что хотите удалить этот урок?');\r\n        if(result) {\r\n            this.props.store.lessonStore.deleteLesson(lessonId, this.props.store.courseStore.choosenCourse.id)\r\n                .then((status) => {\r\n                    this.notDeleted = status !== 200;\r\n                    this.deleted = status === 200;\r\n            });\r\n        }\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\LessonPage.tsx",["847"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { Tab, Nav } from \"react-bootstrap\";\r\nimport { Card, CardHeader } from \"reactstrap\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { Lesson } from \"../../Common/Lesson/Lesson\";\r\nimport HomeworkPage from \"../Homework/HomeworkPage\";\r\nimport { CompletedHomeworkPage } from \"../CompletedHomework/CompletedHomeworkPage\";\r\n\r\nclass ILessonPageProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nexport class LessonPage extends Component<ILessonPageProps> {\r\n    lessonActive: boolean;\r\n    homeworkActive: boolean;\r\n    completedHomeworkActive: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            lessonActive: observable,\r\n            homeworkActive: observable,\r\n            completedHomeworkActive: observable,\r\n        });\r\n    }\r\n\r\n    renderLessonMenu() {\r\n        return(\r\n            <Tab.Container>\r\n                <Card>\r\n                    <CardHeader className=\"menuHeader\">\r\n                        <Nav variant=\"pills\">\r\n                            <Nav.Item>\r\n                                <Nav.Link\r\n                                     className=\"nav-link\"\r\n                                     eventKey=\"lesson\"\r\n                                     onClick={() => this.toggleMenu(\"lesson\")}>\r\n                                    УРОК\r\n                                </Nav.Link>\r\n                            </Nav.Item>\r\n                            <Nav.Item>\r\n                                <Nav.Link\r\n                                     className=\"nav-link\"\r\n                                     eventKey=\"homework\"\r\n                                     onClick={() => this.toggleMenu(\"homework\")}>\r\n                                    ДОМАШНЯЯ РАБОТА\r\n                                </Nav.Link>\r\n                            </Nav.Item>\r\n                            <Nav.Item>\r\n                                <Nav.Link\r\n                                     className=\"nav-link\"\r\n                                     eventKey=\"completedHomework\"\r\n                                     onClick={() => this.toggleMenu(\"completedHomework\")}>\r\n                                    ВЫПОЛНЕННЫЕ ДОМАШНИЕ РАБОТЫ\r\n                                </Nav.Link>\r\n                            </Nav.Item>\r\n                        </Nav>\r\n                    </CardHeader>\r\n                    {this.lessonActive && <Lesson store={this.props.store}/>}\r\n                    {this.homeworkActive && <HomeworkPage store={this.props.store}/>}\r\n                    {this.completedHomeworkActive && <CompletedHomeworkPage store={this.props.store}/>}\r\n                </Card>\r\n            </Tab.Container>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderLessonMenu()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    toggleMenu(turnOn: string) {\r\n        this.lessonActive = false;\r\n        this.homeworkActive = false;\r\n        this.completedHomeworkActive = false;\r\n        if(turnOn === \"lesson\") {\r\n            this.lessonActive = true;\r\n        } else if (turnOn === \"homework\") {\r\n            this.homeworkActive = true;\r\n        } else if (turnOn === \"completedHomework\") {\r\n            this.completedHomeworkActive = true;\r\n        }\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\CompletedHomeworkPage.tsx",["848"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { Accordion } from \"react-bootstrap\";\r\nimport UserHomework from \"./UserHomework\";\r\n\r\nclass ICompletedHomeworkPageProps {\r\n    store: RootStore;\r\n}\r\n\r\n\r\nexport class CompletedHomeworkPage extends Component<ICompletedHomeworkPageProps> {\r\n    renderUsers() {\r\n        let users = this.props.store.courseStore.usersByCourse;\r\n        return(\r\n            <Accordion defaultActiveKey=\"0\">\r\n                {users.map((user) => {\r\n                    return <UserHomework userId={user.userId} store={this.props.store}/>\r\n                })}\r\n            </Accordion>\r\n        );\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Homework\\HomeworkPage.tsx",["849","850"],"﻿import React, {Component} from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { TaskViewModel } from \"../../../Typings/viewModels/TaskViewModel\";\r\nimport { renderSpinner } from \"../../../functions/renderSpinner\";\r\nimport TaskUpload from \"../Tasks/TaskUpload\";\r\nimport { Task } from \"../../Common/Tasks/Task\";\r\nimport { Alert } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport { toJS } from \"mobx\";\r\n\r\nclass IHomeworkPageProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass HomeworkPage extends Component<IHomeworkPageProps> {\r\n    renderTasks(tasks: TaskViewModel[]) {\r\n        return (\r\n            <>\r\n                {tasks.map((task) => {\r\n                    return(\r\n                        <Task store={this.props.store} task={task}  userId={this.props.store.userStore.currentUser.id} key={task.id}/>\r\n                    );\r\n                })}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let tasks = this.props.store.taskStore.tasksByChoosenLesson;\r\n        return(\r\n            <>\r\n                {tasks === undefined && renderSpinner()}\r\n                {tasks.length === 0 && <Alert style={{marginTop: \"10px\"}} color=\"primary\">Пока нет домашнего задания для этого урока</Alert>}\r\n                {(tasks !== undefined && tasks.length > 0) && this.renderTasks(tasks)}\r\n                <TaskUpload store={this.props.store}/>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomeworkPage;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Lesson\\Lesson.tsx",["851"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { UserRole } from \"../../../Typings/enums/UserRole\";\r\nimport { Content } from \"./Content\";\r\nimport { ContentUpload } from \"../../Admin/Lessons/ContentUpload\";\r\nimport { Label } from \"reactstrap\";\r\n\r\nclass ILessonProps {\r\n    store: RootStore;\r\n}\r\n\r\nexport class Lesson extends Component<ILessonProps> {\r\n    renderContentUpload() {\r\n        let role = this.props.store.userStore.currentUser.role;\r\n        if(role === UserRole.Admin) {\r\n            return(\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-lg-12 col-sm-12\">\r\n                        <ContentUpload lessonStore={this.props.store.lessonStore} courseId={this.props.store.courseStore.choosenCourse.id}/>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderLessonDescription() {\r\n        return(\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-lg-12 col-sm-12\">\r\n                    <Label>{this.props.store.lessonStore.choosenLesson.description}</Label>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\">\r\n                {this.renderLessonDescription()}\r\n                <Content lessonStore={this.props.store.lessonStore} courseId={this.props.store.courseStore.choosenCourse.id}/>\r\n                {this.renderContentUpload()}\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\AddOrUpdateNewLesson.tsx",["852","853","854"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { LessonViewModel } from \"../../../Typings/viewModels/LessonViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Alert, Button, Modal, ModalBody, ModalFooter, ModalHeader, Label, Input } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport Calendar from \"react-calendar\";\r\n\r\nclass IAddOrUpdateNewLessonProps {\r\n    store: RootStore;\r\n    edit: boolean = false;\r\n    lessonToEdit: LessonViewModel | undefined;\r\n    cancelEdit: any | undefined;\r\n}\r\n\r\n@observer\r\nexport class AddOrUpdateNewLesson extends Component<IAddOrUpdateNewLessonProps> {\r\n    addOrUpdateNewLesson: boolean;\r\n    id: number = 0;\r\n    order: number = 0;\r\n    description: string = \"\";\r\n    startDate: Date | Date[] = new Date();\r\n    expireDate: Date | Date[] = new Date();\r\n    notSaved: boolean = false;\r\n    saved: boolean = false;\r\n    name: string = \"\";\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addOrUpdateNewLesson: observable,\r\n            id: observable,\r\n            order: observable,\r\n            description: observable,\r\n            startDate: observable,\r\n            expireDate: observable,\r\n            notSaved: observable,\r\n            saved: observable,\r\n            name: observable,\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if(this.props.edit) {\r\n            this.fillData()\r\n        } else {\r\n            this.order = this.props.store.lessonStore.lessonsByChoosenCourse.length + 1;\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<IAddOrUpdateNewLessonProps>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        if (prevProps.lessonToEdit !== this.props.lessonToEdit) {\r\n            this.fillData()\r\n        }\r\n    }\r\n\r\n    fillData() {\r\n        let lessonToEdit = this.props.lessonToEdit;\r\n        if(lessonToEdit !== undefined) {\r\n            this.id = lessonToEdit.id;\r\n            this.order = lessonToEdit.order;\r\n            this.description = lessonToEdit.description;\r\n            this.startDate = lessonToEdit.startDate;\r\n            this.expireDate = lessonToEdit.expireDate;\r\n            this.name = lessonToEdit.name;\r\n        }\r\n        this.addOrUpdateNewLesson = true;\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <Button outline color=\"primary\" onClick={() => this.addOrUpdateNewLessonToggle()}>\r\n                Добавить урок\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderLessonDescription() {\r\n        return(\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">\r\n                    Введите описание урока\r\n                </Label>\r\n                <Input\r\n                    style={{width: \"70%\"}}\r\n                    value={this.description}\r\n                    onChange={(e) => this.inputDescription(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderNameDescription() {\r\n        return(\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">\r\n                    Введите название урока\r\n                </Label>\r\n                <Input\r\n                    style={{width: \"70%\"}}\r\n                    value={this.name}\r\n                    onChange={(e) => this.inputName(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderOrderInput() {\r\n        return(\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">Напишите номер урока(в каком порядке он должен идти)</Label>\r\n                <Input\r\n                    style={{width: \"70%\"}}\r\n                    value={this.order}\r\n                    onChange={(e) => this.inputOrder(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderStartDateInput() {\r\n        const startDate = typeof this.startDate === \"string\" ? new Date(this.startDate) : this.startDate;\r\n        return(\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">Выберите дату начала доступа урока</Label>\r\n                <Calendar\r\n                    value={startDate}\r\n                    onChange={(date) => this.inputDate(date, \"startDate\")}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderEndDateInput() {\r\n        const expireDate = typeof this.expireDate === \"string\" ? new Date(this.expireDate) : this.expireDate;\r\n        return(\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">Выберите дату окончания доступа урока</Label>\r\n                <Calendar\r\n                    value={expireDate}\r\n                    onChange={(date) => this.inputDate(date, \"expireDate\")}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderSaveLessonButton() {\r\n        return (\r\n            <Button\r\n                outline color=\"success\"\r\n                style={{width: \"80%\", marginBottom: \"10px\"}}\r\n                onClick={() => this.addOrUpdateLesson()}>\r\n                Сохранить урок\r\n            </Button>\r\n        );\r\n    }\r\n \r\n    renderBody() {\r\n        return(\r\n            <>\r\n                <ModalBody>\r\n                    {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и урок не сохранился</Alert>}\r\n                    {this.saved && <Alert color=\"success\">Урок успешно сохранился!</Alert>}\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderNameDescription()}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderLessonDescription()}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderOrderInput()}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-6\">\r\n                            {this.renderStartDateInput()}\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            {this.renderEndDateInput()}\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderSaveLessonButton()}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderCancelButton() {\r\n        return(\r\n            <Button\r\n                color=\"primary\"\r\n                onClick={() => this.addOrUpdateNewLessonToggle()}>\r\n                ОТМЕНИТЬ\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderAddOrUpdateNewLessonWindow() {\r\n        return(\r\n            <Modal\r\n                centered={true}\r\n                size=\"lg\"\r\n                isOpen={this.addOrUpdateNewLesson}\r\n                toggle={() => this.addOrUpdateNewLessonToggle()}\r\n            >\r\n                <i style={{marginLeft: '96%', width: '2%'}}\r\n                   onClick={() => this.addOrUpdateNewLessonToggle()}\r\n                   className=\"fa fa-window-close\" aria-hidden=\"true\"/>\r\n            <div className=\"row justify-content-center\">\r\n                УРОК\r\n            </div>\r\n                {this.renderBody()}\r\n                {this.renderCancelButton()}\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.addOrUpdateNewLesson && this.renderAddOrUpdateNewLessonWindow()}\r\n                {!this.addOrUpdateNewLesson && !this.props.edit && this.renderButton()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    addOrUpdateNewLessonToggle() {\r\n        if(this.props.cancelEdit !== undefined) {\r\n            this.props.cancelEdit();\r\n        }\r\n        this.addOrUpdateNewLesson = !this.addOrUpdateNewLesson;\r\n    }\r\n\r\n    addOrUpdateLesson() {\r\n        let courseId = this.props.store.courseStore.choosenCourse.id;\r\n        this.props.store.lessonStore\r\n            .addOrUpdateLesson(this.id, this.order, courseId, this.name, this.description, this.startDate, this.expireDate)\r\n            .then((status) => {\r\n                this.notSaved = status !== 200;\r\n                this.saved = status === 200;\r\n        });\r\n    }\r\n\r\n    inputDescription(event: React.FormEvent<HTMLInputElement>) {\r\n        this.description = event.currentTarget.value;\r\n    }\r\n\r\n    inputOrder(event: React.FormEvent<HTMLInputElement>) {\r\n        this.order = Number(event.currentTarget.value);\r\n    }\r\n\r\n    inputName(event: React.FormEvent<HTMLInputElement>) {\r\n        this.name = event.currentTarget.value;\r\n    }\r\n\r\n    inputDate(date: Date | Date[], dateType: string) {\r\n        if(dateType === \"startDate\") {\r\n            this.startDate = date;\r\n        } else if(dateType === \"expireDate\") {\r\n            this.expireDate = date;\r\n        }\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\UserHomework.tsx",["855","856"],"﻿import React, { Component } from 'react';\r\nimport { Accordion } from \"react-bootstrap\";\r\nimport { Button, Card, CardHeader, CardBody, Alert } from \"reactstrap\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport CompletedHomework from './CompletedHomework';\r\n\r\nclass IUserHomeworkProps {\r\n    store: RootStore;\r\n    userId: number;\r\n}\r\n\r\n@observer\r\nclass UserHomework extends Component<IUserHomeworkProps> {\r\n    loadHomework: boolean = false;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            loadHomework: observable\r\n        });\r\n    }\r\n\r\n    loadHomeworkToggle() {\r\n        this.loadHomework = !this.loadHomework;\r\n    }\r\n\r\n    render() {\r\n        let user = this.props.store.userStore.users.find(u => u.id === this.props.userId);\r\n        return(\r\n            <>\r\n                {user !== undefined && <Card>\r\n                    <CardHeader style={{backgroundColor: 'white'}}>\r\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey={user.id.toString()} onClick={() => this.loadHomeworkToggle()}>\r\n                            <span>{user.firstName + ' ' + user.lastName}</span>\r\n                        </Accordion.Toggle>\r\n                    </CardHeader>\r\n                    <Accordion.Collapse eventKey={user.id.toString()}>\r\n                        <CardBody>\r\n                            {this.loadHomework && <CompletedHomework userId={user.id} store={this.props.store} />}\r\n                        </CardBody>\r\n                    </Accordion.Collapse>\r\n                </Card>}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserHomework;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Lesson\\Content.tsx",["857"],"﻿import React, { Component } from 'react';\r\nimport LessonStore from \"../../../stores/LessonStore\";\r\nimport { LessonMaterialViewModel } from \"../../../Typings/viewModels/LessonMaterialViewModel\";\r\nimport { Material } from \"./Material\";\r\nimport { renderSpinner } from \"../../../functions/renderSpinner\";\r\nimport { Alert } from \"reactstrap\";\r\n\r\nclass IContentProps {\r\n    lessonStore: LessonStore;\r\n    courseId: number;\r\n}\r\n\r\nexport class Content extends Component<IContentProps> {\r\n    renderMaterials(materials: LessonMaterialViewModel[]) {\r\n        return(\r\n            <>\r\n                {materials.map((material) => {\r\n                    return(\r\n                        <Material key={material.id} material={material} lessonStore={this.props.lessonStore} />\r\n                    );\r\n                })}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let materials = this.props.lessonStore.materialsByChoosenLesson;\r\n        return(\r\n            <>\r\n                {materials !== undefined && materials.length > 0 && this.renderMaterials(materials)}\r\n                {materials === undefined && renderSpinner()}\r\n                {materials.length === 0 && <Alert color=\"primary\">Пока нет материалов для данного урока:(</Alert>}\r\n            </>\r\n        );\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\ContentUpload.tsx",["858"],"﻿import React, { Component } from 'react';\r\nimport LessonStore from \"../../../stores/LessonStore\";\r\nimport { Alert, Button } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport {renderSpinner} from \"../../../functions/renderSpinner\";\r\n\r\nclass IContentProps {\r\n    lessonStore: LessonStore;\r\n    courseId: number;\r\n}\r\n\r\n@observer\r\nexport class ContentUpload extends Component<IContentProps> {\r\n    file: File;\r\n    notLoaded: boolean = false;\r\n    loaded: boolean = false;\r\n    loading: boolean = false;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            file: observable,\r\n            notLoaded: observable,\r\n            loaded: observable,\r\n            loading: observable\r\n        });\r\n    }\r\n\r\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        event.preventDefault();\r\n        let reader = new FileReader();\r\n        // @ts-ignore\r\n        let file = event.target.files[0];\r\n        reader.onloadend = () => {\r\n            this.file = file;\r\n        };\r\n        reader.readAsDataURL(file)\r\n    }\r\n\r\n    renderCautions() {\r\n        return(\r\n            <>\r\n                {this.loading && renderSpinner()}\r\n                {this.notLoaded && <Alert color=\"danger\">Не удалось загрузить материал:(</Alert>}\r\n                {this.loaded && <Alert color=\"success\">Материал урока успешно сохранился!</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                \r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-lg-8 col-md-8 col-sm-12 col-xs-12\">\r\n                        <input className=\"fileInput\"\r\n                            type=\"file\"\r\n                            onChange={(e) => this.handleChange(e)} />\r\n                    </div>\r\n                    <div className=\"col-lg-4 col-md-4 col-sm-12 col-xs-12\">\r\n                        <Button outline color=\"primary\"\r\n                             type=\"submit\"\r\n                             onClick={(e) => this.addOrUpdateMaterial(e)}>\r\n                            <i className=\"fa fa-plus\" aria-hidden=\"true\"/>\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    addOrUpdateMaterial(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\r\n        event.preventDefault();\r\n        this.loading = true;\r\n        this.props.lessonStore.addOrUpdateMaterial(this.file)\r\n            .then((status) => {\r\n                this.notLoaded = status !== 200;\r\n                this.loading = false;\r\n                this.loaded = status === 200;\r\n        });\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\TaskUpload.tsx",["859","860"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { Button, Modal, ModalBody, ModalHeader } from \"reactstrap\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { TaskTypeTranslater } from \"../../../consts/TaskTypeTranslater\";\r\nimport { TaskType } from \"../../../Typings/enums/TaskType\";\r\nimport { observer } from \"mobx-react\";\r\nimport { TaskReadModel } from \"../../../Typings/readModels/TaskReadModel\";\r\nimport TaskUploadWindow from \"./TaskUploadWindow\";\r\n\r\nclass ITaskUploadProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass TaskUpload extends Component<ITaskUploadProps> {\r\n    taskUploadWindowOpen: boolean = false;\r\n    taskType: TaskType;\r\n    showMenu: boolean = false;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            taskUploadWindowOpen: observable,\r\n            taskType: observable,\r\n            showMenu: observable,\r\n        });\r\n    }\r\n\r\n    modalToggle(taskType: TaskType) {\r\n        this.taskType = taskType;\r\n        this.showMenu = false;\r\n    }\r\n\r\n    renderMenu() {\r\n        return(\r\n            <ModalBody>\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row justify-content-center\">\r\n                        {TaskTypeTranslater.map(type => {\r\n                            return (\r\n                                <div className=\"col-6 align-items-center\" style={{marginTop: \"5px\"}}>\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <Button className=\"modalButton\" outline color=\"secondary\"\r\n                                                onClick={() => this.modalToggle(type.type)}>\r\n                                            {type.russian}\r\n                                        </Button>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </ModalBody>\r\n        );\r\n    }\r\n\r\n    renderBody() {\r\n        return(\r\n            <>\r\n                {this.showMenu && this.renderMenu()}\r\n                {!this.showMenu && this.renderTaskUploadWindowByType()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderTaskUploadWindowByType() {\r\n        let task = new TaskReadModel();\r\n        task.taskType = this.taskType;\r\n       return(\r\n           <TaskUploadWindow store={this.props.store.taskStore} lessonId={this.props.store.lessonStore.choosenLesson.id} toggle={this.toggleTaskUploadWindow} task={task} />\r\n       );\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <div className=\"row justify-content-center\">\r\n                <Button className=\"addTask\"\r\n                        onClick={() => this.toggleTaskUploadWindow()}\r\n                        outline color=\"secondary\">\r\n                    <span className=\"addTaskText\">ДОБАВИТЬ УПРАЖНЕНИЕ</span>\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderTaskUploadWindow() {\r\n        return (\r\n            <Modal\r\n                centered={true}\r\n                size=\"lg\"\r\n                isOpen={this.taskUploadWindowOpen}\r\n                toggle={() => this.toggleTaskUploadWindow()}\r\n            >\r\n                <div className=\"row justify-content-center\">\r\n                    СОЗДАТЬ НОВОЕ УПРАЖНЕНИЕ\r\n                </div>\r\n                {this.renderBody()}\r\n                <Button\r\n                    color=\"primary\"\r\n                    onClick={() => this.toggleTaskUploadWindow()}>\r\n                    СКРЫТЬ УПРАЖНЕНИЯ\r\n                </Button>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\">\r\n                {this.renderButton()}\r\n                {this.renderTaskUploadWindow()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    toggleTaskUploadWindow = () => {\r\n        this.taskUploadWindowOpen = !this.taskUploadWindowOpen;\r\n        this.showMenu = true;\r\n    }\r\n}\r\n\r\nexport default TaskUpload;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\Task.tsx",["861","862"],"﻿import React, {Component} from 'react';\r\nimport {TaskViewModel} from \"../../../Typings/viewModels/TaskViewModel\";\r\nimport {Alert, Button, Card, CardBody, CardTitle} from 'reactstrap';\r\nimport {UserRole} from \"../../../Typings/enums/UserRole\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport {observer} from \"mobx-react\";\r\nimport {SubtaskViewModel} from \"../../../Typings/viewModels/SubtaskViewModel\";\r\nimport {SubtaskType} from \"../../../Typings/enums/SubtaskType\";\r\nimport {DetailedAnswerSubtask} from \"./DetailedAnswerSubtask\";\r\nimport {TaskEdit} from \"../../Admin/Tasks/TaskEdit\";\r\nimport {FillGapsSubtask} from \"./FillGapsSubtask\";\r\nimport {LoadAudioSubtask} from \"./LoadAudioSubtask\";\r\nimport {RightVerbFormSubtask} from \"./RightVerbFormSubtask\";\r\nimport {LoadFileSubtask} from \"./LoadFileSubtask\";\r\nimport {UserTaskViewModel} from \"../../../Typings/viewModels/UserTaskViewModel\";\r\nimport {UserSubtaskViewModel} from \"../../../Typings/viewModels/UserSubtaskViewModel\";\r\nimport AddSubtask from \"../../Admin/Tasks/AddSubtask\";\r\n\r\nclass ITaskProps {\r\n    store: RootStore;\r\n    task: TaskViewModel;\r\n    userId: number;\r\n}\r\n\r\n@observer\r\nexport class Task extends Component<ITaskProps> {\r\n    notDeleted: boolean;\r\n    editTaskWindowOpen: boolean;\r\n    addSubtask: boolean;\r\n    userTask: UserTaskViewModel = new UserTaskViewModel();\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            notDeleted: observable,\r\n            editTaskWindowOpen: observable,\r\n            addSubtask: observable,\r\n        });\r\n    }\r\n\r\n    addSubtaskToggle = () => {\r\n        this.addSubtask = !this.addSubtask;\r\n    }\r\n\r\n    renderControlButtons() {\r\n        let role = this.props.store.userStore.currentUser.role;\r\n        if(role === UserRole.Admin) {\r\n            return(\r\n            <>\r\n                <i style={{marginLeft: '98%', width: '2%'}}\r\n                   onClick={() => this.deleteTask()}\r\n                   className=\"fa fa-window-close\" aria-hidden=\"true\"/>\r\n                <i style={{marginLeft: '98%', width: '2%'}}\r\n                    onClick={() => this.editTaskToggle()}\r\n                    className=\"fa fa-edit\" aria-hidden=\"true\"/>\r\n            </>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderAddSubtaskButton() {\r\n        let role = this.props.store.userStore.currentUser.role;\r\n        if(role === UserRole.Admin) {\r\n            return(\r\n                <Button className=\"addTask\"\r\n                     onClick={() => this.addSubtaskToggle()}\r\n                     outline color=\"secondary\">\r\n                    <span className=\"addTaskText\">\r\n                        {!this.addSubtask ? 'ДОБАВИТЬ ПОДЗАДАНИЕ' : 'ОТМЕНИТЬ'}\r\n                    </span>\r\n                </Button>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderAddSubtask() {\r\n        let role = this.props.store.userStore.currentUser.role;\r\n        if(role === UserRole.Admin) {\r\n            let order = this.props.task.subtasks.length;\r\n            let taskId = this.props.task.id;\r\n            if(this.addSubtask) {\r\n                return(\r\n                    <div className=\"row justify-content-center\" style={{border: \"1px solid black\"}}>\r\n                        {this.addSubtask && <AddSubtask order={order} taskId={taskId} taskStore={this.props.store.taskStore} toggle={this.addSubtaskToggle}/>}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    renderInstruction(task: TaskViewModel) {\r\n        return(\r\n            <CardTitle className=\"text-center\" dangerouslySetInnerHTML={{__html: task.instruction}}/>\r\n        );\r\n    }\r\n\r\n    renderText(task: TaskViewModel) {\r\n        if(task.text !== undefined && task.text !== \"\") {\r\n            return(\r\n                <CardTitle className=\"text-center\" dangerouslySetInnerHTML={{__html: task.text}}/>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderTask(task: TaskViewModel) {\r\n        return(\r\n            <Card style={{width: '100%'}}>\r\n                {this.renderControlButtons()}\r\n                {this.renderInstruction(task)}\r\n                {this.renderText(task)}\r\n                <CardBody style={{marginLeft: '5%'}}>\r\n                    {this.renderSubtasks(task.subtasks)}\r\n                </CardBody>\r\n                {this.renderAddSubtask()}\r\n            </Card>\r\n        )\r\n    }\r\n\r\n    renderSubtasks(subtasks: SubtaskViewModel[]) {\r\n       return(\r\n           <>\r\n               {subtasks.map((subtask, i) => {\r\n                   return(\r\n                       <>{this.renderSubtask(subtask, i)}</>\r\n                   );\r\n               })}\r\n               {this.renderAddSubtaskButton()}\r\n           </>\r\n       );\r\n    }\r\n\r\n    renderSubtask(subtask: SubtaskViewModel, order: number) {\r\n        let userId = this.props.userId;\r\n        let userSubtask = this.userTask.userSubtasks.find(u => u.subtaskId === subtask.id);\r\n        let taskId = this.props.task.id;\r\n        if(userSubtask === undefined) {\r\n            userSubtask = new UserSubtaskViewModel();\r\n        }\r\n        if(subtask.subtaskType === SubtaskType.DetailedAnswer) {\r\n            return(\r\n                <DetailedAnswerSubtask subtask={subtask} store={this.props.store} userId={userId} userSubtask={userSubtask} taskId={taskId} key={subtask.id} order={order} />\r\n            );\r\n        } else if(subtask.subtaskType === SubtaskType.FillGaps) {\r\n            return(\r\n                <FillGapsSubtask subtask={subtask} store={this.props.store} userId={userId} userSubtask={userSubtask} taskId={taskId} key={subtask.id} order={order} />\r\n            );\r\n        } /*else if(subtask.subtaskType === SubtaskType.InsertWordsIntoGaps) {\r\n            return(\r\n                <InsertWordsIntoGapsSubtask subtask={subtask} store={this.props.store} userSubtask={userSubtask} />\r\n            );\r\n        }*/ else if(subtask.subtaskType === SubtaskType.LoadAudio) {\r\n            return(\r\n                <LoadAudioSubtask subtask={subtask} store={this.props.store} userId={userId} userSubtask={userSubtask} taskId={taskId} key={subtask.id} order={order} />\r\n            );\r\n        } else if(subtask.subtaskType === SubtaskType.RightVerbForm) {\r\n            return(\r\n                <RightVerbFormSubtask subtask={subtask} store={this.props.store} userId={userId} userSubtask={userSubtask} taskId={taskId} key={subtask.id} order={order} />\r\n            );\r\n        } else if(subtask.subtaskType === SubtaskType.LoadFile) {\r\n            return(\r\n                <LoadFileSubtask subtask={subtask} store={this.props.store} userId={userId} userSubtask={userSubtask} taskId={taskId} key={subtask.id} order={order} />\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let task = this.props.task;\r\n        return(\r\n            <>\r\n                {this.renderTask(task)}\r\n                {this.notDeleted &&  <Alert className=\"alertSaved\" color=\"danger\">Что-то пошло не так, задание не удалилось:(</Alert>}\r\n                {this.editTaskWindowOpen && <TaskEdit task={task} taskStore={this.props.store.taskStore} toggle={this.editTaskToggle} lessonId={this.props.store.lessonStore.choosenLesson.id}/>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    deleteTask() {\r\n        let result = window.confirm('Вы уверены, что хотите удалить ВСЁ задание?');\r\n        if(result) {\r\n            this.props.store.taskStore\r\n                .deleteTask(this.props.task.id, this.props.store.lessonStore.choosenLesson.id)\r\n                    .then((status) => {\r\n                        this.notDeleted = status !== 200;\r\n                    });\r\n            }\r\n    }\r\n\r\n    editTaskToggle() {\r\n        this.editTaskWindowOpen = !this.editTaskWindowOpen;\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\CompletedHomework.tsx",["863"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport CompletedTask from \"./CompletedTask\";\r\nimport { TaskViewModel } from \"../../../Typings/viewModels/TaskViewModel\";\r\n\r\nclass ICompletedHomeworkProps {\r\n    store: RootStore;\r\n    userId: number;\r\n}\r\n\r\n@observer\r\nclass CompletedHomework  extends Component<ICompletedHomeworkProps> {\r\n    renderTasks(tasks: TaskViewModel[]) {\r\n        return(\r\n            <div className=\"container-fluid\">\r\n                {tasks.map((task) => {\r\n                    return (\r\n                        <>\r\n                            <div className=\"row\">\r\n                                <CompletedTask task={task} userId={this.props.userId} store={this.props.store}/>\r\n                            </div>\r\n                            <hr />\r\n                        </>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let tasks = this.props.store.taskStore.tasksByChoosenLesson;\r\n        return(\r\n            <>\r\n                {this.renderTasks(tasks)}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CompletedHomework;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\SubtaskType.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserTaskViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Lesson\\Material.tsx",["864","865"],"﻿import React, { Component } from 'react';\r\nimport { LessonMaterialViewModel } from \"../../../Typings/viewModels/LessonMaterialViewModel\";\r\nimport { observer } from \"mobx-react\";\r\nimport  { Alert } from \"reactstrap\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport LessonStore from \"../../../stores/LessonStore\";\r\n\r\nclass IMaterialProps {\r\n    lessonStore: LessonStore;\r\n    material: LessonMaterialViewModel;\r\n}\r\n\r\n@observer\r\nexport class Material extends Component<IMaterialProps> {\r\n    notDeleted: boolean = false;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            notDeleted: observable\r\n        });\r\n    }\r\n\r\n    renderMaterial(material: LessonMaterialViewModel) {\r\n        if(material.path.includes(\"pptx\")) {\r\n            let path = material.path.replace(\"client/build\", \".\");\r\n            /*return (\r\n                <iframe src={path} width='962px' height='565px' frameBorder='0' />\r\n            );*/\r\n        } else {\r\n            return(\r\n                <>\r\n                    {material.id} {material.path} {material.url}\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderMaterial(this.props.material)}\r\n                {this.notDeleted && <Alert color=\"danger\">Что-то пошло не так и материал не удалился</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    delete(materialId: number) {\r\n        let result = window.confirm('Вы уверены, что хотите удалить этот материал урока?');\r\n        if(result) {\r\n            this.props.lessonStore\r\n                .deleteMaterial(materialId)\r\n                .then((status) => {\r\n                    this.notDeleted = status !== 200;\r\n            });\r\n        }\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\TaskReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\TaskUploadWindow.tsx",["866","867","868"],"﻿import React, { Component } from \"react\";\r\nimport { TaskReadModel } from \"../../../Typings/readModels/TaskReadModel\";\r\nimport { Alert, Button, ModalBody, ModalFooter, Input, Label } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport { SubtaskReadModel } from \"../../../Typings/readModels/SubtaskReadModel\";\r\nimport { TagViewModel } from \"../../../Typings/viewModels/TagViewModel\";\r\nimport { IUploadTaskProps } from \"./IUploadTaskProps\";\r\nimport SubtaskUploadWindow from \"./SubtaskUploadWindow\";\r\nimport { getTaskTitle } from \"../../../functions/getTaskTitle\";\r\nimport {subtaskTranspiler} from \"../../../functions/subtaskTranspiler\";\r\nimport {TagReadModel} from \"../../../Typings/readModels/TagReadModel\";\r\nimport {mapToTagReadModel} from \"../../../functions/mapper\";\r\n\r\n@observer\r\nclass TaskUploadWindow extends Component<IUploadTaskProps> {\r\n    task: TaskReadModel = new TaskReadModel();\r\n    subtasks: SubtaskReadModel[] = new Array<SubtaskReadModel>();\r\n    tags: TagReadModel[] = new Array<TagReadModel>();\r\n    notSaved: boolean;\r\n    saved: boolean;\r\n    loaded: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            task: observable,\r\n            notSaved: observable,\r\n            loaded: observable,\r\n            subtasks: observable,\r\n            tags: observable,\r\n            saved: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        let task = this.props.task;\r\n        if(task.subtasks !== undefined) {\r\n            this.subtasks = task.subtasks;\r\n        }\r\n        if(task.tags !== undefined) {\r\n            this.tags = task.tags;\r\n        }\r\n        this.task = task;\r\n        this.loaded = true;\r\n    }\r\n\r\n    updateSubtask = (subtask: SubtaskReadModel, i: number) => {\r\n        this.subtasks[i] = subtask;\r\n    };\r\n\r\n    deleteSubtask = (i: number) => {\r\n        this.subtasks = this.subtasks.filter((s,ind) => ind !== i);\r\n    };\r\n\r\n    renderInputForSubtasks() {\r\n        return(\r\n            <>\r\n                {this.subtasks.map((s, i) => {\r\n                    if(s.order > 0) {\r\n                        \r\n                    } else {\r\n                        s.order = i;\r\n                    }\r\n                    return (\r\n                        <SubtaskUploadWindow key={i} updateSubtask={this.updateSubtask} subtask={s} deleteSubtask={this.deleteSubtask} index={i}/>\r\n                    );\r\n                })}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderTags() {\r\n        let tags = this.props.store.tags;\r\n        if(tags !== undefined && tags.length !== 0) {\r\n            return(\r\n                <div className=\"row justify-content-center\">\r\n                    <Input type=\"select\" name=\"selectMulti\" id=\"exampleSelectMulti\" multiple>\r\n                        {tags.map((tag) => {\r\n                            return(\r\n                                <option key={tag.id} onClick={() => this.addTag(tag)}>\r\n                                    {tag.name}\r\n                                </option>\r\n                            );\r\n                        })}\r\n                    </Input>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderInstructionField() {\r\n        return(\r\n            <div className=\"row justify-content-center\">\r\n                <Label className=\"inputLabel\" align=\"center\">\r\n                    Введите инструкцию к заданию\r\n                </Label>\r\n                <Input\r\n                    style={{width: \"70%\"}}\r\n                    value={this.task.instruction}\r\n                    onChange={(e) => this.inputInstruction(e)}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderTextField() {\r\n        return(\r\n            <></>\r\n        );\r\n    }\r\n\r\n    renderAddSubtaskButton() {\r\n        return(\r\n            <div className=\"row justify-content-center\">\r\n                <Button \r\n                    style={{width: \"70%\", marginTop: \"10px\"}}\r\n                    onClick={() => this.addSubtask()}\r\n                    outline color=\"secondary\">\r\n                    <span className=\"addTaskText\">ДОБАВИТЬ ПОДЗАДАНИЕ</span>\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n \r\n    renderCaution() {\r\n        return(\r\n            <>\r\n                {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и задание не сохранилось</Alert>}\r\n                {this.saved && <Alert color=\"success\">Задание успешно сохранилось</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderSaveButton() {\r\n        return(\r\n            <Button\r\n                outline color=\"success\"\r\n                style={{width: \"70%\", marginBottom: \"5px\"}}\r\n                onClick={() => this.saveTask()}>\r\n                Сохранить упражнение\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderTaskUpdloadWindow() {\r\n        return (\r\n            <>\r\n                <ModalBody>\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row justify-content-center\">\r\n                            {getTaskTitle(this.task.taskType)}\r\n                        </div>\r\n                        {this.renderCaution()}\r\n                        {this.renderInstructionField()}\r\n                        {this.renderTextField()}\r\n                        {this.renderInputForSubtasks()}\r\n                        {this.renderAddSubtaskButton()}\r\n                        {this.renderTags()}\r\n                    </div>\r\n                </ModalBody>\r\n                <div className=\"row justify-content-center\" style={{marginTop: \"10px\"}}>\r\n                    {this.renderSaveButton()}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.loaded && this.renderTaskUpdloadWindow()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    addSubtask() {\r\n        let subtask = new SubtaskReadModel();\r\n        subtask.subtaskType = subtaskTranspiler(this.task.taskType);\r\n        let subtasks = this.subtasks;\r\n        subtasks.push(subtask);\r\n        this.subtasks = subtasks;\r\n    }\r\n\r\n    addTag(tag: TagViewModel) {\r\n        let tagReadModel = mapToTagReadModel(tag);\r\n        this.tags.push(tagReadModel);\r\n    }\r\n    \r\n    inputInstruction(event: React.FormEvent<HTMLInputElement>) {\r\n        this.task.instruction = event.currentTarget.value;\r\n    }\r\n\r\n    saveTask() {\r\n        let task = this.task;\r\n        task.subtasks = this.subtasks;\r\n        task.tags = this.tags;\r\n        this.props.store.addOrUpdateTask(this.task, this.props.lessonId)\r\n            .then((status) => {\r\n                if(status === 200) {\r\n                    this.props.store.getTasksByLesson(this.props.lessonId);\r\n                }\r\n                this.notSaved = status !== 200;\r\n                this.saved = status === 200;\r\n        });\r\n    }\r\n}\r\n\r\nexport default TaskUploadWindow;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\DetailedAnswerSubtask.tsx",["869"],"﻿import React, { Component } from 'react';\r\nimport { Alert, Button, CardImg, CardText } from \"reactstrap\";\r\nimport { ISubtaskProps } from \"./ISubtaskProps\";\r\nimport { SubtaskViewModel } from \"../../../Typings/viewModels/SubtaskViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { UserRole } from \"../../../Typings/enums/UserRole\";\r\nimport { UserSubtaskReadModel } from \"../../../Typings/readModels/UserSubtaskReadModel\";\r\n\r\n@observer\r\nexport class DetailedAnswerSubtask extends Component<ISubtaskProps> {\r\n    notSaved: boolean;\r\n    userAnswer: UserSubtaskReadModel = new UserSubtaskReadModel();\r\n    saved: boolean;\r\n    notDeleted: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            notSaved: observable,\r\n            userAnswer: observable,\r\n            saved: observable,\r\n            notDeleted: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        let userSubtask = this.props.userSubtask;\r\n        this.userAnswer.answer = userSubtask.answer;\r\n        this.userAnswer.status = userSubtask.status;\r\n        this.userAnswer.subtaskId = this.props.subtask.id;\r\n        this.userAnswer.userId = this.props.store.userStore.currentUser.id;\r\n    }\r\n\r\n    renderControlButton() {\r\n        if(this.props.store.userStore.currentUser.role === UserRole.Admin) {\r\n            return(\r\n                <i style={{marginLeft: '98%', width: '2%'}}\r\n                   onClick={() => this.deleteSubtask()}\r\n                   className=\"fa fa-window-close\" aria-hidden=\"true\" />\r\n            );\r\n        }\r\n    }\r\n\r\n    renderSubtaskText(subtask: SubtaskViewModel) {\r\n        return(\r\n            <>\r\n                {subtask.text !== null && <CardText>\r\n                    {subtask.text}\r\n                </CardText>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderImage(subtask: SubtaskViewModel) {\r\n        return (\r\n            <>\r\n                {subtask.path !== null &&\r\n                <CardImg src={subtask.path.replace('ClientApp/build', './')} alt=\"Loading...\"/>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderInputAnswerArea() {\r\n        return(\r\n            <div className=\"col-12\">\r\n                <textarea\r\n                    value={this.userAnswer.answer}\r\n                    className=\"answerInput\"\r\n                    onChange={(e) => this.inputAnswer(e)}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderSaveButton() {\r\n        return(\r\n            <div className=\"col-lg-offset-10 col-lg-2\">\r\n                <Button outline color=\"success\" onClick={() => this.save()}>СОХРАНИТЬ</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderCautions() {\r\n        return(\r\n            <>\r\n                {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и задание не сохранилось</Alert>}\r\n                {this.saved && <Alert color=\"success\">Задание успешно сохранилось</Alert>}\r\n                {this.notDeleted && <Alert color=\"danger\">Что-то пошло не так и задание не удалилось</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderSubtask(subtask: SubtaskViewModel) {\r\n        return(\r\n            <>\r\n                {this.renderSubtaskText(subtask)}\r\n                {this.renderImage(subtask)}\r\n                <CardText>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderControlButton()}\r\n                        {this.renderInputAnswerArea()}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderSaveButton()}\r\n                        {this.renderCautions()}\r\n                    </div>\r\n                </CardText>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderSubtask(this.props.subtask)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    inputAnswer(event: React.FormEvent<HTMLTextAreaElement>) {\r\n        this.userAnswer.answer = event.currentTarget.value;\r\n    }\r\n\r\n    save() {\r\n        if(this.props.store.userStore.currentUser.role !== UserRole.Admin) {\r\n            this.props.store.taskStore.addOrUpdateUserSubtask(this.userAnswer)\r\n                .then((status) => {\r\n                    this.notSaved = status !== 200;\r\n                    this.saved = status === 200;\r\n            });\r\n        }\r\n    }\r\n\r\n    deleteSubtask() {\r\n        this.props.store.taskStore\r\n            .deleteSubtask(this.props.subtask.id, this.props.taskId)\r\n            .then((status) => {\r\n                this.notDeleted = status !== 200;\r\n        });\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\TaskEdit.tsx",["870"],"﻿import React, {Component} from 'react';\r\nimport TaskStore from \"../../../stores/TaskStore\";\r\nimport { TaskViewModel } from \"../../../Typings/viewModels/TaskViewModel\";\r\nimport { Button, Modal, ModalHeader } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport TaskUploadWindow from \"./TaskUploadWindow\";\r\nimport { TaskReadModel } from \"../../../Typings/readModels/TaskReadModel\";\r\nimport { mapToSubtaskReadModel } from \"../../../functions/mapper\";\r\n\r\nclass ITaskEditProps {\r\n    taskStore: TaskStore;\r\n    task: TaskViewModel;\r\n    toggle: any;\r\n    lessonId: number;\r\n}\r\n\r\n@observer\r\nexport class TaskEdit extends Component<ITaskEditProps> {\r\n    taskToEdit: TaskViewModel;\r\n\r\n    componentDidMount(): void {\r\n        this.taskToEdit = this.props.task;\r\n    }\r\n\r\n    renderBody() {\r\n        let task = this.props.task;\r\n        let taskReadModel = new TaskReadModel();\r\n        taskReadModel.instruction = task.instruction;\r\n        taskReadModel.text = task.text;\r\n        taskReadModel.taskType = task.taskType;\r\n        taskReadModel.subtasks = task.subtasks.map(s => mapToSubtaskReadModel(s));\r\n        taskReadModel.tags = task.tags;\r\n        return(\r\n            <TaskUploadWindow store={this.props.taskStore} lessonId={this.props.lessonId} toggle={this.props.toggle} task={taskReadModel} />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Modal\r\n                centered={true}\r\n                size=\"lg\"\r\n                isOpen={true}\r\n                toggle={() => this.props.toggle()}\r\n            >\r\n                <ModalHeader>\r\n                    РЕДАКТИРОВАНИЕ УПРАЖНЕНИЯ\r\n                </ModalHeader>\r\n                {this.renderBody()}\r\n                <Button color=\"primary\"\r\n                        onClick={() => this.props.toggle()}>\r\n                    ОТМЕНИТЬ РЕДАКТИРОВАНИЕ\r\n                </Button>\r\n            </Modal>\r\n        );\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\FillGapsSubtask.tsx",["871","872","873"],"﻿import React, { Component } from 'react';\r\nimport {Badge, CardText, Input} from \"reactstrap\";\r\nimport {ISubtaskProps} from \"./ISubtaskProps\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport {observer} from \"mobx-react\";\r\nimport {UserRole} from \"../../../Typings/enums/UserRole\";\r\nimport {UserSubtaskReadModel} from \"../../../Typings/readModels/UserSubtaskReadModel\";\r\nimport {SubtaskViewModel} from \"../../../Typings/viewModels/SubtaskViewModel\";\r\nimport {SubtaskAnswerGroupViewModel} from \"../../../Typings/viewModels/SubtaskAnswerGroupViewModel\";\r\nimport {UserSubtaskAnswerGroupViewModel} from \"../../../Typings/viewModels/UserSubtaskAnswerGroupViewModel\";\r\nimport {UserSubtaskAnswerGroupReadModel} from \"../../../Typings/readModels/UserSubtaskAnswerGroupReadModel\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport {CompletingStatus} from \"../../../Typings/enums/CompletingStatus\";\r\n\r\n@observer\r\nexport class FillGapsSubtask extends Component<ISubtaskProps> {\r\n    notSaved: boolean;\r\n    userAnswer: UserSubtaskReadModel = new UserSubtaskReadModel();\r\n    saved: boolean;\r\n    notDeleted: boolean;\r\n    partsOfSentence: string [] = new Array<string>();\r\n    answerGroupIds: RegExpMatchArray | null;\r\n    userAnswerGroups: UserSubtaskAnswerGroupViewModel[] = new Array<UserSubtaskAnswerGroupViewModel>();\r\n    subtask: SubtaskViewModel = new SubtaskViewModel();\r\n    loaded: boolean;\r\n\r\n    constructor(props: ISubtaskProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            notSaved: observable,\r\n            userAnswer: observable,\r\n            saved: observable,\r\n            notDeleted: observable,\r\n            partsOfSentence: observable,\r\n            answerGroupIds: observable,\r\n            loaded: observable,\r\n            userAnswerGroups: observable\r\n        });\r\n        this.subtask = this.props.subtask;\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.parseSubtask(this.subtask);\r\n        this.userAnswerGroups = this.props.userSubtask.userSubtaskAnswerGroups;\r\n        this.loaded = true;\r\n    }\r\n\r\n    parseSubtask(subtask: SubtaskViewModel) {\r\n        let regExp = /\\[\\d+\\]/g;\r\n        let text = subtask.text;\r\n        let groupIds = text.match(regExp);\r\n        let partsOfSentence = new Array<string>();\r\n        if (groupIds !== null) {\r\n            for(let i = 0; i < groupIds.length; i++) {\r\n                groupIds[i] = groupIds[i].replace(\"[\", \"\").replace(\"]\", \"\");\r\n                text = text.replace(groupIds[i], \"-\").replace(\"[\", \"\").replace(\"]\", \"\");\r\n            }\r\n            partsOfSentence = text.split(\"-\");\r\n            this.setState({answerGroupIds: groupIds, partsOfSentence: partsOfSentence});\r\n        }\r\n        this.answerGroupIds = groupIds;\r\n        this.partsOfSentence = partsOfSentence;\r\n    }\r\n\r\n    renderControlButton() {\r\n        if(this.props.store.userStore.currentUser.role === UserRole.Admin) {\r\n            return(\r\n                <i style={{marginLeft: '98%', width: '2%'}}\r\n                   onClick={() => this.deleteSubtask()}\r\n                   className=\"fa fa-window-close\" aria-hidden=\"true\"/>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderBadge(subtask: SubtaskViewModel) {\r\n        return(\r\n            <Badge outline color=\"primary\">{subtask.order + 1 }</Badge>\r\n        );\r\n    }\r\n\r\n    getUserAnswerGroup(groupId: string): UserSubtaskAnswerGroupViewModel {\r\n        return this.userAnswerGroups.filter(ug => ug.answerGroupId === Number(groupId))[0];\r\n    }\r\n\r\n    getAnswerGroup(groupId: string): SubtaskAnswerGroupViewModel {\r\n        return this.subtask.answerGroups.filter(ag => ag.id === Number(groupId))[0];\r\n    }\r\n\r\n    renderSentence() {\r\n        let partsOfSentence = this.partsOfSentence;\r\n        let groupIds = this.answerGroupIds;\r\n        return(\r\n            <>\r\n                {partsOfSentence.map((p, i ) => {\r\n                    return (\r\n                        <>\r\n                            <span style={{clear: 'both'}}>{p}</span>\r\n                            {groupIds !== null && i < groupIds.length && <Gap answerGroup={this.getAnswerGroup(groupIds[0])} store={this.props.store} userAnswerGroup={this.getUserAnswerGroup(groupIds[0])}/>}\r\n                        </>\r\n                    )\r\n                })}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderSubtask(subtask: SubtaskViewModel) {\r\n        return (\r\n            <>\r\n                <CardText>\r\n                    {this.renderControlButton()}\r\n                    {this.renderBadge(subtask)}\r\n                    {this.renderSentence()}\r\n                </CardText>\r\n            </>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.loaded && this.renderSubtask(this.subtask)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    save() {\r\n        if(this.props.store.userStore.currentUser.role !== UserRole.Admin) {\r\n            this.props.store.taskStore.addOrUpdateUserSubtask(this.userAnswer)\r\n                .then((status) => {\r\n                    this.notSaved = status !== 200;\r\n                    this.saved = status === 200;\r\n                });\r\n        }\r\n    }\r\n\r\n    deleteSubtask() {\r\n        this.props.store.taskStore\r\n            .deleteSubtask(this.props.subtask.id, this.props.taskId)\r\n            .then((status) => {\r\n                this.notDeleted = status !== 200;\r\n            });\r\n    }\r\n}\r\n\r\nclass IGapProps {\r\n    answerGroup: SubtaskAnswerGroupViewModel;\r\n    userAnswerGroup: UserSubtaskAnswerGroupViewModel;\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass Gap extends Component<IGapProps> {\r\n    userAnswerGroup: UserSubtaskAnswerGroupViewModel = new UserSubtaskAnswerGroupViewModel();\r\n    answerGroup : SubtaskAnswerGroupViewModel = new SubtaskAnswerGroupViewModel();\r\n    update: boolean;\r\n\r\n    constructor(props: IGapProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            userAnswerGroup: observable,\r\n            answerGroup: observable,\r\n            update: observable\r\n        });\r\n        this.setUserAnswerGroup();\r\n        this.answerGroup = this.props.answerGroup;\r\n    }\r\n\r\n    setUserAnswerGroup() {\r\n        if(this.props.userAnswerGroup !== undefined) {\r\n            this.userAnswerGroup = this.props.userAnswerGroup;\r\n        } else {\r\n            let userAnswerGroup = new UserSubtaskAnswerGroupViewModel();\r\n            userAnswerGroup.status = CompletingStatus.NotCompleted;\r\n            this.userAnswerGroup = userAnswerGroup;\r\n        }\r\n    }\r\n\r\n    toggleUpdate() {\r\n        this.update = !this.update;\r\n    }\r\n\r\n    inputChange(event: React.FormEvent<HTMLInputElement>) {\r\n        this.userAnswerGroup.lastAnswer = event.currentTarget.value;\r\n    }\r\n\r\n    handleKeyPress(target: React.KeyboardEvent<HTMLInputElement>) {\r\n        if(target.charCode === 13) {//todo: возможно, устарело и надо поменять\r\n            this.checkAnswer();\r\n        }\r\n    }\r\n\r\n    checkAnswer() {\r\n        let lastAnswer = this.userAnswerGroup.lastAnswer.toLowerCase().trim();\r\n        let rightAnswers = this.answerGroup.answers\r\n            .filter(ans => ans.isRight)\r\n            .filter(ans => ans.answer.toLowerCase());\r\n        let userRightAnswer = rightAnswers.filter(ans => ans.answer === lastAnswer);\r\n        if(userRightAnswer === null) {//todo: возможно здесь undefined или length = 0\r\n            this.userAnswerGroup.status = this.userAnswerGroup.status === 0 ? 1 : 2;\r\n        } else {\r\n            this.userAnswerGroup.status = 4;\r\n        }\r\n        this.addOrUpdateUserAnswerGroup();\r\n    }\r\n\r\n    renderInput(update: boolean) {\r\n        let answers = this.answerGroup.answers;\r\n        let status = this.userAnswerGroup.status;\r\n        return(\r\n            <input placeholder={answers[0].answer}\r\n                type=\"text\"\r\n                className={status === 4 || status === 3 ? \"fillGapInputRight\" : status === 2 || status === 1 ? \"fillGapInputWrong\" : \"fillGapInputPrimary\"}\r\n                disabled={status === 4 || status === 2}\r\n                onChange={(e) => this.inputChange(e)}\r\n                /* onBlur={() => this.checkAnswer()}*/\r\n                value={this.userAnswerGroup.lastAnswer}\r\n                onKeyPress={(e) => this.handleKeyPress(e)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderInput(this.update)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    addOrUpdateUserAnswerGroup() {\r\n        if(this.props.store.userStore.currentUser.role !== UserRole.Admin) {\r\n            let answerGroupReadModel = new UserSubtaskAnswerGroupReadModel();\r\n            answerGroupReadModel.lastAnswer = this.userAnswerGroup.lastAnswer;\r\n            answerGroupReadModel.status = this.userAnswerGroup.status;\r\n            answerGroupReadModel.answerGroupId = this.userAnswerGroup.answerGroupId;\r\n            answerGroupReadModel.userId = this.props.store.userStore.currentUser.id;\r\n            this.props.store.taskStore.addOrUpdateUserSubtaskAnswerGroup(answerGroupReadModel);\r\n        }\r\n        this.toggleUpdate();\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\LoadAudioSubtask.tsx",["874"],"﻿import React, {Component} from 'react';\r\nimport {Alert, Button, CardImg, CardText, Input} from \"reactstrap\";\r\nimport {ISubtaskProps} from \"./ISubtaskProps\";\r\nimport {SubtaskViewModel} from \"../../../Typings/viewModels/SubtaskViewModel\";\r\nimport {makeObservable, observable} from \"mobx\";\r\nimport {observer} from \"mobx-react\";\r\nimport {UserRole} from \"../../../Typings/enums/UserRole\";\r\nimport {UserSubtaskReadModel} from \"../../../Typings/readModels/UserSubtaskReadModel\";\r\nimport {UserSubtaskViewModel} from \"../../../Typings/viewModels/UserSubtaskViewModel\";\r\n\r\n@observer\r\nexport class LoadAudioSubtask extends Component<ISubtaskProps> {\r\n    notSaved: boolean;\r\n    userAnswer: UserSubtaskViewModel = new UserSubtaskViewModel();\r\n    saved: boolean;\r\n    notDeleted: boolean;\r\n    userAnswerReadModel: UserSubtaskReadModel = new UserSubtaskReadModel();\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            notSaved: observable,\r\n            userAnswer: observable,\r\n            saved: observable,\r\n            notDeleted: observable,\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.userAnswerReadModel.userId = this.props.userId;\r\n        this.userAnswerReadModel.subtaskId = this.props.subtask.id;\r\n        let userSubtask = this.props.userSubtask;\r\n        this.userAnswer = userSubtask;\r\n        this.userAnswerReadModel.status = userSubtask.status;\r\n        this.userAnswerReadModel.answer = userSubtask.answer;\r\n    }\r\n\r\n    renderControlButton() {\r\n        if(this.props.store.userStore.currentUser.role === UserRole.Admin) {\r\n            return(\r\n                <i style={{marginLeft: '98%', width: '2%'}}\r\n                   onClick={() => this.deleteSubtask()}\r\n                   className=\"fa fa-window-close\" aria-hidden=\"true\"/>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderSubtaskText(subtask: SubtaskViewModel) {\r\n        return(\r\n            <>\r\n                {subtask.text !== null && <CardText>\r\n                    {subtask.text}\r\n                </CardText>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderImage(subtask: SubtaskViewModel) {\r\n        console.log(\"subtask path\", subtask.path);\r\n        return (\r\n            <>\r\n                {subtask.path !== null &&\r\n                <CardImg src={subtask.path.replace('client/build', './')} alt=\"Loading...\"/>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderSaveButton() {\r\n        return(\r\n            <div className=\"col-3\">\r\n                <Button outline color=\"primary\" onClick={() => this.save()}>СОХРАНИТЬ</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderCautions() {\r\n        return(\r\n            <>\r\n                {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и задание не сохранилось</Alert>}\r\n                {this.saved && <Alert color=\"success\">Задание успешно сохранилось</Alert>}\r\n                {this.notDeleted && <Alert color=\"danger\">Что-то пошло не так и задание не удалилось</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderUserAnswers() {\r\n        return(\r\n            <CardText>\r\n                {this.userAnswer.answerFiles.map(ans => {\r\n                    let answerPath = ans.replace('client/build', '.');\r\n                    return(\r\n                        <div className=\"row justify-content-center\">\r\n                            <audio className=\"audio\" controls>\r\n                                <source src={answerPath} type=\"audio/mpeg\"/>\r\n                            </audio>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </CardText>\r\n        );\r\n    }\r\n\r\n    renderInputFile() {\r\n        return(\r\n            <div className=\"col-9\">\r\n                <Input className=\"fileInput\"\r\n                    type=\"file\"\r\n                    id=\"loadAudioFile\"\r\n                    onChange={(e) => this.inputAnswer(e)}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderAnswerInput() {\r\n        if(this.props.store.userStore.currentUser.role !== UserRole.Admin) {\r\n            return (\r\n                <CardText>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderInputFile()}\r\n                        {this.renderSaveButton()}\r\n                        {this.renderCautions()}\r\n                    </div>\r\n                </CardText>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderSubtask(subtask: SubtaskViewModel) {\r\n        return(\r\n            <>\r\n                {this.renderControlButton()}\r\n                {this.renderSubtaskText(subtask)}\r\n                {this.renderImage(subtask)}\r\n                {this.renderUserAnswers()}\r\n                {this.renderAnswerInput()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderSubtask(this.props.subtask)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    inputAnswer(event: React.ChangeEvent<HTMLInputElement>) {\r\n        // @ts-ignore\r\n        let file = event.target.files[0];\r\n        this.userAnswerReadModel.files.push(file);\r\n    }\r\n\r\n    save() {\r\n        if(this.props.store.userStore.currentUser.role !== UserRole.Admin) {\r\n            this.props.store.taskStore.addOrUpdateUserSubtask(this.userAnswerReadModel)\r\n                .then((status) => {\r\n                    this.notSaved = status !== 200;\r\n                    this.saved = status === 200;\r\n                });\r\n        }\r\n    }\r\n\r\n    deleteAnswer() {//todo: РЕАЛИЗОВАТЬ\r\n        \r\n    }\r\n\r\n    deleteSubtask() {\r\n        this.props.store.taskStore\r\n            .deleteSubtask(this.props.subtask.id, this.props.taskId)\r\n            .then((status) => {\r\n                this.notDeleted = status !== 200;\r\n            });\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\RightVerbFormSubtask.tsx",["875","876","877","878"],"﻿import React, {Component} from 'react';\r\nimport {Badge, ButtonDropdown, CardText, DropdownItem, DropdownMenu, DropdownToggle} from \"reactstrap\";\r\nimport {ISubtaskProps} from \"./ISubtaskProps\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport {observer} from \"mobx-react\";\r\nimport {UserRole} from \"../../../Typings/enums/UserRole\";\r\nimport {UserSubtaskReadModel} from \"../../../Typings/readModels/UserSubtaskReadModel\";\r\nimport {SubtaskViewModel} from \"../../../Typings/viewModels/SubtaskViewModel\";\r\nimport {SubtaskAnswerGroupViewModel} from \"../../../Typings/viewModels/SubtaskAnswerGroupViewModel\";\r\nimport {UserSubtaskAnswerGroupViewModel} from \"../../../Typings/viewModels/UserSubtaskAnswerGroupViewModel\";\r\nimport {UserSubtaskAnswerGroupReadModel} from \"../../../Typings/readModels/UserSubtaskAnswerGroupReadModel\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport {CompletingStatus} from \"../../../Typings/enums/CompletingStatus\";\r\n\r\n@observer\r\nexport class RightVerbFormSubtask extends Component<ISubtaskProps> {\r\n    notSaved: boolean;\r\n    userAnswer: UserSubtaskReadModel = new UserSubtaskReadModel();\r\n    saved: boolean;\r\n    notDeleted: boolean;\r\n    partsOfSentence: string [] = new Array<string>();\r\n    answerGroupIds: RegExpMatchArray | null;\r\n    userAnswerGroups: UserSubtaskAnswerGroupViewModel[] = new Array<UserSubtaskAnswerGroupViewModel>();\r\n    subtask: SubtaskViewModel = new SubtaskViewModel();\r\n    loaded: boolean = false;\r\n\r\n    constructor(props: ISubtaskProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            notSaved: observable,\r\n            userAnswer: observable,\r\n            saved: observable,\r\n            notDeleted: observable,\r\n            partsOfSentence: observable,\r\n            answerGroupIds: observable,\r\n            subtask: observable,\r\n            loaded: observable\r\n        });\r\n        this.subtask = this.props.subtask;\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.parseSubtask(this.subtask);\r\n        this.userAnswerGroups = this.props.userSubtask.userSubtaskAnswerGroups;\r\n        this.loaded = true;\r\n    }\r\n\r\n    parseSubtask(subtask: SubtaskViewModel) {\r\n        let regExp = /\\d+/g;\r\n        let text = subtask.text;\r\n        let groupIds = text.match(regExp);\r\n        let partsOfSentence = new Array<string>();\r\n        if (groupIds !== null) {\r\n            for(let i = 0; i < groupIds.length; i++) {\r\n                text = text.replace(groupIds[i], \"-\").replace(\"[\", \"\").replace(\"]\", \"\");\r\n            }\r\n            partsOfSentence = text.split(\"-\");\r\n        }\r\n        this.answerGroupIds = groupIds;\r\n        this.partsOfSentence = partsOfSentence;\r\n    }\r\n\r\n    renderControlButton() {\r\n        if(this.props.store.userStore.currentUser.role === UserRole.Admin) {\r\n            return(\r\n                <i style={{marginLeft: '98%', width: '2%'}}\r\n                   onClick={() => this.deleteSubtask()}\r\n                   className=\"fa fa-window-close\" aria-hidden=\"true\"/>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderBadge(subtask: SubtaskViewModel) {\r\n        return(\r\n            <Badge outline color=\"primary\">{this.props.order}</Badge>\r\n        );\r\n    }\r\n\r\n    getUserAnswerGroup(groupId: string): UserSubtaskAnswerGroupViewModel {\r\n        return this.userAnswerGroups.filter(ug => ug.answerGroupId === Number(groupId))[0];\r\n    }\r\n\r\n    getAnswerGroup(groupId: string): SubtaskAnswerGroupViewModel {\r\n        return this.subtask.answerGroups.filter(ag => ag.id === Number(groupId))[0];\r\n    }\r\n\r\n    renderSentence() {\r\n        let partsOfSentence = this.partsOfSentence;\r\n        let groupIds = this.answerGroupIds;\r\n        return(\r\n            <>\r\n                {partsOfSentence.map((p, i ) => {\r\n                    return (\r\n                        <>\r\n                            <span style={{clear: 'both'}}>{p}</span>\r\n                            {groupIds !== null && i < groupIds.length && <Dropdown answerGroup={this.getAnswerGroup(groupIds[i])} store={this.props.store} userAnswerGroup={this.getUserAnswerGroup(groupIds[i])} key={i}/>}\r\n                        </>\r\n                    )\r\n                })}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderSubtask(subtask: SubtaskViewModel) {\r\n        return (\r\n            <>\r\n                <CardText>\r\n                    {this.renderControlButton()}\r\n                    {this.renderBadge(subtask)}\r\n                    {this.renderSentence()}\r\n                </CardText>\r\n            </>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.loaded && this.renderSubtask(this.subtask)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    save() {\r\n        if(this.props.store.userStore.currentUser.role !== UserRole.Admin) {\r\n            this.props.store.taskStore.addOrUpdateUserSubtask(this.userAnswer)\r\n                .then((status) => {\r\n                    this.notSaved = status !== 200;\r\n                    this.saved = status === 200;\r\n                });\r\n        }\r\n    }\r\n\r\n    deleteSubtask() {\r\n        this.props.store.taskStore\r\n            .deleteSubtask(this.props.subtask.id, this.props.taskId)\r\n            .then((status) => {\r\n                this.notDeleted = status !== 200;\r\n        });\r\n    }\r\n}\r\n\r\nclass IDropdownProps {\r\n    answerGroup: SubtaskAnswerGroupViewModel;\r\n    userAnswerGroup: UserSubtaskAnswerGroupViewModel;\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass Dropdown extends Component<IDropdownProps> {\r\n    userAnswerGroup: UserSubtaskAnswerGroupViewModel = new UserSubtaskAnswerGroupViewModel();\r\n    answerGroup : SubtaskAnswerGroupViewModel = new SubtaskAnswerGroupViewModel();\r\n    isOpen: boolean;\r\n\r\n    constructor(props: IDropdownProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            userAnswerGroup: observable,\r\n            answerGroup: observable,\r\n            isOpen: observable\r\n        });\r\n        this.setUserAnswerGroup();\r\n        this.answerGroup = this.props.answerGroup;\r\n    }\r\n\r\n    setUserAnswerGroup() {\r\n        if(this.props.userAnswerGroup !== undefined) {\r\n            this.userAnswerGroup = this.props.userAnswerGroup;\r\n        } else {\r\n            let userAnswerGroup = new UserSubtaskAnswerGroupViewModel();\r\n            userAnswerGroup.status = CompletingStatus.NotCompleted;\r\n            this.userAnswerGroup = userAnswerGroup;\r\n        }\r\n    }\r\n\r\n    toggle() {\r\n        this.isOpen = !this.isOpen;\r\n    }\r\n\r\n    click(event: React.MouseEvent<HTMLElement, MouseEvent>) {\r\n        let id = event.currentTarget.id;\r\n        let answer = this.answerGroup.answers.find(a => a.id === Number(id));\r\n        if(answer !== undefined && answer.isRight) {\r\n            this.userAnswerGroup.status = 4;\r\n        } else {\r\n            this.userAnswerGroup.status = this.userAnswerGroup.status === 0 ? 1 : 2;\r\n        }\r\n        this.userAnswerGroup.lastAnswer = id;\r\n        this.addOrUpdateUserAnswerGroup();\r\n    }\r\n\r\n    renderDropdownToggle() {\r\n        let lastAnswerId = this.userAnswerGroup.lastAnswer === undefined ? 0 : this.userAnswerGroup.lastAnswer;\r\n        let status = this.userAnswerGroup.status;\r\n        let answers = this.answerGroup.answers;\r\n        if(lastAnswerId !== 0 && answers.findIndex(a => a.id == lastAnswerId) !== -1) {\r\n            let index =  answers.findIndex(a => a.id == lastAnswerId);\r\n            return (\r\n                <DropdownToggle caret outline color={status === 4 || status === 3 ? \"success\" : status === 2 || status === 1 ? \"danger\" : \"primary\"} disabled={status === 4 || status === 2}>\r\n                    {answers[index].answer}\r\n                </DropdownToggle>\r\n            );\r\n        } else {\r\n            return (\r\n                <DropdownToggle caret outline color=\"primary\">\r\n                    {answers[0] !== undefined && answers[0].answer}\r\n                </DropdownToggle>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderMenu() {\r\n        let answers = this.answerGroup.answers;\r\n        return(\r\n            <>\r\n                <ButtonDropdown isOpen={this.isOpen} toggle={() => this.toggle()}>\r\n                    {this.renderDropdownToggle()}\r\n                    <DropdownMenu>\r\n                        {answers.map((answer) => {\r\n                            return(\r\n                                <DropdownItem\r\n                                    onClick={(e) => this.click(e)}\r\n                                    id={answer.id.toString()}\r\n                                >{answer.answer}</DropdownItem>\r\n                            );\r\n                        })}\r\n                    </DropdownMenu>\r\n                </ButtonDropdown>\r\n            </>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderMenu()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    addOrUpdateUserAnswerGroup() {\r\n        if(this.props.store.userStore.currentUser.role !== UserRole.Admin) {\r\n            let answerGroupReadModel = new UserSubtaskAnswerGroupReadModel();\r\n            answerGroupReadModel.lastAnswer = this.userAnswerGroup.lastAnswer;\r\n            answerGroupReadModel.status = this.userAnswerGroup.status;\r\n            answerGroupReadModel.answerGroupId = this.userAnswerGroup.answerGroupId;\r\n            answerGroupReadModel.userId = this.props.store.userStore.currentUser.id;\r\n            this.props.store.taskStore.addOrUpdateUserSubtaskAnswerGroup(answerGroupReadModel);\r\n        }\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\LoadFileSubtask.tsx",["879"],"﻿import React, { Component } from 'react';\r\nimport { Alert, Button, CardImg, CardText, Input } from \"reactstrap\";\r\nimport { ISubtaskProps } from \"./ISubtaskProps\";\r\nimport { SubtaskViewModel } from \"../../../Typings/viewModels/SubtaskViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { UserRole } from \"../../../Typings/enums/UserRole\";\r\nimport { UserSubtaskReadModel } from \"../../../Typings/readModels/UserSubtaskReadModel\";\r\nimport { UserSubtaskViewModel } from \"../../../Typings/viewModels/UserSubtaskViewModel\";\r\n\r\n@observer\r\nexport class LoadFileSubtask extends Component<ISubtaskProps> {\r\n    notSaved: boolean;\r\n    userAnswer: UserSubtaskViewModel = new UserSubtaskViewModel();\r\n    saved: boolean;\r\n    notDeleted: boolean;\r\n    userAnswerReadModel: UserSubtaskReadModel = new UserSubtaskReadModel();\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            notSaved: observable,\r\n            userAnswer: observable,\r\n            saved: observable,\r\n            notDeleted: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.userAnswerReadModel.userId = this.props.userId;\r\n        this.userAnswerReadModel.subtaskId = this.props.subtask.id;\r\n        let userSubtask = this.props.userSubtask;\r\n        this.userAnswer = userSubtask;\r\n        this.userAnswerReadModel.status = userSubtask.status;\r\n        this.userAnswerReadModel.answer = userSubtask.answer;\r\n    }\r\n\r\n    renderControlButton() {\r\n        if(this.props.store.userStore.currentUser.role === UserRole.Admin) {\r\n            return(\r\n                <i style={{marginLeft: '98%', width: '2%'}}\r\n                   onClick={() => this.deleteSubtask()}\r\n                   className=\"fa fa-window-close\" aria-hidden=\"true\"/>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderSubtaskText(subtask: SubtaskViewModel) {\r\n        return(\r\n            <>\r\n                {subtask.text !== null && <CardText>\r\n                    {subtask.text}\r\n                </CardText>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderImage(subtask: SubtaskViewModel) {\r\n        return (\r\n            <>\r\n                {subtask.path !== null &&\r\n                <CardImg src={subtask.path.replace('ClientApp/build', './')} alt=\"Loading...\"/>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderSaveButton() {\r\n        return(\r\n            <div className=\"col-3\">\r\n                <Button outline color=\"primary\" onClick={() => this.save()}>СОХРАНИТЬ</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderCautions() {\r\n        return(\r\n            <>\r\n                {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и задание не сохранилось</Alert>}\r\n                {this.saved && <Alert color=\"success\">Задание успешно сохранилось</Alert>}\r\n                {this.notDeleted && <Alert color=\"danger\">Что-то пошло не так и задание не удалилось</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderUserAnswers() {\r\n        return(\r\n            <CardText>\r\n                {this.userAnswer.answerFiles.map(ans => {\r\n                    let answerPath = ans.replace('ClientApp/build', '.');\r\n                    return(\r\n                        <div className=\"row justify-content-center\">\r\n                            <audio className=\"audio\" controls>\r\n                                <source src={answerPath} type=\"audio/mpeg\"/>\r\n                            </audio>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </CardText>\r\n        );\r\n    }\r\n\r\n    renderInputFile() {\r\n        return(\r\n            <div className=\"col-9\">\r\n                <Input className=\"fileInput\"\r\n                       type=\"file\"\r\n                       id=\"loadAudioFile\"\r\n                       onChange={(e) => this.inputAnswer(e)}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderSubtask(subtask: SubtaskViewModel) {\r\n        return(\r\n            <>\r\n                {this.renderControlButton()}\r\n                {this.renderSubtaskText(subtask)}\r\n                {this.renderImage(subtask)}\r\n                {this.renderUserAnswers()}\r\n                <CardText>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderInputFile()}\r\n                        {this.renderSaveButton()}\r\n                        {this.renderCautions()}\r\n                    </div>\r\n                </CardText>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderSubtask(this.props.subtask)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    inputAnswer(event: React.ChangeEvent<HTMLInputElement>) {\r\n        // @ts-ignore\r\n        let file = event.target.files[0];\r\n        this.userAnswerReadModel.files.push(file);\r\n    }\r\n\r\n    save() {\r\n        if(this.props.store.userStore.currentUser.role !== UserRole.Admin) {\r\n            this.props.store.taskStore.addOrUpdateUserSubtask(this.userAnswerReadModel)\r\n                .then((status) => {\r\n                    this.notSaved = status !== 200;\r\n                    this.saved = status === 200;\r\n                });\r\n        }\r\n    }\r\n\r\n    deleteAnswer() {//todo: РЕАЛИЗОВАТЬ\r\n\r\n    }\r\n\r\n    deleteSubtask() {\r\n        this.props.store.taskStore\r\n            .deleteSubtask(this.props.subtask.id, this.props.taskId)\r\n            .then((status) => {\r\n                this.notDeleted = status !== 200;\r\n        });\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\consts\\TaskTypeTranslater.tsx",["880"],"﻿import { TaskType } from \"../Typings/enums/TaskType\";\r\n\r\nexport const TaskTypeTranslater = [\r\n    { type: TaskType.InsertWordsIntoGaps, russian: 'Вставить слова в пропуски' },\r\n    { type: TaskType.RightVerbForm, russian: 'Выбрать правильную форму глагола' },\r\n    { type: TaskType.FillGaps, russian: 'Заполнить пропуски' },\r\n    { type: TaskType.LoadAudio, russian: 'Загрузить аудио' },\r\n    { type: TaskType.LoadFile, russian: 'Прикрепить файл' },\r\n    { type: TaskType.DetailedAnswer, russian: 'Развернутый ответ' }\r\n];","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\CompletedTask.tsx",["881"],"﻿import React, {Component} from 'react';\r\nimport {Button} from \"reactstrap\";\r\nimport {Task} from \"../../Common/Tasks/Task\";\r\nimport {observer} from \"mobx-react\";\r\nimport {TaskViewModel} from \"../../../Typings/viewModels/TaskViewModel\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport {makeObservable, observable} from \"mobx\";\r\nimport CommentGroup from \"../../Common/Comments/CommentGroup\";\r\nimport {CommentedEntityType} from \"../../../Typings/enums/CommentedEntityType\";\r\n\r\nclass ICompletedTaskProps {\r\n    task: TaskViewModel;\r\n    store: RootStore;\r\n    userId: number;\r\n}\r\n\r\n@observer\r\nclass CompletedTask extends Component<ICompletedTaskProps> {\r\n    commentsWindowOpen: boolean = false;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            commentsWindowOpen: observable\r\n        });\r\n    }\r\n\r\n    commentsToggle() {\r\n        this.commentsWindowOpen = !this.commentsWindowOpen;\r\n    }\r\n\r\n    renderTask() {\r\n        return (\r\n            <Task task={this.props.task} store={this.props.store} userId={this.props.userId}/>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                <div className=\"col-10\">\r\n                    {this.renderTask()}\r\n                </div>\r\n                <div className=\"col-2\">\r\n                    <Button\r\n                        outline color=\"primary\"\r\n                        onClick={() => this.commentsToggle()}>Комментарии</Button>\r\n                    {this.commentsWindowOpen && <CommentGroup commentedEntityId={this.props.task.id} commentedEntityType={CommentedEntityType.LessonTask} onToggle={this.commentsToggle} store={this.props.store} userId={this.props.userId}/>}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CompletedTask;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserSubtaskReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\SubtaskReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\SubtaskViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserSubtaskAnswerGroupReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskType.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\SubtaskUploadWindow.tsx",["882"],"﻿import React, { Component } from \"react\";\r\nimport { SubtaskReadModel } from \"../../../Typings/readModels/SubtaskReadModel\";\r\nimport { Input, Label, Tooltip } from \"reactstrap\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { IUploadSubtaskProps } from \"./IUploadSubtaskProps\";\r\nimport { SubtaskType } from \"../../../Typings/enums/SubtaskType\";\r\nimport { getTooltipText } from \"../../../functions/getTooltipText\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nclass SubtaskUploadWindow extends Component<IUploadSubtaskProps> {\r\n    subtask: SubtaskReadModel = new SubtaskReadModel();\r\n    tooltipOpen: boolean = false;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            subtask: observable,\r\n            tooltipOpen: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.subtask = this.props.subtask;\r\n    }\r\n\r\n    renderOrderInput() {\r\n        return(\r\n            <>\r\n                <Label>Номер</Label>\r\n                <Input\r\n                    value={this.subtask.order}\r\n                    onChange={(e) => this.inputOrder(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderTooltip() {\r\n        let subtaskType = this.subtask.subtaskType;\r\n        if(subtaskType === SubtaskType.FillGaps || subtaskType === SubtaskType.RightVerbForm) {\r\n            return(\r\n                <>\r\n                    <span id=\"DisabledAutoHideExample\">Введите текст задания</span>\r\n                    <Tooltip placement=\"top\" isOpen={this.tooltipOpen} autohide={true} target=\"DisabledAutoHideExample\" toggle={() => this.tooltipToggle()}>\r\n                        {getTooltipText(subtaskType)}\r\n                    </Tooltip>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderInputText() {\r\n        return(\r\n            <>\r\n                <Input\r\n                    className=\"taskInput\"\r\n                    defaultValue={this.subtask.text}\r\n                    onChange={(e) => this.inputText(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderInputFile() {\r\n        let subtaskType = this.subtask.subtaskType;\r\n        if(subtaskType === SubtaskType.LoadAudio || subtaskType || SubtaskType.DetailedAnswer) {\r\n            return(\r\n                <Input\r\n                    style={{marginTop: \"5px\"}}\r\n                    className=\"fileInput\"\r\n                    type=\"file\"\r\n                    onChange={(e) => this.inputFile(e)}/>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderInput() {\r\n        return(\r\n            <div className=\"row justify-content-center\">\r\n                <i style={{marginLeft: '95%', width: '3%'}}\r\n                   onClick={() => this.handleDelete()}\r\n                   className=\"fa fa-window-close\" aria-hidden=\"true\" />\r\n                <div className=\"col-2\">\r\n                    {this.renderOrderInput()}\r\n                </div>\r\n                <div className=\"col-10\">\r\n                    {this.renderTooltip()}\r\n                    {this.renderInputText()}\r\n                    {this.renderInputFile()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderInput()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    updateParentSubtask() {\r\n        this.props.updateSubtask(this.subtask, this.subtask.order);\r\n    }\r\n\r\n    inputFile(event: React.ChangeEvent<HTMLInputElement>) {\r\n        // @ts-ignore\r\n        this.subtask.file = event.target.files[0];\r\n        this.updateParentSubtask();\r\n    }\r\n\r\n    inputText(event: React.FormEvent<HTMLInputElement>) {\r\n        this.subtask.text = event.currentTarget.value;\r\n        this.updateParentSubtask();\r\n    }\r\n\r\n    inputOrder(event: React.FormEvent<HTMLInputElement>) {\r\n        let value = event.currentTarget.value;\r\n        if(parseInt(value)) {\r\n            this.subtask.order = Number(value);\r\n        } else {\r\n            this.subtask.order = 0;\r\n        }\r\n        this.updateParentSubtask();\r\n    }\r\n\r\n    tooltipToggle() {\r\n        this.tooltipOpen = !this.tooltipOpen;\r\n    }\r\n\r\n    handleDelete() {\r\n        this.props.deleteSubtask(this.props.index);\r\n    }\r\n}\r\n\r\nexport default SubtaskUploadWindow;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\getTaskTitle.tsx",["883"],"﻿import {TaskType} from \"../Typings/enums/TaskType\";\r\n\r\nexport function getTaskTitle(taskType: TaskType): string {\r\n    if(taskType === TaskType.DetailedAnswer) {\r\n        return \"Задание на загрузку развёрнутого ответа\";\r\n    } else if(taskType === TaskType.RightVerbForm) {\r\n        return \"Выбрать правильную форму глагола\";\r\n    } else if(taskType === TaskType.LoadAudio) {\r\n        return \"Задание на загрузку аудио\";\r\n    } else if(taskType === TaskType.FillGaps) {\r\n        return \"Задание на заполнение пропусков\";\r\n    } else if(taskType === TaskType.LoadFile) {\r\n        return \"Задание на загрузку файла\";\r\n    } else if(taskType === TaskType.InsertWordsIntoGaps) {\r\n        return \"Задание вставить слова в пропуски\";\r\n    }\r\n    return \"\";\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\subtaskTranspiler.tsx",["884"],"﻿import { TaskType } from \"../Typings/enums/TaskType\";\r\nimport { SubtaskType } from \"../Typings/enums/SubtaskType\";\r\n\r\nexport function subtaskTranspiler(taskType: TaskType): SubtaskType {\r\n    if(taskType === TaskType.InsertWordsIntoGaps) {\r\n        return SubtaskType.InsertWordsIntoGaps;\r\n    } else if(taskType === TaskType.LoadFile) {\r\n        return SubtaskType.LoadFile;\r\n    } else if(taskType === TaskType.LoadAudio) {\r\n        return SubtaskType.LoadAudio;\r\n    } else if(taskType === TaskType.FillGaps) {\r\n        return SubtaskType.FillGaps;\r\n    } else if(taskType === TaskType.RightVerbForm) {\r\n        return SubtaskType.RightVerbForm;\r\n    } else if(taskType === TaskType.DetailedAnswer) {\r\n        return SubtaskType.DetailedAnswer;\r\n    }\r\n    return SubtaskType.FillGaps;//todo: плохо, лучше сделать None\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\getTooltipText.tsx",["885"],"﻿import { SubtaskType } from \"../Typings/enums/SubtaskType\";\r\n\r\nexport function getTooltipText(subtaskType: SubtaskType): string {\r\n    if(subtaskType === SubtaskType.FillGaps) {\r\n        return \"Подсказка\\n \\\"Поставить слово в нужную форму\\\": запишите в квадратных скобках начальную форму слова, слэш, затем правильную форму слова. \\\"Заполнить пропуски\\\": запишите в квадратных скобках только правильное слово (выражение). \\\"Заполнить пропуски любым текстом без проверки\\\": просто запишите пустые квадратные скобки на месте пропуска (без пробела).\\n Пример:\\n 1. I [to play/am playing] tennis.\\n 2. This flower is [better] than that.\";\r\n    } else if(subtaskType === SubtaskType.RightVerbForm) {\r\n        return \"Подсказка\\n Запишите варианты ответа в квадратных скобках и отметьте правильный вариант звездочкой *.\\n Если вы хотите добавить объяснение, то напишите его в скобочках сразу после ответа\\n Пример:\\n They [is(because bla-bla-bla)/are/was/were*(it is right!because...)] on holiday yesterday\";\r\n    } else if(subtaskType === SubtaskType.InsertWordsIntoGaps) {\r\n        return \"Подсказка\\n Напишите текст. Слова и фразы, которые нужно вставить из рамочки, заключите в квадратные скобки.\\n Пример:\\n I like [walking] in the park in the morning.\";\r\n    }\r\n    return \"\";\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\WordReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserWordViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\WordsTrainingPage.tsx",["886","887","888","889"],"﻿import React, {Component} from 'react';\r\nimport { observer } from \"mobx-react\";\r\nimport WordStore from \"../../../stores/WordStore\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Button, Card, CardBody, CardFooter, Modal, ModalBody } from \"reactstrap\";\r\nimport { UserWordViewModel } from \"../../../Typings/viewModels/UserWordViewModel\";\r\nimport { WordViewModel } from \"../../../Typings/viewModels/WordViewModel\";\r\nimport { WordTrainingType } from \"../../../Typings/enums/WordTrainingType\";\r\nimport { Settings } from \"./Settings\";\r\nimport { CompletingStatus } from \"../../../Typings/enums/CompletingStatus\";\r\nimport EnglishWordRussianMeaningTraining from \"./TrainingTypes/EnglishWordRussianMeaningTraining\";\r\nimport RussianWordEnglishWordTraining from \"./TrainingTypes/RussianWordEnglishWordTraining\";\r\nimport ShowWordTraining from \"./TrainingTypes/ShowWordTraining\";\r\nimport { UserWordReadModel } from \"../../../Typings/readModels/UserWordReadModel\";\r\n\r\nclass IWordsTrainingPageProps {\r\n    onToggle: any;\r\n    wordStore: WordStore;\r\n    userId: number;\r\n}\r\n\r\n@observer\r\nclass WordsTrainingPage extends Component<IWordsTrainingPageProps> {\r\n    wordsCount: number;\r\n    settingsOpen: boolean;\r\n    userWords: UserWordViewModel[] = new Array<UserWordViewModel>();\r\n    words: WordViewModel[] = new Array<WordViewModel>();\r\n    wordsCountWarning: boolean;\r\n    trainingType: WordTrainingType;\r\n    settings : boolean = true;\r\n    showWords: boolean;\r\n    showOrder: number;\r\n    countLearntWords: number = 0;\r\n    rightAnswersShouldBe: number = 5;\r\n    toggleTrain: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            wordsCount: observable,\r\n            settingsOpen: observable,\r\n            userWords: observable,\r\n            words: observable,\r\n            wordsCountWarning: observable,\r\n            trainingType: observable,\r\n            settings: observable,\r\n            showWords: observable,\r\n            showOrder: observable,\r\n            countLearntWords: observable,\r\n            toggleTrain: observable\r\n        });\r\n    }\r\n\r\n    startTraining(userWords: UserWordViewModel[]) {\r\n        this.userWords = userWords;\r\n        this.settings = false;\r\n        this.showWords = true;\r\n    }\r\n\r\n    getWord(wordId: number): WordViewModel {\r\n        return this.props.wordStore.dictionary.filter(w => w.id === wordId)[0];\r\n    }\r\n \r\n    showWordsTraining(showOrder: number) {\r\n        let word = this.getWord(this.userWords[showOrder].wordId);\r\n        return (\r\n            <ShowWordTraining word={word} continue={this.continueShow} words={new Array<WordViewModel>()}/>\r\n        );\r\n    }\r\n\r\n    continueShow() {\r\n        let showOrder = this.showOrder;\r\n        showOrder = ++showOrder;\r\n        if(showOrder <= this.userWords.length - 1) {\r\n            this.showOrder = showOrder;\r\n        } else {\r\n            this.showWords = false;\r\n        }\r\n    }\r\n\r\n    renderSettings() {\r\n        return(\r\n            <>\r\n                {this.settings && <Settings wordStore={this.props.wordStore} continue={this.startTraining} />}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderShowWordTraining() {\r\n        return (\r\n            <>\r\n                {this.showWords && this.showWordsTraining(this.showOrder)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderTraining(toggleTrain: boolean) {\r\n        if(!this.showWords && this.countLearntWords !== this.userWords.length && !this.settings)\r\n        return (\r\n            <>\r\n                {this.train(toggleTrain)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderFinish() {\r\n        if(!this.showWords && this.countLearntWords == this.userWords.length && this.countLearntWords > 0) {\r\n            return(\r\n                <Card>\r\n                    <CardBody>\r\n                        Поздравляем! Ты всё выучил!\r\n                    </CardBody>\r\n                    <CardFooter>\r\n                        <Button\r\n                            outline\r\n                            color=\"primary\"\r\n                            onClick={() => this.handleToggle()}>\r\n                            Закрыть\r\n                        </Button>\r\n                    </CardFooter>\r\n                </Card>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Modal toggle={() => this.props.onToggle()} isOpen={true} size=\"lg\">\r\n                <ModalBody>\r\n                    {this.renderSettings()}\r\n                    {this.renderShowWordTraining()}\r\n                    {this.renderTraining(this.toggleTrain)}\r\n                    {this.renderFinish()}\r\n                </ModalBody>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    train(toggleTrain: boolean) {\r\n        let wordId = this.chooseWord();\r\n        let words = this.chooseWords(wordId);\r\n        let word = this.props.wordStore.dictionary.filter(w => w.id === wordId)[0];\r\n        let trainingType = this.getRandomIntInclusive(1, 2);\r\n        if(trainingType === 1) {\r\n            return(\r\n                <EnglishWordRussianMeaningTraining continue={this.handleAnswer} word={word} words={words}/>\r\n            );\r\n        } else if(trainingType === 2) {\r\n            return(\r\n                <RussianWordEnglishWordTraining continue={this.handleAnswer} word={word} words={words}/>\r\n            );\r\n        }\r\n    }\r\n\r\n    chooseWord(): number {\r\n        let randomWordIndex = this.getRandomIntInclusive(0, this.userWords.length - 1);\r\n        return this.userWords[randomWordIndex].wordId;\r\n    }\r\n\r\n    getRandomIntInclusive(min: number, max: number): number {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    chooseWords(wordId: number): WordViewModel[] {\r\n        let wordsIds = new Array<number>();\r\n        wordsIds.push(wordId);\r\n        while(wordsIds.length !== 4) {\r\n            let choosenWord = this.chooseWord();\r\n            if(wordId !== choosenWord && wordsIds.find(word => word === choosenWord) === undefined) {\r\n                wordsIds.push(choosenWord);\r\n            }\r\n        }\r\n        let words = new Array<WordViewModel>();\r\n        for(let i = 0; i < wordsIds.length; i++) {\r\n            let word = this.props.wordStore.dictionary.filter(w => w.id === wordsIds[i])[0];\r\n            words.push(word);\r\n        }\r\n\r\n        return words;\r\n    }\r\n\r\n    handleAnswer(wordId: number, right: boolean) {\r\n        let userWords = this.userWords;\r\n        let userWord = userWords.find(userWord => userWord.wordId == wordId);\r\n        let userWordIndex = userWords\r\n            .map((w) => { return w.wordId ;})\r\n            .indexOf(wordId);\r\n        if(right && userWord !== undefined) {\r\n            userWord.rightAnswers = ++userWord.rightAnswers;\r\n            if(userWord.rightAnswers == this.rightAnswersShouldBe) {\r\n                userWord.status = CompletingStatus.Completed;\r\n                this.countLearntWords =  this.countLearntWords + 1;\r\n            }\r\n            userWords[userWordIndex] = userWord;\r\n        }\r\n        this.toggleTrain = !this.toggleTrain;\r\n    }\r\n\r\n    handleToggle() {\r\n        let userWordsReadModels = new Array<UserWordReadModel>();\r\n        let userWords = this.userWords;\r\n        for(let i = 0; i < userWords.length; i++ ) {\r\n            let userWordReadModel = new UserWordReadModel();\r\n            userWordReadModel.word.id = userWords[i].wordId;\r\n            userWordReadModel.rightAnswers = userWords[i].rightAnswers;\r\n            userWordReadModel.countOfAttempts = userWords[i].countOfAttempts;\r\n            userWordReadModel.status = userWords[i].status;\r\n            userWordReadModel.answer = userWords[i].answer;\r\n            userWordsReadModels.push(userWordReadModel)\r\n        }\r\n        this.props.wordStore.addOrUpdateUserWordsProgress(userWordsReadModels);\r\n        this.props.onToggle();\r\n    }\r\n}\r\n\r\nexport default WordsTrainingPage;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\Words.tsx",["890","891"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\Word.tsx",["892","893"],"﻿import React, {Component} from 'react';\r\nimport {WordViewModel} from \"../../../Typings/viewModels/WordViewModel\";\r\nimport {Card, CardText, Progress} from \"reactstrap\";\r\nimport {makeObservable, observable} from \"mobx\";\r\nimport WordStore from \"../../../stores/WordStore\";\r\nimport UserStore from \"../../../stores/UserStore\";\r\nimport {UserRole} from \"../../../Typings/enums/UserRole\";\r\nimport {observer} from \"mobx-react\";\r\nimport {UserWordViewModel} from \"../../../Typings/viewModels/UserWordViewModel\";\r\nimport {translatePartOfSpeech} from \"../../../functions/translater\";\r\nimport AddOrUpdateWord from \"./AddOrUpdateWord\";\r\n\r\n\r\nclass IWordProps {\r\n    userWord: UserWordViewModel;\r\n    wordStore: WordStore;\r\n    userStore: UserStore;\r\n}\r\n\r\n@observer\r\nclass Word extends Component<IWordProps> {\r\n    word: WordViewModel = new WordViewModel();\r\n    notDeleted: boolean;\r\n    edit: boolean;\r\n\r\n    constructor(props: IWordProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            word: observable,\r\n            notDeleted: observable,\r\n            edit: observable\r\n        });\r\n        this.setWord();\r\n    }\r\n\r\n    setWord() {\r\n        this.word = this.props.wordStore.dictionary.filter(w => w.id === this.props.userWord.wordId)[0];\r\n    }\r\n\r\n    renderWord() {\r\n        return(\r\n            <div className=\"col-lg-2 col-md-2 col-sm-2 col-xs-2 wordColumn\">\r\n                <span>{this.word.word.toUpperCase()}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderPartOfSpeech() {\r\n        return(\r\n            <div className=\"col-lg-2 col-md-2 col-sm-2 col-xs-2\">\r\n                <span>{translatePartOfSpeech(this.word.partOfSpeech)}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderEnglishMeaning() {\r\n        return(\r\n            <div className=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\r\n                <span>{this.word.englishMeaning}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderRussianMeaning() {\r\n        return(\r\n            <div className=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\r\n                <span>{this.word.russianMeaning}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderControlButtons() {\r\n        return(\r\n            <>\r\n                <div className=\"row justify-content-center\" onClick={() => this.handleDelete()}>\r\n                     <i className=\"fa fa-window-close\" aria-hidden=\"true\"/>\r\n                </div>\r\n                <div className=\"row justify-content-center\" onClick={() => this.editToggle()}>\r\n                     <i className=\"fa fa-edit\" aria-hidden=\"true\"/>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderProgress() {\r\n        if(this.props.userStore.currentUser.role != UserRole.Admin) {\r\n            return(\r\n                <Progress color=\"success\" value={this.props.userWord.rightAnswers / 0.05}>выучено на {this.computeProgress()} %</Progress>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderWordCard() {\r\n        return(\r\n            <Card className=\"cardWord\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-10\">\r\n                            <div className=\"row justify-content-center\">\r\n                                {this.renderWord()}\r\n                                {this.renderPartOfSpeech()}\r\n                                {this.renderEnglishMeaning()}\r\n                                {this.renderRussianMeaning()}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-2\">\r\n                            {this.renderControlButtons()}\r\n                        </div>\r\n                    </div>\r\n                <CardText style={{marginTop: '25px'}}>\r\n                    {this.renderProgress()}\r\n                </CardText>\r\n            </Card>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderWordCard()}\r\n                {this.edit && <AddOrUpdateWord word={this.word} cancelEdit={this.editToggle} courseId={undefined} currentUser={this.props.userStore.currentUser} date={undefined} isWordOfADay={false} wordStore={this.props.wordStore} />}\r\n            </>\r\n        );\r\n    }\r\n\r\n    handleDelete() {\r\n        let result = window.confirm('Вы уверены, что хотите удалить слово?');\r\n        if(result) {\r\n            this.deleteWord()\r\n                .then((status) => {\r\n                    this.notDeleted = status !== 200;\r\n            });\r\n        }\r\n    }\r\n\r\n    async deleteWord(): Promise<number> {\r\n        let role = this.props.userStore.currentUser.role;\r\n        if(role === UserRole.User) {\r\n            let userId = this.props.userStore.currentUser.id;\r\n           return this.props.wordStore.deleteWordFromUserDictionary(this.word.id, userId);\r\n        } else if(role === UserRole.Admin) {\r\n           return this.props.wordStore.deleteWordFromDictionary(this.word.id);\r\n        }\r\n\r\n        return 401;\r\n    }\r\n\r\n    editToggle = () => {\r\n        this.edit = !this.edit;\r\n    };\r\n\r\n    computeProgress() {\r\n        let progress = this.props.userWord.rightAnswers / 5 * 100;\r\n        if(progress > 100) {\r\n            progress = 100;\r\n        }\r\n        return progress;\r\n    }\r\n}\r\n\r\nexport default Word;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\WordViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\PartOfSpeech.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\transformer.tsx",["894"],"﻿import { PartOfSpeech } from \"../Typings/enums/PartOfSpeech\";\r\nimport {SubtaskType} from \"../Typings/enums/SubtaskType\";\r\n\r\nexport function transformValueToPartOfSpeech(value: string): PartOfSpeech {\r\n    if(value === \"Noun\") {\r\n        return PartOfSpeech.Noun;\r\n    } else if(value === \"Adverb\") {\r\n        return PartOfSpeech.Adverb;\r\n    } else if(value === \"Adjective\") {\r\n        return PartOfSpeech.Adjective;\r\n    } else if(value === \"Verb\") {\r\n        return PartOfSpeech.Verb;\r\n    }\r\n    return PartOfSpeech.Noun;\r\n}\r\n\r\nexport function transformValueToSubtaskType(value: string): SubtaskType {\r\n    if(value === \"InsertWordsIntoGaps\") {\r\n        return SubtaskType.InsertWordsIntoGaps;\r\n    } else if(value === \"RightVerbForm\") {\r\n        return SubtaskType.RightVerbForm;\r\n    } else if(value === \"DetailedAnswer\") {\r\n        return SubtaskType.DetailedAnswer;\r\n    } else if(value === \"LoadAudio\") {\r\n        return SubtaskType.LoadAudio;\r\n    } else if(value === \"FillGaps\") {\r\n        return SubtaskType.FillGaps;\r\n    } else if(value === \"LoadFile\") {\r\n        return SubtaskType.LoadFile;\r\n    }\r\n\r\n    return SubtaskType.RightVerbForm;\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\ExampleReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\WordTrainingType.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\Settings.tsx",["895","896"],"﻿import React, { Component } from 'react';\r\nimport { WordTrainingType } from \"../../../Typings/enums/WordTrainingType\";\r\nimport { Alert, Button, Card, CardBody, CardFooter, Input } from \"reactstrap\";\r\nimport { UserWordViewModel} from \"../../../Typings/viewModels/UserWordViewModel\";\r\nimport { WordViewModel} from \"../../../Typings/viewModels/WordViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport WordStore from \"../../../stores/WordStore\";\r\nimport { CompletingStatus } from \"../../../Typings/enums/CompletingStatus\";\r\n\r\nclass ISettingsProps {\r\n    wordStore: WordStore;\r\n    continue: any;\r\n}\r\n\r\nexport class Settings extends Component<ISettingsProps> {\r\n    wordsCount: number;\r\n    settingsOpen: boolean;\r\n    userWords: UserWordViewModel[] = new Array<UserWordViewModel>();\r\n    words: WordViewModel[] = new Array<WordViewModel>();\r\n    wordsCountWarning: boolean;\r\n    littleCountWords: boolean;\r\n    trainingType: WordTrainingType;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            wordsCount: observable,\r\n            settingsOpen: observable,\r\n            userWords: observable,\r\n            words: observable,\r\n            wordsCountWarning: observable,\r\n            trainingType: observable\r\n        });\r\n    }\r\n\r\n    renderSettings() {\r\n        return (\r\n            <Card style={{width: '100%'}}>\r\n                <CardBody className=\"text-center\">\r\n                    {this.renderCautions()}\r\n                    {this.renderWordsCountInput()}\r\n                </CardBody>\r\n                <CardBody  className=\"text-center\">\r\n                    {this.renderTrainingTypeInput()}\r\n                </CardBody>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderContinueButton()}\r\n                </div>\r\n            </Card>\r\n        )\r\n    }\r\n\r\n    renderCautions() {\r\n        return(\r\n            <>\r\n                {this.littleCountWords && <Alert color=\"danger\">У вас в словарике меньше 5 слов. Добавьте ещё несколько слов, чтобы тренировка стала доступной:)</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderWordsCountInput() {\r\n        return (\r\n            <>\r\n                <Alert outline color={this.wordsCountWarning ? \"danger\" : \"primary\"}>Количество слов не может быть меньше 5</Alert>\r\n                <Input style={{marginTop: '0px'}} type=\"text\" onChange={(e) => this.changeWordsCount(e)} defaultValue={this.wordsCount}>{this.wordsCount}</Input>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderTrainingTypeInput() {\r\n        return (\r\n            <Input type=\"select\" name=\"select\" id=\"exampleSelect\">\r\n                <option key=\"repeat\" onClick={() => this.selectTrainingType(WordTrainingType.Repeat)}>ПОВТОРИТЬ</option>\r\n                <option key=\"learnnew\" onClick={() => this.selectTrainingType(WordTrainingType.LearnNew)}>УЧИТЬ НОВЫЕ</option>\r\n            </Input>\r\n        );\r\n    }\r\n\r\n    renderContinueButton() {\r\n        return(\r\n            <Button disabled={this.wordsCountWarning} outline color=\"primary\" onClick={() => this.continue()}>\r\n                ПРОДОЛЖИТЬ\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.renderSettings()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    selectTrainingType(trainingType: WordTrainingType) {\r\n        this.trainingType = trainingType;\r\n    }\r\n\r\n    changeWordsCount(event: React.FormEvent<HTMLInputElement>) {\r\n        let wordsCount = Number(event.currentTarget.value);\r\n        this.wordsCountWarning = wordsCount < 5;\r\n        this.wordsCount = wordsCount;\r\n    }\r\n\r\n    continue() {\r\n        let userWords = this.chooseWordsForTraining();\r\n        if(userWords.length < 5) {\r\n            this.littleCountWords = true;\r\n        } else {\r\n            this.props.continue(userWords);\r\n        }\r\n    }\r\n\r\n   chooseWordsForTraining(): UserWordViewModel[] {\r\n        let userWords = new Array<UserWordViewModel>();\r\n        if(this.trainingType === WordTrainingType.LearnNew) {\r\n            userWords = this.props.wordStore.userDictionary\r\n                .filter(uw => uw.status === CompletingStatus.NotCompleted)\r\n                .slice(0, 5);\r\n        } else {\r\n            userWords = this.props.wordStore.userDictionary\r\n                .filter(uw => uw.status === CompletingStatus.Completed)\r\n                .slice(0, 5);\r\n        }\r\n\r\n        return userWords;\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\CompletingStatus.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\TrainingTypes\\ShowWordTraining.tsx",["897"],"﻿import React, { Component } from 'react';\r\nimport { Button, Card, CardText, CardFooter, CardTitle } from \"reactstrap\";\r\nimport { ITrainingTypeProps } from \"./ITrainingTypeProps\";\r\n\r\nclass ShowWordTraining extends Component<ITrainingTypeProps> {\r\n    continue() {\r\n        this.props.continue();\r\n    }\r\n\r\n    renderWord() {\r\n        let word = this.props.word;\r\n        return (\r\n            <>\r\n                <CardTitle className=\"text-center\">{word.word}</CardTitle>\r\n                <CardText className=\"text-center\">{word.partOfSpeech}</CardText>\r\n                <CardText className=\"text-center\">{word.englishMeaning}</CardText>\r\n                <CardText className=\"text-center\">{word.russianMeaning}</CardText>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderContinueButton() {\r\n        return (\r\n            <Button color=\"success\" onClick={() => this.continue()} style={{width: '100%'}}>ПРОДОЛЖИТЬ</Button>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Card style={{width: '100%'}}>\r\n                     {this.renderWord()}\r\n                <CardFooter className=\"text-center\">\r\n                    {this.renderContinueButton()}\r\n                </CardFooter>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ShowWordTraining;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\TrainingStore.tsx",["898"],"﻿import { makeObservable, observable } from \"mobx\";\r\nimport { TaskViewModel } from \"../Typings/viewModels/TaskViewModel\";\r\n\r\nclass TrainingStore {\r\n    tasks: TaskViewModel[] = new Array<TaskViewModel>();\r\n    constructor() {\r\n        makeObservable(this, {\r\n            tasks: observable\r\n        });\r\n    }\r\n    \r\n    getTasksByTags(tagIds: number[]) {\r\n        \r\n    }\r\n}\r\n\r\nexport default TrainingStore;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Training\\TrainingPage.tsx",["899","900"],"﻿import React, { Component } from \"react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Nav, Tab, Row, Col, Button }  from \"react-bootstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport TrainingContent from \"./TrainingContent\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\n\r\nclass ITrainingPageProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass TrainingPage extends Component<ITrainingPageProps> {\r\n    filtersOpen: boolean;\r\n    mainTag: number;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            filtersOpen: observable,\r\n            mainTag: observable\r\n        });\r\n    }\r\n\r\n    renderMenu() {\r\n        return(\r\n            <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\r\n                <Row>\r\n                    <Col sm={2}>\r\n                        <Nav  variant=\"pills\" className=\"flex-column\">\r\n                            <div className=\"container-fluid\">\r\n                                <Nav.Item key={1}>\r\n                                    <div className=\"row\" key={1}>\r\n                                        <div className=\"col-8\">\r\n                                            <Nav.Link\r\n                                                eventKey={1}\r\n                                                className=\"nav-link lesson\"\r\n                                                onClick={() => this.changeMainTag(1)}>\r\n                                                ГРАММАТИКА\r\n                                            </Nav.Link>\r\n                                        </div>\r\n                                    </div>\r\n                                </Nav.Item>\r\n                                <Nav.Item key={1}>\r\n                                    <div className=\"row\" key={2}>\r\n                                        <div className=\"col-8\">\r\n                                            <Nav.Link\r\n                                                eventKey={2}\r\n                                                className=\"nav-link lesson\"\r\n                                                onClick={() => this.changeMainTag(2)}>\r\n                                                ЧТЕНИЕ\r\n                                            </Nav.Link>\r\n                                        </div>\r\n                                    </div>\r\n                                </Nav.Item>\r\n                                <Nav.Item key={1}>\r\n                                    <div className=\"row\" key={3}>\r\n                                        <div className=\"col-8\">\r\n                                            <Nav.Link\r\n                                                eventKey={3}\r\n                                                className=\"nav-link lesson\"\r\n                                                onClick={() => this.changeMainTag(3)}>\r\n                                                АУДИРОВАНИЕ\r\n                                            </Nav.Link>\r\n                                        </div>\r\n                                    </div>\r\n                                </Nav.Item>\r\n                            </div>\r\n                        </Nav>\r\n                    </Col>\r\n                    <Col sm={10}>\r\n                        <TrainingContent store={this.props.store} mainTag={this.mainTag}/>\r\n                    </Col>\r\n                </Row>\r\n            </Tab.Container>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\">\r\n                 {this.renderMenu()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    changeMainTag(tagId: number) {\r\n        this.mainTag = tagId;\r\n    }\r\n}\r\n\r\nexport default TrainingPage;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Training\\TrainingContent.tsx",["901"],"﻿import React, { Component } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport { TagViewModel } from \"../../../Typings/viewModels/TagViewModel\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { TaskViewModel } from \"../../../Typings/viewModels/TaskViewModel\";\r\nimport { Task } from \"../Tasks/Task\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { TagReadModel } from \"../../../Typings/readModels/TagReadModel\";\r\n\r\nclass ITrainingContentProps {\r\n    store: RootStore;\r\n    mainTag: number;\r\n}\r\n\r\n@observer\r\nclass TrainingContent extends Component<ITrainingContentProps> {\r\n    choosenTags: TagViewModel[] = new Array<TagViewModel>();\r\n    relatedTasks: TaskViewModel[] = new Array<TaskViewModel>();\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            choosenTags: observable,\r\n            relatedTasks: observable\r\n        });\r\n    }\r\n\r\n    renderApplyButton() {\r\n        return (\r\n            <Button\r\n                color=\"primary\"\r\n                style={{width: '100%'}}\r\n                onClick={() => this.applyTags()}>\r\n                ПРИМЕНИТЬ\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderFilters(tags: TagViewModel[]) {\r\n        return(\r\n            <div className=\"row\">\r\n                {tags.map((tag) => {\r\n                    return(\r\n                        <Button\r\n                            outline color=\"primary\"\r\n                            style={{width: '15%'}}\r\n                            onClick={() => this.toggleTag(tag)}>\r\n                            {tag.name}\r\n                        </Button>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderTasks(tasks: TaskViewModel[]) {\r\n        return(\r\n            <div className=\"row\">\r\n                {tasks.map((task) => {\r\n                    return(\r\n                        <Task task={task} store={this.props.store} userId={this.props.store.userStore.currentUser.id}/>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let tags = this.props.store.taskStore.tags;\r\n        return(\r\n            <>\r\n                {this.renderFilters(tags)}\r\n                {this.renderApplyButton()}\r\n                {this.renderTasks(this.relatedTasks)}\r\n                {this.addTask()}\r\n            </>\r\n        )\r\n    }\r\n\r\n    toggleTag(tag: TagViewModel) {\r\n        if(this.choosenTags.filter(t => t.id === tag.id).length > 0) {\r\n            let index = this.choosenTags.indexOf(tag);\r\n            this.choosenTags = this.choosenTags.splice(index, 1);\r\n        } else {\r\n            this.choosenTags.push(tag);\r\n        }\r\n    }\r\n\r\n    applyTags() {\r\n        let mainTag = new TagReadModel();\r\n        mainTag.id = this.props.mainTag;\r\n        let choosenTags = this.choosenTags;\r\n        choosenTags.push(mainTag);\r\n        this.props.store.taskStore\r\n            .getTasks(choosenTags)\r\n            .then((tasks) => {\r\n                this.relatedTasks = tasks;\r\n            });\r\n    }\r\n\r\n    addTask() {\r\n        \r\n    }\r\n}\r\n\r\nexport default TrainingContent;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\Search.tsx",["902"],"﻿import React, { Component } from 'react';\r\nimport WordStore from \"../../../stores/WordStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport { Input } from \"reactstrap\";\r\nimport { WordViewModel } from \"../../../Typings/viewModels/WordViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { UserViewModel } from \"../../../Typings/viewModels/UserViewModel\";\r\nimport { UserRole } from \"../../../Typings/enums/UserRole\";\r\nimport { mapToWordReadModel } from \"../../../functions/mapper\";\r\n\r\nclass ISearchProps {\r\n    wordStore: WordStore;\r\n    user: UserViewModel;\r\n}\r\n\r\n@observer\r\nclass Search extends Component<ISearchProps> {\r\n    foundWords: WordViewModel[] = new Array<WordViewModel>();\r\n    selectOpen: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            foundWords: observable,\r\n            selectOpen: observable\r\n        });\r\n    }\r\n\r\n    renderSearchBox() {\r\n        return(\r\n            <>\r\n                <Input type=\"text\"\r\n                       className=\"searchInput\"\r\n                       onMouseEnter={() => this.selectOpen = true}\r\n                       onMouseOut={() => this.selectOpen = false}\r\n                       onChange={(e) => this.onChange(e)}\r\n                />\r\n                <button className=\"searchButton\" type=\"submit\"/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderWords() {\r\n        return(\r\n            <select className=\"searchSelect\" size={4}>\r\n                {this.foundWords.map((word) => {\r\n                    return(\r\n                        <>\r\n                            <option\r\n                                value={word.word}\r\n                                id={word.id.toString()}\r\n                                onClick={(e) => this.setState({chosenWord: word})}\r\n                            >{word.word}</option>\r\n                            <i className=\"fa fa-plus\" aria-hidden=\"true\" onClick={() => this.addWordToDictionary(word)}/>\r\n                        </>\r\n                    )\r\n                })}\r\n            </select>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"row\" style={{marginLeft: \"5px\", marginRight: \"5px\"}}>\r\n                <div className=\"col-sm-6\">\r\n                    <div className=\"searchbar searchForm\">\r\n                        {this.renderSearchBox()}\r\n                    </div>\r\n                    {this.selectOpen && this.renderWords()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onChange(event: React.FormEvent<HTMLInputElement>) {\r\n        this.foundWords =  this.props.wordStore.dictionary\r\n            .filter(w => w.word.includes(event.currentTarget.value));//todo: ЗДЕСЬ ЛУЧШЕ ОТФИЛЬТРОВЫВАТЬ ТЕ СЛОВА, КОТОРЫЕ УЖЕ ЕСТЬ В ЮЗЕРСКОМ СЛОВАРЕ\r\n    }\r\n\r\n    addWordToDictionary(word: WordViewModel) {\r\n        if(this.props.user.role === UserRole.User) {\r\n            let wordReadModel = mapToWordReadModel(word);\r\n            this.props.wordStore.addOrUpdateWordToUserDictionary(wordReadModel, this.props.user.id);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Search;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\TagReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserWordReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\TrainingTypes\\EnglishWordRussianMeaningTraining.tsx",["903","904","905","906"],"﻿import React, { Component } from \"react\";\r\nimport { Card, CardTitle, CardBody, CardFooter, Button } from \"reactstrap\";\r\nimport { shuffleWords } from \"../../../../functions/shuffleWords\";\r\nimport { ITrainingTypeProps } from \"./ITrainingTypeProps\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\n\r\n@observer\r\nclass EnglishWordRussianMeaningTraining extends Component<ITrainingTypeProps> {\r\n    answered: boolean;\r\n    choosenAnswerId: number;\r\n    rightAnswer: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            answered: observable,\r\n            choosenAnswerId: observable,\r\n            rightAnswer: observable,\r\n        });\r\n    }\r\n\r\n    renderWords() {\r\n        let words = shuffleWords(this.props.words);\r\n        return(\r\n            <>\r\n                {words.map((word) => {\r\n                    return (\r\n                        <div className=\"row justify-content-center\">\r\n                            <Button\r\n                                disabled={this.answered}\r\n                                style={{width: '100%', marginTop: '5px'}}\r\n                                id={word.id.toString()}\r\n                                onClick={(e) => this.chooseAnswer(e)}\r\n                                outline={this.choosenAnswerId == word.id && this.answered ? this.rightAnswer ? false : false : true}\r\n                                color={this.choosenAnswerId == word.id && this.answered ? this.rightAnswer ? \"success\" : \"danger\" : \"primary\"}>\r\n                                {word.russianMeaning}\r\n                            </Button>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </>\r\n        )\r\n    }\r\n\r\n    renderButtons() {\r\n        return(\r\n            <>\r\n                {!this.answered && <Button color=\"success\" onClick={() => this.check()} style={{width: '100%'}}>ПРОВЕРИТЬ</Button>}\r\n                {this.answered && <Button color=\"primary\" onClick={() => this.continue()} style={{width: '100%'}}>ПРОДОЛЖИТЬ</Button>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Card style={{width: '100%'}}>\r\n                <CardTitle className=\"text-center\">{this.props.word.word}</CardTitle>\r\n                <CardBody>\r\n                    {this.renderWords()}\r\n                </CardBody>\r\n                <CardFooter className=\"text-center\">\r\n                    {this.renderButtons()}\r\n                </CardFooter>\r\n            </Card>\r\n        )\r\n    }\r\n\r\n    check() {\r\n        this.rightAnswer = this.props.word.id == this.choosenAnswerId;\r\n        this.answered = true;\r\n    }\r\n\r\n    continue() {\r\n        this.props.continue(this.props.word.id, this.rightAnswer);\r\n    }\r\n\r\n    chooseAnswer(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\r\n        this.choosenAnswerId = Number(event.currentTarget.id);\r\n    }\r\n}\r\n\r\nexport default EnglishWordRussianMeaningTraining;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\TrainingTypes\\RussianWordEnglishWordTraining.tsx",["907","908","909","910"],"﻿import React, { Component } from \"react\";\r\nimport { ITrainingTypeProps } from \"./ITrainingTypeProps\";\r\nimport { observer } from \"mobx-react\";\r\nimport { Button, Card, CardBody, CardFooter, CardTitle } from \"reactstrap\";\r\nimport { shuffleWords } from \"../../../../functions/shuffleWords\";\r\nimport { WordViewModel } from \"../../../../Typings/viewModels/WordViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\n\r\n@observer\r\nclass RussianWordEnglishWordTraining extends Component<ITrainingTypeProps> {\r\n    answered: boolean;\r\n    choosenAnswerId: number;\r\n    rightAnswer: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            answered: observable,\r\n            choosenAnswerId: observable,\r\n            rightAnswer: observable,\r\n        });\r\n    }\r\n\r\n    renderWords(words: WordViewModel[]) {\r\n        return(\r\n            <>\r\n                {words.map((word) => {\r\n                    return (\r\n                        <div className=\"row justify-content-center\">\r\n                            <Button\r\n                                disabled={this.answered}\r\n                                style={{width: '100%', marginTop: '5px'}}\r\n                                id={word.id.toString()}\r\n                                onClick={(e) => this.chooseAnswer(e)}\r\n                                outline={this.choosenAnswerId == word.id && this.answered ? this.rightAnswer ? false : false : true}\r\n                                color={this.choosenAnswerId == word.id && this.answered ? this.rightAnswer ? \"success\" : \"danger\" : \"primary\"}>\r\n                                {word.word}\r\n                            </Button>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </>\r\n        )\r\n    }\r\n\r\n    renderButtons() {\r\n        return (\r\n            <>\r\n                {!this.answered && <Button color=\"success\" onClick={() => this.check()} style={{width: '100%'}}>ПРОВЕРИТЬ</Button>}\r\n                {this.answered && <Button color=\"primary\" onClick={() => this.continue()} style={{width: '100%'}}>ПРОДОЛЖИТЬ</Button>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Card style={{width: '100%'}}>\r\n                <CardTitle className=\"text-center\">{this.props.word.russianMeaning}</CardTitle>\r\n                <CardBody>\r\n                    {this.renderWords(shuffleWords(this.props.words))}\r\n                </CardBody>\r\n                <CardFooter className=\"text-center\">\r\n                    {this.renderButtons()}\r\n                </CardFooter>\r\n            </Card>\r\n        );\r\n    }\r\n\r\n    check() {\r\n        this.rightAnswer = this.props.word.id == this.choosenAnswerId;\r\n        this.answered = true;\r\n    }\r\n\r\n    continue() {\r\n        this.props.continue(this.props.word.id, this.rightAnswer);\r\n    }\r\n\r\n    chooseAnswer(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\r\n        this.choosenAnswerId = Number(event.currentTarget.id);\r\n    }\r\n}\r\n\r\nexport default RussianWordEnglishWordTraining;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\shuffleWords.tsx",["911"],"﻿import { WordViewModel } from \"../Typings/viewModels/WordViewModel\";\r\n\r\nexport function shuffleWords(array: WordViewModel[]): WordViewModel[] {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n\r\n    return array;\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\AddSubtask.tsx",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Users\\UsersPage.tsx",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Users\\Users.tsx",["912"],"﻿import React, { Component } from 'react';\r\nimport UserStore from \"../../../stores/UserStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport { UserViewModel } from \"../../../Typings/viewModels/UserViewModel\";\r\nimport User from \"./User\";\r\nimport { Table } from \"reactstrap\";\r\n\r\nclass IUsersProps {\r\n    userStore: UserStore;\r\n}\r\n\r\n@observer\r\nclass Users extends Component<IUsersProps> {\r\n    renderUsers(users: UserViewModel[]) {\r\n        return(\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <td>Id</td>\r\n                        <td>Фамилия имя</td>\r\n                        <td>Email</td>\r\n                        <td>Логин</td>\r\n                        <td>Роль</td>\r\n                        <td></td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {users.map(user => {\r\n                    return(\r\n                        <User user={user} userStore={this.props.userStore} key={user.id}/>\r\n                    );\r\n                })}\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let users = this.props.userStore.users;\r\n        return(\r\n            <>\r\n                {this.renderUsers(users)}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Users;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Participants\\ParticipantsPage.tsx",["913","914"],"﻿import React, { Component }from 'react';\r\nimport { observer } from \"mobx-react\";\r\nimport CourseStore from \"../../../stores/CourseStore\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport { UserViewModel } from \"../../../Typings/viewModels/UserViewModel\";\r\nimport UserStore from \"../../../stores/UserStore\";\r\nimport { Button, Alert, Label } from \"reactstrap\";\r\nimport Participants from \"./Participants\";\r\nimport {UserCourseViewModel} from \"../../../Typings/viewModels/UserCourseViewModel\";\r\n\r\nclass IParticipantsPageProps {\r\n    courseStore: CourseStore;\r\n    userStore: UserStore;\r\n}\r\n\r\n@observer\r\nclass ParticipantsPage extends Component<IParticipantsPageProps> {\r\n    participants: UserViewModel[] = new Array<UserViewModel>();\r\n    restUsers: UserViewModel[] = new Array<UserViewModel>();\r\n    saved: boolean;\r\n    notSaved: boolean;\r\n    notDeleted: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            participants: observable,\r\n            saved: observable,\r\n            notSaved: observable,\r\n            restUsers: observable,\r\n            notDeleted: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.setUsers();\r\n    }\r\n\r\n    setUsers() {\r\n        let usersByCourse = this.props.courseStore.usersByCourse;\r\n        let users = this.props.userStore.users;\r\n        let participants = users.filter(u => usersByCourse\r\n            .map(uc => uc.userId)\r\n            .includes(u.id));\r\n        this.restUsers = users.filter(function(u) {\r\n            return !participants.includes(u);\r\n        });\r\n        this.participants = participants;\r\n    }\r\n\r\n    renderCurrentParticipants(participants: UserViewModel[]) {\r\n        return(\r\n            <Participants participants={participants} deleteParticipant={this.deleteParticipant} courseStore={this.props.courseStore} />\r\n        );\r\n    }\r\n\r\n    renderRestUsers(users: UserViewModel[]) {\r\n        return(\r\n            <>\r\n                {users.map(u => {\r\n                    return(\r\n                        <div className=\"row justify-content-center\" style={{border: \"1px solid black\"}}>\r\n                            <Label>\r\n                                {u.lastName} {u.firstName}\r\n                            </Label>\r\n                            <i\r\n                               style={{marginLeft: \"10px\"}}\r\n                               onClick={() => this.addParticipant(u)}\r\n                               className=\"fa fa fa-plus\" aria-hidden=\"true\"/>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderSaveButton() {\r\n        return(\r\n            <Button color=\"primary\"\r\n                onClick={(e) => this.save()}>\r\n                Сохранить\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderSavedDetails() {\r\n        return(\r\n            <>\r\n                {this.saved && <Alert color=\"success\">Список успешно обновлён!</Alert>}\r\n                {this.notSaved && <Alert color=\"danged\">Что-то пошло не так, и список не обновился :(</Alert>}\r\n                {this.notDeleted && <Alert color=\"danged\">Что-то пошло не так, и пользователь не удалился:(</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderDividingLine() {\r\n        return(\r\n            <>\r\n                <hr />\r\n                <span style={{fontSize: \"1.5em\"}}>\r\n                    Добавить:\r\n                </span>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderSavedDetails()}\r\n                {this.renderCurrentParticipants(this.participants)}\r\n                {this.renderSaveButton()}\r\n                {this.renderDividingLine()}\r\n                {this.renderRestUsers(this.restUsers)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    save() {\r\n        let participantsIds = this.participants.map(p => p.id);\r\n        this.props.courseStore.addOrUpdateParticipantsList(participantsIds, this.props.courseStore.choosenCourse.id)\r\n            .then((status) => {\r\n                this.saved = status === 200;\r\n                this.notSaved = status !== 200;\r\n            });\r\n    }\r\n\r\n    deleteParticipant = (participant: UserViewModel) => {\r\n        this.props.courseStore.deleteUserFromCourse(participant.id, this.props.courseStore.choosenCourse.id)\r\n            .then((status) => {\r\n                if(status === 200) {\r\n                    this.props.courseStore.getUsersByCourse(this.props.courseStore.choosenCourse.id)\r\n                        .then(() => {\r\n                            this.setUsers(); \r\n                        });\r\n                }\r\n                 this.notDeleted = status !== 200;\r\n                \r\n            })\r\n    };\r\n\r\n    addParticipant(user: UserViewModel) {\r\n        let userCourseViewModel = new UserCourseViewModel();\r\n        userCourseViewModel.courseId = this.props.courseStore.choosenCourse.id;\r\n        userCourseViewModel.userId = user.id;\r\n        userCourseViewModel.expireDate = new Date();\r\n        userCourseViewModel.startDate = new Date();\r\n        this.props.courseStore.addOrUpdateUserCourseDetails(userCourseViewModel)\r\n            .then((status) => {\r\n                if(status === 200) {\r\n                    this.props.courseStore.getUsersByCourse(this.props.courseStore.choosenCourse.id)\r\n                        .then((status) => {\r\n                            this.setUsers();\r\n                        });\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport default ParticipantsPage;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\WordsOfADay\\WordsOfADay.tsx",["915"],"﻿import React, { Component } from 'react';\r\nimport { observer } from \"mobx-react\";\r\nimport Calendar from \"react-calendar\";\r\nimport {makeObservable, observable} from \"mobx\";\r\nimport WordOfADay from \"../../Common/WordsOfADay/WordOfADay\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\n\r\nclass IWordsOfADayProps {\r\n    store: RootStore\r\n}\r\n\r\n@observer\r\nclass WordsOfADay extends Component<IWordsOfADayProps> {\r\n    choosenDate: Date | Date[] = new Date();\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            choosenDate: observable\r\n        });\r\n    }\r\n\r\n    renderCalendar() {\r\n        const choosenDate = typeof this.choosenDate === \"string\" ? new Date(this.choosenDate) : this.choosenDate;\r\n        return(\r\n            <Calendar\r\n                value={choosenDate}\r\n                onChange={(date) => this.inputDate(date)}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderWordOfADay() {\r\n        return(\r\n            <>\r\n                <WordOfADay date={this.choosenDate} store={this.props.store}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-lg-3 col-md-6 col-sm-12 col-xs-12\">\r\n                        {this.renderCalendar()}\r\n                    </div>\r\n                    <div className=\"col-lg-9 col-md-6 col-sm-12 col-xs-12\">\r\n                        {this.renderWordOfADay()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    inputDate(date: Date | Date[]) {\r\n        this.choosenDate = date;\r\n    }\r\n}\r\n\r\nexport default WordsOfADay;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Participants\\Participants.tsx",["916"],"﻿import React, { Component } from 'react';\r\nimport { observer } from \"mobx-react\";\r\nimport { UserViewModel } from \"../../../Typings/viewModels/UserViewModel\";\r\nimport CourseStore from \"../../../stores/CourseStore\";\r\nimport Participant from \"./Participant\";\r\nimport { Table } from \"reactstrap\";\r\n\r\nclass IParticipantsProps {\r\n    participants: UserViewModel[];\r\n    deleteParticipant: any;\r\n    courseStore: CourseStore;\r\n}\r\n\r\n@observer\r\nclass Participants extends Component<IParticipantsProps>{\r\n    renderParticipants(participants: UserViewModel[]) {\r\n        return(\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <td>ФИО</td>\r\n                        <td>Тариф</td>\r\n                        <td>Дата начала</td>\r\n                        <td>Дата окончания</td>\r\n                        <td>Роль</td>\r\n                        <td></td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {participants.map(p => {\r\n                    return(\r\n                        <Participant key={p.id} participant={p} courseStore={this.props.courseStore} deleteParticipant={this.props.deleteParticipant} />\r\n                    );\r\n                })}\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderParticipants(this.props.participants)}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Participants;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Participants\\Participant.tsx",["917","918","919","920"],"﻿import React, {Component} from 'react';\r\nimport {observer} from \"mobx-react\";\r\nimport {UserViewModel} from \"../../../Typings/viewModels/UserViewModel\";\r\nimport CourseStore from \"../../../stores/CourseStore\";\r\nimport {UserCourseViewModel} from \"../../../Typings/viewModels/UserCourseViewModel\";\r\nimport { Button, Dropdown, DropdownItem, DropdownMenu, DropdownToggle, Label, Alert } from \"reactstrap\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport Calendar from \"react-calendar\";\r\nimport {UserRole} from \"../../../Typings/enums/UserRole\";\r\nimport {Tarif} from \"../../../Typings/enums/Tarif\";\r\nimport {translateCourseRole, translateRole, translateTarif} from \"../../../functions/translater\";\r\nimport {renderSpinner} from \"../../../functions/renderSpinner\";\r\nimport {CourseRole} from \"../../../Typings/enums/CourseRole\";\r\n\r\nclass IParticipantProps {\r\n    participant: UserViewModel;\r\n    courseStore: CourseStore;\r\n    deleteParticipant: any;\r\n}\r\n\r\n@observer\r\nclass Participant extends Component<IParticipantProps> {\r\n    notSaved: boolean;\r\n    saved: boolean;\r\n    details: UserCourseViewModel;\r\n    roleMenuOpen: boolean;\r\n    tarifOpen: boolean;\r\n    startDateCalendarOpen: boolean;\r\n    expireDateCalendarOpen: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            notSaved: observable,\r\n            saved: observable,\r\n            details: observable,\r\n            roleMenuOpen: observable,\r\n            tarifOpen: observable,\r\n            startDateCalendarOpen: observable,\r\n            expireDateCalendarOpen: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        let participant = this.props.participant;\r\n        this.details = this.props.courseStore.usersByCourse.filter(u => u.userId === participant.id)[0];\r\n    }\r\n\r\n    renderWarnings() {\r\n        return(\r\n            <>\r\n                {this.notSaved && <Alert color=\"danger\">Не удалось обновить данные</Alert>}\r\n                {this.saved && <Alert color=\"success\">Данные успешно обновились :)</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderParticipant(participant: UserViewModel, details: UserCourseViewModel) {\r\n        return(\r\n            <>\r\n                {this.renderWarnings()}\r\n                <tr>\r\n                    <td>\r\n                        {this.renderName(participant)}\r\n                    </td>\r\n                    <td>\r\n                        {this.renderTarif(details)}\r\n                    </td>\r\n                    <td>\r\n                        {this.renderStartDate(details)}\r\n                    </td>\r\n                    <td>\r\n                        {this.renderEndDate(details)}\r\n                    </td>\r\n                    <td>\r\n                        {this.renderRole(details)}\r\n                    </td>\r\n                    <td>\r\n                        {this.renderControlButtons()}\r\n                    </td>\r\n                </tr>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderName(participant: UserViewModel) {\r\n        return(\r\n            <Label>\r\n                {participant.lastName} {participant.firstName}\r\n            </Label>\r\n        );\r\n    }\r\n\r\n    renderTarif(details: UserCourseViewModel) {\r\n        return(\r\n            <Dropdown isOpen={this.tarifOpen} toggle={() => this.toggleTarif()}>\r\n                <DropdownToggle caret>\r\n                    {translateTarif(details.tarif)}\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem id=\"1\" onClick={() => this.tarifChange(Tarif.Usual)}>{translateTarif(Tarif.Usual)}</DropdownItem>\r\n                    <DropdownItem id=\"2\" onClick={() => this.tarifChange(Tarif.Premium)}>{translateTarif(Tarif.Premium)}</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderStartDate(details: UserCourseViewModel) {\r\n        return (\r\n            <>\r\n                {<span onClick={() => this.toggleStartDate()}>{new Date(details.startDate).toLocaleDateString()}</span>}\r\n                {this.startDateCalendarOpen && this.renderStartDateCalendar(details)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderStartDateCalendar(details: UserCourseViewModel) {\r\n        const startDate = typeof details.startDate === \"string\" ? new Date(details.startDate) : details.startDate;\r\n        return(\r\n            <Calendar\r\n                minDate={new Date(2021)}\r\n                value={startDate}\r\n                onChange={(date) => this.inputDate(date, \"startDate\")}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderEndDate(details: UserCourseViewModel) {\r\n        return (\r\n            <>\r\n                {<span onClick={() => this.toggleExpireDate()}>{new Date(details.expireDate).toLocaleDateString()}</span>}\r\n                {this.expireDateCalendarOpen && this.renderEndDateCalendar(details)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderEndDateCalendar(details: UserCourseViewModel) {\r\n        const expireDate = typeof details.expireDate === \"string\" ? new Date(details.expireDate) : details.expireDate;\r\n        return(\r\n            <Calendar\r\n                minDate={new Date(2021)}\r\n                value={expireDate}\r\n                onChange={(date) => this.inputDate(date, \"expireDate\")}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderRole(details: UserCourseViewModel) {\r\n        return(\r\n            <Dropdown isOpen={this.roleMenuOpen} toggle={() => this.toggleRoleMenu()}>\r\n                <DropdownToggle caret>\r\n                    {translateCourseRole(details.courseRole)}\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem id=\"1\" onClick={() => this.roleCourseChange(CourseRole.Teacher)}>{translateCourseRole(CourseRole.Teacher)}</DropdownItem>\r\n                    <DropdownItem id=\"2\" onClick={() => this.roleCourseChange(CourseRole.Pupil)}>{translateCourseRole(CourseRole.Pupil)}</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderControlButtons() {\r\n        return(\r\n            <>\r\n                <Button \r\n                    style={{width: \"90%\", marginBottom: \"4px\"}}\r\n                    outline color=\"success\" onClick={() => this.updateParticipant()}>\r\n                    СОХРАНИТЬ\r\n                </Button>\r\n                <Button\r\n                    style={{width: \"90%\", marginBottom: \"10px\"}}\r\n                    outline color=\"danger\" onClick={() => this.props.deleteParticipant(this.props.participant)}>\r\n                    УДАЛИТЬ\r\n                </Button>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.details !== undefined && this.renderParticipant(this.props.participant, this.details)}\r\n                {this.details === undefined && renderSpinner()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    updateParticipant() {\r\n        this.props.courseStore.addOrUpdateUserCourseDetails(this.details)\r\n            .then((status) => {\r\n                this.notSaved = status !== 200;\r\n                this.saved = status === 200;\r\n            });\r\n    }\r\n\r\n    inputDate(date: Date | Date[], type: string) {\r\n        if (type === \"startDate\") {\r\n            this.details.startDate = date;\r\n        } else if (type === \"expireDate\") {\r\n            this.details.expireDate = date;\r\n        }\r\n    }\r\n\r\n    toggleRoleMenu() {\r\n        this.roleMenuOpen = !this.roleMenuOpen;\r\n    }\r\n\r\n    roleCourseChange(role: CourseRole) {\r\n        this.details.courseRole = role;\r\n    }\r\n\r\n    tarifChange(tarif: Tarif) {\r\n        this.details.tarif = tarif;\r\n    }\r\n\r\n    toggleTarif() {\r\n        this.tarifOpen = !this.tarifOpen;\r\n    }\r\n\r\n    toggleStartDate() {\r\n        this.startDateCalendarOpen = !this.startDateCalendarOpen;\r\n    }\r\n\r\n    toggleExpireDate() {\r\n        this.expireDateCalendarOpen = !this.expireDateCalendarOpen;\r\n    }\r\n}\r\n\r\nexport default Participant;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\WordsOfADay\\WordOfADay.tsx",["921","922"],"﻿import React, {Component} from 'react';\r\nimport {observer} from \"mobx-react\";\r\nimport {Alert, Button, Card, CardBody, CardFooter, CardHeader, CardText, CardTitle, Col, Row} from \"reactstrap\";\r\nimport {WordViewModel} from \"../../../Typings/viewModels/WordViewModel\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport {UserRole} from \"../../../Typings/enums/UserRole\";\r\nimport CommentGroup from \"../Comments/CommentGroup\";\r\nimport {CommentedEntityType} from \"../../../Typings/enums/CommentedEntityType\";\r\nimport {WordReadModel} from \"../../../Typings/readModels/WordReadModel\";\r\nimport AnswerToWordOfADay from \"./AnswerToWordOfADay\";\r\nimport UserAnswers from \"../../Admin/WordsOfADay/UserAnswers\";\r\nimport {translatePartOfSpeech} from \"../../../functions/translater\";\r\nimport AddOrUpdateWord from \"../Dictionary/AddOrUpdateWord\";\r\n\r\nclass IWordOfADayProps {\r\n    date: Date | Date[];\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass WordOfADay extends Component<IWordOfADayProps> {\r\n    word: WordViewModel = new WordViewModel();\r\n    addOrUpdate: boolean = false;\r\n    role: UserRole;\r\n    showComments: boolean;\r\n    showCautions: boolean = true;\r\n    itIsNotAllowedToWatchNextWords: boolean;\r\n    showUserAnswers: boolean;\r\n    alreadyExists: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            word: observable,\r\n            addOrUpdate: observable,\r\n            role: observable,\r\n            showCautions: observable,\r\n            showComments: observable,\r\n            itIsNotAllowedToWatchNextWords: observable,\r\n            showUserAnswers: observable,\r\n            alreadyExists: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n       this.role = this.props.store.userStore.currentUser.role;\r\n       this.props.store.wordStore\r\n            .getWordOfADay(this.props.date, this.props.store.courseStore.choosenCourse.id)\r\n            .then((word) => {\r\n                this.word = word;\r\n                this.showCautions = word.word === null;\r\n                this.alreadyExists = word.word !== null;\r\n            });\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<IWordOfADayProps>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        if(prevProps.date !== this.props.date) {\r\n            this.setWordOfADay(this.props.date);\r\n        }\r\n    }\r\n\r\n    renderCautions() {\r\n        return(\r\n            <Alert style={{marginTop: \"10px\"}} color=\"danger\">На эту дату слово дня отсутствует</Alert>\r\n        );\r\n    }\r\n\r\n    renderDeleteButton() {\r\n        if(this.props.store.userStore.currentUser.role === UserRole.Admin) {\r\n            return(\r\n                <i style={{marginLeft: '95%', width: '3%'}}\r\n                   onClick={() => this.handleDelete()}\r\n                   className=\"fa fa-window-close\" aria-hidden=\"true\" />\r\n            );\r\n        }\r\n    }\r\n\r\n    renderWord(word: WordViewModel) {\r\n        return(\r\n            <CardHeader className=\"text-center\">{word.word.toUpperCase()}</CardHeader>\r\n        );\r\n    }\r\n\r\n    renderWordDetails(word: WordViewModel) {\r\n        return(\r\n            <>\r\n                <CardTitle>{translatePartOfSpeech(word.partOfSpeech)}</CardTitle>\r\n                <CardText>{word.russianMeaning}</CardText>\r\n                <CardText>{word.englishMeaning}</CardText>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderEditButton() {\r\n        if(this.role === UserRole.Admin) {\r\n            return(\r\n                <button\r\n                    onClick={() => this.toggleAddOrUpdateWord()}>\r\n                    Отредактировать\r\n                </button>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderAnswerToWordOfADay() {\r\n        if(this.role === UserRole.User) {\r\n            let userId = this.props.store.userStore.currentUser.id;\r\n            return(\r\n                <AnswerToWordOfADay wordId={this.word.id} userId={userId} wordStore={this.props.store.wordStore}/>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderComments() {\r\n        if (this.role === UserRole.User) {\r\n            return(\r\n                <Button\r\n                    outline color=\"primary\"\r\n                    onClick={() => this.toggleComments()}>\r\n                    Комментарии\r\n                    {this.showComments &&\r\n                    <CommentGroup commentedEntityType={CommentedEntityType.WordOfADay} commentedEntityId={this.word.id} onToggle={this.toggleComments} store={this.props.store} userId={this.props.store.userStore.currentUser.id}/>}\r\n                </Button>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderWordOfADay(word: WordViewModel) {\r\n        return(\r\n            <>\r\n                <Row className=\"justify-content-center\">\r\n                    <Col sm=\"9\">\r\n                        <Card>\r\n                            {this.renderDeleteButton()}\r\n                            {this.renderWord(word)}\r\n                            <CardBody className=\"text-center\">\r\n                                {this.renderWordDetails(word)}\r\n                            </CardBody>\r\n                            <CardFooter className=\"text-center\">\r\n                                {this.renderEditButton()}\r\n                            </CardFooter>\r\n                            {this.renderAnswerToWordOfADay()}\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    {this.renderComments()}\r\n                </Row>\r\n                <Row className=\"row justify-content-center\" style={{marginTop: \"10px\"}}>\r\n                    {this.renderUserAnswersControl()}\r\n                </Row>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderAddOrUpdateWordOfADay() {\r\n        let courseId = this.props.store.courseStore.choosenCourse.id;\r\n        let currentUser = this.props.store.userStore.currentUser;\r\n        return (\r\n            <AddOrUpdateWord word={this.word} cancelEdit={this.toggleAddOrUpdateWord} courseId={courseId} currentUser={currentUser} date={this.props.date} isWordOfADay={true} wordStore={this.props.store.wordStore} />\r\n        );\r\n    }\r\n\r\n    renderGetUserAnswersButton() {\r\n        return(\r\n            <>\r\n                {<Button outline color=\"secondary\" onClick={() => this.toggleUserAnswers()}>\r\n                    ПОЛУЧИТЬ ОТВЕТЫ ПОЛЬЗОВАТЕЛЕЙ\r\n                </Button>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderUserAnswers() {\r\n        return (\r\n            <UserAnswers store={this.props.store}  wordId={this.word.id}/>\r\n        );\r\n    }\r\n\r\n    renderUserAnswersControl() {\r\n        let role = this.props.store.userStore.currentUser.role;\r\n        if(role === UserRole.Admin) {\r\n            return(\r\n                <>\r\n                    {!this.showUserAnswers && this.renderGetUserAnswersButton()}\r\n                    {this.showUserAnswers && this.renderUserAnswers()}\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderButton() {\r\n        if(this.props.store.userStore.currentUser.role === UserRole.Admin) {\r\n            return(\r\n                <Button outline color=\"primary\" onClick={() => this.toggleAddOrUpdateWord()}>\r\n                    Добавить слово\r\n                </Button>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.showCautions && this.renderCautions()}\r\n                {!this.showCautions && this.renderWordOfADay(this.word)}\r\n                {this.addOrUpdate && this.renderAddOrUpdateWordOfADay()}\r\n                {!this.alreadyExists && this.renderButton()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    handleDelete() {\r\n        let result = window.confirm('Вы уверены, что хотите удалить слово дня?');\r\n        if(result) {\r\n            let wordStore = this.props.store.wordStore;\r\n                wordStore.deleteWordOfADay(this.word.id)\r\n                    .then((status) => {\r\n                        if(status === 200) {\r\n                            this.word = new WordReadModel();\r\n                            this.addOrUpdate = true;\r\n                    }\r\n            })\r\n        }\r\n    }\r\n\r\n    toggleAddOrUpdateWord = () => {\r\n        this.addOrUpdate = !this.addOrUpdate;\r\n        this.setWordOfADay(this.props.date);\r\n    };\r\n\r\n    toggleComments() {\r\n        this.showComments = !this.showComments;\r\n    }\r\n\r\n    setWordOfADay(date: Date | Date[]) {\r\n        let courseId = this.props.store.courseStore.choosenCourse.id;\r\n        this.props.store.wordStore.getWordOfADay(date, courseId)\r\n            .then((word) => {\r\n                this.word = word;\r\n            });\r\n    }\r\n\r\n    toggleUserAnswers() {\r\n        this.showUserAnswers = !this.showUserAnswers;\r\n    }\r\n}\r\n\r\nexport default WordOfADay;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\CommentedEntityType.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\WordsOfADay\\AnswerToWordOfADay.tsx",["923"],"﻿import React, { Component } from \"react\";\r\nimport { CardFooter, Button, Input, Alert } from \"reactstrap\";\r\nimport WordStore from \"../../../stores/WordStore\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { UserWordReadModel } from \"../../../Typings/readModels/UserWordReadModel\";\r\nimport { mapToUserAnswerReadModel } from \"../../../functions/mapper\";\r\n\r\nclass IAnswerToWordOfADayProps {\r\n    wordId: number;\r\n    wordStore: WordStore;\r\n    userId: number;\r\n}\r\n\r\n@observer\r\nclass AnswerToWordOfADay extends Component <IAnswerToWordOfADayProps> {\r\n    userAnswer: UserWordReadModel = new UserWordReadModel();\r\n    addOrUpdateAnswer: boolean;\r\n    notSaved: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            userAnswer: observable,\r\n            addOrUpdateAnswer: observable,\r\n            notSaved: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.props.wordStore.getUserWordsProgress(this.props.wordId, this.props.userId)\r\n            .then((userAnswer) => {\r\n                this.userAnswer = mapToUserAnswerReadModel(userAnswer);\r\n                this.addOrUpdateAnswer = userAnswer.answer === \"\";\r\n            });\r\n    }\r\n\r\n    renderCautions() {\r\n        return(\r\n            <>\r\n                {this.notSaved && <Alert color=\"danger\">Не удалось сохранить ответ:(</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderAddOrUpdateAnswerInput() {\r\n        if(this.addOrUpdateAnswer) {\r\n            return (\r\n                <>\r\n                    <Input type=\"text\" value={this.userAnswer.answer} onChange={(e) => this.handleChange(e)}/>\r\n                    <Button onClick={() => this.handleSave()}>Сохранить</Button>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderAnswer() {\r\n        if(!this.addOrUpdateAnswer) {\r\n            return (\r\n                <CardFooter\r\n                    className=\"text-center\"\r\n                    onClick={() => this.addOrUpdateAnswerToggle()}>\r\n                    {this.userAnswer.answer}\r\n                </CardFooter>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderCautions()}\r\n                {this.renderAnswer()}\r\n                {this.renderAddOrUpdateAnswerInput()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    addOrUpdateAnswerToggle() {\r\n        this.addOrUpdateAnswer = !this.addOrUpdateAnswer;\r\n    }\r\n\r\n    handleChange(event: React.FormEvent<HTMLInputElement>) {\r\n        this.userAnswer.answer = event.currentTarget.value;\r\n    }\r\n\r\n    handleSave() {\r\n        this.props.wordStore.addOrUpdateUserWordProgress(this.userAnswer)\r\n            .then((status) => {\r\n                this.notSaved = status !== 200;\r\n            });\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default AnswerToWordOfADay;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\WordsOfADay\\UserAnswers.tsx",["924"],"﻿import React, { Component } from 'react';\r\nimport { observer } from \"mobx-react\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { UserViewModel } from \"../../../Typings/viewModels/UserViewModel\";\r\nimport { Accordion } from \"react-bootstrap\";\r\nimport UserAnswer from \"./UserAnswer\";\r\nimport { UserWordViewModel } from \"../../../Typings/viewModels/UserWordViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport {renderSpinner} from \"../../../functions/renderSpinner\";\r\n\r\nclass IUserAnswersProps {\r\n    store: RootStore;\r\n    wordId: number;\r\n}\r\n\r\n@observer\r\nclass UserAnswers extends Component<IUserAnswersProps> {\r\n    userWords: UserWordViewModel[] = new Array<UserWordViewModel>();\r\n    loaded: boolean = false;\r\n\r\n    constructor() {\r\n        //@ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            userWords: observable,\r\n            loaded: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.getUserWords();\r\n    }\r\n\r\n    renderUsers(users: UserViewModel[]) {\r\n        return(\r\n            <Accordion defaultActiveKey=\"0\">\r\n                {users.map((user) => {\r\n                    let userWord = this.getUserWord(user.id);\r\n                    return <UserAnswer user={user} store={this.props.store} userWord={userWord} />\r\n                })}\r\n            </Accordion>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let users = this.getUsers();\r\n        return (\r\n            <div className=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n                {this.loaded && this.renderUsers(users)}\r\n                {!this.loaded && renderSpinner()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getUsers(): UserViewModel[] {\r\n        let usersByCourse = this.props.store.courseStore.usersByCourse;\r\n        return this.props.store.userStore.users\r\n            .filter(u => usersByCourse\r\n                .map(uc => uc.userId)\r\n                .includes(u.id));\r\n    }\r\n\r\n    getUserWords() {\r\n        this.props.store.wordStore.getAnswersToWordOfADayByWord(this.props.wordId, this.props.store.courseStore.choosenCourse.id)\r\n            .then((userWords) => {\r\n                this.userWords = userWords;\r\n                this.loaded = true;\r\n            });\r\n    }\r\n\r\n    getUserWord(userId: number): UserWordViewModel {\r\n        return this.userWords.filter(uw => uw.userId === userId)[0];\r\n    }\r\n}\r\n\r\nexport default UserAnswers;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Comments\\CommentGroup.tsx",["925"],"﻿import React, { Component } from 'react';\r\nimport { Button, Input, Modal, ModalFooter, ModalHeader, ModalBody, Alert } from \"reactstrap\";\r\nimport { CommentGroupViewModel } from \"../../../Typings/viewModels/CommentGroupViewModel\";\r\nimport { CommentedEntityType } from \"../../../Typings/enums/CommentedEntityType\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport Comment from \"./Comment\";\r\nimport { CommentViewModel } from \"../../../Typings/viewModels/CommentViewModel\";\r\nimport { CommentReadModel } from \"../../../Typings/readModels/CommentReadModel\";\r\n\r\nclass ICommentGroupProps {\r\n    commentedEntityType: CommentedEntityType;\r\n    commentedEntityId: number;\r\n    userId: number;\r\n    store: RootStore;\r\n    onToggle: any;\r\n}\r\n\r\n@observer\r\nclass CommentGroup extends Component<ICommentGroupProps> {\r\n    commentGroup: CommentGroupViewModel;\r\n    notReceived: boolean;\r\n    windowOpen: boolean;\r\n    notSaved: boolean;\r\n    newComment: CommentViewModel = new CommentViewModel();\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            commentGroup: observable,\r\n            notReceived: observable,\r\n            windowOpen: observable,\r\n            notSaved: observable,\r\n            newComment: observable,\r\n        });\r\n    }\r\n    \r\n    componentDidMount(): void {\r\n        this.getCommentGroup()\r\n            .then((status) => {\r\n                if(status !== 200) {\r\n                    this.commentGroup.commentedEntityId = this.props.commentedEntityId;\r\n                    this.commentGroup.commentedEntityType = this.props.commentedEntityType;\r\n                    this.commentGroup.userId = this.props.userId;\r\n                }\r\n            });\r\n    }\r\n\r\n    renderCaution() {\r\n        return(\r\n            <>\r\n                {this.notReceived && <Alert color=\"danger\">Что-то пошло не так и не удалось получить комментарии</Alert>}\r\n                {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и не получилось добавить комментарий</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderCommentInput() {\r\n        return(\r\n            <Input placeholder=\"Введите комментарий\" onChange={(e) => this.handleChange(e)}/>\r\n        );\r\n    }\r\n\r\n    renderSaveButton() {\r\n        return(\r\n            <Button outline color=\"primary\" onClick={() => this.handleSave()}>Сохранить</Button>\r\n        );\r\n    }\r\n\r\n    renderComments() {\r\n        let comments = this.commentGroup.comments;\r\n        let myId = this.props.store.userStore.currentUser.id;\r\n        return(\r\n            <>\r\n                <ul className=\"message-list\">\r\n                    {comments.map((comment) => {//todo: добавить еще редактирование тех комментов, которые являются комментами текущего юзера\r\n                        return(\r\n                            // @ts-ignore\r\n                            <li key={comment.id} className=\"message\" align={`${comment.userId === myId ? \"right\": \"left\"}`}>\r\n                                <Comment comment={comment} userStore={this.props.store.userStore} saveComment={this.handleSave}/>\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Modal toggle={() => this.handleToggle()} isOpen={this.windowOpen} size=\"lg\">\r\n                {this.renderCaution()}\r\n                <ModalHeader toggle={() => this.handleToggle()} cssModule={{'modal-title': 'w-100 text-center'}}>Комментарии</ModalHeader>\r\n                <ModalBody>\r\n                    {this.renderComments()}\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    {this.renderCommentInput()}\r\n                    {this.renderSaveButton()}\r\n                </ModalFooter>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    handleToggle() {\r\n        this.windowOpen = !this.windowOpen;\r\n        this.props.onToggle();\r\n    }\r\n\r\n    handleSave(comment: CommentReadModel = this.getCommentReadModel()) {\r\n        this.saveComment(comment)\r\n            .then((status) => {\r\n                if(status === 200) {\r\n                    this.getCommentGroup();\r\n                }\r\n                this.notSaved = status !== 200;\r\n        });\r\n    }\r\n\r\n    handleChange(event: React.FormEvent<HTMLInputElement>) {\r\n        this.newComment.text = event.currentTarget.value;\r\n    }\r\n\r\n    async getCommentGroup(): Promise<number> {\r\n        const response = await fetch(`/getcommentgroup`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({commentedEntityType: this.props.commentedEntityType, commentedEntityId: this.props.commentedEntityId, userId: this.props.userId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.commentGroup = await response.json();\r\n        }\r\n        this.notReceived = response.status !== 200;\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async saveComment(comment: CommentReadModel): Promise<number> {\r\n        const response = await fetch(`/addorupdatecomment`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                comment: comment,\r\n                groupId: this.commentGroup.id,\r\n                commentedEntityType: this.commentGroup.commentedEntityType,\r\n                commentedEntityId: this.commentGroup.commentedEntityId,\r\n                userId: this.commentGroup.userId\r\n            })\r\n        });\r\n\r\n        return response.status;\r\n    }\r\n\r\n    getCommentReadModel(): CommentReadModel {\r\n        let myId = this.props.store.userStore.currentUser.id;\r\n        let comment = new CommentReadModel();\r\n        comment.userId = myId;\r\n        comment.publishDate = new Date();\r\n        comment.text = this.newComment.text;\r\n        comment.id = this.newComment.id;\r\n\r\n        return comment;\r\n    }\r\n}\r\n\r\nexport default CommentGroup;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\WordOfADayReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\CommentReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\mapper.tsx",["926","927"],"﻿import { WordReadModel } from \"../Typings/readModels/WordReadModel\";\r\nimport { WordViewModel } from \"../Typings/viewModels/WordViewModel\";\r\nimport { UserWordViewModel } from \"../Typings/viewModels/UserWordViewModel\";\r\nimport { UserWordReadModel } from \"../Typings/readModels/UserWordReadModel\";\r\nimport { TrackerViewModel } from \"../Typings/viewModels/TrackerViewModel\";\r\nimport { TrackerReadModel } from \"../Typings/readModels/TrackerReadModel\";\r\nimport { TrackerByDayReadModel } from \"../Typings/readModels/TrackerByDayReadModel\";\r\nimport { TrackerByDayViewModel } from \"../Typings/viewModels/TrackerByDayViewModel\";\r\nimport { SubtaskViewModel } from \"../Typings/viewModels/SubtaskViewModel\";\r\nimport { SubtaskReadModel } from \"../Typings/readModels/SubtaskReadModel\";\r\nimport { UserViewModel } from \"../Typings/viewModels/UserViewModel\";\r\nimport { UserReadModel } from \"../Typings/readModels/UserReadModel\";\r\nimport { TagViewModel } from \"../Typings/viewModels/TagViewModel\";\r\nimport { TagReadModel } from \"../Typings/readModels/TagReadModel\";\r\nimport { toJS } from \"mobx\";\r\n\r\nexport function mapWordReadModel(word: WordViewModel): WordReadModel {\r\n    let wordReadModel = new WordReadModel();\r\n    wordReadModel.id = word.id;\r\n    wordReadModel.partOfSpeech = word.partOfSpeech;\r\n    wordReadModel.englishMeaning = word.englishMeaning;\r\n    wordReadModel.russianMeaning = word.russianMeaning;\r\n    wordReadModel.word = word.word;\r\n    wordReadModel.examples = word.examples;\r\n\r\n    return wordReadModel;\r\n}\r\n\r\nexport function mapToUserAnswerReadModel(userWord: UserWordViewModel): UserWordReadModel {\r\n    let userAnswer = new UserWordReadModel();\r\n    userAnswer.answer = userWord.answer;\r\n    userAnswer.rightAnswers = userWord.rightAnswers;\r\n    userAnswer.status = userWord.status;\r\n    userAnswer.countOfAttempts = userWord.countOfAttempts;\r\n    // userAnswer.word = new WordReadModel(); todo: если это и так работает, то забей\r\n    userAnswer.word.id = userWord.wordId;\r\n    userAnswer.userId = userWord.userId;\r\n\r\n    return userAnswer;\r\n}\r\n\r\nexport function mapToTrackerReadModel(tracker: TrackerViewModel, userId: number, courseId: number, daysCount: number): TrackerReadModel {\r\n    let trackerReadModel = new TrackerReadModel();\r\n    trackerReadModel.id = tracker.id;\r\n    trackerReadModel.userId = userId;\r\n    trackerReadModel.courseId = courseId;\r\n    if(tracker.trackersByDay.length === 0) {\r\n        let trackersByDay = new Array<TrackerByDayViewModel>();\r\n        for(let i = 0; i < daysCount; i++) {\r\n            let trackerByDay = new TrackerByDayViewModel();\r\n            trackerByDay.day = i + 1;\r\n            trackersByDay.push(trackerByDay);\r\n        }\r\n        tracker.trackersByDay = trackersByDay;\r\n    }\r\n    trackerReadModel.trackersByDay = tracker.trackersByDay.map(t => {\r\n        return mapToTrackerByDayReadModel(t)\r\n    });\r\n\r\n    return trackerReadModel;\r\n}\r\n\r\nexport function mapToTrackerByDayReadModel(trackerByDay: TrackerByDayViewModel): TrackerByDayReadModel {\r\n    let trackerByDayReadModel = new TrackerByDayReadModel();\r\n    trackerByDayReadModel.id = trackerByDay.id;\r\n    trackerByDayReadModel.chatParticipation = trackerByDay.chatParticipation !== undefined ? trackerByDay.chatParticipation : false;\r\n    trackerByDayReadModel.completedHomework = trackerByDay.completedHomework !== undefined ? trackerByDay.completedHomework : false;\r\n    trackerByDayReadModel.dictionaryOfLesson = trackerByDay.dictionaryOfLesson !== undefined ? trackerByDay.dictionaryOfLesson : false;\r\n    trackerByDayReadModel.webinarWatch = trackerByDay.webinarWatch !== undefined ? trackerByDay.webinarWatch : false;\r\n    trackerByDayReadModel.wordOfADay = trackerByDay.wordOfADay !== undefined ? trackerByDay.wordOfADay : false;\r\n    trackerByDayReadModel.day = trackerByDay.day;\r\n\r\n    return trackerByDayReadModel;\r\n}\r\n\r\nexport function mapToSubtaskReadModel(subtask: SubtaskViewModel): SubtaskReadModel {\r\n    let subtaskReadModel = new SubtaskReadModel();\r\n    subtaskReadModel.id = subtask.id;\r\n    subtaskReadModel.path = subtask.path;\r\n    subtaskReadModel.text = subtask.text;\r\n    subtaskReadModel.order = subtask.order;\r\n    subtaskReadModel.subtaskType = subtask.subtaskType;\r\n\r\n    return subtaskReadModel;\r\n}\r\n\r\nexport function mapToWordReadModel(word: WordViewModel): WordReadModel {\r\n    let wordReadModel = new WordReadModel();\r\n    wordReadModel.id = word.id;\r\n    wordReadModel.word = word.word;\r\n    wordReadModel.russianMeaning = word.russianMeaning;\r\n    wordReadModel.englishMeaning = word.englishMeaning;\r\n    wordReadModel.partOfSpeech = word.partOfSpeech;\r\n    wordReadModel.examples = word.examples;\r\n\r\n    return wordReadModel;\r\n}\r\n\r\nexport function mapToUserReadModel(user: UserViewModel): UserReadModel {\r\n    let userReadModel = new UserReadModel();\r\n    userReadModel.id = user.id;\r\n    userReadModel.firstName = user.firstName;\r\n    userReadModel.lastName = user.lastName;\r\n    userReadModel.login = user.login;\r\n    userReadModel.email = user.email;\r\n    userReadModel.password = user.passwordHash;\r\n    userReadModel.token = user.token;\r\n    userReadModel.role = user.role;\r\n\r\n    return userReadModel;\r\n}\r\n\r\nexport function mapToTagReadModel(tag: TagViewModel): TagReadModel {\r\n    let tagReadModel = new TagReadModel();\r\n    tagReadModel.id = tag.id;\r\n    tagReadModel.name = tag.name;\r\n    \r\n    return tagReadModel;\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\WordsOfADay\\UserAnswer.tsx",["928"],"﻿import React, {Component} from 'react';\r\nimport { Accordion, Card } from \"react-bootstrap\";\r\nimport { Button } from \"reactstrap\";\r\nimport {observer} from \"mobx-react\";\r\nimport {UserViewModel} from \"../../../Typings/viewModels/UserViewModel\";\r\nimport {UserWordViewModel} from \"../../../Typings/viewModels/UserWordViewModel\";\r\nimport {makeObservable, observable} from \"mobx\";\r\nimport CommentGroup from \"../../Common/Comments/CommentGroup\";\r\nimport { CommentedEntityType } from \"../../../Typings/enums/CommentedEntityType\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { Alert } from \"reactstrap\";\r\n\r\nclass IUserAnswerProps {\r\n    userWord: UserWordViewModel;\r\n    user: UserViewModel;\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass UserAnswer extends Component<IUserAnswerProps> {\r\n    showComments: boolean;\r\n    answersLoaded: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            showComments: observable,\r\n            answersLoaded: observable\r\n        });\r\n    }\r\n\r\n    renderUserName(user: UserViewModel) {\r\n        return (\r\n            <Accordion.Toggle style={{width: \"90%\"}} as={Button} variant=\"link\" eventKey={user.id.toString()} onClick={() => this.setState({userAnswersLoad: true})}>\r\n                <span>{user.firstName + ' ' + user.lastName}</span>\r\n            </Accordion.Toggle>\r\n        );\r\n    }\r\n\r\n    renderComments() {\r\n        return(\r\n            <>\r\n                <Button\r\n                    outline color=\"primary\"\r\n                    onClick={() => this.toggleComments()}>\r\n                    Комментарии\r\n                </Button>\r\n                {this.showComments && \r\n                <CommentGroup commentedEntityType={CommentedEntityType.WordOfADay} commentedEntityId={this.props.userWord.wordId} userId={this.props.user.id} onToggle={this.toggleComments} store={this.props.store}/>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderAnswer(answer: UserWordViewModel) {\r\n        if (answer !== undefined) {\r\n            return(\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-8\">\r\n                        <span>{answer.answer}</span>\r\n                    </div>\r\n                    <div className=\"col-4\">\r\n                        {this.renderComments()}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <Alert color=\"primary\">Пользователь пока не добавил ответ.</Alert>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card>\r\n                <Card.Header style={{backgroundColor: 'white'}}>\r\n                    {this.renderUserName(this.props.user)}\r\n                </Card.Header>\r\n                <Accordion.Collapse eventKey={this.props.user.id.toString()}>\r\n                    <Card.Body>\r\n                        {this.renderAnswer(this.props.userWord)}\r\n                    </Card.Body>\r\n                </Accordion.Collapse>\r\n            </Card>\r\n        );\r\n    }\r\n\r\n    toggleComments() {\r\n        this.showComments = !this.showComments;\r\n    }\r\n}\r\n\r\nexport default UserAnswer;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Comments\\Comment.tsx",["929"],"﻿import React,{ Component } from 'react';\r\nimport { CommentViewModel } from \"../../../Typings/viewModels/CommentViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport UserStore from \"../../../stores/UserStore\";\r\nimport { Alert, Input, Button } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport {CommentReadModel} from \"../../../Typings/readModels/CommentReadModel\";\r\n\r\nclass ICommentProps {\r\n    comment: CommentViewModel;\r\n    userStore: UserStore;\r\n    saveComment: any;\r\n}\r\n\r\n@observer\r\nclass Comment extends Component<ICommentProps> {\r\n    comment: CommentViewModel;\r\n    notDeleted: boolean;\r\n    editWindowOpen: boolean;\r\n\r\n    constructor(props: ICommentProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            comment: observable,\r\n            notDeleted: observable,\r\n            \r\n        });\r\n        this.comment = this.props.comment;\r\n    }\r\n\r\n    remove() {\r\n        let result = window.confirm('Вы уверены, что хотите удалить комментарий?');\r\n        if(result) {\r\n            this.removeComment()\r\n        }\r\n    }\r\n\r\n    handleChange(event: React.FormEvent<HTMLInputElement>) {\r\n        this.comment.text = event.currentTarget.value;\r\n    }\r\n    \r\n    editCommentToggle() {\r\n        this.editWindowOpen = !this.editWindowOpen;\r\n    }\r\n\r\n    handleSave() {\r\n        let comment = this.getCommentReadModel();\r\n        this.props.saveComment(comment);\r\n    }\r\n    \r\n    renderEditInput() {\r\n        return(\r\n            <>\r\n                <Input value={this.comment.text} onChange={(e) => this.handleChange(e)}/>\r\n                <Button outline color=\"primary\" onClick={() => this.handleSave()}>Сохранить</Button>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderControlButtons() {\r\n        if(this.props.userStore.currentUser.id === this.comment.userId) {\r\n            return(\r\n                <>\r\n                    <i style={{marginLeft: '98%', width: '2%'}}\r\n                       onClick={() => this.remove()}\r\n                       className=\"fa fa-window-close\" aria-hidden=\"true\"/>\r\n                    <i style={{marginLeft: '98%', width: '2%'}}\r\n                       onClick={() => this.editCommentToggle()}\r\n                       className=\"fa fa-edit\" aria-hidden=\"true\"/>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderComment() {\r\n        let comment = this.comment;\r\n        let user = this.props.userStore.users.filter(u => u.id === this.comment.userId)[0];\r\n        return(\r\n            <>\r\n                <div>{user.firstName + ' ' + user.lastName}</div>\r\n                <div>{comment.text} </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n    renderCautions() {\r\n        return(\r\n            <>\r\n                {this.notDeleted && <Alert color=\"danger\">Что-то пошло не так и комментарий не удалился</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderCautions()}\r\n                {this.renderControlButtons()}\r\n                {this.renderComment()}\r\n                {this.editWindowOpen && this.renderEditInput()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    getCommentReadModel(): CommentReadModel {\r\n        let myId = this.props.userStore.currentUser.id;\r\n        let comment = new CommentReadModel();\r\n        comment.userId = myId;\r\n        comment.publishDate = new Date();\r\n        comment.text = this.comment.text;\r\n        comment.id = this.comment.id;\r\n\r\n        return comment;\r\n    }\r\n\r\n    async removeComment(): Promise<number> {\r\n        const response = await fetch(`/removecomment`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: this.comment.id})\r\n        });\r\n        this.notDeleted = response.status !== 200;\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default Comment;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\Tarif.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Users\\AddOrUpdateUserWindow.tsx",["930","931"],"﻿import React, {Component} from 'react';\r\nimport UserStore from \"../../../stores/UserStore\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport {\r\n    Alert,\r\n    Button,\r\n    Dropdown,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    Input,\r\n    Label,\r\n    Modal,\r\n    ModalBody,\r\n    ModalFooter\r\n} from \"reactstrap\";\r\nimport { UserViewModel } from \"../../../Typings/viewModels/UserViewModel\";\r\nimport { UserRole } from \"../../../Typings/enums/UserRole\";\r\nimport { mapToUserReadModel } from \"../../../functions/mapper\";\r\nimport { observer } from \"mobx-react\";\r\nimport { translateRole } from \"../../../functions/translater\";\r\n\r\nclass IAddOrUpdateUserProps {\r\n    userStore: UserStore;\r\n    edit: boolean = false;\r\n    userToEdit: UserViewModel;\r\n    cancelEdit: any | undefined;\r\n}\r\n\r\n@observer\r\nclass AddOrUpdateUserWindow extends Component<IAddOrUpdateUserProps> {\r\n    addOrUpdateUserOpen: boolean = false;\r\n    user: UserViewModel = new UserViewModel();\r\n    notSaved: boolean;\r\n    roleMenuOpen: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addOrUpdateUserOpen: observable,\r\n            user: observable,\r\n            notSaved: observable,\r\n            roleMenuOpen: observable,\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if(this.props.edit) {\r\n            this.user = this.props.userToEdit;\r\n            this.addOrUpdateUserOpen = true;\r\n        }\r\n        this.user.role = this.user.role === undefined ? UserRole.User : this.user.role;\r\n    }\r\n\r\n    renderAddUserButton() {\r\n        return (\r\n            <Button\r\n                className=\"addUserButton\"\r\n                onClick={() => this.toggleAddUser()}>\r\n                Добавить пользователя\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderFirstNameInput(user: UserViewModel) {\r\n        return(\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">\r\n                    Имя\r\n                </Label>\r\n                <Input\r\n                    style={{width: \"70%\"}}\r\n                    placeholder=\"Имя\"\r\n                    value={user.firstName}\r\n                    onChange={(e) => this.inputData(e, \"firstName\")}/>\r\n           </>\r\n        );\r\n    }\r\n\r\n    renderLastNameInput(user: UserViewModel) {\r\n        return(\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">\r\n                    Фамилия\r\n                </Label>\r\n            <Input\r\n                style={{width: \"70%\"}}\r\n                placeholder=\"Фамилия\"\r\n                value={user.lastName}\r\n                onChange={(e) => this.inputData(e, \"lastName\")}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderEmailInput(user: UserViewModel) {\r\n        return(\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">\r\n                    Email\r\n                </Label>\r\n                <Input\r\n                    style={{width: \"70%\"}}\r\n                    placeholder=\"Email\"\r\n                    value={user.email}\r\n                    onChange={(e) => this.inputData(e, \"email\")}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderLoginInput(user: UserViewModel) {\r\n        return(\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">\r\n                    Логин\r\n                </Label>\r\n                <Input\r\n                    style={{width: \"70%\"}}\r\n                    placeholder=\"Логин\"\r\n                    value={user.login}\r\n                    onChange={(e) => this.inputData(e, \"login\")}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderRole(user: UserViewModel) {\r\n        return(\r\n            <Dropdown style={{marginTop: \"7px\", opacity: \".7\"}} isOpen={this.roleMenuOpen} toggle={() => this.toggleRoleMenu()}>\r\n                <DropdownToggle caret>\r\n                    {translateRole(user.role)}\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem id=\"1\" onClick={() => this.roleChange(UserRole.Admin)}>{translateRole(UserRole.Admin)}</DropdownItem>\r\n                    <DropdownItem id=\"2\" onClick={() => this.roleChange(UserRole.User)}>{translateRole(UserRole.User)}</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderSaveUserButton() {\r\n        return(\r\n            <Button\r\n                outline color=\"success\"\r\n                style={{width: \"80%\", marginBottom: \"10px\"}}\r\n                onClick={() => this.save()}>\r\n                Сохранить\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderBody(user: UserViewModel) {\r\n        return(\r\n            <>\r\n                <ModalBody>\r\n                    {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и пользователь не сохранился :(</Alert>}\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderFirstNameInput(user)}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderLastNameInput(user)}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderEmailInput(user)}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderLoginInput(user)}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderRole(user)}\r\n                    </div>\r\n                </ModalBody>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderSaveUserButton()}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderCancelButton() {\r\n        return(\r\n            <Button\r\n                color=\"primary\"\r\n                onClick={() => this.toggleAddUser()}>\r\n                ОТМЕНИТЬ\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderAddOrUpdateUserWindow() {\r\n        return(\r\n            <Modal\r\n                centered={true}\r\n                size=\"lg\"\r\n                isOpen={this.addOrUpdateUserOpen}\r\n                toggle={() => this.toggleAddUser()}\r\n            >\r\n                <div className=\"row justify-content-center\">\r\n                    ПОЛЬЗОВАТЕЛЬ\r\n                </div>\r\n                {this.renderBody(this.user)}\r\n                {this.renderCancelButton()}\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {!this.props.edit && this.renderAddUserButton()}\r\n                {this.addOrUpdateUserOpen && this.renderAddOrUpdateUserWindow()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    toggleAddUser() {\r\n        if(this.props.cancelEdit !== undefined) {\r\n            this.props.cancelEdit();\r\n        }\r\n        this.addOrUpdateUserOpen = !this.addOrUpdateUserOpen;\r\n    }\r\n\r\n    toggleRoleMenu() {\r\n        this.roleMenuOpen = !this.roleMenuOpen;\r\n    }\r\n\r\n    inputData(event: React.FormEvent<HTMLInputElement>, type: string) {\r\n        if(type === \"firstName\") {\r\n            this.user.firstName = event.currentTarget.value;\r\n        } else if(type === \"lastName\") {\r\n            this.user.lastName = event.currentTarget.value;\r\n        } else if(type === \"email\") {\r\n            this.user.email = event.currentTarget.value;\r\n        } else if(type === \"login\") {\r\n            this.user.login = event.currentTarget.value;\r\n        }\r\n    }\r\n\r\n    roleChange(role: UserRole) {\r\n        this.user.role = role;\r\n    }\r\n\r\n    save() {\r\n        let userReadModel = mapToUserReadModel(this.user);\r\n        this.props.userStore.addOrUpdateUser(userReadModel)\r\n            .then((status) => {\r\n                this.notSaved = status !== 200;\r\n                if(status === 200) {\r\n                    this.toggleAddUser();\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport default AddOrUpdateUserWindow;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Users\\User.tsx",["932"],"﻿import React, { Component } from 'react';\r\nimport UserStore from \"../../../stores/UserStore\";\r\nimport { UserViewModel } from \"../../../Typings/viewModels/UserViewModel\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Label } from \"reactstrap\";\r\nimport { translateRole } from \"../../../functions/translater\";\r\nimport AddOrUpdateUserWindow from \"./AddOrUpdateUserWindow\";\r\nimport { Alert } from \"reactstrap\";\r\n\r\nclass IUserProps {\r\n    userStore: UserStore;\r\n    user: UserViewModel;\r\n}\r\n\r\n@observer\r\nclass User extends Component<IUserProps> {\r\n    editUser: boolean;\r\n    notDeleted: boolean = false;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            editUser: observable,\r\n            notDeleted: observable\r\n        });\r\n    }\r\n\r\n    renderUser(user: UserViewModel) {\r\n        return(\r\n            <tr>\r\n                <td onClick={() => this.toggleEditUser()}>\r\n                    {this.renderId(user)}\r\n                </td>\r\n                <td onClick={() => this.toggleEditUser()}>\r\n                    {this.renderNames(user)}\r\n                </td>\r\n                <td onClick={() => this.toggleEditUser()}>\r\n                    {this.renderEmail(user)}\r\n                </td>\r\n                <td onClick={() => this.toggleEditUser()}>\r\n                    {this.renderLogin(user)}\r\n                </td>\r\n                <td onClick={() => this.toggleEditUser()}>\r\n                    {this.renderRole(user)}\r\n                </td>\r\n                <td>\r\n                    <i\r\n                       onClick={() => this.deleteUser()}\r\n                       className=\"fa fa-window-close\" aria-hidden=\"true\"/>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    renderId(user: UserViewModel) {\r\n        return(\r\n            <Label>\r\n                {user.id}\r\n            </Label>\r\n        );\r\n    }\r\n\r\n    renderNames(user: UserViewModel) {\r\n        return(\r\n            <Label>\r\n                {user.firstName} {user.lastName}\r\n            </Label>\r\n        );\r\n    }\r\n\r\n    renderEmail(user: UserViewModel) {\r\n        return(\r\n            <Label>\r\n                {user.email}\r\n            </Label>\r\n        );\r\n    }\r\n\r\n    renderLogin(user: UserViewModel) {\r\n        return(\r\n            <Label>\r\n                {user.login}\r\n            </Label>\r\n        );\r\n    }\r\n\r\n    renderRole(user: UserViewModel) {\r\n        return(\r\n            <Label>\r\n                {translateRole(user.role)}\r\n            </Label>\r\n        );\r\n    }\r\n\r\n    renderEditUserWindow() {\r\n        return(\r\n            <AddOrUpdateUserWindow userStore={this.props.userStore} edit={true} userToEdit={this.props.user} cancelEdit={this.toggleEditUser}/>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.notDeleted && <Alert color=\"danger\">Что-то пошло не так и не удалось удалить пользователя :(</Alert>}\r\n                {this.editUser && this.renderEditUserWindow()}\r\n                {this.renderUser(this.props.user)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    toggleEditUser = () => {\r\n        this.editUser = !this.editUser;\r\n    };\r\n\r\n    deleteUser() {\r\n        let user = this.props.user;\r\n        let result = window.confirm(`Вы уверены, что хотите удалить ${user.firstName} ${user.lastName}?`);\r\n        if(result) {\r\n            this.props.userStore\r\n                .deleteUser(user.id)\r\n                .then((status) => {\r\n                    this.notDeleted = status !== 200;\r\n                });\r\n        }\r\n    }\r\n}\r\n\r\nexport default User;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Home\\HomePage.tsx",["933"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport { Alert } from \"reactstrap\";\r\nimport WordsOfADay from \"../../Admin/WordsOfADay/WordsOfADay\";\r\nimport OverallProgress from \"./OverallProgress\";\r\nimport Tracker from \"../Tracker/Tracker\";\r\n\r\nclass IHomePageProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass HomePage extends Component<IHomePageProps> {\r\n    renderCautions() {\r\n        let coursesLength = this.props.store.courseStore.userCourses.length;\r\n        return(\r\n            <>\r\n                {coursesLength !== 0 && <Alert color=\"danger\">Курс не доступен. Обратитесь к администратору.</Alert>}\r\n                {coursesLength === 0 && <Alert color=\"danger\">Вы пока ещё не зачислены ни на один курс.</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderHomeContent() {\r\n        return(\r\n            <>\r\n                {this.renderWordsOfADay()}\r\n                {this.renderOverallProgress()}\r\n                {this.renderTracker()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderWordsOfADay() {\r\n        return(\r\n            <WordsOfADay store={this.props.store}/>\r\n        );\r\n    }\r\n\r\n    renderOverallProgress() {\r\n        return(\r\n            <OverallProgress courseStore={this.props.store.courseStore} currentUser={this.props.store.userStore.currentUser}/>\r\n        );\r\n    }\r\n\r\n    renderTracker() {\r\n        let courseId = this.props.store.courseStore.choosenCourse.id;\r\n        let userId = this.props.store.userStore.currentUser.id;\r\n        return(\r\n            <Tracker courseId={courseId} trackerStore={this.props.store.trackerStore} userId={userId} />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let courseAvailable = this.choosenCourseIsAvailable();\r\n        return(\r\n            <>\r\n                {courseAvailable && this.renderHomeContent()}\r\n                {!courseAvailable && this.renderCautions()}\r\n            </>\r\n        );\r\n    }\r\n    \r\n    choosenCourseIsAvailable(): boolean {\r\n        let courseStore = this.props.store.courseStore;\r\n        let choosenCourseId = courseStore.choosenCourse.id;\r\n        if(choosenCourseId === 0 || choosenCourseId === undefined) {\r\n            return false;\r\n        }\r\n        let userCourse = courseStore.userCourses.filter(uc => uc.courseId === choosenCourseId)[0];\r\n        if(userCourse.expireDate < new Date() || userCourse.startDate > new Date()) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default HomePage;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\MyLessons\\MyLessonsPage.tsx",["934"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport { Nav, Tab } from \"react-bootstrap\";\r\nimport { Button, Col, Collapse, Row, Alert } from \"reactstrap\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { LessonViewModel } from \"../../../Typings/viewModels/LessonViewModel\";\r\nimport LessonPage from \"./LessonPage\";\r\n\r\nclass IMyLessonsPageProps {\r\n    store: RootStore;\r\n}\r\n\r\n\r\n@observer\r\nclass MyLessonsPage extends Component<IMyLessonsPageProps> {\r\n    isNavOpen: boolean;\r\n    courseId: number;\r\n\r\n    constructor(props: IMyLessonsPageProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            isNavOpen: observable,\r\n            courseId: observable,\r\n        });\r\n        this.getLessons();\r\n    }\r\n\r\n    getLessons() {\r\n        let courseId = this.props.store.courseStore.choosenCourse.id;\r\n        this.props.store.lessonStore.getLessonsByCourse(courseId);\r\n        this.courseId = courseId;\r\n    }\r\n    \r\n    componentDidUpdate(prevProps: Readonly<IMyLessonsPageProps>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        if(prevProps.store.courseStore.choosenCourse.id !== this.courseId) {\r\n            this.getLessons();\r\n        }\r\n    }\r\n\r\n    renderLessonsMenu(lessons: LessonViewModel[]) {\r\n        return(\r\n            <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\r\n                <Row>\r\n                    <Col sm={2}>\r\n                        <Button color=\"primary\" className=\"lessonToggle\" onClick={() => this.toggleNav()}>УРОКИ</Button>\r\n                        <Collapse isOpen={this.isNavOpen}>\r\n                            <Nav variant=\"pills\" className=\"flex-column\">\r\n                                {lessons.map((lesson) => {\r\n                                    // @ts-ignore\r\n                                    let isDisabled = new Date() < Date.parse(lesson.expireDate)  && new Date() > Date.parse(lesson.startDate);\r\n                                    return (\r\n                                        <>\r\n                                            <Nav.Item>\r\n                                                <div className=\"row\">\r\n                                                    <Nav.Link\r\n                                                        eventKey={lesson.id}\r\n                                                        disabled={isDisabled}\r\n                                                        className=\"nav-link lesson\"\r\n                                                        onClick={() => this.lessonToggle(lesson)}>\r\n                                                        Урок {lesson.order}\r\n                                                    </Nav.Link>\r\n                                                </div>\r\n                                            </Nav.Item>\r\n                                        </>\r\n                                    );\r\n                                })}\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </Col>\r\n                    <Col sm={10}>\r\n                        <LessonPage store={this.props.store}/>\r\n                    </Col>\r\n                </Row>\r\n            </Tab.Container>\r\n        );\r\n    }\r\n\r\n    renderCautions() {\r\n        return(\r\n            <Alert color=\"danger\">Курс не доступен. Обратитесь к администратору.</Alert>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let lessons = this.props.store.lessonStore.lessonsByChoosenCourse;\r\n        let courseAvailable = this.choosenCourseIsAvailable();\r\n        return(\r\n            <>\r\n                \r\n                {courseAvailable && this.renderLessonsMenu(lessons)}\r\n                {!courseAvailable && this.renderCautions()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    toggleNav() {\r\n        this.isNavOpen = !this.isNavOpen;\r\n    }\r\n\r\n    lessonToggle(lesson: LessonViewModel) {\r\n        this.props.store.lessonStore.setChoosenLesson(lesson);\r\n        this.props.store.taskStore.getTasksByLesson(lesson.id);\r\n    }\r\n\r\n    choosenCourseIsAvailable(): boolean {\r\n        let courseStore = this.props.store.courseStore;\r\n        let choosenCourseId = courseStore.choosenCourse.id;\r\n        if(choosenCourseId === 0) {\r\n            return false;\r\n        }\r\n        let userCourse = courseStore.userCourses.filter(uc => uc.courseId === choosenCourseId)[0];\r\n        if(userCourse.expireDate < new Date() || userCourse.startDate > new Date()) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default MyLessonsPage;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Home\\OverallProgress.tsx",["935"],"﻿import React, { Component } from 'react';\r\nimport { UserViewModel } from \"../../../Typings/viewModels/UserViewModel\";\r\nimport Circle from \"react-circle\";\r\nimport CourseStore from \"../../../stores/CourseStore\";\r\n\r\nclass IOverallProgressProps {\r\n    courseStore: CourseStore;\r\n    currentUser: UserViewModel;\r\n}\r\n\r\nclass OverallProgress extends Component<IOverallProgressProps> {\r\n    renderProgress() {\r\n        let completedPercentage = this.computeProgress();\r\n        return(\r\n            <Circle//todo: изучи побольше, может быть тут можно несколько данных отображать\r\n                size=\"300\"\r\n                progress={completedPercentage}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderProgress()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    computeProgress(): number {\r\n        let userId = this.props.currentUser.id;\r\n        let courseId = this.props.courseStore.choosenCourse.id;\r\n        let userProgress = 0;\r\n        this.props.courseStore.computeUserCourseProgress(userId, courseId)\r\n            .then((progress) => {\r\n                userProgress =  progress;\r\n            });\r\n\r\n        return userProgress;\r\n    }\r\n}\r\n\r\nexport default OverallProgress;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\TrackerStore.tsx",["936","937"],"﻿import { TrackerViewModel } from \"../Typings/viewModels/TrackerViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { TrackerReadModel } from \"../Typings/readModels/TrackerReadModel\";\r\n\r\nclass TrackerStore {\r\n    currentTracker: TrackerViewModel = new TrackerViewModel();\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            currentTracker: observable\r\n        });\r\n    }\r\n\r\n    async getTracker(userId: number, courseId: number): Promise<number> {\r\n        const response = await fetch(\"/gettracker\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({userId: userId, courseId: courseId})\r\n        });\r\n        if(response.status === 200) {\r\n            let currentTracker = await response.json();\r\n            console.log(\"currentTracker\", currentTracker);\r\n            this.currentTracker = currentTracker;\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async addOrUpdateTracker(tracker: TrackerReadModel) {\r\n        const response = await fetch(\"/addorupdatetracker\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({ id: tracker.id, courseId: tracker.courseId, userId: tracker.userId, trackersByDay: tracker.trackersByDay })\r\n        });\r\n    }\r\n}\r\n\r\nexport default TrackerStore;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\TrackerViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\MyLessons\\LessonPage.tsx",["938"],"﻿import React, { Component } from 'react';\r\nimport { Nav, Tab } from \"react-bootstrap\";\r\nimport { Lesson } from \"../../Common/Lesson/Lesson\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Card, CardHeader } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport Homework from \"./Homework\";\r\n\r\nclass ILessonPageProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass LessonPage extends Component<ILessonPageProps> {\r\n    lessonActive: boolean;\r\n    homeworkActive: boolean;\r\n    \r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            lessonActive: observable,\r\n            homeworkActive: observable\r\n        });\r\n    }\r\n\r\n    renderLessonMenu() {\r\n        return(\r\n            <Tab.Container>\r\n                <Card>\r\n                    <CardHeader>\r\n                        <Nav variant=\"pills\">\r\n                            <Nav.Item>\r\n                                <Nav.Link\r\n                                    className=\"nav-link\"\r\n                                    eventKey=\"Lesson\"\r\n                                    onClick={() => this.toggleMenu(\"lesson\")}>\r\n                                    УРОК\r\n                                </Nav.Link>\r\n                            </Nav.Item>\r\n                            <Nav.Item>\r\n                                <Nav.Link\r\n                                    className=\"nav-link\"\r\n                                    eventKey=\"Homework\"\r\n                                    onClick={() => this.toggleMenu(\"homework\")}>\r\n                                    ДОМАШНЯЯ РАБОТА\r\n                                </Nav.Link>\r\n                            </Nav.Item>\r\n                        </Nav>\r\n                    </CardHeader>\r\n                    {this.lessonActive && <Lesson store={this.props.store} />}\r\n                    {this.homeworkActive && <Homework store={this.props.store} />}\r\n                </Card>\r\n            </Tab.Container>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderLessonMenu()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    toggleMenu(turnOn: string) {\r\n        this.lessonActive = false;\r\n        this.homeworkActive = false;\r\n        if(turnOn === \"lesson\") {\r\n            this.lessonActive = true;\r\n        } else if (turnOn === \"homework\") {\r\n            this.homeworkActive = true;\r\n        }\r\n    }\r\n}\r\n\r\nexport default LessonPage;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Tracker\\Tracker.tsx",["939"],"﻿import React, { Component } from 'react';\r\nimport {TrackerViewModel} from \"../../../Typings/viewModels/TrackerViewModel\";\r\nimport TrackerStore from \"../../../stores/TrackerStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable, toJS } from \"mobx\";\r\nimport { renderSpinner } from \"../../../functions/renderSpinner\";\r\nimport NaStarteTracker from \"./Types/NaStarteTracker\";\r\n\r\nclass ITrackerProps {\r\n    trackerStore: TrackerStore;\r\n    userId: number;\r\n    courseId: number;\r\n}\r\n\r\n@observer\r\nclass Tracker extends Component<ITrackerProps> {\r\n    perceived: boolean;\r\n\r\n    constructor(props: ITrackerProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            perceived: observable\r\n        });\r\n        this.getTracker();\r\n    }\r\n\r\n    renderTracker(tracker: TrackerViewModel) {\r\n        console.log(\"prepare to render tracker\", toJS(tracker));\r\n        return (\r\n            <NaStarteTracker tracker={tracker} trackerStore={this.props.trackerStore} userId={this.props.userId} courseId={this.props.courseId} />\r\n        );\r\n    }\r\n    \r\n    render() {\r\n        let currentTracker = this.props.trackerStore.currentTracker;\r\n        console.log(\"currentTracker in tracker\", toJS(currentTracker));\r\n        return(\r\n            <>\r\n                {!this.perceived && renderSpinner()}\r\n                {this.perceived && this.renderTracker(currentTracker)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    getTracker() {\r\n        this.props.trackerStore.getTracker(this.props.userId, this.props.courseId)\r\n            .then((status) => {\r\n                this.perceived = status === 200;\r\n            });\r\n    }\r\n}\r\n\r\nexport default Tracker;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\MyLessons\\Homework.tsx",["940"],"﻿import React, {Component} from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport {TaskViewModel} from \"../../../Typings/viewModels/TaskViewModel\";\r\nimport {Nav, Tab} from \"react-bootstrap\";\r\nimport {observer} from \"mobx-react\";\r\nimport {makeObservable, observable} from \"mobx\";\r\nimport {Alert} from \"reactstrap\";\r\nimport HomeworkTask from \"./HomeworkTask\";\r\nimport {NavigationType} from \"../../../NavigationType\";\r\n\r\nclass IHomeworkProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass Homework extends Component<IHomeworkProps> {\r\n    taskToRender: TaskViewModel = new TaskViewModel();\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            taskToRender: observable\r\n        });\r\n    }\r\n\r\n    renderTasks(tasks: TaskViewModel[]) {\r\n        return(\r\n            <Tab.Container>\r\n                <div className=\"container-fluid\">\r\n                    <Nav variant=\"pills\">\r\n                        {tasks.map((task, i) => {\r\n                            return (\r\n                                <Nav.Item>\r\n                                    <Nav.Link\r\n                                        className=\"nav-link lesson\"\r\n                                        eventKey={i}\r\n                                        onClick={() => this.taskToRender = task}\r\n                                    >{ i + 1 }</Nav.Link>\r\n                                </Nav.Item>\r\n                            );\r\n                        })}\r\n                    </Nav>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-12\">\r\n                            {<HomeworkTask task={this.taskToRender} store={this.props.store} userId={this.props.store.userStore.currentUser.id} taskToggler={this.taskToggler}/>}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Tab.Container>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let tasks = this.props.store.taskStore.tasksByChoosenLesson;\r\n        return(\r\n            <>\r\n                {tasks.length === 0 && <Alert color=\"primary\">Домашнего задания пока нет. Можно отдыхать:)</Alert>}\r\n                {tasks.length !== 0 && this.renderTasks(tasks)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    taskToggler(navigation: NavigationType) {\r\n        let tasks = this.props.store.taskStore.tasksByChoosenLesson;\r\n        let index = tasks.indexOf(this.taskToRender);\r\n        if(navigation === NavigationType.Forward) {\r\n            if(index + 1 < tasks.length) {\r\n                this.taskToRender = tasks[index + 1];\r\n            } else {\r\n                this.taskToRender = tasks[0];\r\n            }\r\n        } else if(navigation === NavigationType.Back) {\r\n            if(index - 1 >= 0) {\r\n                this.taskToRender = tasks[index - 1];\r\n            } else {\r\n                this.taskToRender = tasks[tasks.length - 1];\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default Homework;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Tracker\\Types\\NaStarteTracker.tsx",["941","942","943","944","945","946","947","948","949","950","951","952","953","954","955","956","957","958","959","960","961"],"import React, { Component } from 'react';\r\nimport { TrackerViewModel } from \"../../../../Typings/viewModels/TrackerViewModel\";\r\nimport TrackerStore from \"../../../../stores/TrackerStore\";\r\nimport { Table } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport {action, makeObservable, observable, toJS} from \"mobx\";\r\nimport { TrackerReadModel } from \"../../../../Typings/readModels/TrackerReadModel\";\r\nimport { mapToTrackerReadModel } from \"../../../../functions/mapper\";\r\nimport { TrackerByDayReadModel } from \"../../../../Typings/readModels/TrackerByDayReadModel\";\r\n\r\nclass INaStarteTrackerProps {\r\n    tracker: TrackerViewModel;\r\n    trackerStore: TrackerStore;\r\n    userId: number;\r\n    courseId: number;\r\n}\r\n\r\n@observer\r\nclass NaStarteTracker extends Component<INaStarteTrackerProps> {\r\n    days: number[] = new Array<number>(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\r\n    tracker: TrackerReadModel = new TrackerReadModel();\r\n    trackersByDay: TrackerByDayReadModel[] = new Array<TrackerByDayReadModel>();\r\n    update: boolean;\r\n\r\n    constructor(props: INaStarteTrackerProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            tracker: observable,\r\n            update: observable\r\n        });\r\n        observable.map(this.trackersByDay);\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        let tracker = mapToTrackerReadModel(this.props.tracker, this.props.userId, this.props.courseId, this.days.length);\r\n        this.tracker = tracker;\r\n        this.trackersByDay = tracker.trackersByDay;\r\n    }\r\n    componentWillUnmount(): void {\r\n        this.addOrUpdateTracker();\r\n    }\r\n\r\n    renderTracker(update: boolean) {\r\n        return(\r\n            <Table>\r\n                {this.renderHead()}\r\n                {this.renderBody()}\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    renderHead() {\r\n        return(\r\n            <thead>\r\n            <tr>\r\n                <td></td>\r\n                {this.days.map((day, i) => {\r\n                    return(\r\n                        <td>{i + 1}</td>\r\n                    );\r\n                })}\r\n            </tr>\r\n            </thead>\r\n        );\r\n    }\r\n\r\n    renderBody() {\r\n        return (\r\n            <>\r\n                {this.renderRowOfTrackerByDay(TrackerType.WebinarWatch)}\r\n                {this.renderRowOfTrackerByDay(TrackerType.CompletedHomework)}\r\n                {this.renderRowOfTrackerByDay(TrackerType.WordOfADay)}\r\n                {this.renderRowOfTrackerByDay(TrackerType.DictionaryOfLesson)}\r\n                {this.renderRowOfTrackerByDay(TrackerType.ChatParticipation)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderRowOfTrackerByDay(type: TrackerType) {\r\n        return (\r\n            <tr>\r\n                <th>{this.getHeader(type)}</th>\r\n                {this.days.map((day, i) => {\r\n                    let trackerByDay = this.getTrackerByDay(day);\r\n                    return(\r\n                        <>\r\n                            <td id={day.toString()} onClick={(e) => this.handleChange(type, Number(e.currentTarget.id))} key={i}>\r\n                                {this.isCompleted(trackerByDay, type)\r\n                                ? <i className=\"fa fa-check\" aria-hidden=\"true\"/> :\r\n                                <i className=\"fa fa-times\" aria-hidden=\"true\"/>\r\n                            }\r\n                            </td>\r\n                        </>\r\n                    );\r\n                })}\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderTracker(this.update)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    getTrackerByDay(day: number): TrackerByDayReadModel {\r\n        let trackerByDay = this.trackersByDay.find(t => t.day === day);\r\n        if(trackerByDay === undefined) {\r\n            trackerByDay = new TrackerByDayReadModel();\r\n            trackerByDay.day = day;\r\n        }\r\n\r\n        return trackerByDay;\r\n    }\r\n\r\n    @action\r\n    handleChange(type: TrackerType, day: number) {\r\n        let trackerByDay = this.trackersByDay.filter(t => t.day === day)[0];\r\n        let index = this.trackersByDay.indexOf(trackerByDay);\r\n        if(type === TrackerType.ChatParticipation) {\r\n            trackerByDay.chatParticipation = !trackerByDay.chatParticipation;\r\n        } else if(type === TrackerType.CompletedHomework) {\r\n            trackerByDay.completedHomework = !trackerByDay.completedHomework;\r\n        } else if(type === TrackerType.DictionaryOfLesson) {\r\n            trackerByDay.dictionaryOfLesson = !trackerByDay.dictionaryOfLesson;\r\n        } else if(type === TrackerType.WordOfADay) {\r\n            trackerByDay.wordOfADay = !trackerByDay.wordOfADay;\r\n        } else if(type === TrackerType.WebinarWatch) {\r\n            trackerByDay.webinarWatch = !trackerByDay.webinarWatch;\r\n        }\r\n        let trackersByDay = this.trackersByDay;\r\n        trackersByDay[index] = trackerByDay;\r\n        this.trackersByDay = trackersByDay;\r\n        this.toggleUpdate();\r\n    }\r\n\r\n    isCompleted(trackerByDay: TrackerByDayReadModel, type: TrackerType): boolean {\r\n        if(type === TrackerType.ChatParticipation) {\r\n            return trackerByDay.chatParticipation;\r\n        } else if(type === TrackerType.CompletedHomework) {\r\n            return trackerByDay.completedHomework;\r\n        } else if(type === TrackerType.DictionaryOfLesson) {\r\n            return trackerByDay.dictionaryOfLesson;\r\n        } else if(type === TrackerType.WordOfADay) {\r\n            return trackerByDay.wordOfADay;\r\n        } else if(type === TrackerType.WebinarWatch) {\r\n            return trackerByDay.webinarWatch;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getHeader(type: TrackerType): string {\r\n        if(type === TrackerType.ChatParticipation) {\r\n            return \"УЧАСТИЕ В ЧАТЕ\";\r\n        } else if(type === TrackerType.CompletedHomework) {\r\n            return \"ВЫПОЛНЕНИЕ ДОМАШНЕГО ЗАДАНИЯ\";\r\n        } else if(type === TrackerType.DictionaryOfLesson) {\r\n            return \"СЛОВАРЬ УРОКА\";\r\n        } else if(type === TrackerType.WordOfADay) {\r\n            return \"СЛОВО ДНЯ\";\r\n        } else if(type === TrackerType.WebinarWatch) {\r\n            return \"ПРОСМОТР ВЕБИНАРА\";\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    addOrUpdateTracker() {\r\n        this.props.trackerStore.addOrUpdateTracker(this.tracker);\r\n    }\r\n\r\n    toggleUpdate() {\r\n        this.update = !this.update;\r\n    }\r\n}\r\n\r\nexport default NaStarteTracker;\r\n\r\nenum TrackerType {\r\n    WebinarWatch,\r\n    CompletedHomework,\r\n    WordOfADay,\r\n    DictionaryOfLesson,\r\n    ChatParticipation\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\NavigationType.tsx",["962"],"﻿export enum NavigationType {\r\n    Forward,\r\n    Back\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\MyLessons\\HomeworkTask.tsx",["963"],"﻿import React, {Component} from \"react\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { TaskViewModel } from \"../../../Typings/viewModels/TaskViewModel\";\r\nimport CommentGroup from \"../../Common/Comments/CommentGroup\";\r\nimport { Button } from \"reactstrap\";\r\nimport { CommentedEntityType } from \"../../../Typings/enums/CommentedEntityType\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Task } from \"../../Common/Tasks/Task\";\r\nimport { NavigationType } from \"../../../NavigationType\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nclass IHomeworkTaskProps {\r\n    store: RootStore;\r\n    task: TaskViewModel;\r\n    userId: number;\r\n    taskToggler: any;\r\n}\r\n\r\n@observer\r\nclass HomeworkTask extends Component<IHomeworkTaskProps> {\r\n    showComments: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            showComments: observable\r\n        });\r\n    }\r\n\r\n    renderTask(task: TaskViewModel) {\r\n        return(\r\n            <>\r\n                <div className=\"row justify-content-center\">\r\n                    <Task store={this.props.store} task={this.props.task} userId={this.props.userId}/>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-4 text-center\">\r\n                        <Button\r\n                            onClick={() => {this.props.taskToggler(NavigationType.Back)}}>\r\n                            <i className=\"fa fa-long-arrow-left\" aria-hidden=\"true\"/>\r\n                        </Button>\r\n                    </div>\r\n                    <div className=\"col-4 text-center\">\r\n                        <Button\r\n                            outline color=\"primary\"\r\n                            onClick={() => this.toggleComments()}>Комментарии</Button>\r\n                    </div>\r\n                    <div className=\"col-4 text-center\">\r\n                        <Button\r\n                            onClick={() => {this.props.taskToggler(NavigationType.Forward)}}>\r\n                            <i className=\"fa fa-long-arrow-right\" aria-hidden=\"true\"/>\r\n                        </Button>\r\n                    </div>\r\n                    {this.showComments && <CommentGroup commentedEntityType={CommentedEntityType.LessonTask} commentedEntityId={task.id} userId={this.props.userId} onToggle={this.toggleComments} store={this.props.store}/>}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderTask(this.props.task)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    toggleComments() {\r\n        this.showComments = !this.showComments;\r\n    }\r\n}\r\n\r\nexport default HomeworkTask;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\TrackerByDayReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\TrackerReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\NotificationStore.tsx",["964"],"﻿import { NotificationViewModel } from \"../Typings/viewModels/NotificationViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { UserNotificationReadModel } from \"../Typings/readModels/UserNotificationReadModel\";\r\n\r\nclass NotificationStore {\r\n    currentNotifications: NotificationViewModel[] = new Array<NotificationViewModel>();\r\n    \r\n    constructor() {\r\n        makeObservable(this, {\r\n            currentNotifications: observable\r\n        });\r\n    }\r\n\r\n    async getNotifications(userId: number): Promise<number> {\r\n        const response = await fetch(\"/getnotifications\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: userId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.currentNotifications = await response.json();\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async addOrUpdateUserNotification(userNotification: UserNotificationReadModel): Promise<number> {\r\n        const response = await fetch(\"/addorupdateusernotification\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({userId: userNotification.userId, notificationId: userNotification.notificationId, seen: userNotification.seen})\r\n        });\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default NotificationStore;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Notifications\\Notifications.tsx",["965"],"﻿import React, { Component } from \"react\";\r\nimport { NotificationViewModel } from \"../../../Typings/viewModels/NotificationViewModel\";\r\nimport { Modal, ModalBody, Alert } from \"reactstrap\";\r\nimport NotificationStore from \"../../../stores/NotificationStore\";\r\nimport UserStore from \"../../../stores/UserStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport Notification from \"./Notification\"\r\n\r\nclass INotificationsProps {\r\n    toggle: any;\r\n    notificationStore: NotificationStore;\r\n    userStore: UserStore;\r\n}\r\n\r\n@observer\r\nclass Notifications extends Component<INotificationsProps> {\r\n    renderNotifications(notifications: NotificationViewModel[]) {\r\n        return(\r\n            <Modal toggle={this.props.toggle} isOpen={true}>\r\n                <ModalBody>\r\n                    {notifications.map((notification) => {\r\n                        return (\r\n                            <div className=\"container-fluid\">\r\n                                <Notification notification={notification} notificationStore={this.props.notificationStore} userStore={this.props.userStore} />\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </ModalBody>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    renderCaution() {\r\n        return(\r\n            <Alert color=\"primary\">Уведомлений пока нет.</Alert>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let notifications = this.props.notificationStore.currentNotifications;\r\n        return(\r\n            <>\r\n                {notifications.length === 0 && this.renderCaution()}\r\n                {this.renderNotifications(notifications)}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Notifications;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Notifications\\Notification.tsx",["966"],"﻿import React, { Component } from \"react\";\r\nimport { NotificationViewModel } from \"../../../Typings/viewModels/NotificationViewModel\";\r\nimport NotificationStore from \"../../../stores/NotificationStore\";\r\nimport UserStore from \"../../../stores/UserStore\";\r\nimport { Input } from \"reactstrap\";\r\nimport { UserNotificationReadModel } from \"../../../Typings/readModels/UserNotificationReadModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nclass INotificationProps {\r\n    notification: NotificationViewModel;\r\n    notificationStore: NotificationStore;\r\n    userStore: UserStore;\r\n}\r\n\r\n@observer\r\nclass Notification extends Component<INotificationProps> {\r\n    userNotification: UserNotificationReadModel = new UserNotificationReadModel();\r\n    \r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            userNotification: observable\r\n        });\r\n    }\r\n    \r\n    componentWillUnmount(): void {\r\n        this.updateUserNotification();\r\n    }\r\n\r\n    renderNotification(notification: NotificationViewModel) {\r\n        let message = this.generateMessage(notification.createdBy, notification.message);\r\n        return(\r\n            <div className=\"row justify-content-center\" style={{marginTop:'2px'}}>\r\n                <div className=\"col-11\">\r\n                    <span>{message}</span>\r\n                </div>\r\n                <div className=\"col-1\">\r\n                    <Input type=\"checkbox\" onClick={(e) => this.changeSeen(e)}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderNotification(this.props.notification)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    updateUserNotification() {\r\n        this.props.notificationStore.addOrUpdateUserNotification(this.userNotification);\r\n    }\r\n\r\n    generateMessage(createdBy: number, message: string): string {\r\n        let user = this.props.userStore.users.filter(u => u.id === createdBy)[0];\r\n\r\n        return user.firstName + ' ' + user.lastName + ' ' + message;\r\n    }\r\n\r\n    changeSeen(event: React.MouseEvent<HTMLInputElement, MouseEvent>) {\r\n        this.userNotification.seen = event.currentTarget.checked;\r\n    }\r\n}\r\n\r\nexport default Notification;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\CourseRole.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserNotificationReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\SubtaskAnswerGroupViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserSubtaskAnswerGroupViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\TrackerByDayViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\AddOrUpdateWord.tsx",["967","968"],"﻿import React, {Component} from 'react';\r\nimport { WordViewModel } from \"../../../Typings/viewModels/WordViewModel\";\r\nimport { observer } from \"mobx-react\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport { Button, Input, Modal, ModalBody, Alert, Label } from \"reactstrap\";\r\nimport { translatePartOfSpeech } from \"../../../functions/translater\";\r\nimport { PartOfSpeech } from \"../../../Typings/enums/PartOfSpeech\";\r\nimport { ExampleReadModel } from \"../../../Typings/readModels/ExampleReadModel\";\r\nimport { WordReadModel } from \"../../../Typings/readModels/WordReadModel\";\r\nimport { transformValueToPartOfSpeech } from \"../../../functions/transformer\";\r\nimport { UserViewModel } from \"../../../Typings/viewModels/UserViewModel\";\r\nimport { UserRole } from \"../../../Typings/enums/UserRole\";\r\nimport WordStore from \"../../../stores/WordStore\";\r\nimport { WordOfADayReadModel } from \"../../../Typings/readModels/WordOfADayReadModel\";\r\nimport { mapToWordReadModel, mapWordReadModel } from \"../../../functions/mapper\";\r\n\r\nclass IAddOrUpdateWordOfADayProps {\r\n    word: WordViewModel;\r\n    courseId: number | undefined;\r\n    currentUser: UserViewModel;\r\n    wordStore: WordStore;\r\n    date: Date | Date[] | undefined;\r\n    cancelEdit: any;\r\n    isWordOfADay: boolean;\r\n}\r\n\r\n@observer\r\nclass AddOrUpdateWord extends Component<IAddOrUpdateWordOfADayProps> {\r\n    word: WordReadModel = new WordReadModel();\r\n    notSaved: boolean = false;\r\n    saved: boolean = false;\r\n    update: boolean;\r\n\r\n    constructor(props: IAddOrUpdateWordOfADayProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            word: observable,\r\n            notSaved: observable,\r\n            saved: observable,\r\n            update: observable\r\n        });\r\n        this.word = mapToWordReadModel(this.props.word);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<IAddOrUpdateWordOfADayProps>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        if (prevProps.word !== this.props.word) {\r\n            this.word = mapToWordReadModel(this.props.word);\r\n        }\r\n    }\r\n\r\n    renderCautions() {\r\n        return(\r\n            <>\r\n                {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и слово не сохранилось!</Alert>}\r\n                {this.saved && <Alert color=\"success\">Слово успешно сохранилось!!</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderWordInput(word: WordViewModel) {\r\n        return(\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">\r\n                    Слово\r\n                </Label>\r\n                <Input\r\n                    style={{width: \"80%\"}}\r\n                    placeholder=\"слово\"\r\n                    className=\"form-control rounded-0\"\r\n                    name=\"word\"\r\n                    value={word.word !== undefined ? word.word : \"\"}\r\n                    onChange={(e) => this.handleChangeFromInput(e)}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderPartOfSpeechInput() {\r\n        return (\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">\r\n                    Часть речи\r\n                </Label>\r\n                <Input\r\n                    style={{width: \"80%\"}}\r\n                    type=\"select\"\r\n                    id=\"exampleSelect\"\r\n                    onClick={(e) => this.handlePartOfSpeech(e)}>\r\n                    <option value=\"Adjective\">{translatePartOfSpeech(PartOfSpeech.Adjective)}</option>\r\n                    <option value=\"Verb\">{translatePartOfSpeech(PartOfSpeech.Verb)}</option>\r\n                    <option value=\"Noun\">{translatePartOfSpeech(PartOfSpeech.Noun)}</option>\r\n                    <option value=\"Adverb\">{translatePartOfSpeech(PartOfSpeech.Adverb)}</option>\r\n                </Input>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderRussianMeaningInput(word: WordViewModel) {\r\n        return (\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">\r\n                    Значение на русском\r\n                </Label>\r\n                <Input\r\n                    style={{width: \"80%\"}}\r\n                    className=\"form-control rounded-0 fileInput\"\r\n                    onChange={(e) => this.handleChangeFromInput(e)}\r\n                    name=\"russianMeaning\"\r\n                    value={word.russianMeaning !== undefined ? word.russianMeaning : \"\"}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderEnglishMeaningInput(word: WordViewModel) {\r\n        return (\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">\r\n                    Значение на английском\r\n                </Label>\r\n                <Input\r\n                    style={{width: \"80%\"}}\r\n                    className=\"form-control rounded-0 fileInput\"\r\n                    onChange={(e) => this.handleChangeFromInput(e)}\r\n                    name=\"englishMeaning\"\r\n                    value={word.englishMeaning !== undefined ? word.englishMeaning : \"\"}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderExampleInput(word: WordViewModel) {\r\n        return (\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">\r\n                    Пример\r\n                </Label>\r\n                <Input\r\n                    style={{width: \"80%\"}}\r\n                    placeholder=\"пример\"\r\n                    className=\"form-control rounded-0 fileInput\"\r\n                    onChange={(e) => this.handleChangeFromInput(e)}\r\n                    name=\"example\">{word.examples[0]}</Input>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderSaveButton() {\r\n        return (\r\n            <Button\r\n                outline color=\"success\"\r\n                width=\"100%\"\r\n                type=\"submit\"\r\n                style={{width: \"80%\", marginBottom: \"10px\"}}\r\n                onClick={() => this.handleSave()}>\r\n                СОХРАНИТЬ\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderBody(word: WordViewModel) {\r\n        return (\r\n            <>\r\n                <ModalBody>\r\n                    {this.renderCautions()}\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderWordInput(word)}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderPartOfSpeechInput()}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderRussianMeaningInput(word)}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderEnglishMeaningInput(word)}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderExampleInput(word)}\r\n                    </div>\r\n                </ModalBody>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderSaveButton()}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderCancelButton() {\r\n        return(\r\n            <Button\r\n                color=\"primary\"\r\n                onClick={() => this.props.cancelEdit()}>\r\n                ОТМЕНИТЬ\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderAddOrUpdateWordWindow(word: WordViewModel, update: boolean) {\r\n        return (\r\n            <Modal\r\n                centered={true}\r\n                size=\"lg\"\r\n                isOpen={true}\r\n                toggle={() => this.props.cancelEdit()}\r\n            >\r\n                <i style={{marginLeft: '96%', width: '2%'}}\r\n                   onClick={() => this.props.cancelEdit()}\r\n                   className=\"fa fa-window-close\" aria-hidden=\"true\"/>\r\n                <div className=\"row justify-content-center\">\r\n                    СЛОВО\r\n                </div>\r\n                {this.renderBody(word)}\r\n                {this.renderCancelButton()}\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        console.log(\"word\", this.word);\r\n        return(\r\n            <>\r\n                {this.renderAddOrUpdateWordWindow(this.word, this.update)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    handleChangeFromInput(event: React.ChangeEvent<HTMLInputElement>) {\r\n        let name = event.target.name;\r\n        let value = event.target.value;\r\n        if(name === 'word') {\r\n            this.word.word = value;\r\n        } else if(name === 'russianMeaning') {\r\n            this.word.russianMeaning = value;\r\n        } else if(name === 'englishMeaning') {\r\n            this.word.englishMeaning = value;\r\n        } else if(name === 'example') {\r\n            //todo: наверно, проверку надо делать\r\n            if(this.word.examples.length === 0) {\r\n                this.word.examples.push(new ExampleReadModel());\r\n            }\r\n            this.word.examples[0].example = value;\r\n        }\r\n        this.toggleUpdate();\r\n    }\r\n\r\n    handlePartOfSpeech(event: React.MouseEvent<HTMLInputElement, MouseEvent>) {\r\n        this.word.partOfSpeech = transformValueToPartOfSpeech(event.currentTarget.value);\r\n        this.toggleUpdate()\r\n    }\r\n\r\n    handleSave() {\r\n        let role = this.props.currentUser.role;\r\n        if(this.props.isWordOfADay) {\r\n            if(role === UserRole.Admin) {\r\n                let wordOfADay = new WordOfADayReadModel();\r\n                wordOfADay.word = mapWordReadModel(this.word);\r\n                if(this.props.courseId !== undefined) {\r\n                    wordOfADay.courseId = this.props.courseId;\r\n                }\r\n                wordOfADay.date = this.props.date;\r\n                this.props.wordStore.addOrUpdateWordOfADay(wordOfADay)\r\n                    .then((status) => {\r\n                        this.notSaved = status !== 200;\r\n                        this.saved = status === 200;\r\n                    });\r\n            }\r\n        }\r\n        if (role === UserRole.Admin) {\r\n            this.props.wordStore.addOrUpdateWordToDictionary(this.word)\r\n                .then((status) => {\r\n                    this.notSaved = status !== 200;\r\n                    this.saved = status === 200;\r\n                });\r\n        } else if (role === UserRole.User) {\r\n            let userId = this.props.currentUser.id;\r\n            this.props.wordStore.addOrUpdateWordToUserDictionary(this.word, userId)\r\n                .then((status) => {\r\n                    this.notSaved = status !== 200;\r\n                    this.saved = status === 200;\r\n                });\r\n        }\r\n    }\r\n\r\n    toggleUpdate() {\r\n        this.update = !this.update;\r\n    }\r\n}\r\n\r\nexport default AddOrUpdateWord;",{"ruleId":"969","replacedBy":"970"},{"ruleId":"971","replacedBy":"972"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"977"},{"ruleId":"978","severity":1,"message":"979","line":1,"column":37,"nodeType":"980","messageId":"981","endLine":1,"endColumn":53},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"982"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"983"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"984"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"985"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"986"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"987"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"988"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"989"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"990"},{"ruleId":"991","severity":1,"message":"992","line":47,"column":32,"nodeType":"993","messageId":"994","endLine":47,"endColumn":34,"fix":"995"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"996"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"997"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"998"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"999"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1000"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1001"},{"ruleId":"978","severity":1,"message":"1002","line":6,"column":38,"nodeType":"980","messageId":"981","endLine":6,"endColumn":42},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1003"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1004"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1005"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1006"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1007"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1008"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1009"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1010"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1011"},{"ruleId":"969","replacedBy":"1012"},{"ruleId":"971","replacedBy":"1013"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1014"},{"ruleId":"969","replacedBy":"1015"},{"ruleId":"971","replacedBy":"1016"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1017"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1018"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1019"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1020"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1021"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1022"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1023"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1024"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1025"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1026"},{"ruleId":"978","severity":1,"message":"1002","line":2,"column":37,"nodeType":"980","messageId":"981","endLine":2,"endColumn":41},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1027"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1028"},{"ruleId":"978","severity":1,"message":"1002","line":1,"column":37,"nodeType":"980","messageId":"981","endLine":1,"endColumn":41},{"ruleId":"978","severity":1,"message":"1029","line":9,"column":9,"nodeType":"980","messageId":"981","endLine":9,"endColumn":40},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1030"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1031"},{"ruleId":"978","severity":1,"message":"1032","line":3,"column":17,"nodeType":"980","messageId":"981","endLine":3,"endColumn":23},{"ruleId":"978","severity":1,"message":"1033","line":5,"column":38,"nodeType":"980","messageId":"981","endLine":5,"endColumn":44},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1034"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1035"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1036"},{"ruleId":"978","severity":1,"message":"1037","line":3,"column":43,"nodeType":"980","messageId":"981","endLine":3,"endColumn":54},{"ruleId":"978","severity":1,"message":"1038","line":3,"column":56,"nodeType":"980","messageId":"981","endLine":3,"endColumn":67},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1039"},{"ruleId":"978","severity":1,"message":"1040","line":65,"column":41,"nodeType":"980","messageId":"981","endLine":65,"endColumn":51},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1041"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1042"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1043"},{"ruleId":"978","severity":1,"message":"1002","line":9,"column":10,"nodeType":"980","messageId":"981","endLine":9,"endColumn":14},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1044"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1045"},{"ruleId":"978","severity":1,"message":"1037","line":5,"column":43,"nodeType":"980","messageId":"981","endLine":5,"endColumn":54},{"ruleId":"978","severity":1,"message":"1038","line":5,"column":56,"nodeType":"980","messageId":"981","endLine":5,"endColumn":67},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1046"},{"ruleId":"978","severity":1,"message":"1047","line":3,"column":46,"nodeType":"980","messageId":"981","endLine":3,"endColumn":51},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1048"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1049"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1050"},{"ruleId":"978","severity":1,"message":"1038","line":3,"column":36,"nodeType":"980","messageId":"981","endLine":3,"endColumn":47},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1051"},{"ruleId":"978","severity":1,"message":"1002","line":6,"column":37,"nodeType":"980","messageId":"981","endLine":6,"endColumn":41},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1052"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1053"},{"ruleId":"978","severity":1,"message":"1054","line":27,"column":17,"nodeType":"980","messageId":"981","endLine":27,"endColumn":21},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1055"},{"ruleId":"978","severity":1,"message":"1037","line":3,"column":36,"nodeType":"980","messageId":"981","endLine":3,"endColumn":47},{"ruleId":"978","severity":1,"message":"1002","line":5,"column":37,"nodeType":"980","messageId":"981","endLine":5,"endColumn":41},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1056"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1057"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1058"},{"ruleId":"978","severity":1,"message":"1059","line":2,"column":26,"nodeType":"980","messageId":"981","endLine":2,"endColumn":31},{"ruleId":"978","severity":1,"message":"1002","line":4,"column":37,"nodeType":"980","messageId":"981","endLine":4,"endColumn":41},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1060"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1061"},{"ruleId":"978","severity":1,"message":"1002","line":4,"column":37,"nodeType":"980","messageId":"981","endLine":4,"endColumn":41},{"ruleId":"1062","severity":1,"message":"1063","line":196,"column":62,"nodeType":"1064","messageId":"976","endLine":196,"endColumn":64},{"ruleId":"1062","severity":1,"message":"1063","line":197,"column":54,"nodeType":"1064","messageId":"976","endLine":197,"endColumn":56},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1065"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1066"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1067"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1068"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1069"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1070"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1071"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1072"},{"ruleId":"1062","severity":1,"message":"1063","line":108,"column":53,"nodeType":"1064","messageId":"976","endLine":108,"endColumn":55},{"ruleId":"1062","severity":1,"message":"1063","line":187,"column":67,"nodeType":"1064","messageId":"976","endLine":187,"endColumn":69},{"ruleId":"1062","severity":1,"message":"1063","line":193,"column":38,"nodeType":"1064","messageId":"976","endLine":193,"endColumn":40},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1073"},{"ruleId":"978","severity":1,"message":"1002","line":9,"column":9,"nodeType":"980","messageId":"981","endLine":9,"endColumn":13},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1074"},{"ruleId":"1062","severity":1,"message":"1075","line":86,"column":50,"nodeType":"1064","messageId":"976","endLine":86,"endColumn":52},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1076"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1077"},{"ruleId":"978","severity":1,"message":"1078","line":3,"column":41,"nodeType":"980","messageId":"981","endLine":3,"endColumn":51},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1079"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1080"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1081"},{"ruleId":"978","severity":1,"message":"1032","line":3,"column":30,"nodeType":"980","messageId":"981","endLine":3,"endColumn":36},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1082"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1083"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1084"},{"ruleId":"1062","severity":1,"message":"1063","line":36,"column":63,"nodeType":"1064","messageId":"976","endLine":36,"endColumn":65},{"ruleId":"1062","severity":1,"message":"1063","line":37,"column":61,"nodeType":"1064","messageId":"976","endLine":37,"endColumn":63},{"ruleId":"1062","severity":1,"message":"1063","line":71,"column":47,"nodeType":"1064","messageId":"976","endLine":71,"endColumn":49},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1085"},{"ruleId":"1062","severity":1,"message":"1063","line":36,"column":63,"nodeType":"1064","messageId":"976","endLine":36,"endColumn":65},{"ruleId":"1062","severity":1,"message":"1063","line":37,"column":61,"nodeType":"1064","messageId":"976","endLine":37,"endColumn":63},{"ruleId":"1062","severity":1,"message":"1063","line":71,"column":47,"nodeType":"1064","messageId":"976","endLine":71,"endColumn":49},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1086"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1087"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1088"},{"ruleId":"978","severity":1,"message":"1002","line":4,"column":37,"nodeType":"980","messageId":"981","endLine":4,"endColumn":41},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1089"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1090"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1091"},{"ruleId":"978","severity":1,"message":"1002","line":7,"column":37,"nodeType":"980","messageId":"981","endLine":7,"endColumn":41},{"ruleId":"978","severity":1,"message":"1092","line":9,"column":9,"nodeType":"980","messageId":"981","endLine":9,"endColumn":17},{"ruleId":"978","severity":1,"message":"1093","line":11,"column":30,"nodeType":"980","messageId":"981","endLine":11,"endColumn":43},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1094"},{"ruleId":"978","severity":1,"message":"1002","line":6,"column":37,"nodeType":"980","messageId":"981","endLine":6,"endColumn":41},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1095"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1096"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1097"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1098"},{"ruleId":"978","severity":1,"message":"1002","line":15,"column":10,"nodeType":"980","messageId":"981","endLine":15,"endColumn":14},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1099"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1100"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1101"},{"ruleId":"978","severity":1,"message":"1037","line":15,"column":5,"nodeType":"980","messageId":"981","endLine":15,"endColumn":16},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1102"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1103"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1104"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1105"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1106"},{"ruleId":"978","severity":1,"message":"1107","line":32,"column":15,"nodeType":"980","messageId":"981","endLine":32,"endColumn":23},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1108"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1109"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1110"},{"ruleId":"978","severity":1,"message":"1002","line":6,"column":45,"nodeType":"980","messageId":"981","endLine":6,"endColumn":49},{"ruleId":"1111","severity":1,"message":"1112","line":71,"column":47,"nodeType":"980","messageId":"1113","endLine":71,"endColumn":58},{"ruleId":"1111","severity":1,"message":"1112","line":72,"column":47,"nodeType":"980","messageId":"1113","endLine":72,"endColumn":58},{"ruleId":"1111","severity":1,"message":"1112","line":73,"column":47,"nodeType":"980","messageId":"1113","endLine":73,"endColumn":58},{"ruleId":"1111","severity":1,"message":"1112","line":74,"column":47,"nodeType":"980","messageId":"1113","endLine":74,"endColumn":58},{"ruleId":"1111","severity":1,"message":"1112","line":75,"column":47,"nodeType":"980","messageId":"1113","endLine":75,"endColumn":58},{"ruleId":"1111","severity":1,"message":"1112","line":123,"column":21,"nodeType":"980","messageId":"1113","endLine":123,"endColumn":32},{"ruleId":"1111","severity":1,"message":"1112","line":125,"column":28,"nodeType":"980","messageId":"1113","endLine":125,"endColumn":39},{"ruleId":"1111","severity":1,"message":"1112","line":127,"column":28,"nodeType":"980","messageId":"1113","endLine":127,"endColumn":39},{"ruleId":"1111","severity":1,"message":"1112","line":129,"column":28,"nodeType":"980","messageId":"1113","endLine":129,"endColumn":39},{"ruleId":"1111","severity":1,"message":"1112","line":131,"column":28,"nodeType":"980","messageId":"1113","endLine":131,"endColumn":39},{"ruleId":"1111","severity":1,"message":"1112","line":141,"column":21,"nodeType":"980","messageId":"1113","endLine":141,"endColumn":32},{"ruleId":"1111","severity":1,"message":"1112","line":143,"column":28,"nodeType":"980","messageId":"1113","endLine":143,"endColumn":39},{"ruleId":"1111","severity":1,"message":"1112","line":145,"column":28,"nodeType":"980","messageId":"1113","endLine":145,"endColumn":39},{"ruleId":"1111","severity":1,"message":"1112","line":147,"column":28,"nodeType":"980","messageId":"1113","endLine":147,"endColumn":39},{"ruleId":"1111","severity":1,"message":"1112","line":149,"column":28,"nodeType":"980","messageId":"1113","endLine":149,"endColumn":39},{"ruleId":"1111","severity":1,"message":"1112","line":157,"column":21,"nodeType":"980","messageId":"1113","endLine":157,"endColumn":32},{"ruleId":"1111","severity":1,"message":"1112","line":159,"column":28,"nodeType":"980","messageId":"1113","endLine":159,"endColumn":39},{"ruleId":"1111","severity":1,"message":"1112","line":161,"column":28,"nodeType":"980","messageId":"1113","endLine":161,"endColumn":39},{"ruleId":"1111","severity":1,"message":"1112","line":163,"column":28,"nodeType":"980","messageId":"1113","endLine":163,"endColumn":39},{"ruleId":"1111","severity":1,"message":"1112","line":165,"column":28,"nodeType":"980","messageId":"1113","endLine":165,"endColumn":39},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1114"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1115"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1116"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1117"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1118"},{"ruleId":"973","severity":1,"message":"974","line":1,"column":1,"nodeType":"975","messageId":"976","fix":"1119"},{"ruleId":"978","severity":1,"message":"1002","line":4,"column":37,"nodeType":"980","messageId":"981","endLine":4,"endColumn":41},"no-native-reassign",["1120"],"no-negated-in-lhs",["1121"],"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"1122","text":"1123"},"@typescript-eslint/no-unused-vars","'extendObservable' is defined but never used.","Identifier","unusedVar",{"range":"1124","text":"1123"},{"range":"1125","text":"1123"},{"range":"1126","text":"1123"},{"range":"1127","text":"1123"},{"range":"1128","text":"1123"},{"range":"1129","text":"1123"},{"range":"1130","text":"1123"},{"range":"1131","text":"1123"},{"range":"1132","text":"1123"},"dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"1133","text":"1134"},{"range":"1135","text":"1123"},{"range":"1136","text":"1123"},{"range":"1137","text":"1123"},{"range":"1138","text":"1123"},{"range":"1139","text":"1123"},{"range":"1140","text":"1123"},"'toJS' is defined but never used.",{"range":"1141","text":"1123"},{"range":"1142","text":"1123"},{"range":"1143","text":"1123"},{"range":"1144","text":"1123"},{"range":"1145","text":"1123"},{"range":"1146","text":"1123"},{"range":"1147","text":"1123"},{"range":"1148","text":"1123"},{"range":"1149","text":"1123"},["1120"],["1121"],{"range":"1150","text":"1123"},["1120"],["1121"],{"range":"1151","text":"1123"},{"range":"1152","text":"1123"},{"range":"1153","text":"1123"},{"range":"1154","text":"1123"},{"range":"1155","text":"1123"},{"range":"1156","text":"1123"},{"range":"1157","text":"1123"},{"range":"1158","text":"1123"},{"range":"1159","text":"1123"},{"range":"1160","text":"1123"},{"range":"1161","text":"1123"},{"range":"1162","text":"1123"},"'UserSubtaskAnswerGroupViewModel' is defined but never used.",{"range":"1163","text":"1123"},{"range":"1164","text":"1123"},"'Button' is defined but never used.","'action' is defined but never used.",{"range":"1165","text":"1123"},{"range":"1166","text":"1123"},{"range":"1167","text":"1123"},"'ModalFooter' is defined but never used.","'ModalHeader' is defined but never used.",{"range":"1168","text":"1123"},"'isDisabled' is assigned a value but never used.",{"range":"1169","text":"1123"},{"range":"1170","text":"1123"},{"range":"1171","text":"1123"},{"range":"1172","text":"1123"},{"range":"1173","text":"1123"},{"range":"1174","text":"1123"},"'Alert' is defined but never used.",{"range":"1175","text":"1123"},{"range":"1176","text":"1123"},{"range":"1177","text":"1123"},{"range":"1178","text":"1123"},{"range":"1179","text":"1123"},{"range":"1180","text":"1123"},"'path' is assigned a value but never used.",{"range":"1181","text":"1123"},{"range":"1182","text":"1123"},{"range":"1183","text":"1123"},{"range":"1184","text":"1123"},"'Input' is defined but never used.",{"range":"1185","text":"1123"},{"range":"1186","text":"1123"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression",{"range":"1187","text":"1123"},{"range":"1188","text":"1123"},{"range":"1189","text":"1123"},{"range":"1190","text":"1123"},{"range":"1191","text":"1123"},{"range":"1192","text":"1123"},{"range":"1193","text":"1123"},{"range":"1194","text":"1123"},{"range":"1195","text":"1123"},{"range":"1196","text":"1123"},"Expected '!==' and instead saw '!='.",{"range":"1197","text":"1123"},{"range":"1198","text":"1123"},"'CardFooter' is defined but never used.",{"range":"1199","text":"1123"},{"range":"1200","text":"1123"},{"range":"1201","text":"1123"},{"range":"1202","text":"1123"},{"range":"1203","text":"1123"},{"range":"1204","text":"1123"},{"range":"1205","text":"1123"},{"range":"1206","text":"1123"},{"range":"1207","text":"1123"},{"range":"1208","text":"1123"},{"range":"1209","text":"1123"},{"range":"1210","text":"1123"},{"range":"1211","text":"1123"},"'UserRole' is defined but never used.","'translateRole' is defined but never used.",{"range":"1212","text":"1123"},{"range":"1213","text":"1123"},{"range":"1214","text":"1123"},{"range":"1215","text":"1123"},{"range":"1216","text":"1123"},{"range":"1217","text":"1123"},{"range":"1218","text":"1123"},{"range":"1219","text":"1123"},{"range":"1220","text":"1123"},{"range":"1221","text":"1123"},{"range":"1222","text":"1123"},{"range":"1223","text":"1123"},{"range":"1224","text":"1123"},"'response' is assigned a value but never used.",{"range":"1225","text":"1123"},{"range":"1226","text":"1123"},{"range":"1227","text":"1123"},"@typescript-eslint/no-use-before-define","'TrackerType' was used before it was defined.","noUseBeforeDefine",{"range":"1228","text":"1123"},{"range":"1229","text":"1123"},{"range":"1230","text":"1123"},{"range":"1231","text":"1123"},{"range":"1232","text":"1123"},{"range":"1233","text":"1123"},"no-global-assign","no-unsafe-negation",[-1,0],"",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[1712,1728],"\r\n            ?.",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]]