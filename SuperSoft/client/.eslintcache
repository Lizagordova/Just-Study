[{"C:\\SuperSoft\\SuperSoft\\client\\src\\index.tsx":"1","C:\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts":"2","C:\\SuperSoft\\SuperSoft\\client\\src\\App.tsx":"3","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx":"4","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx":"5","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Main\\Main.tsx":"6","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyWorkPage.tsx":"7","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\ProjectsPage.tsx":"8","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\UsersPage.tsx":"9","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\ProjectStore.tsx":"10","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx":"11","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\CommentsStore.tsx":"12","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyTasks.tsx":"13","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskStatus.ts":"14","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddProject.tsx":"15","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Projects.tsx":"16","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Project.tsx":"17","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddUserToProject.tsx":"18","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\AddTask.tsx":"19","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Tasks.tsx":"20","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskRole.ts":"21","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\Users.tsx":"22","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentGroupViewModel.ts":"23","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserReadModel.ts":"24","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\Role.ts":"25","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\User.tsx":"26","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\AddUser.tsx":"27","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\ProjectViewModel.ts":"28","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserViewModel.ts":"29","C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\renderSpinner.tsx":"30","C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\translater.tsx":"31"},{"size":704,"mtime":1607787725088,"results":"32","hashOfConfig":"33"},{"size":425,"mtime":1607420618541,"results":"34","hashOfConfig":"33"},{"size":826,"mtime":1608369696609,"results":"35","hashOfConfig":"33"},{"size":817,"mtime":1607860334709,"results":"36","hashOfConfig":"33"},{"size":1970,"mtime":1608366518081,"results":"37","hashOfConfig":"33"},{"size":2169,"mtime":1608299811392,"results":"38","hashOfConfig":"33"},{"size":3508,"mtime":1608146828924,"results":"39","hashOfConfig":"33"},{"size":986,"mtime":1608367880925,"results":"40","hashOfConfig":"33"},{"size":667,"mtime":1608367880065,"results":"41","hashOfConfig":"33"},{"size":1984,"mtime":1608366187990,"results":"42","hashOfConfig":"33"},{"size":2445,"mtime":1608361883870,"results":"43","hashOfConfig":"33"},{"size":1566,"mtime":1608303176650,"results":"44","hashOfConfig":"33"},{"size":2570,"mtime":1607930891721,"results":"45","hashOfConfig":"33"},{"size":253,"mtime":1608368222037,"results":"46","hashOfConfig":"33"},{"size":6748,"mtime":1608369797946,"results":"47","hashOfConfig":"33"},{"size":2505,"mtime":1608366330451,"results":"48","hashOfConfig":"33"},{"size":6703,"mtime":1608362600845,"results":"49","hashOfConfig":"33"},{"size":305,"mtime":1607942173528,"results":"50","hashOfConfig":"33"},{"size":9219,"mtime":1608369822294,"results":"51","hashOfConfig":"33"},{"size":2047,"mtime":1608146828960,"results":"52","hashOfConfig":"33"},{"size":252,"mtime":1608368222033,"results":"53","hashOfConfig":"33"},{"size":1151,"mtime":1608232554256,"results":"54","hashOfConfig":"33"},{"size":366,"mtime":1608368221994,"results":"55","hashOfConfig":"33"},{"size":399,"mtime":1608368222024,"results":"56","hashOfConfig":"33"},{"size":290,"mtime":1608368222035,"results":"57","hashOfConfig":"33"},{"size":2065,"mtime":1608298096066,"results":"58","hashOfConfig":"33"},{"size":5787,"mtime":1608369764178,"results":"59","hashOfConfig":"33"},{"size":376,"mtime":1608368222005,"results":"60","hashOfConfig":"33"},{"size":403,"mtime":1608298150690,"results":"61","hashOfConfig":"33"},{"size":164,"mtime":1608361997793,"results":"62","hashOfConfig":"33"},{"size":543,"mtime":1608368131003,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"18g08rn",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"73","usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"76","usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"79","usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"82","usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"85","usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"88","usedDeprecatedRules":"66"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"91","usedDeprecatedRules":"66"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"94","usedDeprecatedRules":"66"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"97","usedDeprecatedRules":"66"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"100","usedDeprecatedRules":"66"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"107","usedDeprecatedRules":"66"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"110","usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"113","usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"118","usedDeprecatedRules":"66"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"123","usedDeprecatedRules":"66"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"132","usedDeprecatedRules":"66"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"141","usedDeprecatedRules":"66"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"144","usedDeprecatedRules":"66"},"C:\\SuperSoft\\SuperSoft\\client\\src\\index.tsx",[],["145","146"],"C:\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\App.tsx",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx",["147","148"],"ï»¿import { action, observable, makeObservable } from \"mobx\";\r\nimport UserStore from \"./UserStore\";\r\nimport ProjectStore from \"./ProjectStore\";\r\nimport TaskStore from \"./TaskStore\";\r\nimport CommentsStore from \"./CommentsStore\";\r\n\r\nexport class RootStore {\r\n    userStore: UserStore;\r\n    taskStore: TaskStore;\r\n    projectStore: ProjectStore;\r\n    commentStore: CommentsStore;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            userStore: observable,\r\n            taskStore: observable,\r\n            projectStore: observable,\r\n            commentStore: observable\r\n        });\r\n        this.userStore = new UserStore();\r\n        this.taskStore = new TaskStore();\r\n        this.projectStore = new ProjectStore();\r\n        this.commentStore = new CommentsStore();\r\n    }\r\n}\r\n\r\nexport default RootStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx",["149"],"ï»¿import { UserViewModel } from \"../Typings/viewModels/UserViewModel\";\r\nimport {makeObservable, observable} from \"mobx\";\r\nimport {UserReadModel} from \"../Typings/viewModels/UserReadModel\";\r\n\r\nclass UserStore {\r\n    currentUser: UserViewModel;\r\n    users: UserViewModel[];\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            users: observable,\r\n            currentUser: observable\r\n        });\r\n        this.users = new Array<UserViewModel>();\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        this.getCurrentUser()\r\n            .then((user) => {\r\n                console.log(\"user\", user);\r\n                this.currentUser = user;\r\n            });\r\n        this.getUsers();\r\n    }\r\n\r\n    async getCurrentUser(): Promise<UserViewModel> {\r\n        const response = await fetch(\"/getcurrentuser\");\r\n        return await response.json();\r\n    }\r\n\r\n    async getUsers() {\r\n        const response = await fetch(\"/getusers\");\r\n        this.users = await response.json();\r\n    }\r\n\r\n    async deleteUser(userId: number) {\r\n        const response = await fetch(\"/deleteuser\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({userId: userId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getUsers();\r\n        }\r\n    }\r\n\r\n    async addOrUpdateUser(user: UserReadModel) {\r\n        const response = await fetch(\"/addorupdateuser\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: user.id, firstName: user.firstName, lastName: user.lastName, email: user.email, role: user.role, password: user.password})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getUsers();\r\n        }\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default UserStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Main\\Main.tsx",["150"],"ï»¿import React from \"react\";\r\nimport { IMainProps } from \"./IMainProps\";\r\nimport { Card, CardHeader, Nav, NavItem } from \"reactstrap\";\r\nimport { NavLink, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { MyWorkPage } from \"../MyWork/MyWorkPage\";\r\nimport { ProjectsPage } from \"../Projects/ProjectsPage\";\r\nimport { UsersPage } from \"../Users/UsersPage\";\r\nimport { observer } from  \"mobx-react\";\r\nimport 'react-calendar/dist/Calendar.css'\r\n\r\n@observer\r\nexport class Main extends React.Component<IMainProps> {\r\n    render() {\r\n        return(\r\n            <>\r\n                <Card>\r\n                    <CardHeader>\r\n                        <Nav tabs className=\"nav\">\r\n                              <NavItem>\r\n                                  <NavLink to=\"/mywork\" exact className=\"nav-link\" activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>ÐÐÐ¯ Ð ÐÐÐÐ¢Ð</NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink to=\"/projects\" exact className=\"nav-link\" activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>ÐÐ ÐÐÐÐ¢Ð«</NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink to=\"/users\" exact className=\"nav-link\" activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>ÐÐÐÐ¬ÐÐÐÐÐ¢ÐÐÐ</NavLink>\r\n                              </NavItem>\r\n                        </Nav>\r\n                    </CardHeader>\r\n                </Card>\r\n                <Switch>\r\n                    <Route exact path=\"/mywork\" \r\n                         render={(props) => <MyWorkPage store={this.props.store} />} />\r\n                    <Route exact path=\"/projects\"\r\n                         render={(props) => <ProjectsPage store={this.props.store} />} />\r\n                    <Route exact path=\"/users\"\r\n                         render={(props) => <UsersPage store={this.props.store} />} />\r\n                    <Redirect to=\"/mywork\" />\r\n                </Switch>\r\n            </>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyWorkPage.tsx",["151"],"ï»¿import React from \"react\";\r\nimport { Col, Nav, NavItem, Row, TabContent, TabPane, NavLink } from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\nimport { MyTasks } from \"./MyTasks\";\r\nimport { observer } from \"mobx-react\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport { IMyWorkProps } from \"./IMyWorkProps\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\n\r\n@observer\r\nexport class  MyWorkPage extends React.Component<IMyWorkProps> {\r\n    activeTab: string = \"1\";\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n           activeTab: observable\r\n       });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{marginTop: 35}} className=\"container-fluid\">\r\n            <Row>\r\n                <Col sm=\"12\">\r\n                    <Nav tabs>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                to=\"#\"\r\n                                activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                className={classnames({ active: this.activeTab === \"1\"})}\r\n                                onClick={(e) => this.toggleTab(\"1\")}\r\n                            >Ð¢ÐµÐºÑÑÐ¸Ðµ</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                to=\"#\"\r\n                                activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                className={classnames({ active: this.activeTab === \"2\"})}\r\n                                onClick={(e) => this.toggleTab(\"2\")}>ÐÐ°ÐºÐ¾Ð½ÑÐµÐ½Ð½ÑÐµ</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                to=\"#\"\r\n                                activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                className={classnames({ active: this.activeTab === \"3\"})}\r\n                                onClick={(e) => this.toggleTab(\"3\")}>ÐÑÐ´ÑÑÐ¸Ðµ</NavLink>\r\n                        </NavItem>\r\n                    </Nav>\r\n                    <TabContent activeTab={this.activeTab}>\r\n                        <TabPane tabId=\"1\">\r\n                            <Row>\r\n                                <Col sm=\"12\">\r\n                                    <MyTasks store={this.props.store} tasksStatus={TaskStatus.Current}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </TabPane>\r\n                        <TabPane tabId=\"2\">\r\n                            <Row>\r\n                                <Col sm=\"12\">\r\n                                    <MyTasks store={this.props.store} tasksStatus={TaskStatus.Completed}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </TabPane>\r\n                        <TabPane tabId=\"3\">\r\n                            <Row>\r\n                                <Col sm=\"12\">\r\n                                    <MyTasks store={this.props.store} tasksStatus={TaskStatus.Future}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </TabPane>\r\n                    </TabContent>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n    }\r\n\r\n    @action\r\n    toggleTab(activeTab: string): void {\r\n        this.activeTab = activeTab;\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\ProjectsPage.tsx",["152"],"ï»¿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { AddProject } from \"./AddProject\";\r\nimport { Projects } from \"./Projects\";\r\nimport { makeObservable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nexport class  ProjectsPage extends React.Component<IProjectsProps> {\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container\" style={{marginTop: \"30px\"}}>\r\n                <div className=\"row justify-content-center\">\r\n                    <AddProject store={this.props.store} />\r\n                </div>\r\n                <div className=\"row justify-content-center\" style={{marginTop: \"20px\"}}>\r\n                    <div className=\"col-12\">\r\n                        <Projects store={this.props.store} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\UsersPage.tsx",["153"],"ï»¿import React from \"react\";\r\nimport { IUsersProps } from \"./IUsersProps\";\r\nimport { Users } from \"./Users\";\r\nimport {AddUser} from \"./AddUser\";\r\n\r\nexport class  UsersPage extends React.Component<IUsersProps> {\r\n    render() {\r\n        return(\r\n            <div className=\"container\" style={{marginTop: \"30px\"}}>\r\n                <div className=\"row justify-content-center\">\r\n                    <AddUser store={this.props.store}/>\r\n                </div>\r\n                <div className=\"row justify-content-center\" style={{marginTop: \"20px\"}}>\r\n                    <Users store={this.props.store}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\ProjectStore.tsx",["154"],"ï»¿import { ProjectViewModel } from \"../Typings/viewModels/ProjectViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\n\r\nclass ProjectStore {\r\n    public projects: ProjectViewModel[];\r\n    public choosenProject: ProjectViewModel;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            projects: observable,\r\n            choosenProject: observable\r\n        });\r\n        this.projects = new Array<ProjectViewModel>(0);\r\n        this.choosenProject = new ProjectViewModel();\r\n        this.choosenProject.id = 0;\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        this.getProjects()\r\n            .then((projects) => {\r\n                this.projects = projects;\r\n                this.choosenProject = projects[0];\r\n            });\r\n    }\r\n\r\n    setChoosenProject(project: ProjectViewModel): void {\r\n        this.choosenProject = project;\r\n    }\r\n\r\n    async getProjects(): Promise<ProjectViewModel[]> {\r\n        const response = await fetch(\"/getprojects\");\r\n        if(response.status === 200) {\r\n            return await response.json();\r\n        } else {\r\n            return new Array<ProjectViewModel>(0);\r\n        }\r\n    }\r\n\r\n    async addNewProject(name: string, description: string, startDate: Date, deadlineDate: Date, responsibleId: number) {\r\n        const response = await fetch(\"/addorupdateproject\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({ name: name, description: description,startDate: startDate, deadlineDate: deadlineDate, responsiblePerson: responsibleId })\r\n        });\r\n        if(response.status === 200) {\r\n            const project = await response.json();\r\n            console.log(\"new Project\", project);\r\n            console.log(\"this projects\", this.projects);\r\n            this.getProjects();\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default ProjectStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx",["155"],"ï»¿import { makeObservable, observable } from \"mobx\";\r\nimport { UserTaskViewModel } from \"../Typings/viewModels/UserTaskViewModel\";\r\nimport { TaskViewModel } from \"../Typings/viewModels/TaskViewModel\";\r\nimport { TaskStatus } from \"../Typings/enums/TaskStatus\";\r\nimport { TaskType } from \"../Typings/enums/TaskType\";\r\n\r\nclass TaskStore {\r\n    currentUserTasks: UserTaskViewModel[];\r\n    currentProjectTasks: TaskViewModel[];\r\n    userTasks: UserTaskViewModel[];\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            currentUserTasks: observable,\r\n            currentProjectTasks: observable\r\n        });\r\n        this.currentProjectTasks = new Array<TaskViewModel>();\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        this.getCurrentUserTasks();\r\n    }\r\n\r\n    async getCurrentUserTasks() {\r\n        const response = await fetch(\"/getusertasks\");\r\n        if(response.status === 200) {\r\n            this.currentUserTasks = await response.json();\r\n        } else {\r\n            this.currentUserTasks = new Array<UserTaskViewModel>(0);\r\n        }\r\n    }\r\n\r\n    async getTasks(projectId: number) {\r\n        const response = await fetch(\"/gettasks\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: projectId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.currentProjectTasks = await response.json();\r\n        }\r\n    }\r\n\r\n    async addNewTask(projectId: number, header: string, description: string, startDate: Date | Date[], deadlineDate: Date | Date[], taskType: TaskType, status: TaskStatus, priority: number, tester: number, responsible: number, author: number) {\r\n        const response = await fetch(\"/addorupdatetask\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({projectId: projectId, header: header, description: description, startDate: startDate, deadlineDate: deadlineDate, taskType: taskType, status: status, priority: priority, tester: tester, responsible: responsible, author: author})\r\n        });\r\n        if(response.status === 200) {\r\n            const task = await response.json();\r\n            this.currentProjectTasks.push(task);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default TaskStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\CommentsStore.tsx",["156"],"ï»¿import { makeObservable, observable } from \"mobx\";\r\nimport { CommentGroupViewModel } from \"../Typings/viewModels/CommentGroupViewModel\";\r\nimport {UserReadModel} from \"../Typings/viewModels/UserReadModel\";\r\n\r\nclass CommentsStore {\r\n    currentTaskCommentGroup: CommentGroupViewModel;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            currentTaskCommentGroup: observable\r\n        });\r\n    }\r\n\r\n    async getCurrentTaskComments(taskId: number): Promise<CommentGroupViewModel> {\r\n        const response = await fetch(\"/getcurrenttaskcommentgroup\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({taskId: taskId})\r\n        });\r\n        if(response.status === 200) {\r\n            return await response.json();\r\n        } else {\r\n            return new CommentGroupViewModel();\r\n        }\r\n    }\r\n\r\n    async addComment(text: string, userId: number): Promise<number> {\r\n        const user = new UserReadModel();\r\n        user.id = userId;\r\n        const response = await fetch(\"/addorupdatecomment\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({text: text, groupId: this.currentTaskCommentGroup.id, user: user})\r\n        });\r\n        if(response.status === 200) {\r\n            return await response.json();\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport default CommentsStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyTasks.tsx",["157","158"],"ï»¿import React from \"react\";\r\nimport { IMyTasksProps } from \"./IMyTasksProps\";\r\nimport { Table } from 'reactstrap';\r\nimport { TaskViewModel } from \"../../Typings/viewModels/TaskViewModel\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\n\r\nexport class MyTasks extends React.Component<IMyTasksProps> {\r\n    getTaskStatusTranslit(taskStatus: TaskStatus): string {\r\n        if(taskStatus === TaskStatus.Current) {\r\n            return \"Ð¢ÐµÐºÑÑÐ¸Ðµ\";\r\n        } else if(taskStatus === TaskStatus.Completed) {\r\n            return \"ÐÐ°ÐºÐ¾Ð½ÑÐµÐ½Ð½ÑÐµ\";\r\n        } else if(taskStatus === TaskStatus.Future) {\r\n            return \"ÐÑÐ´ÑÑÐ¸Ðµ\";\r\n        } else {\r\n            return \"Ð¢ÐµÐºÑÑÐ¸Ðµ\";\r\n        }\r\n    }\r\n\r\n    filterTasks(taskStatus: TaskStatus): TaskViewModel[] {\r\n        return this.props.store.taskStore.currentUserTasks?.\r\n            filter(ut => ut.task.status === taskStatus)\r\n            .map(ut => {\r\n                return ut.task\r\n            });\r\n    }\r\n\r\n    renderMyTasks(tasks: TaskViewModel[]) {\r\n        return(\r\n            <Table bordered style={{backgroundColor: \"#C4DFE6\", color:\"003b46\"}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>ÐÐ¾Ð¼ÐµÑ</th>\r\n                        <th>ÐÐ°Ð´Ð°ÑÐ°</th>\r\n                        <th>ÐÐµÐ´Ð»Ð°Ð¹Ð½</th>\r\n                        <th>Ð¡ÑÐ°ÑÑÑ</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr key=\"1\">\r\n                    <th>id</th>\r\n                    <th>header</th>\r\n                    <th>deadlineDate</th>\r\n                    <th>status</th>\r\n                </tr>\r\n                    {tasks.map((task) => {\r\n                        return(\r\n                            <tr key={task.id}>\r\n                                <th>{task.id}</th>\r\n                                <th>{task.header}</th>\r\n                                <th>{task.deadlineDate}</th>\r\n                                <th>{task.status}</th>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        let tasks = this.filterTasks(this.props.tasksStatus);\r\n        return(\r\n            <>\r\n                <label>{this.getTaskStatusTranslit(this.props.tasksStatus)}</label>\r\n                {tasks !== undefined && this.renderMyTasks(tasks)}\r\n                {tasks === undefined && <div><span>ÐÐ°Ð´Ð°Ñ Ð¿Ð¾ÐºÐ° Ð½ÐµÑ:)</span></div>}\r\n            </>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskStatus.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddProject.tsx",["159"],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Projects.tsx",["160"],"ï»¿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { ProjectViewModel } from \"../../Typings/viewModels/ProjectViewModel\";\r\nimport { Tab, Nav, Alert } from \"react-bootstrap\";\r\nimport { Project } from \"./Project\";\r\nimport { observer } from \"mobx-react\";\r\nimport {renderSpinner} from \"../../functions/renderSpinner\";\r\n\r\n@observer\r\nexport class Projects extends React.Component<IProjectsProps> {\r\n    renderMenu(projects: ProjectViewModel[], choosenProject: ProjectViewModel) {\r\n        // @ts-ignore\r\n        return(\r\n            <Tab.Container defaultActiveKey={`${choosenProject.id.toString()}`}>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-3\">\r\n                        <Nav variant=\"pills\" className=\"flex-column\">\r\n                            {projects.map((project) => {\r\n                                return (\r\n                                    <Nav.Item key={project.id} onClick={() => {this.props.store.projectStore.setChoosenProject(project)}}>\r\n                                        <Nav.Link eventKey={project.id}>{project.name}</Nav.Link>\r\n                                    </Nav.Item>\r\n                                );\r\n                            })}\r\n                        </Nav>\r\n                    </div>\r\n                    <div className=\"col-9\">\r\n                        <Tab.Content>\r\n                            {projects.map((project) => {\r\n                                return (\r\n                                    <Tab.Pane eventKey={project.id} key={project.id}>\r\n                                        <Project store={this.props.store} />\r\n                                    </Tab.Pane>\r\n                                );\r\n                            })}\r\n                        </Tab.Content>\r\n                    </div>\r\n                </div>\r\n            </Tab.Container>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let projects = this.props.store.projectStore.projects;\r\n        let choosenProject =  this.props.store.projectStore.choosenProject;\r\n        return(\r\n            <>\r\n                {projects.length === 0 && <Alert variant=\"primary\">\r\n                    <span>ÐÐ¾ÐºÐ° Ð½ÐµÑ Ð½Ð¸ÐºÐ°ÐºÐ¸Ñ Ð¿ÑÐ¾ÐµÐºÑÐ¾Ð²</span>\r\n                </Alert>}\r\n                {choosenProject !== undefined && this.renderMenu(projects, choosenProject)}\r\n                {choosenProject === undefined && renderSpinner()}\r\n            </>\r\n        )\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Project.tsx",["161"],"ï»¿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { AddTask } from \"../Tasks/AddTask\";\r\nimport { AddUserToProject } from \"./AddUserToProject\";\r\nimport { Tasks } from \"../Tasks/Tasks\";\r\nimport { ProjectViewModel } from \"../../Typings/viewModels/ProjectViewModel\";\r\nimport { Card, CardText, CardTitle } from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\nimport { Col, Nav, NavItem, Row, TabContent, TabPane, NavLink, Alert } from \"reactstrap\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { renderSpinner } from \"../../functions/renderSpinner\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nexport class Project extends React.Component<IProjectsProps> {\r\n    activeTab: string = \"1\";\r\n    loaded: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            activeTab: observable,\r\n            loaded: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.props.store.taskStore.getTasks(this.props.store.projectStore.choosenProject.id)\r\n            .then(() => this.loaded = true);\r\n    }\r\n\r\n    renderProjectDiagram() {\r\n        return (\r\n            <>ÐÐ¸Ð°Ð³ÑÐ°Ð¼Ð¼Ð°. ÐÐµÐ²Ð°Ð¶Ð½Ð¾, ÑÑÐ¾ ÑÑ Ð½Ðµ Ð²Ð¸Ð´Ð¸ÑÑ ÐµÑ. ÐÐ½Ð° ÑÐµÐ±Ñ Ð²Ð¸Ð´Ð¸Ñ</>\r\n        );\r\n    }\r\n\r\n    getResponsible(responsibleId: number) {\r\n        let responsible = this.props.store.userStore.users.filter(u => u.id === responsibleId)[0];\r\n        if(responsible === undefined) {\r\n            return undefined;\r\n        } else {\r\n            return responsible;\r\n        }\r\n    }\r\n\r\n    renderResponsible(responsible: UserViewModel | undefined) {\r\n        if(responsible === undefined) {\r\n            return(\r\n                <Alert>Ð ÑÐºÐ¾Ð²Ð¾Ð´Ð¸ÑÐµÐ»Ñ Ð½Ðµ Ð²ÑÐ±ÑÐ°Ð½</Alert>\r\n            );\r\n        } else {\r\n            return(\r\n                <CardText>Ð ÑÐºÐ¾Ð²Ð¾Ð´Ð¸ÑÐµÐ»Ñ: <span>{responsible?.firstName} {responsible?.lastName}</span></CardText>\r\n            )\r\n        }\r\n    }\r\n\r\n    renderProjectInfo(project: ProjectViewModel) {\r\n        let responsible = this.getResponsible(project.responsiblePerson);\r\n        return (\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                    <Card>\r\n                        <CardTitle>{project.name}</CardTitle>\r\n                        {this.renderResponsible(responsible)}\r\n                        <CardText>ÐÐ°ÑÐ° Ð½Ð°ÑÐ°Ð»Ð°: {project.startDate}</CardText>\r\n                        <CardText>ÐÐµÐ´Ð»Ð°Ð¹Ð½: {project.deadlineDate}</CardText>\r\n                        <CardText>ÐÐ¿Ð¸ÑÐ°Ð½Ð¸Ðµ: {project.description}</CardText>\r\n                    </Card>\r\n                </div>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                    {this.renderProjectDiagram()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderTasksMenu() {\r\n        return(\r\n            <div style={{marginTop: 35}} className=\"container-fluid\">\r\n                <Row>\r\n                    <Col sm=\"12\">\r\n                        <Nav tabs>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    className={classnames({ active: this.activeTab === \"1\"})}\r\n                                    onClick={(e) => this.toggleTab(\"1\")}\r\n                                >Ð¢ÐµÐºÑÑÐ¸Ðµ</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    className={classnames({ active: this.activeTab === \"2\"})}\r\n                                    onClick={(e) => this.toggleTab(\"2\")}>ÐÐ°ÐºÐ¾Ð½ÑÐµÐ½Ð½ÑÐµ</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    className={classnames({ active: this.activeTab === \"3\"})}\r\n                                    onClick={(e) => this.toggleTab(\"3\")}>ÐÑÐ´ÑÑÐ¸Ðµ</NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                        <TabContent activeTab={this.activeTab}>\r\n                            <TabPane tabId=\"1\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <Tasks store={this.props.store} status={TaskStatus.Current}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                            <TabPane tabId=\"2\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <Tasks store={this.props.store} status={TaskStatus.Completed}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                            <TabPane tabId=\"3\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <Tasks store={this.props.store} status={TaskStatus.Future}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                        </TabContent>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <div className=\"container\">\r\n                {this.renderProjectInfo(this.props.store.projectStore.choosenProject)}\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-lg-3 col-lg-offset-4\">\r\n                        <AddTask store={this.props.store}/>\r\n                    </div>\r\n                    <div className=\"col-lg-3 col-lg-offset-7\">\r\n                        <AddUserToProject store={this.props.store}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.loaded && this.renderTasksMenu()}\r\n                    {!this.loaded && renderSpinner()}\r\n                </div>\r\n            </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    @action\r\n    toggleTab(activeTab: string): void {\r\n        this.activeTab = activeTab;\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddUserToProject.tsx",["162"],"ï»¿import React from \"react\";\r\nimport RootStore from \"../../stores/RootStore\";\r\n\r\nexport interface IAddUserToProjectProps {\r\n    store: RootStore;\r\n}\r\n\r\nexport class AddUserToProject extends React.Component<IAddUserToProjectProps>{\r\n    render() {\r\n        return(\r\n            <></>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\AddTask.tsx",["163"],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Tasks.tsx",["164"],"ï»¿import React from \"react\";\r\nimport { ITasksProps } from \"./ITasksProps\";\r\nimport { TaskViewModel } from \"../../Typings/viewModels/TaskViewModel\";\r\nimport { Table } from \"reactstrap\";\r\nimport { TaskRole } from \"../../Typings/enums/TaskRole\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\n\r\nexport class Tasks extends React.Component<ITasksProps> {\r\n    getResponsible(taskId: number): UserViewModel {\r\n        return this.props.store.taskStore.userTasks\r\n            .filter(ut => ut.task.id === taskId)\r\n            .filter(ut => ut.role === TaskRole.Responsible)\r\n            .map(ut => ut.user)[0];\r\n    }\r\n\r\n    renderTasks(tasks: TaskViewModel[]) {\r\n        return(\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>ÐÐ¾Ð¼ÐµÑ</th>\r\n                        <th>ÐÐ°Ð´Ð°ÑÐ°</th>\r\n                        <th>ÐÐµÐ´Ð»Ð°Ð¹Ð½</th>\r\n                        <th>Ð¢Ð¸Ð¿ Ð·Ð°Ð´Ð°ÑÐ¸</th>\r\n                        <th>ÐÑÐ²ÐµÑÑÑÐ²ÐµÐ½Ð½ÑÐ¹</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {tasks.map((task) => {\r\n                    let responsible = this.getResponsible(task.id);//Ð²Ð¾Ð¾Ð±ÑÐµ Ð·Ð´ÐµÑÑ Ð»ÑÑÑÐµ Ð´ÑÐ¾Ð¿Ð´Ð°ÑÐ½ ÑÐ´ÐµÐ»Ð°ÑÑ\r\n                    return(\r\n                        <tr key={task.id}>\r\n                            <th>{task.id}</th>\r\n                            <th>{task.header}</th>\r\n                            <th>{task.deadlineDate}</th>\r\n                            <th>{task.taskType}</th>\r\n                            <th>{responsible.firstName + \" \" + responsible.lastName}</th>\r\n                        </tr>\r\n                    );\r\n                })}\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let tasks = this.props.store.taskStore.currentProjectTasks.filter(t => t.status === this.props.status);\r\n        return(\r\n            <>\r\n                {this.renderTasks(tasks)}\r\n            </>\r\n        )\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskRole.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\Users.tsx",["165"],"ï»¿import React from \"react\";\r\nimport { IUsersProps } from \"./IUsersProps\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { Table } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport { User } from \"./User\";\r\n\r\n@observer\r\nexport class  Users extends React.Component<IUsersProps> {\r\n    renderUsers(users: UserViewModel[]) {\r\n        return(\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Id</th>\r\n                        <th>ÐÐ¼Ñ Ð¤Ð°Ð¼Ð¸Ð»Ð¸Ñ</th>\r\n                        <th>Email</th>\r\n                        <th>Ð Ð¾Ð»Ñ</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {users.map(user => {\r\n                        return(\r\n                           <User store={this.props.store} currentUser={user}/>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderUsers(this.props.store.userStore.users)}\r\n            </>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentGroupViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserReadModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\Role.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\User.tsx",["166"],"ï»¿import React from \"react\";\r\nimport { IUserProps } from \"./IUserProps\";\r\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from \"reactstrap\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Role } from \"../../Typings/enums/Role\";\r\nimport {UserViewModel} from \"../../Typings/viewModels/UserViewModel\";\r\n\r\nexport class User extends React.Component<IUserProps> {\r\n    roleDropdownOpen: boolean;\r\n    role: Role;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            roleDropdownOpen: observable\r\n        });\r\n        this.role = Role.Developer;\r\n    }\r\n\r\n    toggleRoleDropdown() {\r\n        this.roleDropdownOpen = !this.roleDropdownOpen;\r\n    }\r\n\r\n    chooseUserRole(role: Role) {\r\n        this.role = role;\r\n    }\r\n\r\n    renderRoleDropdown() {\r\n        return(\r\n            <Dropdown isOpen={this.roleDropdownOpen} toggle={() => this.toggleRoleDropdown()}>\r\n                <DropdownToggle caret>Ð Ð°Ð·ÑÐ°Ð±Ð¾ÑÑÐ¸Ðº</DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Developer)}>Ð Ð°Ð·ÑÐ°Ð±Ð¾ÑÑÐ¸Ðº</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Tester)}>Ð¢ÐµÑÑÐ¸ÑÐ¾Ð²ÑÐ¸Ðº</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Accounter)}>ÐÑÑÐ³Ð°Ð»ÑÐµÑ</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Marketolog)}>ÐÐ°ÑÐºÐµÑÐ¾Ð»Ð¾Ð³</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderUser(user: UserViewModel) {\r\n        return(\r\n            <tr>\r\n                <th>{user.id}</th>\r\n                <th>{user.firstName} {user.lastName}</th>\r\n                <th>{user.email}</th>\r\n                <th>{this.renderRoleDropdown()}</th>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let user = this.props.currentUser;\r\n        return(\r\n            <>{this.renderUser(user)}</>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\AddUser.tsx",["167"],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\ProjectViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\renderSpinner.tsx",["168"],"ï»¿import React from \"react\";\r\nimport { Spinner } from 'reactstrap';\r\n\r\nexport function renderSpinner() {\r\n    return(\r\n        <Spinner color=\"primary\"/>\r\n    )\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\translater.tsx",["169"],"ï»¿import { Role } from \"../Typings/enums/Role\";\r\n\r\nexport function translateRole(role: Role): string {\r\n    if(role === Role.Developer) {\r\n        return \"Ð Ð°Ð·ÑÐ°Ð±Ð¾ÑÑÐ¸Ðº\";\r\n    } else if(role === Role.Marketolog) {\r\n        return \"ÐÐ°ÑÐºÐµÑÐ¾Ð»Ð¾Ð³\";\r\n    } else if(role === Role.Accounter) {\r\n        return \"ÐÑÑÐ³Ð°Ð»ÑÐµÑ\";\r\n    } else if(role === Role.Administrator) {\r\n        return \"ÐÐ´Ð¼Ð¸Ð½Ð¸ÑÑÑÐ°ÑÐ¾Ñ\";\r\n    } else if(role === Role.Tester) {\r\n        return \"Ð¢ÐµÑÑÐ¸ÑÐ¾Ð²ÑÐ¸Ðº\";\r\n    } \r\n    return \"\";\r\n}",{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","severity":1,"message":"175","line":1,"column":1,"nodeType":"176","messageId":"177","fix":"178"},{"ruleId":"179","severity":1,"message":"180","line":1,"column":10,"nodeType":"181","messageId":"182","endLine":1,"endColumn":16},{"ruleId":"174","severity":1,"message":"175","line":1,"column":1,"nodeType":"176","messageId":"177","fix":"183"},{"ruleId":"174","severity":1,"message":"175","line":1,"column":1,"nodeType":"176","messageId":"177","fix":"184"},{"ruleId":"174","severity":1,"message":"175","line":1,"column":1,"nodeType":"176","messageId":"177","fix":"185"},{"ruleId":"174","severity":1,"message":"175","line":1,"column":1,"nodeType":"176","messageId":"177","fix":"186"},{"ruleId":"174","severity":1,"message":"175","line":1,"column":1,"nodeType":"176","messageId":"177","fix":"187"},{"ruleId":"174","severity":1,"message":"175","line":1,"column":1,"nodeType":"176","messageId":"177","fix":"188"},{"ruleId":"174","severity":1,"message":"175","line":1,"column":1,"nodeType":"176","messageId":"177","fix":"189"},{"ruleId":"174","severity":1,"message":"175","line":1,"column":1,"nodeType":"176","messageId":"177","fix":"190"},{"ruleId":"174","severity":1,"message":"175","line":1,"column":1,"nodeType":"176","messageId":"177","fix":"191"},{"ruleId":"192","severity":1,"message":"193","line":21,"column":59,"nodeType":"194","messageId":"195","endLine":21,"endColumn":61,"fix":"196"},{"ruleId":"174","severity":1,"message":"175","line":1,"column":1,"nodeType":"176","messageId":"177","fix":"197"},{"ruleId":"174","severity":1,"message":"175","line":1,"column":1,"nodeType":"176","messageId":"177","fix":"198"},{"ruleId":"174","severity":1,"message":"175","line":1,"column":1,"nodeType":"176","messageId":"177","fix":"199"},{"ruleId":"174","severity":1,"message":"175","line":1,"column":1,"nodeType":"176","messageId":"177","fix":"200"},{"ruleId":"174","severity":1,"message":"175","line":1,"column":1,"nodeType":"176","messageId":"177","fix":"201"},{"ruleId":"174","severity":1,"message":"175","line":1,"column":1,"nodeType":"176","messageId":"177","fix":"202"},{"ruleId":"174","severity":1,"message":"175","line":1,"column":1,"nodeType":"176","messageId":"177","fix":"203"},{"ruleId":"174","severity":1,"message":"175","line":1,"column":1,"nodeType":"176","messageId":"177","fix":"204"},{"ruleId":"174","severity":1,"message":"175","line":1,"column":1,"nodeType":"176","messageId":"177","fix":"205"},{"ruleId":"174","severity":1,"message":"175","line":1,"column":1,"nodeType":"176","messageId":"177","fix":"206"},{"ruleId":"174","severity":1,"message":"175","line":1,"column":1,"nodeType":"176","messageId":"177","fix":"207"},"no-native-reassign",["208"],"no-negated-in-lhs",["209"],"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"210","text":"211"},"@typescript-eslint/no-unused-vars","'action' is defined but never used.","Identifier","unusedVar",{"range":"212","text":"211"},{"range":"213","text":"211"},{"range":"214","text":"211"},{"range":"215","text":"211"},{"range":"216","text":"211"},{"range":"217","text":"211"},{"range":"218","text":"211"},{"range":"219","text":"211"},{"range":"220","text":"211"},"dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"221","text":"222"},{"range":"223","text":"211"},{"range":"224","text":"211"},{"range":"225","text":"211"},{"range":"226","text":"211"},{"range":"227","text":"211"},{"range":"228","text":"211"},{"range":"229","text":"211"},{"range":"230","text":"211"},{"range":"231","text":"211"},{"range":"232","text":"211"},{"range":"233","text":"211"},"no-global-assign","no-unsafe-negation",[-1,0],"",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[822,838],"\r\n            ?.",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]]