[{"C:\\SuperSoft\\SuperSoft\\client\\src\\index.tsx":"1","C:\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts":"2","C:\\SuperSoft\\SuperSoft\\client\\src\\App.tsx":"3","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx":"4","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx":"5","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Main\\Main.tsx":"6","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyWorkPage.tsx":"7","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\ProjectsPage.tsx":"8","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\UsersPage.tsx":"9","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\ProjectStore.tsx":"10","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx":"11","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\CommentsStore.tsx":"12","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyTasks.tsx":"13","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskStatus.ts":"14","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddProject.tsx":"15","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Projects.tsx":"16","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Project.tsx":"17","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddUserToProject.tsx":"18","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\AddTask.tsx":"19","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Tasks.tsx":"20","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskRole.ts":"21","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\Users.tsx":"22","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentGroupViewModel.ts":"23","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserReadModel.ts":"24","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\Role.ts":"25","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\User.tsx":"26","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\AddUser.tsx":"27","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\ProjectViewModel.ts":"28","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserViewModel.ts":"29","C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\renderSpinner.tsx":"30","C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\translater.tsx":"31","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Authorization.tsx":"32"},{"size":704,"mtime":1607787725088,"results":"33","hashOfConfig":"34"},{"size":425,"mtime":1607420618541,"results":"35","hashOfConfig":"34"},{"size":1092,"mtime":1608407182954,"results":"36","hashOfConfig":"34"},{"size":817,"mtime":1607860334709,"results":"37","hashOfConfig":"34"},{"size":2211,"mtime":1608407234806,"results":"38","hashOfConfig":"34"},{"size":2169,"mtime":1608299811392,"results":"39","hashOfConfig":"34"},{"size":3508,"mtime":1608146828924,"results":"40","hashOfConfig":"34"},{"size":986,"mtime":1608367880925,"results":"41","hashOfConfig":"34"},{"size":673,"mtime":1608370217935,"results":"42","hashOfConfig":"34"},{"size":1876,"mtime":1608407036984,"results":"43","hashOfConfig":"34"},{"size":2445,"mtime":1608361883870,"results":"44","hashOfConfig":"34"},{"size":1566,"mtime":1608303176650,"results":"45","hashOfConfig":"34"},{"size":2570,"mtime":1607930891721,"results":"46","hashOfConfig":"34"},{"size":253,"mtime":1608406406815,"results":"47","hashOfConfig":"34"},{"size":6748,"mtime":1608369797946,"results":"48","hashOfConfig":"34"},{"size":2505,"mtime":1608366330451,"results":"49","hashOfConfig":"34"},{"size":6703,"mtime":1608362600845,"results":"50","hashOfConfig":"34"},{"size":305,"mtime":1607942173528,"results":"51","hashOfConfig":"34"},{"size":9219,"mtime":1608369822294,"results":"52","hashOfConfig":"34"},{"size":2047,"mtime":1608146828960,"results":"53","hashOfConfig":"34"},{"size":252,"mtime":1608406406812,"results":"54","hashOfConfig":"34"},{"size":1206,"mtime":1608370045224,"results":"55","hashOfConfig":"34"},{"size":366,"mtime":1608406406768,"results":"56","hashOfConfig":"34"},{"size":399,"mtime":1608406406799,"results":"57","hashOfConfig":"34"},{"size":290,"mtime":1608406406814,"results":"58","hashOfConfig":"34"},{"size":3649,"mtime":1608370856712,"results":"59","hashOfConfig":"34"},{"size":5787,"mtime":1608369764178,"results":"60","hashOfConfig":"34"},{"size":376,"mtime":1608406406783,"results":"61","hashOfConfig":"34"},{"size":403,"mtime":1608368222011,"results":"62","hashOfConfig":"63"},{"size":164,"mtime":1608361997793,"results":"64","hashOfConfig":"34"},{"size":543,"mtime":1608368131003,"results":"65","hashOfConfig":"34"},{"size":2580,"mtime":1608407032863,"results":"66","hashOfConfig":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},"1ttbku6",{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"76","usedDeprecatedRules":"69"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"81","usedDeprecatedRules":"69"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"84","usedDeprecatedRules":"69"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"87","usedDeprecatedRules":"69"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"90","usedDeprecatedRules":"69"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"95","usedDeprecatedRules":"69"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"98","usedDeprecatedRules":"69"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"101","usedDeprecatedRules":"69"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"106","usedDeprecatedRules":"69"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"109","usedDeprecatedRules":"69"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"112","usedDeprecatedRules":"69"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"115","usedDeprecatedRules":"69"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"118","usedDeprecatedRules":"69"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"121","usedDeprecatedRules":"69"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"126","usedDeprecatedRules":"69"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"135","usedDeprecatedRules":"69"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"138","usedDeprecatedRules":"69"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"18g08rn",{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"145","usedDeprecatedRules":"69"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"148","usedDeprecatedRules":"69"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},"C:\\SuperSoft\\SuperSoft\\client\\src\\index.tsx",[],["151","152"],"C:\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\App.tsx",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx",["153","154"],"ï»¿import { action, observable, makeObservable } from \"mobx\";\r\nimport UserStore from \"./UserStore\";\r\nimport ProjectStore from \"./ProjectStore\";\r\nimport TaskStore from \"./TaskStore\";\r\nimport CommentsStore from \"./CommentsStore\";\r\n\r\nexport class RootStore {\r\n    userStore: UserStore;\r\n    taskStore: TaskStore;\r\n    projectStore: ProjectStore;\r\n    commentStore: CommentsStore;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            userStore: observable,\r\n            taskStore: observable,\r\n            projectStore: observable,\r\n            commentStore: observable\r\n        });\r\n        this.userStore = new UserStore();\r\n        this.taskStore = new TaskStore();\r\n        this.projectStore = new ProjectStore();\r\n        this.commentStore = new CommentsStore();\r\n    }\r\n}\r\n\r\nexport default RootStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx",["155"],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Main\\Main.tsx",["156"],"ï»¿import React from \"react\";\r\nimport { IMainProps } from \"./IMainProps\";\r\nimport { Card, CardHeader, Nav, NavItem } from \"reactstrap\";\r\nimport { NavLink, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { MyWorkPage } from \"../MyWork/MyWorkPage\";\r\nimport { ProjectsPage } from \"../Projects/ProjectsPage\";\r\nimport { UsersPage } from \"../Users/UsersPage\";\r\nimport { observer } from  \"mobx-react\";\r\nimport 'react-calendar/dist/Calendar.css'\r\n\r\n@observer\r\nexport class Main extends React.Component<IMainProps> {\r\n    render() {\r\n        return(\r\n            <>\r\n                <Card>\r\n                    <CardHeader>\r\n                        <Nav tabs className=\"nav\">\r\n                              <NavItem>\r\n                                  <NavLink to=\"/mywork\" exact className=\"nav-link\" activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>ÐÐÐ¯ Ð ÐÐÐÐ¢Ð</NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink to=\"/projects\" exact className=\"nav-link\" activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>ÐÐ ÐÐÐÐ¢Ð«</NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink to=\"/users\" exact className=\"nav-link\" activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>ÐÐÐÐ¬ÐÐÐÐÐ¢ÐÐÐ</NavLink>\r\n                              </NavItem>\r\n                        </Nav>\r\n                    </CardHeader>\r\n                </Card>\r\n                <Switch>\r\n                    <Route exact path=\"/mywork\" \r\n                         render={(props) => <MyWorkPage store={this.props.store} />} />\r\n                    <Route exact path=\"/projects\"\r\n                         render={(props) => <ProjectsPage store={this.props.store} />} />\r\n                    <Route exact path=\"/users\"\r\n                         render={(props) => <UsersPage store={this.props.store} />} />\r\n                    <Redirect to=\"/mywork\" />\r\n                </Switch>\r\n            </>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyWorkPage.tsx",["157"],"ï»¿import React from \"react\";\r\nimport { Col, Nav, NavItem, Row, TabContent, TabPane, NavLink } from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\nimport { MyTasks } from \"./MyTasks\";\r\nimport { observer } from \"mobx-react\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport { IMyWorkProps } from \"./IMyWorkProps\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\n\r\n@observer\r\nexport class  MyWorkPage extends React.Component<IMyWorkProps> {\r\n    activeTab: string = \"1\";\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n           activeTab: observable\r\n       });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{marginTop: 35}} className=\"container-fluid\">\r\n            <Row>\r\n                <Col sm=\"12\">\r\n                    <Nav tabs>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                to=\"#\"\r\n                                activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                className={classnames({ active: this.activeTab === \"1\"})}\r\n                                onClick={(e) => this.toggleTab(\"1\")}\r\n                            >Ð¢ÐµÐºÑÑÐ¸Ðµ</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                to=\"#\"\r\n                                activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                className={classnames({ active: this.activeTab === \"2\"})}\r\n                                onClick={(e) => this.toggleTab(\"2\")}>ÐÐ°ÐºÐ¾Ð½ÑÐµÐ½Ð½ÑÐµ</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                to=\"#\"\r\n                                activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                className={classnames({ active: this.activeTab === \"3\"})}\r\n                                onClick={(e) => this.toggleTab(\"3\")}>ÐÑÐ´ÑÑÐ¸Ðµ</NavLink>\r\n                        </NavItem>\r\n                    </Nav>\r\n                    <TabContent activeTab={this.activeTab}>\r\n                        <TabPane tabId=\"1\">\r\n                            <Row>\r\n                                <Col sm=\"12\">\r\n                                    <MyTasks store={this.props.store} tasksStatus={TaskStatus.Current}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </TabPane>\r\n                        <TabPane tabId=\"2\">\r\n                            <Row>\r\n                                <Col sm=\"12\">\r\n                                    <MyTasks store={this.props.store} tasksStatus={TaskStatus.Completed}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </TabPane>\r\n                        <TabPane tabId=\"3\">\r\n                            <Row>\r\n                                <Col sm=\"12\">\r\n                                    <MyTasks store={this.props.store} tasksStatus={TaskStatus.Future}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </TabPane>\r\n                    </TabContent>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n    }\r\n\r\n    @action\r\n    toggleTab(activeTab: string): void {\r\n        this.activeTab = activeTab;\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\ProjectsPage.tsx",["158"],"ï»¿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { AddProject } from \"./AddProject\";\r\nimport { Projects } from \"./Projects\";\r\nimport { makeObservable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nexport class  ProjectsPage extends React.Component<IProjectsProps> {\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container\" style={{marginTop: \"30px\"}}>\r\n                <div className=\"row justify-content-center\">\r\n                    <AddProject store={this.props.store} />\r\n                </div>\r\n                <div className=\"row justify-content-center\" style={{marginTop: \"20px\"}}>\r\n                    <div className=\"col-12\">\r\n                        <Projects store={this.props.store} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\UsersPage.tsx",["159"],"ï»¿import React from \"react\";\r\nimport { IUsersProps } from \"./IUsersProps\";\r\nimport { Users } from \"./Users\";\r\nimport {AddUser} from \"./AddUser\";\r\n\r\nexport class  UsersPage extends React.Component<IUsersProps> {\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\" style={{marginTop: \"30px\"}}>\r\n                <div className=\"row justify-content-center\">\r\n                    <AddUser store={this.props.store}/>\r\n                </div>\r\n                <div className=\"row justify-content-center\" style={{marginTop: \"20px\"}}>\r\n                    <Users store={this.props.store}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\ProjectStore.tsx",["160","161"],"C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx",["162"],"ï»¿import { makeObservable, observable } from \"mobx\";\r\nimport { UserTaskViewModel } from \"../Typings/viewModels/UserTaskViewModel\";\r\nimport { TaskViewModel } from \"../Typings/viewModels/TaskViewModel\";\r\nimport { TaskStatus } from \"../Typings/enums/TaskStatus\";\r\nimport { TaskType } from \"../Typings/enums/TaskType\";\r\n\r\nclass TaskStore {\r\n    currentUserTasks: UserTaskViewModel[];\r\n    currentProjectTasks: TaskViewModel[];\r\n    userTasks: UserTaskViewModel[];\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            currentUserTasks: observable,\r\n            currentProjectTasks: observable\r\n        });\r\n        this.currentProjectTasks = new Array<TaskViewModel>();\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        this.getCurrentUserTasks();\r\n    }\r\n\r\n    async getCurrentUserTasks() {\r\n        const response = await fetch(\"/getusertasks\");\r\n        if(response.status === 200) {\r\n            this.currentUserTasks = await response.json();\r\n        } else {\r\n            this.currentUserTasks = new Array<UserTaskViewModel>(0);\r\n        }\r\n    }\r\n\r\n    async getTasks(projectId: number) {\r\n        const response = await fetch(\"/gettasks\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: projectId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.currentProjectTasks = await response.json();\r\n        }\r\n    }\r\n\r\n    async addNewTask(projectId: number, header: string, description: string, startDate: Date | Date[], deadlineDate: Date | Date[], taskType: TaskType, status: TaskStatus, priority: number, tester: number, responsible: number, author: number) {\r\n        const response = await fetch(\"/addorupdatetask\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({projectId: projectId, header: header, description: description, startDate: startDate, deadlineDate: deadlineDate, taskType: taskType, status: status, priority: priority, tester: tester, responsible: responsible, author: author})\r\n        });\r\n        if(response.status === 200) {\r\n            const task = await response.json();\r\n            this.currentProjectTasks.push(task);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default TaskStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\CommentsStore.tsx",["163"],"ï»¿import { makeObservable, observable } from \"mobx\";\r\nimport { CommentGroupViewModel } from \"../Typings/viewModels/CommentGroupViewModel\";\r\nimport {UserReadModel} from \"../Typings/viewModels/UserReadModel\";\r\n\r\nclass CommentsStore {\r\n    currentTaskCommentGroup: CommentGroupViewModel;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            currentTaskCommentGroup: observable\r\n        });\r\n    }\r\n\r\n    async getCurrentTaskComments(taskId: number): Promise<CommentGroupViewModel> {\r\n        const response = await fetch(\"/getcurrenttaskcommentgroup\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({taskId: taskId})\r\n        });\r\n        if(response.status === 200) {\r\n            return await response.json();\r\n        } else {\r\n            return new CommentGroupViewModel();\r\n        }\r\n    }\r\n\r\n    async addComment(text: string, userId: number): Promise<number> {\r\n        const user = new UserReadModel();\r\n        user.id = userId;\r\n        const response = await fetch(\"/addorupdatecomment\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({text: text, groupId: this.currentTaskCommentGroup.id, user: user})\r\n        });\r\n        if(response.status === 200) {\r\n            return await response.json();\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport default CommentsStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyTasks.tsx",["164","165"],"ï»¿import React from \"react\";\r\nimport { IMyTasksProps } from \"./IMyTasksProps\";\r\nimport { Table } from 'reactstrap';\r\nimport { TaskViewModel } from \"../../Typings/viewModels/TaskViewModel\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\n\r\nexport class MyTasks extends React.Component<IMyTasksProps> {\r\n    getTaskStatusTranslit(taskStatus: TaskStatus): string {\r\n        if(taskStatus === TaskStatus.Current) {\r\n            return \"Ð¢ÐµÐºÑÑÐ¸Ðµ\";\r\n        } else if(taskStatus === TaskStatus.Completed) {\r\n            return \"ÐÐ°ÐºÐ¾Ð½ÑÐµÐ½Ð½ÑÐµ\";\r\n        } else if(taskStatus === TaskStatus.Future) {\r\n            return \"ÐÑÐ´ÑÑÐ¸Ðµ\";\r\n        } else {\r\n            return \"Ð¢ÐµÐºÑÑÐ¸Ðµ\";\r\n        }\r\n    }\r\n\r\n    filterTasks(taskStatus: TaskStatus): TaskViewModel[] {\r\n        return this.props.store.taskStore.currentUserTasks?.\r\n            filter(ut => ut.task.status === taskStatus)\r\n            .map(ut => {\r\n                return ut.task\r\n            });\r\n    }\r\n\r\n    renderMyTasks(tasks: TaskViewModel[]) {\r\n        return(\r\n            <Table bordered style={{backgroundColor: \"#C4DFE6\", color:\"003b46\"}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>ÐÐ¾Ð¼ÐµÑ</th>\r\n                        <th>ÐÐ°Ð´Ð°ÑÐ°</th>\r\n                        <th>ÐÐµÐ´Ð»Ð°Ð¹Ð½</th>\r\n                        <th>Ð¡ÑÐ°ÑÑÑ</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr key=\"1\">\r\n                    <th>id</th>\r\n                    <th>header</th>\r\n                    <th>deadlineDate</th>\r\n                    <th>status</th>\r\n                </tr>\r\n                    {tasks.map((task) => {\r\n                        return(\r\n                            <tr key={task.id}>\r\n                                <th>{task.id}</th>\r\n                                <th>{task.header}</th>\r\n                                <th>{task.deadlineDate}</th>\r\n                                <th>{task.status}</th>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        let tasks = this.filterTasks(this.props.tasksStatus);\r\n        return(\r\n            <>\r\n                <label>{this.getTaskStatusTranslit(this.props.tasksStatus)}</label>\r\n                {tasks !== undefined && this.renderMyTasks(tasks)}\r\n                {tasks === undefined && <div><span>ÐÐ°Ð´Ð°Ñ Ð¿Ð¾ÐºÐ° Ð½ÐµÑ:)</span></div>}\r\n            </>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskStatus.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddProject.tsx",["166"],"ï»¿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input, Dropdown, DropdownToggle, DropdownItem, DropdownMenu, Label } from \"reactstrap\";\r\nimport Calendar from \"react-calendar\";\r\n\r\n@observer\r\nexport class AddProject extends React.Component<IProjectsProps> {\r\n    addProjectWindowOpen: boolean;\r\n    projectName: string = \"\";\r\n    description: string = \"\";\r\n    responsibleDropdownOpen: boolean;\r\n    startDate: Date = new Date();\r\n    deadline: Date = new Date();\r\n    responsiblePerson: number = 0;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addProjectWindowOpen: observable,\r\n            projectName: observable,\r\n            description: observable,\r\n            responsibleDropdownOpen: observable,\r\n            startDate: observable,\r\n            deadline: observable,\r\n            responsiblePerson: observable\r\n        });\r\n    }\r\n\r\n    toggleAddProjectWindow() {\r\n        this.addProjectWindowOpen = !this.addProjectWindowOpen;\r\n    }\r\n\r\n    toggleResponsibleDropdown() {\r\n        this.responsibleDropdownOpen = !this.responsibleDropdownOpen;\r\n    }\r\n\r\n    renderAddProjectWindow() {\r\n        let users = this.props.store.userStore.users;\r\n        let user = users[0];\r\n        return(\r\n            <Modal isOpen={this.addProjectWindowOpen} toggle={() => this.toggleAddProjectWindow()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                   onClick={() => this.toggleAddProjectWindow()}/>\r\n                <ModalHeader>\r\n                    Ð¡ÐÐÐÐÐÐÐ ÐÐ ÐÐÐÐ¢Ð\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label style={{width: \"100%\"}} align=\"center\">ÐÐ°Ð·Ð²Ð°Ð½Ð¸Ðµ Ð¿ÑÐ¾ÐµÐºÑÐ°</Label>\r\n                        <Input style={{width: \"90%\"}} onChange={(e) => this.inputProjectName(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\" style={{marginTop: \"10px\"}}>\r\n                        <Label style={{width: \"100%\"}} align=\"center\">ÐÐ¿Ð¸ÑÐ°Ð½Ð¸Ðµ Ð¿ÑÐ¾ÐµÐºÑÐ°</Label>\r\n                        <textarea style={{width: \"90%\"}} onChange={(e) => this.inputDescription(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ÐÐ°ÑÐ° Ð½Ð°ÑÐ°Ð»Ð°</Label>\r\n                            <div style={{width: \"100%\", paddingLeft: \"15%\"}}>\r\n                                <Calendar\r\n                                    value={this.startDate}\r\n                                    onChange={(date) => this.inputDate(date, \"startDate\")}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ÐÐµÐ´Ð»Ð°Ð¹Ð½</Label>\r\n                            <div style={{width: \"100%\", paddingLeft: \"15%\"}}>\r\n                                <Calendar\r\n                                    value={this.deadline}\r\n                                    onChange={(date) => this.inputDate(date, \"deadline\")}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label style={{width: \"100%\"}} align=\"center\">ÐÑÐ²ÐµÑÑÑÐ²ÐµÐ½Ð½ÑÐ¹</Label>\r\n                        <Dropdown isOpen={this.responsibleDropdownOpen} toggle={() => this.toggleResponsibleDropdown()}>\r\n                            <DropdownToggle>{user !== undefined ? `${user.firstName} ${user.lastName}` : \"ÐÐ¾ÐºÐ° Ð½ÐµÑ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»ÐµÐ¹\"}</DropdownToggle>\r\n                            <DropdownMenu>\r\n                                {users.map((user, index) => {\r\n                                    return(\r\n                                        <>\r\n                                            {index === 0 && <DropdownItem key={index} header onClick={() => this.chooseResponsiblePerson(user.id)}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                                            {index !== 0 && <DropdownItem key={index} onClick={() => this.chooseResponsiblePerson(user.id)}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                                        </>\r\n                                    );\r\n                                })}\r\n                            </DropdownMenu>\r\n                        </Dropdown>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.saveProject()}>\r\n                        Ð¡ÐÐ¥Ð ÐÐÐÐ¢Ð¬\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <>\r\n                <div className=\"col-6\"/>\r\n                <div className=\"col-6\">\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.toggleAddProjectWindow()}>Ð¡Ð¾Ð·Ð´Ð°ÑÑ Ð¿ÑÐ¾ÐµÐºÑ</Button>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.addProjectWindowOpen && this.renderAddProjectWindow()}\r\n                {!this.addProjectWindowOpen && this.renderButton()}\r\n            </>\r\n        )\r\n    }\r\n\r\n    inputProjectName(event: React.FormEvent<HTMLInputElement>) {\r\n        this.projectName = event.currentTarget.value;\r\n    }\r\n\r\n    inputDescription(event: React.FormEvent<HTMLTextAreaElement>) {\r\n        this.description = event.currentTarget.value;\r\n    }\r\n\r\n    inputDate(date: Date, dateType: string) {\r\n        if(dateType === \"startDate\") {\r\n            this.startDate = date;\r\n        } else if(dateType === \"deadline\") {\r\n            this.deadline = date;\r\n        }\r\n    }\r\n\r\n    chooseResponsiblePerson(userId: number) {\r\n        this.responsiblePerson = userId;\r\n    }\r\n\r\n    saveProject() {\r\n        this.props.store.projectStore\r\n            .addNewProject(this.projectName, this.description, this.startDate, this.deadline, this.responsiblePerson);\r\n}\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Projects.tsx",["167"],"ï»¿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { ProjectViewModel } from \"../../Typings/viewModels/ProjectViewModel\";\r\nimport { Tab, Nav, Alert } from \"react-bootstrap\";\r\nimport { Project } from \"./Project\";\r\nimport { observer } from \"mobx-react\";\r\nimport {renderSpinner} from \"../../functions/renderSpinner\";\r\n\r\n@observer\r\nexport class Projects extends React.Component<IProjectsProps> {\r\n    renderMenu(projects: ProjectViewModel[], choosenProject: ProjectViewModel) {\r\n        // @ts-ignore\r\n        return(\r\n            <Tab.Container defaultActiveKey={`${choosenProject.id.toString()}`}>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-3\">\r\n                        <Nav variant=\"pills\" className=\"flex-column\">\r\n                            {projects.map((project) => {\r\n                                return (\r\n                                    <Nav.Item key={project.id} onClick={() => {this.props.store.projectStore.setChoosenProject(project)}}>\r\n                                        <Nav.Link eventKey={project.id}>{project.name}</Nav.Link>\r\n                                    </Nav.Item>\r\n                                );\r\n                            })}\r\n                        </Nav>\r\n                    </div>\r\n                    <div className=\"col-9\">\r\n                        <Tab.Content>\r\n                            {projects.map((project) => {\r\n                                return (\r\n                                    <Tab.Pane eventKey={project.id} key={project.id}>\r\n                                        <Project store={this.props.store} />\r\n                                    </Tab.Pane>\r\n                                );\r\n                            })}\r\n                        </Tab.Content>\r\n                    </div>\r\n                </div>\r\n            </Tab.Container>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let projects = this.props.store.projectStore.projects;\r\n        let choosenProject =  this.props.store.projectStore.choosenProject;\r\n        return(\r\n            <>\r\n                {projects.length === 0 && <Alert variant=\"primary\">\r\n                    <span>ÐÐ¾ÐºÐ° Ð½ÐµÑ Ð½Ð¸ÐºÐ°ÐºÐ¸Ñ Ð¿ÑÐ¾ÐµÐºÑÐ¾Ð²</span>\r\n                </Alert>}\r\n                {choosenProject !== undefined && this.renderMenu(projects, choosenProject)}\r\n                {choosenProject === undefined && renderSpinner()}\r\n            </>\r\n        )\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Project.tsx",["168"],"ï»¿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { AddTask } from \"../Tasks/AddTask\";\r\nimport { AddUserToProject } from \"./AddUserToProject\";\r\nimport { Tasks } from \"../Tasks/Tasks\";\r\nimport { ProjectViewModel } from \"../../Typings/viewModels/ProjectViewModel\";\r\nimport { Card, CardText, CardTitle } from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\nimport { Col, Nav, NavItem, Row, TabContent, TabPane, NavLink, Alert } from \"reactstrap\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { renderSpinner } from \"../../functions/renderSpinner\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nexport class Project extends React.Component<IProjectsProps> {\r\n    activeTab: string = \"1\";\r\n    loaded: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            activeTab: observable,\r\n            loaded: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.props.store.taskStore.getTasks(this.props.store.projectStore.choosenProject.id)\r\n            .then(() => this.loaded = true);\r\n    }\r\n\r\n    renderProjectDiagram() {\r\n        return (\r\n            <>ÐÐ¸Ð°Ð³ÑÐ°Ð¼Ð¼Ð°. ÐÐµÐ²Ð°Ð¶Ð½Ð¾, ÑÑÐ¾ ÑÑ Ð½Ðµ Ð²Ð¸Ð´Ð¸ÑÑ ÐµÑ. ÐÐ½Ð° ÑÐµÐ±Ñ Ð²Ð¸Ð´Ð¸Ñ</>\r\n        );\r\n    }\r\n\r\n    getResponsible(responsibleId: number) {\r\n        let responsible = this.props.store.userStore.users.filter(u => u.id === responsibleId)[0];\r\n        if(responsible === undefined) {\r\n            return undefined;\r\n        } else {\r\n            return responsible;\r\n        }\r\n    }\r\n\r\n    renderResponsible(responsible: UserViewModel | undefined) {\r\n        if(responsible === undefined) {\r\n            return(\r\n                <Alert>Ð ÑÐºÐ¾Ð²Ð¾Ð´Ð¸ÑÐµÐ»Ñ Ð½Ðµ Ð²ÑÐ±ÑÐ°Ð½</Alert>\r\n            );\r\n        } else {\r\n            return(\r\n                <CardText>Ð ÑÐºÐ¾Ð²Ð¾Ð´Ð¸ÑÐµÐ»Ñ: <span>{responsible?.firstName} {responsible?.lastName}</span></CardText>\r\n            )\r\n        }\r\n    }\r\n\r\n    renderProjectInfo(project: ProjectViewModel) {\r\n        let responsible = this.getResponsible(project.responsiblePerson);\r\n        return (\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                    <Card>\r\n                        <CardTitle>{project.name}</CardTitle>\r\n                        {this.renderResponsible(responsible)}\r\n                        <CardText>ÐÐ°ÑÐ° Ð½Ð°ÑÐ°Ð»Ð°: {project.startDate}</CardText>\r\n                        <CardText>ÐÐµÐ´Ð»Ð°Ð¹Ð½: {project.deadlineDate}</CardText>\r\n                        <CardText>ÐÐ¿Ð¸ÑÐ°Ð½Ð¸Ðµ: {project.description}</CardText>\r\n                    </Card>\r\n                </div>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                    {this.renderProjectDiagram()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderTasksMenu() {\r\n        return(\r\n            <div style={{marginTop: 35}} className=\"container-fluid\">\r\n                <Row>\r\n                    <Col sm=\"12\">\r\n                        <Nav tabs>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    className={classnames({ active: this.activeTab === \"1\"})}\r\n                                    onClick={(e) => this.toggleTab(\"1\")}\r\n                                >Ð¢ÐµÐºÑÑÐ¸Ðµ</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    className={classnames({ active: this.activeTab === \"2\"})}\r\n                                    onClick={(e) => this.toggleTab(\"2\")}>ÐÐ°ÐºÐ¾Ð½ÑÐµÐ½Ð½ÑÐµ</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    className={classnames({ active: this.activeTab === \"3\"})}\r\n                                    onClick={(e) => this.toggleTab(\"3\")}>ÐÑÐ´ÑÑÐ¸Ðµ</NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                        <TabContent activeTab={this.activeTab}>\r\n                            <TabPane tabId=\"1\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <Tasks store={this.props.store} status={TaskStatus.Current}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                            <TabPane tabId=\"2\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <Tasks store={this.props.store} status={TaskStatus.Completed}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                            <TabPane tabId=\"3\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <Tasks store={this.props.store} status={TaskStatus.Future}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                        </TabContent>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <div className=\"container\">\r\n                {this.renderProjectInfo(this.props.store.projectStore.choosenProject)}\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-lg-3 col-lg-offset-4\">\r\n                        <AddTask store={this.props.store}/>\r\n                    </div>\r\n                    <div className=\"col-lg-3 col-lg-offset-7\">\r\n                        <AddUserToProject store={this.props.store}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.loaded && this.renderTasksMenu()}\r\n                    {!this.loaded && renderSpinner()}\r\n                </div>\r\n            </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    @action\r\n    toggleTab(activeTab: string): void {\r\n        this.activeTab = activeTab;\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddUserToProject.tsx",["169"],"ï»¿import React from \"react\";\r\nimport RootStore from \"../../stores/RootStore\";\r\n\r\nexport interface IAddUserToProjectProps {\r\n    store: RootStore;\r\n}\r\n\r\nexport class AddUserToProject extends React.Component<IAddUserToProjectProps>{\r\n    render() {\r\n        return(\r\n            <></>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\AddTask.tsx",["170"],"ï»¿import React from \"react\";\r\nimport { IAddTasksProps } from \"./IAddTasksProps\";\r\nimport { action, makeObservable, observable} from \"mobx\";\r\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Label, Input, Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Button } from \"reactstrap\";\r\nimport Calendar from \"react-calendar\";\r\nimport { TaskType } from \"../../Typings/enums/TaskType\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nexport class AddTask extends React.Component<IAddTasksProps> {\r\n    addTaskWindowOpen: boolean;\r\n    responsibleDropdownOpen: boolean;\r\n    testerDropdownOpen: boolean;\r\n    taskName: string;\r\n    description: string;\r\n    startDate: Date | Date[];\r\n    deadline: Date | Date[];\r\n    priority: number;\r\n    responsiblePerson: number;\r\n    tester: number;\r\n    taskType: TaskType;\r\n    taskStatus: TaskStatus;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addTaskWindowOpen: observable\r\n        });\r\n    }\r\n\r\n    @action\r\n    toggleAddTaskWindow() {\r\n        this.addTaskWindowOpen = !this.addTaskWindowOpen;\r\n    }\r\n\r\n    toggleResponsibleDropdown() {\r\n        this.responsibleDropdownOpen = !this.responsibleDropdownOpen;\r\n    }\r\n\r\n    toggleTesterDropdown() {\r\n        this.testerDropdownOpen = !this.testerDropdownOpen;\r\n    }\r\n    \r\n    renderResponsibleDropdown() {\r\n        let users = this.props.store.userStore.users;\r\n        let user = users[0];\r\n        return(\r\n            <Dropdown isOpen={this.responsibleDropdownOpen} toggle={() => this.toggleResponsibleDropdown()}>\r\n                <DropdownToggle>{user !== undefined ? `${user.firstName} ${user.lastName}` : \"ÐÐ¾ÐºÐ° Ð½ÐµÑ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»ÐµÐ¹\"}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    {users.map((user, index) => {\r\n                        return(\r\n                            <>\r\n                                {index === 0 && <DropdownItem key={index} header onClick={() => this.choosePerson(user.id, \"responsible\")}>\r\n                                    {user.firstName + \" \" + user.lastName}\r\n                                </DropdownItem>}\r\n                                {index !== 0 && <DropdownItem key={index}  onClick={() => this.choosePerson(user.id, \"responsible\")}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                            </>\r\n                        );\r\n                    })}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderTesterDropdown() {\r\n        let users = this.props.store.userStore.users;\r\n        let user = users[0];\r\n        return(\r\n            <Dropdown isOpen={this.testerDropdownOpen} toggle={() => this.toggleTesterDropdown()}>\r\n                <DropdownToggle>{user !== undefined ? `${user.firstName} ${user.lastName}` : \"ÐÐ¾ÐºÐ° Ð½ÐµÑ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»ÐµÐ¹\"}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    {users.map((user, index) => {\r\n                        return(\r\n                            <>\r\n                                {index === 0 && <DropdownItem key={index} header onClick={() => this.choosePerson(user.id, \"tester\")}>\r\n                                    {user.firstName + \" \" + user.lastName}\r\n                                </DropdownItem>}\r\n                                {index !== 0 && <DropdownItem key={index}  onClick={() => this.choosePerson(user.id, \"tester\")}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                            </>\r\n                        )\r\n                    })}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderAddTaskWindow() {\r\n        let currentUser = this.props.store.userStore.currentUser;\r\n        return(\r\n            <Modal \r\n                isOpen={this.addTaskWindowOpen}\r\n                size=\"lg\"\r\n                centered\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                toggle={() => this.toggleAddTaskWindow()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                   onClick={() => this.toggleAddTaskWindow()}/>\r\n                <ModalHeader closeButton>Ð¡ÐÐÐÐÐÐÐ ÐÐÐÐÐ§Ð</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label style={{width: \"100%\"}} align=\"center\">ÐÐ°Ð·Ð²Ð°Ð½Ð¸Ðµ</Label>\r\n                        <Input style={{width: \"90%\"}} onChange={(e) => this.inputTaskName(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\" style={{marginTop: \"10px\"}}>\r\n                        <Label style={{width: \"100%\"}} align=\"center\">ÐÐ¿Ð¸ÑÐ°Ð½Ð¸Ðµ</Label>\r\n                        <textarea style={{width: \"90%\"}} onChange={(e) => this.inputDescription(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ÐÐ°ÑÐ° Ð½Ð°ÑÐ°Ð»Ð°</Label>\r\n                            <div style={{width: \"100%\", paddingLeft: \"15%\"}}>\r\n                                <Calendar\r\n                                    value={this.startDate}\r\n                                    onChange={(date) => this.inputDate(date, \"startDate\")}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ÐÐµÐ´Ð»Ð°Ð¹Ð½</Label>\r\n                            <div style={{width: \"100%\", paddingLeft: \"15%\"}}>\r\n                                <Calendar\r\n                                    value={this.deadline}\r\n                                    onChange={(date) => this.inputDate(date, \"deadline\")}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-4 col-sm-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ÐÑÐ²ÐµÑÑÑÐ²ÐµÐ½Ð½ÑÐ¹</Label>\r\n                            {this.renderResponsibleDropdown()}\r\n                        </div>\r\n                        <div className=\"col-lg-4 col-sm-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">Ð¢ÐµÑÑÐ¸ÑÐ¾Ð²ÑÐ¸Ðº</Label>\r\n                            {this.renderTesterDropdown()}\r\n                        </div>\r\n                        <div className=\"col-lg-4 col-sm-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ÐÐ²ÑÐ¾Ñ:\r\n                                <span>{currentUser.firstName} {currentUser.lastName}</span>\r\n                            </Label>\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.saveTask()}>\r\n                        Ð¡ÐÐ¥Ð ÐÐÐÐ¢Ð¬\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-lg-2 col-lg-offset-10 col-md-4 col-md-offset-8 col-sm-6 col-sm-offet-3 col-xs-12\">\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.toggleAddTaskWindow()}>Ð¡Ð¾Ð·Ð´Ð°ÑÑ Ð·Ð°Ð´Ð°ÑÑ</Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.addTaskWindowOpen && this.renderAddTaskWindow()}\r\n                {!this.addTaskWindowOpen && this.renderButton()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    inputTaskName(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.taskName = event.currentTarget.value;\r\n    }\r\n\r\n    inputDescription(event: React.FormEvent<HTMLTextAreaElement>): void {\r\n        this.description = event.currentTarget.value;\r\n    }\r\n\r\n    inputDate(date: Date | Date[], dateType: string): void {\r\n        if(dateType === \"startDate\") {\r\n            this.startDate = date;\r\n        } else if(dateType === \"deadline\") {\r\n            this.deadline = date;\r\n        }\r\n    }\r\n\r\n    choosePerson(userId: number, type: string): void {\r\n        if(type === \"responsible\") {\r\n            this.responsiblePerson = userId;\r\n        } else if(type === \"tester\") {\r\n            this.tester = userId;\r\n        }\r\n    }\r\n\r\n    saveTask() {\r\n        this.props.store.taskStore.addNewTask(this.props.store.projectStore.choosenProject.id, this.taskName, this.description, this.startDate, this.deadline, this.taskType, this.taskStatus, this.priority, this.tester, this.responsiblePerson, this.props.store.userStore.currentUser.id)\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Tasks.tsx",["171"],"ï»¿import React from \"react\";\r\nimport { ITasksProps } from \"./ITasksProps\";\r\nimport { TaskViewModel } from \"../../Typings/viewModels/TaskViewModel\";\r\nimport { Table } from \"reactstrap\";\r\nimport { TaskRole } from \"../../Typings/enums/TaskRole\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\n\r\nexport class Tasks extends React.Component<ITasksProps> {\r\n    getResponsible(taskId: number): UserViewModel {\r\n        return this.props.store.taskStore.userTasks\r\n            .filter(ut => ut.task.id === taskId)\r\n            .filter(ut => ut.role === TaskRole.Responsible)\r\n            .map(ut => ut.user)[0];\r\n    }\r\n\r\n    renderTasks(tasks: TaskViewModel[]) {\r\n        return(\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>ÐÐ¾Ð¼ÐµÑ</th>\r\n                        <th>ÐÐ°Ð´Ð°ÑÐ°</th>\r\n                        <th>ÐÐµÐ´Ð»Ð°Ð¹Ð½</th>\r\n                        <th>Ð¢Ð¸Ð¿ Ð·Ð°Ð´Ð°ÑÐ¸</th>\r\n                        <th>ÐÑÐ²ÐµÑÑÑÐ²ÐµÐ½Ð½ÑÐ¹</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {tasks.map((task) => {\r\n                    let responsible = this.getResponsible(task.id);//Ð²Ð¾Ð¾Ð±ÑÐµ Ð·Ð´ÐµÑÑ Ð»ÑÑÑÐµ Ð´ÑÐ¾Ð¿Ð´Ð°ÑÐ½ ÑÐ´ÐµÐ»Ð°ÑÑ\r\n                    return(\r\n                        <tr key={task.id}>\r\n                            <th>{task.id}</th>\r\n                            <th>{task.header}</th>\r\n                            <th>{task.deadlineDate}</th>\r\n                            <th>{task.taskType}</th>\r\n                            <th>{responsible.firstName + \" \" + responsible.lastName}</th>\r\n                        </tr>\r\n                    );\r\n                })}\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let tasks = this.props.store.taskStore.currentProjectTasks.filter(t => t.status === this.props.status);\r\n        return(\r\n            <>\r\n                {this.renderTasks(tasks)}\r\n            </>\r\n        )\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskRole.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\Users.tsx",["172"],"ï»¿import React from \"react\";\r\nimport { IUsersProps } from \"./IUsersProps\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { Table } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport { User } from \"./User\";\r\n\r\n@observer\r\nexport class  Users extends React.Component<IUsersProps> {\r\n    renderUsers(users: UserViewModel[]) {\r\n        return(\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Id</th>\r\n                        <th>ÐÐ¼Ñ Ð¤Ð°Ð¼Ð¸Ð»Ð¸Ñ</th>\r\n                        <th>Email</th>\r\n                        <th>Ð Ð¾Ð»Ñ</th>\r\n                        <th>Ð£Ð¿ÑÐ°Ð²Ð»ÐµÐ½Ð¸Ðµ</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {users.map(user => {\r\n                        return(\r\n                           <User store={this.props.store} currentUser={user}/>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderUsers(this.props.store.userStore.users)}\r\n            </>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentGroupViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserReadModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\Role.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\User.tsx",["173"],"ï»¿import React from \"react\";\r\nimport { IUserProps } from \"./IUserProps\";\r\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Button } from \"reactstrap\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Role } from \"../../Typings/enums/Role\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { observer } from \"mobx-react\";\r\nimport {UserReadModel} from \"../../Typings/viewModels/UserReadModel\";\r\nimport {translateRole} from \"../../functions/translater\";\r\n\r\n@observer\r\nexport class User extends React.Component<IUserProps> {\r\n    roleDropdownOpen: boolean;\r\n    role: Role;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            roleDropdownOpen: observable,\r\n            role: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.role = this.props.currentUser.role;\r\n    }\r\n\r\n    toggleRoleDropdown() {\r\n        this.roleDropdownOpen = !this.roleDropdownOpen;\r\n    }\r\n\r\n    chooseUserRole(role: Role) {\r\n        this.role = role;\r\n    }\r\n\r\n    renderRoleDropdown(role: Role) {\r\n        return(\r\n            <Dropdown isOpen={this.roleDropdownOpen} toggle={() => this.toggleRoleDropdown()}>\r\n                <DropdownToggle caret>{translateRole(role)}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Developer)}>{translateRole(Role.Developer)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Tester)}>{translateRole(Role.Tester)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Administrator)}>{translateRole(Role.Administrator)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Accounter)}>{translateRole(Role.Accounter)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Marketolog)}>{translateRole(Role.Marketolog)}</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderUser(user: UserViewModel) {\r\n        return(\r\n            <tr>\r\n                <th>{user.id}</th>\r\n                <th>{user.firstName} {user.lastName}</th>\r\n                <th>{user.email}</th>\r\n                <th>{this.renderRoleDropdown(this.role)}</th>\r\n                <th>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Button color=\"success\" \r\n                            className=\"controlButton\"\r\n                            onClick={() => this.updateUser()}>Ð¡ÐÐ¥Ð ÐÐÐÐ¢Ð¬</Button>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Button color=\"danger\"\r\n                            className=\"controlButton\"\r\n                            onClick={() => this.deleteUser()}>Ð£ÐÐÐÐÐ¢Ð¬</Button>\r\n                    </div>\r\n                </th>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let user = this.props.currentUser;\r\n        return(\r\n            <>{this.renderUser(user)}</>\r\n        );\r\n    }\r\n\r\n    updateUser() {\r\n        let currentUser = this.props.currentUser;\r\n        let user = new UserReadModel();\r\n        user.id = currentUser.id;\r\n        user.role = this.role;\r\n        user.firstName = currentUser.firstName;\r\n        user.lastName = currentUser.lastName;\r\n        user.email = currentUser.email;\r\n        this.props.store.userStore.addOrUpdateUser(user);\r\n    }\r\n\r\n    deleteUser() {\r\n        this.props.store.userStore.deleteUser(this.props.currentUser.id);\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\AddUser.tsx",["174"],"ï»¿import React from \"react\";\r\nimport { IUsersProps } from \"./IUsersProps\";\r\nimport {makeObservable, observable} from \"mobx\";\r\nimport { Button, Dropdown, DropdownMenu, DropdownToggle, DropdownItem, Input, Label, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\nimport { Alert } from \"react-bootstrap\";\r\nimport { Role } from \"../../Typings/enums/Role\";\r\nimport { observer } from \"mobx-react\";\r\nimport {UserReadModel} from \"../../Typings/viewModels/UserReadModel\";\r\nimport {translateRole} from \"../../functions/translater\";\r\n\r\n@observer\r\nexport class AddUser extends React.Component<IUsersProps>{\r\n    addUserWindowOpen: boolean;\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    roleDropdownOpen: boolean;\r\n    role: Role;\r\n    notSaved: boolean;\r\n    saved: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addUserWindowOpen: observable,\r\n            roleDropdownOpen: observable\r\n        });\r\n        this.role = Role.Developer;\r\n    }\r\n\r\n    toggleAddUserWindow() {\r\n        this.addUserWindowOpen = !this.addUserWindowOpen;\r\n    }\r\n\r\n    toggleRoleDropdown() {\r\n        this.roleDropdownOpen = !this.roleDropdownOpen;\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <>\r\n                <div className=\"col-6\">\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.toggleAddUserWindow()}>ÐÐ¾Ð±Ð°Ð²Ð¸ÑÑ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ</Button>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderRoleDropdown() {\r\n        return(\r\n            <Dropdown isOpen={this.roleDropdownOpen} toggle={() => this.toggleRoleDropdown()}>\r\n                <DropdownToggle caret>{translateRole(this.role)}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Developer)}>Ð Ð°Ð·ÑÐ°Ð±Ð¾ÑÑÐ¸Ðº</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Tester)}>Ð¢ÐµÑÑÐ¸ÑÐ¾Ð²ÑÐ¸Ðº</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Accounter)}>ÐÑÑÐ³Ð°Ð»ÑÐµÑ</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Marketolog)}>ÐÐ°ÑÐºÐµÑÐ¾Ð»Ð¾Ð³</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderAddUserWindow() {\r\n        return(\r\n            <Modal\r\n                isOpen={this.addUserWindowOpen}\r\n                toggle={() => this.toggleAddUserWindow()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                onClick={() => this.toggleAddUserWindow()}/>\r\n                <ModalHeader closeButton>ÐÐÐÐÐÐÐÐÐÐ ÐÐÐÐÐÐ ÐÐÐÐ¬ÐÐÐÐÐ¢ÐÐÐ¯</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                            <Label>ÐÐ¼Ñ</Label>\r\n                            <Input onChange={(e) => this.inputFirstName(e)}/>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                            <Label>Ð¤Ð°Ð¼Ð¸Ð»Ð¸Ñ</Label>\r\n                            <Input onChange={(e) => this.inputLastName(e)}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-8 col-md-8 col-sm-12 col-xs-12\">\r\n                            <Label>Email</Label>\r\n                            <Input onChange={(e) => this.inputEmail(e)}/>\r\n                        </div>\r\n                        <div className=\"col-lg-8 col-md-8 col-sm-12 col-xs-12\">\r\n                            {this.renderRoleDropdown()}\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.saveUser()}>\r\n                        Ð¡ÐÐ¥Ð ÐÐÐÐ¢Ð¬\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.addUserWindowOpen && this.renderAddUserWindow()}\r\n                {!this.addUserWindowOpen && this.renderButton()}\r\n                {this.saved && <Alert>ÐÑÑ ÑÑÐ¿ÐµÑÐ½Ð¾ ÑÐ¾ÑÑÐ°Ð½Ð¸Ð»Ð¾ÑÑ!</Alert>}\r\n                {this.notSaved && <Alert>Ð§ÑÐ¾-ÑÐ¾ Ð¿Ð¾ÑÐ»Ð¾ Ð½Ðµ ÑÐ°Ðº Ð¸ Ð¿Ð¾Ð»ÑÐ·Ð¾Ð²Ð°ÑÐµÐ»Ñ Ð½Ðµ ÑÐ¾ÑÑÐ°Ð½Ð¸Ð»ÑÑ!</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    inputFirstName(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.firstName = event.currentTarget.value;\r\n    }\r\n\r\n    inputLastName(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.lastName = event.currentTarget.value;\r\n    }\r\n\r\n    inputEmail(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.email = event.currentTarget.value;\r\n    }\r\n\r\n    chooseRole(role: Role) {\r\n        this.role = role;\r\n    }\r\n\r\n    saveUser() {\r\n        let user = new UserReadModel();\r\n        user.firstName = this.firstName;\r\n        user.lastName = this.lastName;\r\n        user.email = this.email;\r\n        user.role = this.role;\r\n        this.props.store.userStore.addOrUpdateUser(user)\r\n            .then(status => {\r\n                if(status !== 200) {\r\n                    this.notSaved = true;\r\n                } else {\r\n                    this.notSaved = false;\r\n                    this.saved = true;\r\n                }\r\n            });\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\ProjectViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\renderSpinner.tsx",["175"],"ï»¿import React from \"react\";\r\nimport { Spinner } from 'reactstrap';\r\n\r\nexport function renderSpinner() {\r\n    return(\r\n        <Spinner color=\"primary\"/>\r\n    )\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\translater.tsx",["176"],"ï»¿import { Role } from \"../Typings/enums/Role\";\r\n\r\nexport function translateRole(role: Role): string {\r\n    if(role === Role.Developer) {\r\n        return \"Ð Ð°Ð·ÑÐ°Ð±Ð¾ÑÑÐ¸Ðº\";\r\n    } else if(role === Role.Marketolog) {\r\n        return \"ÐÐ°ÑÐºÐµÑÐ¾Ð»Ð¾Ð³\";\r\n    } else if(role === Role.Accounter) {\r\n        return \"ÐÑÑÐ³Ð°Ð»ÑÐµÑ\";\r\n    } else if(role === Role.Administrator) {\r\n        return \"ÐÐ´Ð¼Ð¸Ð½Ð¸ÑÑÑÐ°ÑÐ¾Ñ\";\r\n    } else if(role === Role.Tester) {\r\n        return \"Ð¢ÐµÑÑÐ¸ÑÐ¾Ð²ÑÐ¸Ðº\";\r\n    } \r\n    return \"\";\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Authorization.tsx",["177"],{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","severity":1,"message":"183","line":1,"column":1,"nodeType":"184","messageId":"185","fix":"186"},{"ruleId":"187","severity":1,"message":"188","line":1,"column":10,"nodeType":"189","messageId":"190","endLine":1,"endColumn":16},{"ruleId":"182","severity":1,"message":"183","line":1,"column":1,"nodeType":"184","messageId":"185","fix":"191"},{"ruleId":"182","severity":1,"message":"183","line":1,"column":1,"nodeType":"184","messageId":"185","fix":"192"},{"ruleId":"182","severity":1,"message":"183","line":1,"column":1,"nodeType":"184","messageId":"185","fix":"193"},{"ruleId":"182","severity":1,"message":"183","line":1,"column":1,"nodeType":"184","messageId":"185","fix":"194"},{"ruleId":"182","severity":1,"message":"183","line":1,"column":1,"nodeType":"184","messageId":"185","fix":"195"},{"ruleId":"182","severity":1,"message":"183","line":1,"column":1,"nodeType":"184","messageId":"185","fix":"196"},{"ruleId":"187","severity":1,"message":"197","line":49,"column":19,"nodeType":"189","messageId":"190","endLine":49,"endColumn":26},{"ruleId":"182","severity":1,"message":"183","line":1,"column":1,"nodeType":"184","messageId":"185","fix":"198"},{"ruleId":"182","severity":1,"message":"183","line":1,"column":1,"nodeType":"184","messageId":"185","fix":"199"},{"ruleId":"182","severity":1,"message":"183","line":1,"column":1,"nodeType":"184","messageId":"185","fix":"200"},{"ruleId":"201","severity":1,"message":"202","line":21,"column":59,"nodeType":"203","messageId":"204","endLine":21,"endColumn":61,"fix":"205"},{"ruleId":"182","severity":1,"message":"183","line":1,"column":1,"nodeType":"184","messageId":"185","fix":"206"},{"ruleId":"182","severity":1,"message":"183","line":1,"column":1,"nodeType":"184","messageId":"185","fix":"207"},{"ruleId":"182","severity":1,"message":"183","line":1,"column":1,"nodeType":"184","messageId":"185","fix":"208"},{"ruleId":"182","severity":1,"message":"183","line":1,"column":1,"nodeType":"184","messageId":"185","fix":"209"},{"ruleId":"182","severity":1,"message":"183","line":1,"column":1,"nodeType":"184","messageId":"185","fix":"210"},{"ruleId":"182","severity":1,"message":"183","line":1,"column":1,"nodeType":"184","messageId":"185","fix":"211"},{"ruleId":"182","severity":1,"message":"183","line":1,"column":1,"nodeType":"184","messageId":"185","fix":"212"},{"ruleId":"182","severity":1,"message":"183","line":1,"column":1,"nodeType":"184","messageId":"185","fix":"213"},{"ruleId":"182","severity":1,"message":"183","line":1,"column":1,"nodeType":"184","messageId":"185","fix":"214"},{"ruleId":"182","severity":1,"message":"183","line":1,"column":1,"nodeType":"184","messageId":"185","fix":"215"},{"ruleId":"182","severity":1,"message":"183","line":1,"column":1,"nodeType":"184","messageId":"185","fix":"216"},{"ruleId":"182","severity":1,"message":"183","line":1,"column":1,"nodeType":"184","messageId":"185","fix":"217"},"no-native-reassign",["218"],"no-negated-in-lhs",["219"],"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"220","text":"221"},"@typescript-eslint/no-unused-vars","'action' is defined but never used.","Identifier","unusedVar",{"range":"222","text":"221"},{"range":"223","text":"221"},{"range":"224","text":"221"},{"range":"225","text":"221"},{"range":"226","text":"221"},{"range":"227","text":"221"},"'project' is assigned a value but never used.",{"range":"228","text":"221"},{"range":"229","text":"221"},{"range":"230","text":"221"},"dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"231","text":"232"},{"range":"233","text":"221"},{"range":"234","text":"221"},{"range":"235","text":"221"},{"range":"236","text":"221"},{"range":"237","text":"221"},{"range":"238","text":"221"},{"range":"239","text":"221"},{"range":"240","text":"221"},{"range":"241","text":"221"},{"range":"242","text":"221"},{"range":"243","text":"221"},{"range":"244","text":"221"},"no-global-assign","no-unsafe-negation",[-1,0],"",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[822,838],"\r\n            ?.",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]]