[{"C:\\SuperSoft\\SuperSoft\\client\\src\\index.tsx":"1","C:\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts":"2","C:\\SuperSoft\\SuperSoft\\client\\src\\App.tsx":"3","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx":"4","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx":"5","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Main\\Main.tsx":"6","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyWorkPage.tsx":"7","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\ProjectsPage.tsx":"8","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\UsersPage.tsx":"9","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\ProjectStore.tsx":"10","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx":"11","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\CommentsStore.tsx":"12","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyTasks.tsx":"13","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskStatus.ts":"14","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddProject.tsx":"15","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Projects.tsx":"16","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Project.tsx":"17","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddUserToProject.tsx":"18","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\AddTask.tsx":"19","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Tasks.tsx":"20","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskRole.ts":"21","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\Users.tsx":"22","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentGroupViewModel.ts":"23","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserReadModel.ts":"24"},{"size":704,"mtime":1607787725088,"results":"25","hashOfConfig":"26"},{"size":425,"mtime":1607420618541,"results":"27","hashOfConfig":"26"},{"size":821,"mtime":1607787714332,"results":"28","hashOfConfig":"26"},{"size":817,"mtime":1607860334709,"results":"29","hashOfConfig":"26"},{"size":978,"mtime":1607860536356,"results":"30","hashOfConfig":"26"},{"size":2126,"mtime":1607853872924,"results":"31","hashOfConfig":"26"},{"size":3508,"mtime":1608146828924,"results":"32","hashOfConfig":"26"},{"size":896,"mtime":1608145761703,"results":"33","hashOfConfig":"26"},{"size":438,"mtime":1607942617188,"results":"34","hashOfConfig":"26"},{"size":1680,"mtime":1608144824642,"results":"35","hashOfConfig":"26"},{"size":2169,"mtime":1608144364326,"results":"36","hashOfConfig":"26"},{"size":1354,"mtime":1607953013140,"results":"37","hashOfConfig":"26"},{"size":2570,"mtime":1607930891721,"results":"38","hashOfConfig":"26"},{"size":253,"mtime":1608147132686,"results":"39","hashOfConfig":"26"},{"size":5856,"mtime":1608146308407,"results":"40","hashOfConfig":"26"},{"size":3772,"mtime":1608146829434,"results":"41","hashOfConfig":"26"},{"size":5941,"mtime":1608147285294,"results":"42","hashOfConfig":"26"},{"size":305,"mtime":1607942173528,"results":"43","hashOfConfig":"26"},{"size":8030,"mtime":1608146340760,"results":"44","hashOfConfig":"26"},{"size":2047,"mtime":1608146828960,"results":"45","hashOfConfig":"26"},{"size":252,"mtime":1608147132683,"results":"46","hashOfConfig":"26"},{"size":1292,"mtime":1607942621864,"results":"47","hashOfConfig":"26"},{"size":366,"mtime":1608147132652,"results":"48","hashOfConfig":"26"},{"size":399,"mtime":1608147132672,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"18g08rn",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"60","usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"63","usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"66","usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"69","usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"72","usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"75","usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"78","usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"81","usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"84","usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"87","usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"92","usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"95","usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"98","usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"101","usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"104","usedDeprecatedRules":"52"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"107","usedDeprecatedRules":"52"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"112","usedDeprecatedRules":"52"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"C:\\SuperSoft\\SuperSoft\\client\\src\\index.tsx",[],["117","118"],"C:\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\App.tsx",["119","120"],"import React, { Component } from \"react\";\nimport './App.css';\nimport { RootStore } from \"./stores/RootStore\";\nimport { Main } from \"./components/Main/Main\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-social/bootstrap-social.css';\nimport './styles/common.css';\nimport { BrowserRouter } from \"react-router-dom\";\nimport { observer, Provider } from  \"mobx-react\";\nimport {observable} from \"mobx\";\n\ninterface Props {\n    store: RootStore;\n}\n\n@observer\nclass App extends Component<Props> {\n   render() {\n       const { store } = this.props;\n       return(\n           <div>\n               <BrowserRouter>\n                   <div className=\"App\">\n                       <Main store={store}/>\n                   </div>\n               </BrowserRouter>\n           </div>\n       );\n   }\n\n\n}\n\nexport default App;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx",["121","122"],"﻿import { action, observable, makeObservable } from \"mobx\";\r\nimport UserStore from \"./UserStore\";\r\nimport ProjectStore from \"./ProjectStore\";\r\nimport TaskStore from \"./TaskStore\";\r\nimport CommentsStore from \"./CommentsStore\";\r\n\r\nexport class RootStore {\r\n    userStore: UserStore;\r\n    taskStore: TaskStore;\r\n    projectStore: ProjectStore;\r\n    commentStore: CommentsStore;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            userStore: observable,\r\n            taskStore: observable,\r\n            projectStore: observable,\r\n            commentStore: observable\r\n        });\r\n        this.userStore = new UserStore();\r\n        this.taskStore = new TaskStore();\r\n        this.projectStore = new ProjectStore();\r\n        this.commentStore = new CommentsStore();\r\n    }\r\n}\r\n\r\nexport default RootStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx",["123"],"﻿import { UserViewModel } from \"../Typings/viewModels/UserViewModel\";\r\nimport {makeObservable, observable} from \"mobx\";\r\n\r\nclass UserStore {\r\n    currentUser: UserViewModel;\r\n    users: UserViewModel[];\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            users: observable,\r\n            currentUser: observable\r\n        });\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        this.getCurrentUser()\r\n            .then((user) => {\r\n                this.currentUser = user\r\n            });\r\n        this.getUsers()\r\n            .then((users) => {\r\n                this.users = users;\r\n            });\r\n    }\r\n\r\n    async getCurrentUser(): Promise<UserViewModel> {\r\n        const response = await fetch(\"bundled\");\r\n        return await response.json();\r\n    }\r\n\r\n    async getUsers(): Promise<UserViewModel[]> {\r\n        const response = await fetch(\"/getusers\");\r\n        return await response.json();\r\n    }\r\n}\r\n\r\nexport default UserStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Main\\Main.tsx",["124"],"﻿import React from \"react\";\r\nimport { IMainProps } from \"./IMainProps\";\r\nimport { Card, CardHeader, Nav, NavItem } from \"reactstrap\";\r\nimport { NavLink, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { MyWorkPage } from \"../MyWork/MyWorkPage\";\r\nimport { ProjectsPage } from \"../Projects/ProjectsPage\";\r\nimport { UsersPage } from \"../Users/UsersPage\";\r\nimport { observer } from  \"mobx-react\";\r\n\r\n@observer\r\nexport class Main extends React.Component<IMainProps> {\r\n    render() {\r\n        return(\r\n            <>\r\n                <Card>\r\n                    <CardHeader>\r\n                        <Nav tabs className=\"nav\">\r\n                              <NavItem>\r\n                                  <NavLink to=\"/mywork\" exact className=\"nav-link\" activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>МОЯ РАБОТА</NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink to=\"/projects\" exact className=\"nav-link\" activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>ПРОЕКТЫ</NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink to=\"/users\" exact className=\"nav-link\" activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>ПОЛЬЗОВАТЕЛИ</NavLink>\r\n                              </NavItem>\r\n                        </Nav>\r\n                    </CardHeader>\r\n                </Card>\r\n                <Switch>\r\n                    <Route exact path=\"/mywork\" \r\n                         render={(props) => <MyWorkPage store={this.props.store} />} />\r\n                    <Route exact path=\"/projects\"\r\n                         render={(props) => <ProjectsPage store={this.props.store} />} />\r\n                    <Route exact path=\"/users\"\r\n                         render={(props) => <UsersPage store={this.props.store} />} />\r\n                    <Redirect to=\"/mywork\" />\r\n                </Switch>\r\n            </>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyWorkPage.tsx",["125"],"﻿import React from \"react\";\r\nimport { Col, Nav, NavItem, Row, TabContent, TabPane, NavLink } from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\nimport { MyTasks } from \"./MyTasks\";\r\nimport { observer } from \"mobx-react\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport { IMyWorkProps } from \"./IMyWorkProps\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\n\r\n@observer\r\nexport class  MyWorkPage extends React.Component<IMyWorkProps> {\r\n    activeTab: string = \"1\";\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n           activeTab: observable\r\n       });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{marginTop: 35}} className=\"container-fluid\">\r\n            <Row>\r\n                <Col sm=\"12\">\r\n                    <Nav tabs>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                to=\"#\"\r\n                                activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                className={classnames({ active: this.activeTab === \"1\"})}\r\n                                onClick={(e) => this.toggleTab(\"1\")}\r\n                            >Текущие</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                to=\"#\"\r\n                                activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                className={classnames({ active: this.activeTab === \"2\"})}\r\n                                onClick={(e) => this.toggleTab(\"2\")}>Законченные</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                to=\"#\"\r\n                                activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                className={classnames({ active: this.activeTab === \"3\"})}\r\n                                onClick={(e) => this.toggleTab(\"3\")}>Будущие</NavLink>\r\n                        </NavItem>\r\n                    </Nav>\r\n                    <TabContent activeTab={this.activeTab}>\r\n                        <TabPane tabId=\"1\">\r\n                            <Row>\r\n                                <Col sm=\"12\">\r\n                                    <MyTasks store={this.props.store} tasksStatus={TaskStatus.Current}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </TabPane>\r\n                        <TabPane tabId=\"2\">\r\n                            <Row>\r\n                                <Col sm=\"12\">\r\n                                    <MyTasks store={this.props.store} tasksStatus={TaskStatus.Completed}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </TabPane>\r\n                        <TabPane tabId=\"3\">\r\n                            <Row>\r\n                                <Col sm=\"12\">\r\n                                    <MyTasks store={this.props.store} tasksStatus={TaskStatus.Future}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </TabPane>\r\n                    </TabContent>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n    }\r\n\r\n    @action\r\n    toggleTab(activeTab: string): void {\r\n        this.activeTab = activeTab;\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\ProjectsPage.tsx",["126","127","128"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { AddProject } from \"./AddProject\";\r\nimport { Projects } from \"./Projects\";\r\nimport { Project } from \"./Project\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nexport class  ProjectsPage extends React.Component<IProjectsProps> {\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\">\r\n                <AddProject store={this.props.store} />\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-12\">\r\n                        <Projects store={this.props.store} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\UsersPage.tsx",["129"],"﻿import React from \"react\";\r\nimport { IUsersProps } from \"./IUsersProps\";\r\nimport { Users } from \"./Users\";\r\n\r\nexport class  UsersPage extends React.Component<IUsersProps> {\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row justify-content-center\">\r\n                    <Users store={this.props.store}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\ProjectStore.tsx",["130"],"﻿import { ProjectViewModel } from \"../Typings/viewModels/ProjectViewModel\";\r\nimport {makeObservable, observable} from \"mobx\";\r\n\r\nclass ProjectStore {\r\n    projects: ProjectViewModel[];\r\n    choosenProject: ProjectViewModel;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            projects: observable,\r\n            choosenProject: observable\r\n        });\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        console.log(\"1\");\r\n        this.getProjects()\r\n            .then((projects) => {\r\n                console.log(\"project\", projects);\r\n                this.projects = projects;\r\n                this.choosenProject = projects[0];\r\n            });\r\n    }\r\n\r\n    setChoosenProject(project: ProjectViewModel): void {\r\n        this.choosenProject = project;\r\n    }\r\n\r\n    async getProjects() {\r\n        const response = await fetch(\"/getprojects\");\r\n        if(response.status === 200) {\r\n            return await response.json();\r\n        } else {\r\n            return new Array<ProjectViewModel>(0);\r\n        }\r\n    }\r\n\r\n    async addNewProject(name: string, description: string, startDate: Date | Date[], deadlineDate: Date | Date[], responsibleId: number) {\r\n        const response = await fetch(\"/addorupdateproject\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify({name: name, description: description, startDate: startDate, deadlineDate: deadlineDate, responsiblePerson: responsibleId})\r\n        });\r\n        if(response.status === 200) {\r\n            const project = await response.json();\r\n            this.projects.push(project);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default ProjectStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx",["131"],"﻿import { makeObservable, observable } from \"mobx\";\r\nimport { UserTaskViewModel } from \"../Typings/viewModels/UserTaskViewModel\";\r\nimport { TaskViewModel } from \"../Typings/viewModels/TaskViewModel\";\r\nimport { TaskStatus } from \"../Typings/enums/TaskStatus\";\r\nimport { TaskType } from \"../Typings/enums/TaskType\";\r\n\r\nclass TaskStore {\r\n    currentUserTasks: UserTaskViewModel[];\r\n    currentProjectTasks: TaskViewModel[];\r\n    userTasks: UserTaskViewModel[];\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            currentUserTasks: observable,\r\n            currentProjectTasks: observable\r\n        });\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        this.getCurrentUserTasks();\r\n    }\r\n\r\n    async getCurrentUserTasks() {\r\n        const response = await fetch(\"/getusertasks\");\r\n        if(response.status === 200) {\r\n            this.currentUserTasks = await response.json();\r\n        } else {\r\n            this.currentUserTasks = new Array<UserTaskViewModel>(0);\r\n        }\r\n    }\r\n\r\n    async getTasks(projectId: number) {\r\n        const response = await fetch(\"/gettasks\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify({id: projectId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.currentProjectTasks = await response.json();\r\n        }\r\n    }\r\n\r\n    async addNewTask(projectId: number, header: string, description: string, startDate: Date | Date[], deadlineDate: Date | Date[], taskType: TaskType, status: TaskStatus, priority: number, tester: number, responsible: number, author: number) {\r\n        const response = await fetch(\"/addorupdatetask\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify({projectId: projectId, header: header, description: description, startDate: startDate, deadlineDate: deadlineDate, taskType: taskType, status: status, priority: priority, tester: tester, responsible: responsible, author: author})\r\n        });\r\n        if(response.status === 200) {\r\n            const task = await response.json();\r\n            this.currentProjectTasks.push(task);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default TaskStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\CommentsStore.tsx",["132"],"﻿import { makeObservable, observable } from \"mobx\";\r\nimport { CommentGroupViewModel } from \"../Typings/viewModels/CommentGroupViewModel\";\r\nimport {UserReadModel} from \"../Typings/viewModels/UserReadModel\";\r\n\r\nclass CommentsStore {\r\n    currentTaskCommentGroup: CommentGroupViewModel;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            currentTaskCommentGroup: observable\r\n        });\r\n    }\r\n\r\n    async getCurrentTaskComments(taskId: number): Promise<CommentGroupViewModel> {\r\n        const response = await fetch(\"/getcurrenttaskcommentgroup\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify({taskId: taskId})\r\n        });\r\n        if(response.status === 200) {\r\n            return await response.json();\r\n        } else {\r\n            return new CommentGroupViewModel();\r\n        }\r\n    }\r\n\r\n    async addComment(text: string, userId: number): Promise<number> {\r\n        const user = new UserReadModel();\r\n        user.id = userId;\r\n        const response = await fetch(\"/addorupdatecomment\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify({text: text, groupId: this.currentTaskCommentGroup.id, user: user})\r\n        });\r\n        if(response.status === 200) {\r\n            return await response.json();\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport default CommentsStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyTasks.tsx",["133","134"],"﻿import React from \"react\";\r\nimport { IMyTasksProps } from \"./IMyTasksProps\";\r\nimport { Table } from 'reactstrap';\r\nimport { TaskViewModel } from \"../../Typings/viewModels/TaskViewModel\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\n\r\nexport class MyTasks extends React.Component<IMyTasksProps> {\r\n    getTaskStatusTranslit(taskStatus: TaskStatus): string {\r\n        if(taskStatus === TaskStatus.Current) {\r\n            return \"Текущие\";\r\n        } else if(taskStatus === TaskStatus.Completed) {\r\n            return \"Законченные\";\r\n        } else if(taskStatus === TaskStatus.Future) {\r\n            return \"Будущие\";\r\n        } else {\r\n            return \"Текущие\";\r\n        }\r\n    }\r\n\r\n    filterTasks(taskStatus: TaskStatus): TaskViewModel[] {\r\n        return this.props.store.taskStore.currentUserTasks?.\r\n            filter(ut => ut.task.status === taskStatus)\r\n            .map(ut => {\r\n                return ut.task\r\n            });\r\n    }\r\n\r\n    renderMyTasks(tasks: TaskViewModel[]) {\r\n        return(\r\n            <Table bordered style={{backgroundColor: \"#C4DFE6\", color:\"003b46\"}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Номер</th>\r\n                        <th>Задача</th>\r\n                        <th>Дедлайн</th>\r\n                        <th>Статус</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr key=\"1\">\r\n                    <th>id</th>\r\n                    <th>header</th>\r\n                    <th>deadlineDate</th>\r\n                    <th>status</th>\r\n                </tr>\r\n                    {tasks.map((task) => {\r\n                        return(\r\n                            <tr key={task.id}>\r\n                                <th>{task.id}</th>\r\n                                <th>{task.header}</th>\r\n                                <th>{task.deadlineDate}</th>\r\n                                <th>{task.status}</th>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        let tasks = this.filterTasks(this.props.tasksStatus);\r\n        return(\r\n            <>\r\n                <label>{this.getTaskStatusTranslit(this.props.tasksStatus)}</label>\r\n                {tasks !== undefined && this.renderMyTasks(tasks)}\r\n                {tasks === undefined && <div><span>Задач пока нет:)</span></div>}\r\n            </>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskStatus.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddProject.tsx",["135"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input, Dropdown, DropdownToggle, DropdownItem, DropdownMenu } from \"reactstrap\";\r\nimport Calendar from \"react-calendar\";\r\n\r\n@observer\r\nexport class AddProject extends React.Component<IProjectsProps> {\r\n    addProjectWindowOpen: boolean;\r\n    projectName: string = \"\";\r\n    description: string = \"\";\r\n    responsibleDropdownOpen: boolean;\r\n    startDate: Date | Date[];\r\n    deadline: Date | Date[];\r\n    responsiblePerson: number;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addProjectWindowOpen: observable,\r\n            projectName: observable,\r\n            description: observable,\r\n            responsibleDropdownOpen: observable,\r\n            startDate: observable,\r\n            deadline: observable,\r\n            responsiblePerson: observable\r\n        });\r\n    }\r\n\r\n    toggleAddProjectWindow() {\r\n        this.addProjectWindowOpen = !this.addProjectWindowOpen;\r\n    }\r\n\r\n    toggleResponsibleDropdown() {\r\n        this.responsibleDropdownOpen = !this.responsibleDropdownOpen;\r\n    }\r\n\r\n    renderAddProjectWindow() {\r\n        let users = this.props.store.userStore.users;\r\n        return(\r\n            <Modal isOpen={this.addProjectWindowOpen} toggle={() => this.toggleAddProjectWindow()}>\r\n                <ModalHeader>\r\n                    СОЗДАНИЕ ПРОЕКТА\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"row justify-content-center\">\r\n                        <label>Название проекта</label>\r\n                        <Input onChange={(e) => this.inputProjectName(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <label>Описание проекта</label>\r\n                        <textarea onChange={(e) => this.inputDescription(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <label>Дата начала</label>\r\n                            <Calendar\r\n                                value={this.startDate}\r\n                                onChange={(date) => this.inputDate(date, \"startDate\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <label>Дедлайн</label>\r\n                            <Calendar\r\n                                value={this.deadline}\r\n                                onChange={(date) => this.inputDate(date, \"deadline\")}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <label>Ответственный</label>\r\n                        <Dropdown isOpen={this.responsibleDropdownOpen} toggle={() => this.toggleResponsibleDropdown()}>\r\n                            <DropdownToggle/>\r\n                            <DropdownMenu>\r\n                                {users.map((user, index) => {\r\n                                    return(\r\n                                        <>\r\n                                            {index === 0 && <DropdownItem key={index} header onClick={() => this.chooseResponsiblePerson(user.id)}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                                            {index !== 0 && <DropdownItem key={index} onClick={() => this.chooseResponsiblePerson(user.id)}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                                        </>\r\n                                    );\r\n                                })}\r\n                            </DropdownMenu>\r\n                        </Dropdown>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                    onClick={() => this.saveProject()}>СОХРАНИТЬ</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-lg-2 col-lg-offset-10 col-md-4 col-md-offset-8 col-sm-6 col-sm-offet-3 col-xs-12\">\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.toggleAddProjectWindow()}>Создать проект</Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.addProjectWindowOpen && this.renderAddProjectWindow()}\r\n                {!this.addProjectWindowOpen && this.renderButton()}\r\n            </>\r\n        )\r\n    }\r\n\r\n    inputProjectName(event: React.FormEvent<HTMLInputElement>) {\r\n        this.projectName = event.currentTarget.value;\r\n    }\r\n\r\n    inputDescription(event: React.FormEvent<HTMLTextAreaElement>) {\r\n        this.description = event.currentTarget.value;\r\n    }\r\n\r\n    inputDate(date: Date | Date[], dateType: string) {\r\n        if(dateType === \"startDate\") {\r\n            this.startDate = date;\r\n        } else if(dateType === \"deadline\") {\r\n            this.deadline = date;\r\n        }\r\n    }\r\n\r\n    chooseResponsiblePerson(userId: number) {\r\n        this.responsiblePerson = userId;\r\n    }\r\n\r\n    saveProject() {\r\n        this.props.store.projectStore\r\n            .addNewProject(this.projectName, this.description, this.startDate, this.deadline, this.responsiblePerson);\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Projects.tsx",["136","137"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { ProjectViewModel } from \"../../Typings/viewModels/ProjectViewModel\";\r\nimport { Table } from \"reactstrap\";\r\nimport {UserViewModel} from \"../../Typings/viewModels/UserViewModel\";\r\nimport { Tab, Nav } from \"react-bootstrap\";\r\nimport {Project} from \"./Project\";\r\n\r\nexport class Projects extends React.Component<IProjectsProps> {\r\n    getResponsible(userId: number): UserViewModel {\r\n        return this.props.store.userStore.users.find(u => u.id === userId) as UserViewModel;\r\n    }\r\n\r\n    renderProjects(projects: ProjectViewModel[]) {\r\n        return(\r\n            <Table bordered style={{backgroundColor: \"#C4DFE6\", color:\"003b46\"}}>\r\n                <thead>\r\n                <tr>\r\n                    <th>Номер</th>\r\n                    <th>Название</th>\r\n                    <th>Дата начала</th>\r\n                    <th>Дедлайн</th>\r\n                    <th>Ответственный</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr key=\"1\">\r\n                    <th>id</th>\r\n                    <th>name</th>\r\n                    <th>startDate</th>\r\n                    <th>deadlineDate</th>\r\n                    <th>responsible</th>\r\n                </tr>\r\n                {projects.map((project) => {\r\n                    let responsible = this.getResponsible(project.id);//здесь project.responsibleId\r\n                    return(\r\n                        <tr key={project.id}>\r\n                            <th>\r\n                                <a href=\"\" onClick={(e) => {this.props.store.projectStore.setChoosenProject(project)}}>\r\n                                    {project.name}\r\n                                </a>\r\n                            </th>\r\n                            <th>{project.startDate}</th>\r\n                            <th>{project.deadlineDate}</th>\r\n                            <th>{responsible.firstName + responsible.lastName}</th>\r\n                        </tr>\r\n                    )\r\n                })}\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n\r\n    renderMenu(projects: ProjectViewModel[]) {\r\n        // @ts-ignore\r\n        return(\r\n            <Tab.Container>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-3\">\r\n                        <Nav variant=\"pills\" className=\"flex-column\">\r\n                            {projects.map((project) => {\r\n                                return (\r\n                                    <Nav.Item onClick={() => {this.props.store.projectStore.setChoosenProject(project)}}>\r\n                                        <Nav.Link eventKey={project.id}>{project.name}</Nav.Link>\r\n                                    </Nav.Item>\r\n                                );\r\n                            })}\r\n                        </Nav>\r\n                    </div>\r\n                    <div className=\"col-9\">\r\n                        <Tab.Content>\r\n                            {projects.map((project) => {\r\n                                return (\r\n                                    <Tab.Pane eventKey={project.id}>\r\n                                        <Project store={this.props.store} />\r\n                                    </Tab.Pane>\r\n                                );\r\n                            })}\r\n                        </Tab.Content>\r\n                    </div>\r\n                </div>\r\n            </Tab.Container>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let projects = this.props.store.projectStore.projects;\r\n        return(\r\n            <>\r\n                {this.renderMenu(projects)}\r\n            </>\r\n        )\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Project.tsx",["138","139"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { AddTask } from \"../Tasks/AddTask\";\r\nimport { AddUserToProject } from \"./AddUserToProject\";\r\nimport { Tasks } from \"../Tasks/Tasks\";\r\nimport { ProjectViewModel } from \"../../Typings/viewModels/ProjectViewModel\";\r\nimport { Card, CardText, CardTitle } from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\nimport { MyTasks } from \"../MyWork/MyTasks\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\nimport { Col, Nav, NavItem, Row, TabContent, TabPane, NavLink } from \"reactstrap\";\r\nimport {action, makeObservable, observable} from \"mobx\";\r\n\r\nexport class Project extends React.Component<IProjectsProps> {\r\n    activeTab: string = \"1\";\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            activeTab: observable\r\n        });\r\n    }\r\n\r\n    renderProjectDiagram() {\r\n        return (\r\n            <>Диаграмма. Неважно, что ты не видишь её. Она тебя видит</>\r\n        );\r\n    }\r\n\r\n    renderProjectInfo(project: ProjectViewModel) {\r\n        let responsible = this.props.store.userStore.users.filter(u => u.id === project.responsiblePerson)[0];\r\n        return (\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                    <Card>\r\n                        <CardTitle><strong>{project.name}</strong></CardTitle>\r\n                        <CardText>Руководитель: {responsible.firstName} {responsible.lastName}</CardText>\r\n                        <CardText>Дата начала: {project.startDate}</CardText>\r\n                        <CardText>Дедлайн: {project.deadlineDate}</CardText>\r\n                        <CardText>Описание: {project.description}</CardText>\r\n                    </Card>\r\n                </div>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                    {this.renderProjectDiagram()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderTasksMenu() {\r\n        return(\r\n            <div style={{marginTop: 35}} className=\"container-fluid\">\r\n                <Row>\r\n                    <Col sm=\"12\">\r\n                        <Nav tabs>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                    className={classnames({ active: this.activeTab === \"1\"})}\r\n                                    onClick={(e) => this.toggleTab(\"1\")}\r\n                                >Текущие</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                    className={classnames({ active: this.activeTab === \"2\"})}\r\n                                    onClick={(e) => this.toggleTab(\"2\")}>Законченные</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                    className={classnames({ active: this.activeTab === \"3\"})}\r\n                                    onClick={(e) => this.toggleTab(\"3\")}>Будущие</NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                        <TabContent activeTab={this.activeTab}>\r\n                            <TabPane tabId=\"1\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <Tasks store={this.props.store} status={TaskStatus.Current}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                            <TabPane tabId=\"2\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <Tasks store={this.props.store} status={TaskStatus.Completed}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                            <TabPane tabId=\"3\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <Tasks store={this.props.store} status={TaskStatus.Future}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                        </TabContent>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <div className=\"container\">\r\n                {this.renderProjectInfo(this.props.store.projectStore.choosenProject)}\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-lg-3 col-lg-offset-4\">\r\n                        <AddTask store={this.props.store}/>\r\n                    </div>\r\n                    <div className=\"col-lg-3 col-lg-offset-7\">\r\n                        <AddUserToProject store={this.props.store}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderTasksMenu()}\r\n                </div>\r\n            </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    @action\r\n    toggleTab(activeTab: string): void {\r\n        this.activeTab = activeTab;\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddUserToProject.tsx",["140"],"﻿import React from \"react\";\r\nimport RootStore from \"../../stores/RootStore\";\r\n\r\nexport interface IAddUserToProjectProps {\r\n    store: RootStore;\r\n}\r\n\r\nexport class AddUserToProject extends React.Component<IAddUserToProjectProps>{\r\n    render() {\r\n        return(\r\n            <></>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\AddTask.tsx",["141"],"﻿import React from \"react\";\r\nimport { IAddTasksProps } from \"./IAddTasksProps\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Modal } from \"react-bootstrap\";\r\nimport { Label, Input, Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Button } from \"reactstrap\";\r\nimport Calendar from \"react-calendar\";\r\nimport { TaskType } from \"../../Typings/enums/TaskType\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\n\r\nexport class AddTask extends React.Component<IAddTasksProps> {\r\n    addTaskWindowOpen: boolean;\r\n    responsibleDropdownOpen: boolean;\r\n    testerDropdownOpen: boolean;\r\n    taskName: string;\r\n    description: string;\r\n    startDate: Date | Date[];\r\n    deadline: Date | Date[];\r\n    priority: number;\r\n    responsiblePerson: number;\r\n    tester: number;\r\n    taskType: TaskType;\r\n    taskStatus: TaskStatus;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addTaskWindowOpen: observable\r\n        });\r\n    }\r\n\r\n    toggleAddTaskWindow() {\r\n        this.addTaskWindowOpen = !this.addTaskWindowOpen;\r\n    }\r\n\r\n    toggleResponsibleDropdown() {\r\n        this.responsibleDropdownOpen = !this.responsibleDropdownOpen;\r\n    }\r\n\r\n    toggleTesterDropdown() {\r\n        this.testerDropdownOpen = !this.testerDropdownOpen;\r\n    }\r\n    \r\n    renderResponsibleDropdown() {\r\n        let users = this.props.store.userStore.users;\r\n        return(\r\n            <Dropdown isOpen={this.responsibleDropdownOpen} toggle={this.toggleResponsibleDropdown}>\r\n                <DropdownToggle />\r\n                <DropdownMenu>\r\n                    {users.map((user, index) => {\r\n                        return(\r\n                            <>\r\n                                {index === 0 && <DropdownItem key={index} header onClick={() => this.choosePerson(user.id, \"responsible\")}>\r\n                                    {user.firstName + \" \" + user.lastName}\r\n                                </DropdownItem>}\r\n                                {index !== 0 && <DropdownItem key={index}  onClick={() => this.choosePerson(user.id, \"responsible\")}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                            </>\r\n                        );\r\n                    })}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderTesterDropdown() {\r\n        let users = this.props.store.userStore.users;\r\n        return(\r\n            <Dropdown isOpen={this.testerDropdownOpen} toggle={this.toggleTesterDropdown}>\r\n                <DropdownToggle />\r\n                <DropdownMenu>\r\n                    {users.map((user, index) => {\r\n                        return(\r\n                            <>\r\n                                {index === 0 && <DropdownItem key={index} header onClick={() => this.choosePerson(user.id, \"tester\")}>\r\n                                    {user.firstName + \" \" + user.lastName}\r\n                                </DropdownItem>}\r\n                                {index !== 0 && <DropdownItem key={index}  onClick={() => this.choosePerson(user.id, \"tester\")}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                            </>\r\n                        )\r\n                    })}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderAddTaskWindow() {\r\n        let currentUser = this.props.store.userStore.currentUser;\r\n        return(\r\n            <Modal \r\n                isOpen={this.addTaskWindowOpen}\r\n                size=\"lg\"\r\n                centered\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                toggle={this.toggleAddTaskWindow}>\r\n                <Modal.Header closeButton>СОЗДАНИЕ ЗАДАЧИ</Modal.Header>\r\n                <Modal.Body>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label>Название</Label>\r\n                        <Input onChange={(e) => this.inputTaskName(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label>Описание</Label>\r\n                        <textarea onChange={(e) => this.inputDescription(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <label>Дата начала</label>\r\n                            <Calendar\r\n                                value={this.startDate}\r\n                                onChange={(date) => this.inputDate(date, \"startDate\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <label>Дедлайн</label>\r\n                            <Calendar\r\n                                value={this.deadline}\r\n                                onChange={(date) => this.inputDate(date, \"deadline\")}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-4 col-sm-12\">\r\n                            <Label>Ответственный</Label>\r\n                            {this.renderResponsibleDropdown()}\r\n                        </div>\r\n                        <div className=\"col-lg-4 col-sm-12\">\r\n                            <Label>Тестировщик</Label>\r\n                            {this.renderTesterDropdown()}\r\n                        </div>\r\n                        <div className=\"col-lg-4 col-sm-12\">\r\n                            <Label>Автор:</Label>\r\n                            <span>{currentUser.firstName} {currentUser.lastName}</span>\r\n                        </div>\r\n                    </div>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.saveTask()}>\r\n                        СОХРАНИТЬ\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-lg-2 col-lg-offset-10 col-md-4 col-md-offset-8 col-sm-6 col-sm-offet-3 col-xs-12\">\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.toggleAddTaskWindow()}>Создать задачу</Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.addTaskWindowOpen && this.renderAddTaskWindow()}\r\n                {!this.addTaskWindowOpen && this.renderButton()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    inputTaskName(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.taskName = event.currentTarget.value;\r\n    }\r\n\r\n    inputDescription(event: React.FormEvent<HTMLTextAreaElement>): void {\r\n        this.description = event.currentTarget.value;\r\n    }\r\n\r\n    inputDate(date: Date | Date[], dateType: string): void {\r\n        if(dateType === \"startDate\") {\r\n            this.startDate = date;\r\n        } else if(dateType === \"deadline\") {\r\n            this.deadline = date;\r\n        }\r\n    }\r\n\r\n    choosePerson(userId: number, type: string): void {\r\n        if(type === \"responsible\") {\r\n            this.responsiblePerson = userId;\r\n        } else if(type === \"tester\") {\r\n            this.tester = userId;\r\n        }\r\n    }\r\n\r\n    saveTask() {\r\n        this.props.store.taskStore.addNewTask(this.props.store.projectStore.choosenProject.id, this.taskName, this.description, this.startDate, this.deadline, this.taskType, this.taskStatus, this.priority, this.tester, this.responsiblePerson, this.props.store.userStore.currentUser.id)\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Tasks.tsx",["142"],"﻿import React from \"react\";\r\nimport { ITasksProps } from \"./ITasksProps\";\r\nimport { TaskViewModel } from \"../../Typings/viewModels/TaskViewModel\";\r\nimport { Table } from \"reactstrap\";\r\nimport { TaskRole } from \"../../Typings/enums/TaskRole\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\n\r\nexport class Tasks extends React.Component<ITasksProps> {\r\n    getResponsible(taskId: number): UserViewModel {\r\n        return this.props.store.taskStore.userTasks\r\n            .filter(ut => ut.task.id === taskId)\r\n            .filter(ut => ut.role === TaskRole.Responsible)\r\n            .map(ut => ut.user)[0];\r\n    }\r\n\r\n    renderTasks(tasks: TaskViewModel[]) {\r\n        return(\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Номер</th>\r\n                        <th>Задача</th>\r\n                        <th>Дедлайн</th>\r\n                        <th>Тип задачи</th>\r\n                        <th>Ответственный</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {tasks.map((task) => {\r\n                    let responsible = this.getResponsible(task.id);//вообще здесь лучше дропдаун сделать\r\n                    return(\r\n                        <tr key={task.id}>\r\n                            <th>{task.id}</th>\r\n                            <th>{task.header}</th>\r\n                            <th>{task.deadlineDate}</th>\r\n                            <th>{task.taskType}</th>\r\n                            <th>{responsible.firstName + \" \" + responsible.lastName}</th>\r\n                        </tr>\r\n                    );\r\n                })}\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let tasks = this.props.store.taskStore.currentProjectTasks.filter(t => t.status === this.props.status);\r\n        return(\r\n            <>\r\n                {this.renderTasks(tasks)}\r\n            </>\r\n        )\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskRole.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\Users.tsx",["143"],"﻿import React from \"react\";\r\nimport { IUsersProps } from \"./IUsersProps\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { Table } from \"reactstrap\";\r\n\r\nexport class  Users extends React.Component<IUsersProps> {\r\n    renderUsers(users: UserViewModel[]) {\r\n        return(\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Id</th>\r\n                        <th>Имя Фамилия</th>\r\n                        <th>Email</th>\r\n                        <th>Роль</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {users.map(user => {\r\n                        return(\r\n                            <tr>\r\n                                <th>{user.id}</th>\r\n                                <th>{user.firstName} {user.lastName}</th>\r\n                                <th>{user.email}</th>\r\n                                <th>{user.role}</th>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderUsers(this.props.store.userStore.users)}\r\n            </>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentGroupViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserReadModel.ts",[],{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":9,"column":20,"nodeType":"150","messageId":"151","endLine":9,"endColumn":28},{"ruleId":"148","severity":1,"message":"152","line":10,"column":9,"nodeType":"150","messageId":"151","endLine":10,"endColumn":19},{"ruleId":"153","severity":1,"message":"154","line":1,"column":1,"nodeType":"155","messageId":"156","fix":"157"},{"ruleId":"148","severity":1,"message":"158","line":1,"column":10,"nodeType":"150","messageId":"151","endLine":1,"endColumn":16},{"ruleId":"153","severity":1,"message":"154","line":1,"column":1,"nodeType":"155","messageId":"156","fix":"159"},{"ruleId":"153","severity":1,"message":"154","line":1,"column":1,"nodeType":"155","messageId":"156","fix":"160"},{"ruleId":"153","severity":1,"message":"154","line":1,"column":1,"nodeType":"155","messageId":"156","fix":"161"},{"ruleId":"153","severity":1,"message":"154","line":1,"column":1,"nodeType":"155","messageId":"156","fix":"162"},{"ruleId":"148","severity":1,"message":"163","line":5,"column":10,"nodeType":"150","messageId":"151","endLine":5,"endColumn":17},{"ruleId":"148","severity":1,"message":"152","line":6,"column":26,"nodeType":"150","messageId":"151","endLine":6,"endColumn":36},{"ruleId":"153","severity":1,"message":"154","line":1,"column":1,"nodeType":"155","messageId":"156","fix":"164"},{"ruleId":"153","severity":1,"message":"154","line":1,"column":1,"nodeType":"155","messageId":"156","fix":"165"},{"ruleId":"153","severity":1,"message":"154","line":1,"column":1,"nodeType":"155","messageId":"156","fix":"166"},{"ruleId":"153","severity":1,"message":"154","line":1,"column":1,"nodeType":"155","messageId":"156","fix":"167"},{"ruleId":"153","severity":1,"message":"154","line":1,"column":1,"nodeType":"155","messageId":"156","fix":"168"},{"ruleId":"169","severity":1,"message":"170","line":21,"column":59,"nodeType":"171","messageId":"172","endLine":21,"endColumn":61,"fix":"173"},{"ruleId":"153","severity":1,"message":"154","line":1,"column":1,"nodeType":"155","messageId":"156","fix":"174"},{"ruleId":"153","severity":1,"message":"154","line":1,"column":1,"nodeType":"155","messageId":"156","fix":"175"},{"ruleId":"176","severity":1,"message":"177","line":39,"column":33,"nodeType":"178","endLine":39,"endColumn":120},{"ruleId":"153","severity":1,"message":"154","line":1,"column":1,"nodeType":"155","messageId":"156","fix":"179"},{"ruleId":"148","severity":1,"message":"180","line":9,"column":10,"nodeType":"150","messageId":"151","endLine":9,"endColumn":17},{"ruleId":"153","severity":1,"message":"154","line":1,"column":1,"nodeType":"155","messageId":"156","fix":"181"},{"ruleId":"153","severity":1,"message":"154","line":1,"column":1,"nodeType":"155","messageId":"156","fix":"182"},{"ruleId":"153","severity":1,"message":"154","line":1,"column":1,"nodeType":"155","messageId":"156","fix":"183"},{"ruleId":"153","severity":1,"message":"154","line":1,"column":1,"nodeType":"155","messageId":"156","fix":"184"},"no-native-reassign",["185"],"no-negated-in-lhs",["186"],"@typescript-eslint/no-unused-vars","'Provider' is defined but never used.","Identifier","unusedVar","'observable' is defined but never used.","unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"187","text":"188"},"'action' is defined but never used.",{"range":"189","text":"188"},{"range":"190","text":"188"},{"range":"191","text":"188"},{"range":"192","text":"188"},"'Project' is defined but never used.",{"range":"193","text":"188"},{"range":"194","text":"188"},{"range":"195","text":"188"},{"range":"196","text":"188"},{"range":"197","text":"188"},"dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"198","text":"199"},{"range":"200","text":"188"},{"range":"201","text":"188"},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",{"range":"202","text":"188"},"'MyTasks' is defined but never used.",{"range":"203","text":"188"},{"range":"204","text":"188"},{"range":"205","text":"188"},{"range":"206","text":"188"},"no-global-assign","no-unsafe-negation",[-1,0],"",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[822,838],"\r\n            ?.",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]]