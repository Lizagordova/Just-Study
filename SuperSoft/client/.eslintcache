[{"C:\\SuperSoft\\SuperSoft\\client\\src\\index.tsx":"1","C:\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts":"2","C:\\SuperSoft\\SuperSoft\\client\\src\\App.tsx":"3","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx":"4","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx":"5","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Main\\Main.tsx":"6","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyWorkPage.tsx":"7","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\ProjectsPage.tsx":"8","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\UsersPage.tsx":"9","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\ProjectStore.tsx":"10","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx":"11","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\CommentsStore.tsx":"12","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyTasks.tsx":"13","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskStatus.ts":"14","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddProject.tsx":"15","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Projects.tsx":"16","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Project.tsx":"17","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddUserToProject.tsx":"18","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\AddTask.tsx":"19","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Tasks.tsx":"20","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskRole.ts":"21"},{"size":704,"mtime":1607787725088,"results":"22","hashOfConfig":"23"},{"size":425,"mtime":1607420618541,"results":"24","hashOfConfig":"23"},{"size":821,"mtime":1607787714332,"results":"25","hashOfConfig":"23"},{"size":817,"mtime":1607860334709,"results":"26","hashOfConfig":"23"},{"size":978,"mtime":1607860536356,"results":"27","hashOfConfig":"23"},{"size":2126,"mtime":1607853872924,"results":"28","hashOfConfig":"23"},{"size":3749,"mtime":1607853965447,"results":"29","hashOfConfig":"23"},{"size":1498,"mtime":1607942188247,"results":"30","hashOfConfig":"23"},{"size":271,"mtime":1607763534463,"results":"31","hashOfConfig":"23"},{"size":1479,"mtime":1607942189041,"results":"32","hashOfConfig":"23"},{"size":1193,"mtime":1607930299574,"results":"33","hashOfConfig":"23"},{"size":62,"mtime":1607764508300,"results":"34","hashOfConfig":"23"},{"size":2570,"mtime":1607930891721,"results":"35","hashOfConfig":"23"},{"size":253,"mtime":1607941089098,"results":"36","hashOfConfig":"23"},{"size":5552,"mtime":1607864156033,"results":"37","hashOfConfig":"23"},{"size":2307,"mtime":1607942102541,"results":"38","hashOfConfig":"23"},{"size":948,"mtime":1607942192182,"results":"39","hashOfConfig":"23"},{"size":305,"mtime":1607942173528,"results":"40","hashOfConfig":"23"},{"size":220,"mtime":1607931270170,"results":"41","hashOfConfig":"23"},{"size":2003,"mtime":1607930541009,"results":"42","hashOfConfig":"23"},{"size":237,"mtime":1607941089077,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1ttbku6",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"54","usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"57","usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"60","usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"63","usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"79","usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"84","usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\SuperSoft\\SuperSoft\\client\\src\\index.tsx",[],["97","98"],"C:\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\App.tsx",["99","100"],"import React, { Component } from \"react\";\nimport './App.css';\nimport { RootStore } from \"./stores/RootStore\";\nimport { Main } from \"./components/Main/Main\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-social/bootstrap-social.css';\nimport './styles/common.css';\nimport { BrowserRouter } from \"react-router-dom\";\nimport { observer, Provider } from  \"mobx-react\";\nimport {observable} from \"mobx\";\n\ninterface Props {\n    store: RootStore;\n}\n\n@observer\nclass App extends Component<Props> {\n   render() {\n       const { store } = this.props;\n       return(\n           <div>\n               <BrowserRouter>\n                   <div className=\"App\">\n                       <Main store={store}/>\n                   </div>\n               </BrowserRouter>\n           </div>\n       );\n   }\n\n\n}\n\nexport default App;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx",["101","102"],"﻿import { action, observable, makeObservable } from \"mobx\";\r\nimport UserStore from \"./UserStore\";\r\nimport ProjectStore from \"./ProjectStore\";\r\nimport TaskStore from \"./TaskStore\";\r\nimport CommentsStore from \"./CommentsStore\";\r\n\r\nexport class RootStore {\r\n    userStore: UserStore;\r\n    taskStore: TaskStore;\r\n    projectStore: ProjectStore;\r\n    commentStore: CommentsStore;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            userStore: observable,\r\n            taskStore: observable,\r\n            projectStore: observable,\r\n            commentStore: observable\r\n        });\r\n        this.userStore = new UserStore();\r\n        this.taskStore = new TaskStore();\r\n        this.projectStore = new ProjectStore();\r\n        this.commentStore = new CommentsStore();\r\n    }\r\n}\r\n\r\nexport default RootStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx",["103"],"﻿import { UserViewModel } from \"../Typings/viewModels/UserViewModel\";\r\nimport {makeObservable, observable} from \"mobx\";\r\n\r\nclass UserStore {\r\n    currentUser: UserViewModel;\r\n    users: UserViewModel[];\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            users: observable,\r\n            currentUser: observable\r\n        });\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        this.getCurrentUser()\r\n            .then((user) => {\r\n                this.currentUser = user\r\n            });\r\n        this.getUsers()\r\n            .then((users) => {\r\n                this.users = users;\r\n            });\r\n    }\r\n\r\n    async getCurrentUser(): Promise<UserViewModel> {\r\n        const response = await fetch(\"bundled\");\r\n        return await response.json();\r\n    }\r\n\r\n    async getUsers(): Promise<UserViewModel[]> {\r\n        const response = await fetch(\"/getusers\");\r\n        return await response.json();\r\n    }\r\n}\r\n\r\nexport default UserStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Main\\Main.tsx",["104"],"﻿import React from \"react\";\r\nimport { IMainProps } from \"./IMainProps\";\r\nimport { Card, CardHeader, Nav, NavItem } from \"reactstrap\";\r\nimport { NavLink, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { MyWorkPage } from \"../MyWork/MyWorkPage\";\r\nimport { ProjectsPage } from \"../Projects/ProjectsPage\";\r\nimport { UsersPage } from \"../Users/UsersPage\";\r\nimport { observer } from  \"mobx-react\";\r\n\r\n@observer\r\nexport class Main extends React.Component<IMainProps> {\r\n    render() {\r\n        return(\r\n            <>\r\n                <Card>\r\n                    <CardHeader>\r\n                        <Nav tabs className=\"nav\">\r\n                              <NavItem>\r\n                                  <NavLink to=\"/mywork\" exact className=\"nav-link\" activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>МОЯ РАБОТА</NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink to=\"/projects\" exact className=\"nav-link\" activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>ПРОЕКТЫ</NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink to=\"/users\" exact className=\"nav-link\" activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>ПОЛЬЗОВАТЕЛИ</NavLink>\r\n                              </NavItem>\r\n                        </Nav>\r\n                    </CardHeader>\r\n                </Card>\r\n                <Switch>\r\n                    <Route exact path=\"/mywork\" \r\n                         render={(props) => <MyWorkPage store={this.props.store} />} />\r\n                    <Route exact path=\"/projects\"\r\n                         render={(props) => <ProjectsPage store={this.props.store} />} />\r\n                    <Route exact path=\"/users\"\r\n                         render={(props) => <UsersPage store={this.props.store} />} />\r\n                    <Redirect to=\"/mywork\" />\r\n                </Switch>\r\n            </>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyWorkPage.tsx",["105"],"﻿import React from \"react\";\r\nimport {Col, Nav, NavItem, Row, TabContent, TabPane} from \"reactstrap\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport classnames from \"classnames\";\r\nimport {MyTasks} from \"./MyTasks\";\r\nimport { observer } from \"mobx-react\";\r\nimport {action, makeObservable, observable} from \"mobx\";\r\nimport {IMyWorkProps} from \"./IMyWorkProps\";\r\nimport {TaskStatus} from \"../../Typings/enums/TaskStatus\";\r\n\r\n@observer\r\nexport class  MyWorkPage extends React.Component<IMyWorkProps> {\r\n    activeTab: string = \"1\";\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n           activeTab: observable\r\n       })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{marginTop: 35}} className=\"container-fluid\">\r\n                <Row>\r\n                    <Col sm=\"12\">\r\n                        <Nav tabs>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                    className={classnames({ active: this.activeTab === \"1\"})}\r\n                                    onClick={(e) => this.toggleTab(\"1\")}\r\n                                    >Текущие</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                    className={classnames({ active: this.activeTab === \"2\"})}\r\n                                    onClick={(e) => this.toggleTab(\"2\")}>Законченные</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                    className={classnames({ active: this.activeTab === \"3\"})}\r\n                                    onClick={(e) => this.toggleTab(\"3\")}>Будущие</NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                        <TabContent activeTab={this.activeTab}>\r\n                            <TabPane tabId=\"1\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <MyTasks store={this.props.store} tasksStatus={TaskStatus.Current}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                            <TabPane tabId=\"2\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <MyTasks store={this.props.store} tasksStatus={TaskStatus.Completed}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                            <TabPane tabId=\"3\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <MyTasks store={this.props.store} tasksStatus={TaskStatus.Future}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                        </TabContent>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    @action\r\n    toggleTab(activeTab: string): void {\r\n        this.activeTab = activeTab;\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\ProjectsPage.tsx",["106"],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\UsersPage.tsx",["107"],"﻿import React from \"react\";\r\nimport { IUsersProps } from \"./IUsersProps\";\r\n\r\nexport class  UsersPage extends React.Component<IUsersProps> {\r\n    render() {\r\n        return(\r\n            <>\r\n                Пользователи\r\n            </>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\ProjectStore.tsx",["108"],"C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx",["109"],"﻿import { makeObservable, observable } from \"mobx\";\r\nimport { UserTaskViewModel } from \"../Typings/viewModels/UserTaskViewModel\";\r\nimport {TaskViewModel} from \"../Typings/viewModels/TaskViewModel\";\r\n\r\nclass TaskStore {\r\n    currentUserTasks: UserTaskViewModel[];\r\n    currentProjectTasks: TaskViewModel[];\r\n    userTasks: UserTaskViewModel[];\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            currentUserTasks: observable,\r\n            currentProjectTasks: observable\r\n        });\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        this.getCurrentUserTasks()\r\n            .then((userTasks) => {\r\n                this.currentUserTasks = userTasks;\r\n            });\r\n    }\r\n\r\n    async getCurrentUserTasks() {\r\n        const response = await fetch(\"/getusertasks\");\r\n        return await response.json();\r\n    }\r\n\r\n    async getTasks(projectId: number) {\r\n        const response = await fetch(\"/gettasks\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify({id: projectId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.currentProjectTasks = await response.json();\r\n        }\r\n    }\r\n}\r\n\r\nexport default TaskStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\CommentsStore.tsx",["110"],"﻿class CommentsStore {\r\n\r\n}\r\n\r\nexport default CommentsStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyTasks.tsx",["111","112"],"﻿import React from \"react\";\r\nimport { IMyTasksProps } from \"./IMyTasksProps\";\r\nimport { Table } from 'reactstrap';\r\nimport { TaskViewModel } from \"../../Typings/viewModels/TaskViewModel\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\n\r\nexport class MyTasks extends React.Component<IMyTasksProps> {\r\n    getTaskStatusTranslit(taskStatus: TaskStatus): string {\r\n        if(taskStatus === TaskStatus.Current) {\r\n            return \"Текущие\";\r\n        } else if(taskStatus === TaskStatus.Completed) {\r\n            return \"Законченные\";\r\n        } else if(taskStatus === TaskStatus.Future) {\r\n            return \"Будущие\";\r\n        } else {\r\n            return \"Текущие\";\r\n        }\r\n    }\r\n\r\n    filterTasks(taskStatus: TaskStatus): TaskViewModel[] {\r\n        return this.props.store.taskStore.currentUserTasks?.\r\n            filter(ut => ut.task.status === taskStatus)\r\n            .map(ut => {\r\n                return ut.task\r\n            });\r\n    }\r\n\r\n    renderMyTasks(tasks: TaskViewModel[]) {\r\n        return(\r\n            <Table bordered style={{backgroundColor: \"#C4DFE6\", color:\"003b46\"}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Номер</th>\r\n                        <th>Задача</th>\r\n                        <th>Дедлайн</th>\r\n                        <th>Статус</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                <tr key=\"1\">\r\n                    <th>id</th>\r\n                    <th>header</th>\r\n                    <th>deadlineDate</th>\r\n                    <th>status</th>\r\n                </tr>\r\n                    {tasks.map((task) => {\r\n                        return(\r\n                            <tr key={task.id}>\r\n                                <th>{task.id}</th>\r\n                                <th>{task.header}</th>\r\n                                <th>{task.deadlineDate}</th>\r\n                                <th>{task.status}</th>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        let tasks = this.filterTasks(this.props.tasksStatus);\r\n        return(\r\n            <>\r\n                <label>{this.getTaskStatusTranslit(this.props.tasksStatus)}</label>\r\n                {tasks !== undefined && this.renderMyTasks(tasks)}\r\n                {tasks === undefined && <div><span>Задач пока нет:)</span></div>}\r\n            </>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskStatus.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddProject.tsx",["113"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input, Dropdown, DropdownToggle, DropdownItem, DropdownMenu } from \"reactstrap\";\r\nimport Calendar from \"react-calendar\";\r\n\r\n@observer\r\nexport class AddProject extends React.Component<IProjectsProps> {\r\n    addProjectWindowOpen: boolean;\r\n    projectName: string = \"\";\r\n    description: string = \"\";\r\n    responsibleDropdownOpen: boolean;\r\n    startDate: Date | Date[];\r\n    deadline: Date | Date[];\r\n    responsiblePerson: number;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addProjectWindowOpen: observable\r\n        });\r\n    }\r\n\r\n    toggleAddProjectWindow() {\r\n        this.addProjectWindowOpen = !this.addProjectWindowOpen;\r\n    }\r\n\r\n    toggleResponsibleDropdownOpen() {\r\n        this.responsibleDropdownOpen = !this.responsibleDropdownOpen;\r\n    }\r\n\r\n    renderAddProjectWindow() {\r\n        let users = this.props.store.userStore.users;\r\n        return(\r\n            <Modal isOpen={this.addProjectWindowOpen} toggle={this.toggleAddProjectWindow}>\r\n                <ModalHeader>\r\n                    СОЗДАНИЕ ПРОЕКТА\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"row justify-content-center\">\r\n                        <label>Название проекта</label>\r\n                        <Input onChange={(e) => this.inputProjectName(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <label>Описание проекта</label>\r\n                        <Input onChange={(e) => this.inputDescription(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <label>Дата начала</label>\r\n                            <Calendar\r\n                                value={this.startDate}\r\n                                onChange={(date) => this.inputDate(date, \"startDate\")}\r\n                            />\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <label>Дедлайн</label>\r\n                            <Calendar\r\n                                value={this.deadline}\r\n                                onChange={(date) => this.inputDate(date, \"deadline\")}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <label>Ответственный</label>\r\n                        <Dropdown isOpen={this.responsibleDropdownOpen} toggle={this.toggleResponsibleDropdownOpen}>\r\n                            <DropdownToggle/>\r\n                            <DropdownMenu>\r\n                                {users.map((user, index) => {\r\n                                    return(\r\n                                        <>\r\n                                            {index === 0 && <DropdownItem key={index} header onClick={() => this.chooseResponsiblePerson(user.id)}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                                            {index !== 0 && <DropdownItem key={index}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                                        </>\r\n                                    );\r\n                                })}\r\n                            </DropdownMenu>\r\n                        </Dropdown>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                    onClick={this.saveProject}>СОХРАНИТЬ</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-lg-2 col-lg-offset-10 col-md-4 col-md-offset-8 col-sm-6 col-sm-offet-3 col-xs-12\">\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={this.toggleAddProjectWindow}>Создать проект</Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.addProjectWindowOpen && this.renderAddProjectWindow()}\r\n                {!this.addProjectWindowOpen && this.renderButton()}\r\n            </>\r\n        )\r\n    }\r\n\r\n    inputProjectName(event: React.FormEvent<HTMLInputElement>) {\r\n        this.projectName = event.currentTarget.value;\r\n        console.log(\"this\", this);\r\n    }\r\n\r\n    inputDescription(event: React.FormEvent<HTMLInputElement>) {\r\n        this.description = event.currentTarget.value;\r\n    }\r\n\r\n    inputDate(date: Date | Date[], dateType: string) {\r\n        if(dateType === \"startDate\") {\r\n            this.startDate = date;\r\n        } else if(dateType === \"deadline\") {\r\n            this.deadline = date;\r\n        }\r\n    }\r\n\r\n    chooseResponsiblePerson(userId: number) {\r\n        this.responsiblePerson = userId;\r\n    }\r\n\r\n    saveProject() {\r\n        this.props.store.projectStore.addNewProject(this.projectName, this.description, this.startDate, this.deadline, this.responsiblePerson);\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Projects.tsx",["114","115"],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Project.tsx",["116"],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddUserToProject.tsx",["117"],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\AddTask.tsx",["118"],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Tasks.tsx",["119"],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskRole.ts",[],{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":9,"column":20,"nodeType":"126","messageId":"127","endLine":9,"endColumn":28},{"ruleId":"124","severity":1,"message":"128","line":10,"column":9,"nodeType":"126","messageId":"127","endLine":10,"endColumn":19},{"ruleId":"129","severity":1,"message":"130","line":1,"column":1,"nodeType":"131","messageId":"132","fix":"133"},{"ruleId":"124","severity":1,"message":"134","line":1,"column":10,"nodeType":"126","messageId":"127","endLine":1,"endColumn":16},{"ruleId":"129","severity":1,"message":"130","line":1,"column":1,"nodeType":"131","messageId":"132","fix":"135"},{"ruleId":"129","severity":1,"message":"130","line":1,"column":1,"nodeType":"131","messageId":"132","fix":"136"},{"ruleId":"129","severity":1,"message":"130","line":1,"column":1,"nodeType":"131","messageId":"132","fix":"137"},{"ruleId":"129","severity":1,"message":"130","line":1,"column":1,"nodeType":"131","messageId":"132","fix":"138"},{"ruleId":"129","severity":1,"message":"130","line":1,"column":1,"nodeType":"131","messageId":"132","fix":"139"},{"ruleId":"129","severity":1,"message":"130","line":1,"column":1,"nodeType":"131","messageId":"132","fix":"140"},{"ruleId":"129","severity":1,"message":"130","line":1,"column":1,"nodeType":"131","messageId":"132","fix":"141"},{"ruleId":"129","severity":1,"message":"130","line":1,"column":1,"nodeType":"131","messageId":"132","fix":"142"},{"ruleId":"129","severity":1,"message":"130","line":1,"column":1,"nodeType":"131","messageId":"132","fix":"143"},{"ruleId":"144","severity":1,"message":"145","line":21,"column":59,"nodeType":"146","messageId":"147","endLine":21,"endColumn":61,"fix":"148"},{"ruleId":"129","severity":1,"message":"130","line":1,"column":1,"nodeType":"131","messageId":"132","fix":"149"},{"ruleId":"129","severity":1,"message":"130","line":1,"column":1,"nodeType":"131","messageId":"132","fix":"150"},{"ruleId":"151","severity":1,"message":"152","line":37,"column":33,"nodeType":"153","endLine":37,"endColumn":120},{"ruleId":"129","severity":1,"message":"130","line":1,"column":1,"nodeType":"131","messageId":"132","fix":"154"},{"ruleId":"129","severity":1,"message":"130","line":1,"column":1,"nodeType":"131","messageId":"132","fix":"155"},{"ruleId":"129","severity":1,"message":"130","line":1,"column":1,"nodeType":"131","messageId":"132","fix":"156"},{"ruleId":"129","severity":1,"message":"130","line":1,"column":1,"nodeType":"131","messageId":"132","fix":"157"},"no-native-reassign",["158"],"no-negated-in-lhs",["159"],"@typescript-eslint/no-unused-vars","'Provider' is defined but never used.","Identifier","unusedVar","'observable' is defined but never used.","unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"160","text":"161"},"'action' is defined but never used.",{"range":"162","text":"161"},{"range":"163","text":"161"},{"range":"164","text":"161"},{"range":"165","text":"161"},{"range":"166","text":"161"},{"range":"167","text":"161"},{"range":"168","text":"161"},{"range":"169","text":"161"},{"range":"170","text":"161"},"dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"171","text":"172"},{"range":"173","text":"161"},{"range":"174","text":"161"},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",{"range":"175","text":"161"},{"range":"176","text":"161"},{"range":"177","text":"161"},{"range":"178","text":"161"},"no-global-assign","no-unsafe-negation",[-1,0],"",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[822,838],"\r\n            ?.",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]]