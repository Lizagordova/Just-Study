[{"C:\\SuperSoft\\SuperSoft\\client\\src\\index.tsx":"1","C:\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts":"2","C:\\SuperSoft\\SuperSoft\\client\\src\\App.tsx":"3","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx":"4","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx":"5","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Main\\Main.tsx":"6","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyWorkPage.tsx":"7","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\ProjectsPage.tsx":"8","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\UsersPage.tsx":"9","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\ProjectStore.tsx":"10","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx":"11","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\CommentsStore.tsx":"12","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyTasks.tsx":"13","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskStatus.ts":"14","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddProject.tsx":"15","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Projects.tsx":"16","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Project.tsx":"17","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddUserToProject.tsx":"18","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\AddTask.tsx":"19","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Tasks.tsx":"20","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskRole.ts":"21","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\Users.tsx":"22","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentGroupViewModel.ts":"23","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserReadModel.ts":"24","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\Role.ts":"25","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\User.tsx":"26","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\AddUser.tsx":"27","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\ProjectViewModel.ts":"28","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserViewModel.ts":"29","C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\renderSpinner.tsx":"30","C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\translater.tsx":"31","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Authorization.tsx":"32","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Task.tsx":"33","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\TaskViewModel.ts":"34","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskPriority.ts":"35","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskType.ts":"36","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\ProjectRole.ts":"37","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Comments\\Comments.tsx":"38","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Comments\\AddComment.tsx":"39","C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\formatDate.tsx":"40"},{"size":704,"mtime":1607787725088,"results":"41","hashOfConfig":"42"},{"size":425,"mtime":1607420618541,"results":"43","hashOfConfig":"42"},{"size":1092,"mtime":1608407182954,"results":"44","hashOfConfig":"42"},{"size":1207,"mtime":1608718514662,"results":"45","hashOfConfig":"42"},{"size":2405,"mtime":1608718319712,"results":"46","hashOfConfig":"42"},{"size":2558,"mtime":1608717577926,"results":"47","hashOfConfig":"42"},{"size":3541,"mtime":1608557262746,"results":"48","hashOfConfig":"42"},{"size":1005,"mtime":1608490669706,"results":"49","hashOfConfig":"42"},{"size":673,"mtime":1608370217935,"results":"50","hashOfConfig":"42"},{"size":3199,"mtime":1608710158522,"results":"51","hashOfConfig":"42"},{"size":2923,"mtime":1608619065455,"results":"52","hashOfConfig":"42"},{"size":1936,"mtime":1608573366425,"results":"53","hashOfConfig":"42"},{"size":3840,"mtime":1608621279888,"results":"54","hashOfConfig":"42"},{"size":256,"mtime":1608718400080,"results":"55","hashOfConfig":"42"},{"size":6943,"mtime":1608709178403,"results":"56","hashOfConfig":"42"},{"size":3253,"mtime":1608618370542,"results":"57","hashOfConfig":"42"},{"size":8152,"mtime":1608710424740,"results":"58","hashOfConfig":"42"},{"size":5796,"mtime":1608578103568,"results":"59","hashOfConfig":"42"},{"size":12948,"mtime":1608709094711,"results":"60","hashOfConfig":"42"},{"size":3479,"mtime":1608621261561,"results":"61","hashOfConfig":"42"},{"size":252,"mtime":1608718400051,"results":"62","hashOfConfig":"42"},{"size":1206,"mtime":1608370045224,"results":"63","hashOfConfig":"42"},{"size":366,"mtime":1608718399843,"results":"64","hashOfConfig":"42"},{"size":399,"mtime":1608718400000,"results":"65","hashOfConfig":"42"},{"size":290,"mtime":1608718400071,"results":"66","hashOfConfig":"42"},{"size":3678,"mtime":1608530673218,"results":"67","hashOfConfig":"42"},{"size":6700,"mtime":1608617434826,"results":"68","hashOfConfig":"42"},{"size":376,"mtime":1608718399887,"results":"69","hashOfConfig":"42"},{"size":403,"mtime":1608718399929,"results":"70","hashOfConfig":"42"},{"size":164,"mtime":1608361997793,"results":"71","hashOfConfig":"42"},{"size":2262,"mtime":1608535252587,"results":"72","hashOfConfig":"42"},{"size":3093,"mtime":1608489549893,"results":"73","hashOfConfig":"42"},{"size":11518,"mtime":1608555987750,"results":"74","hashOfConfig":"42"},{"size":665,"mtime":1608718399900,"results":"75","hashOfConfig":"42"},{"size":247,"mtime":1608718400089,"results":"76","hashOfConfig":"42"},{"size":230,"mtime":1608718400084,"results":"77","hashOfConfig":"42"},{"size":218,"mtime":1608718400056,"results":"78","hashOfConfig":"42"},{"size":2409,"mtime":1608573366404,"results":"79","hashOfConfig":"42"},{"size":1756,"mtime":1608561186326,"results":"80","hashOfConfig":"42"},{"size":237,"mtime":1608621198055,"results":"81","hashOfConfig":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"18g08rn",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"95","usedDeprecatedRules":"84"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"98","usedDeprecatedRules":"84"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"101","usedDeprecatedRules":"84"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"104","usedDeprecatedRules":"84"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"107","usedDeprecatedRules":"84"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"110","usedDeprecatedRules":"84"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"113","usedDeprecatedRules":"84"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"116","usedDeprecatedRules":"84"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"121","usedDeprecatedRules":"84"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"124","usedDeprecatedRules":"84"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"127","usedDeprecatedRules":"84"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"130","usedDeprecatedRules":"84"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"133","usedDeprecatedRules":"84"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"136","usedDeprecatedRules":"84"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"141","usedDeprecatedRules":"84"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"150","usedDeprecatedRules":"84"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"153","usedDeprecatedRules":"84"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"160","usedDeprecatedRules":"84"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"163","usedDeprecatedRules":"84"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"166","usedDeprecatedRules":"84"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"169","usedDeprecatedRules":"84"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"180","usedDeprecatedRules":"84"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"183","usedDeprecatedRules":"84"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"186","usedDeprecatedRules":"84"},"C:\\SuperSoft\\SuperSoft\\client\\src\\index.tsx",[],["187","188"],"C:\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\App.tsx",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx",["189","190"],"C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx",["191"],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Main\\Main.tsx",["192"],"﻿import React from \"react\";\r\nimport { IMainProps } from \"./IMainProps\";\r\nimport { Card, CardHeader, Nav, NavItem, Button } from \"reactstrap\";\r\nimport { NavLink, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { MyWorkPage } from \"../MyWork/MyWorkPage\";\r\nimport { ProjectsPage } from \"../Projects/ProjectsPage\";\r\nimport { UsersPage } from \"../Users/UsersPage\";\r\nimport { observer } from  \"mobx-react\";\r\nimport 'react-calendar/dist/Calendar.css'\r\n\r\n@observer\r\nexport class Main extends React.Component<IMainProps> {\r\n    render() {\r\n        return(\r\n            <>\r\n                <Card>\r\n                    <CardHeader>\r\n                        <Nav tabs className=\"nav\">\r\n                              <NavItem>\r\n                                  <NavLink to=\"/mywork\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}} activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>МОЯ РАБОТА</NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink to=\"/projects\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}} activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>ПРОЕКТЫ</NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink to=\"/users\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}} activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>ПОЛЬЗОВАТЕЛИ</NavLink>\r\n                              </NavItem>\r\n                            <Button\r\n                                outline color=\"primary\"\r\n                                onClick={() => this.exit()}>\r\n                                ВЫЙТИ\r\n                            </Button>\r\n                        </Nav>\r\n                    </CardHeader>\r\n                </Card>\r\n                <Switch>\r\n                    <Route exact path=\"/mywork\" \r\n                         render={(props) => <MyWorkPage store={this.props.store} />} />\r\n                    <Route exact path=\"/projects\"\r\n                         render={(props) => <ProjectsPage store={this.props.store} />} />\r\n                    <Route exact path=\"/users\"\r\n                         render={(props) => <UsersPage store={this.props.store} />} />\r\n                    <Redirect to=\"/mywork\" />\r\n                </Switch>\r\n            </>\r\n        );\r\n    }\r\n\r\n    exit() {\r\n        this.props.store.reset();\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyWorkPage.tsx",["193"],"﻿import React from \"react\";\r\nimport { Col, Nav, NavItem, Row, TabContent, TabPane, NavLink } from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\nimport { MyTasks } from \"./MyTasks\";\r\nimport { observer } from \"mobx-react\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport { IMyWorkProps } from \"./IMyWorkProps\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\n\r\n@observer\r\nexport class  MyWorkPage extends React.Component<IMyWorkProps> {\r\n    activeTab: string = \"1\";\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n           activeTab: observable\r\n       });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{marginTop: 35}} className=\"container-fluid\">\r\n            <Row>\r\n                <Col sm=\"12\">\r\n                    <Nav tabs style={{fontSize: \"1.4em\"}}>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                to=\"#\"\r\n                                activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                className={classnames({ active: this.activeTab === \"1\"})}\r\n                                onClick={(e) => this.toggleTab(\"1\")}\r\n                            >Текущие</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                to=\"#\"\r\n                                activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                className={classnames({ active: this.activeTab === \"2\"})}\r\n                                onClick={(e) => this.toggleTab(\"2\")}>Законченные</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                to=\"#\"\r\n                                activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                className={classnames({ active: this.activeTab === \"3\"})}\r\n                                onClick={(e) => this.toggleTab(\"3\")}>Будущие</NavLink>\r\n                        </NavItem>\r\n                    </Nav>\r\n                    <TabContent activeTab={this.activeTab}>\r\n                        <TabPane tabId=\"1\">\r\n                            <Row>\r\n                                <Col sm=\"12\">\r\n                                    <MyTasks store={this.props.store} tasksStatus={TaskStatus.InProgress}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </TabPane>\r\n                        <TabPane tabId=\"2\">\r\n                            <Row>\r\n                                <Col sm=\"12\">\r\n                                    <MyTasks store={this.props.store} tasksStatus={TaskStatus.Completed}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </TabPane>\r\n                        <TabPane tabId=\"3\">\r\n                            <Row>\r\n                                <Col sm=\"12\">\r\n                                    <MyTasks store={this.props.store} tasksStatus={TaskStatus.Future}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </TabPane>\r\n                    </TabContent>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n    }\r\n\r\n    @action\r\n    toggleTab(activeTab: string): void {\r\n        this.activeTab = activeTab;\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\ProjectsPage.tsx",["194"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { AddProject } from \"./AddProject\";\r\nimport { Projects } from \"./Projects\";\r\nimport { makeObservable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nexport class  ProjectsPage extends React.Component<IProjectsProps> {\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\" style={{marginTop: \"30px\"}}>\r\n                <div className=\"row justify-content-center\">\r\n                    <AddProject store={this.props.store} />\r\n                </div>\r\n                <div className=\"row justify-content-center\" style={{marginTop: \"20px\"}}>\r\n                    <div className=\"col-lg-12 col-sm-12\">\r\n                        <Projects store={this.props.store} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\UsersPage.tsx",["195"],"﻿import React from \"react\";\r\nimport { IUsersProps } from \"./IUsersProps\";\r\nimport { Users } from \"./Users\";\r\nimport {AddUser} from \"./AddUser\";\r\n\r\nexport class  UsersPage extends React.Component<IUsersProps> {\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\" style={{marginTop: \"30px\"}}>\r\n                <div className=\"row justify-content-center\">\r\n                    <AddUser store={this.props.store}/>\r\n                </div>\r\n                <div className=\"row justify-content-center\" style={{marginTop: \"20px\"}}>\r\n                    <Users store={this.props.store}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\ProjectStore.tsx",["196","197"],"﻿import { ProjectViewModel } from \"../Typings/viewModels/ProjectViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { ProjectRole } from \"../Typings/enums/ProjectRole\";\r\nimport { UserViewModel } from \"../Typings/viewModels/UserViewModel\";\r\n\r\nclass ProjectStore {\r\n    public projects: ProjectViewModel[] = new Array<ProjectViewModel>(0);\r\n    public choosenProject: ProjectViewModel = new ProjectViewModel();\r\n    public choosenProjectUsers: UserViewModel[] = new Array<UserViewModel>(0);\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            projects: observable,\r\n            choosenProject: observable,\r\n            choosenProjectUsers: observable\r\n        });\r\n        this.getProjects();\r\n    }\r\n\r\n    setChoosenProject(project: ProjectViewModel): void {\r\n        this.choosenProject = project;\r\n    }\r\n\r\n    async getProjectUsers(projectId: number) {\r\n        const response = await fetch(\"/getprojectusers\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: projectId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.choosenProjectUsers = await response.json();\r\n        }\r\n    }\r\n\r\n    async getProjects() {\r\n        const response = await fetch(\"/getprojects\");\r\n        if(response.status === 200) {\r\n            let projects = await response.json();\r\n            this.projects = projects;\r\n            this.choosenProject = projects[0];\r\n        } else {\r\n            return new Array<ProjectViewModel>(0);\r\n        }\r\n    }\r\n\r\n    async addNewProject(name: string, description: string, startDate: Date | Date[], deadlineDate: Date | Date[], responsibleId: number) {\r\n        const response = await fetch(\"/addorupdateproject\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({ name: name, description: description,startDate: startDate, deadlineDate: deadlineDate, responsiblePerson: responsibleId })\r\n        });\r\n        if(response.status === 200) {\r\n            const project = await response.json();\r\n            this.getProjects();\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n    \r\n    async attachUserToProject(projectId: number, userId: number, projectRole: ProjectRole) {\r\n        const response = await fetch(\"/attachusertoproject\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({userId: userId, role: projectRole, projectId: projectId})\r\n        });\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async deleteProject(projectId: number) {\r\n        console.log(\"i want to delete project\", projectId);\r\n        const response = await fetch(\"/deleteproject\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: projectId})\r\n        });\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default ProjectStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx",["198"],"﻿import { makeObservable, observable } from \"mobx\";\r\nimport { UserTaskViewModel } from \"../Typings/viewModels/UserTaskViewModel\";\r\nimport { TaskViewModel } from \"../Typings/viewModels/TaskViewModel\";\r\nimport { TaskStatus } from \"../Typings/enums/TaskStatus\";\r\nimport { TaskType } from \"../Typings/enums/TaskType\";\r\nimport {TaskPriority} from \"../Typings/enums/TaskPriority\";\r\n\r\nclass TaskStore {\r\n    currentUserTasks: UserTaskViewModel[];\r\n    currentProjectTasks: TaskViewModel[] = new Array<TaskViewModel>();\r\n    public completedPercentage: number = 0;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            currentUserTasks: observable,\r\n            currentProjectTasks: observable,\r\n            completedPercentage: observable\r\n        });\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        this.getCurrentUserTasks();\r\n    }\r\n\r\n    async getCurrentUserTasks() {\r\n        const response = await fetch(\"/getusertasks\");\r\n        if(response.status === 200) {\r\n            this.currentUserTasks = await response.json();\r\n        } else {\r\n            this.currentUserTasks = new Array<UserTaskViewModel>(0);\r\n        }\r\n    }\r\n\r\n    async getTasks(projectId: number) {\r\n        const response = await fetch(\"/gettasks\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: projectId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.currentProjectTasks = await response.json();\r\n            this.computeCompletedPercentage();\r\n        }\r\n    }\r\n\r\n    computeCompletedPercentage() {\r\n        let completedTasks = this.currentProjectTasks.filter(t => t.status === TaskStatus.Completed);\r\n        let percentage = completedTasks.length / this.currentProjectTasks.length * 100;\r\n        this.completedPercentage = isNaN(percentage) ? 100 : percentage;\r\n    }\r\n\r\n    async addOrUpdateTask(header: string, description: string, startDate: Date | Date[], deadlineDate: Date | Date[], taskType: TaskType, status: TaskStatus, priority: TaskPriority, tester: number, responsible: number, author: number, id: number = 0, projectId: number = 0) {\r\n        const response = await fetch(\"/addorupdatetask\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: id, projectId: projectId, header: header, description: description, startDate: startDate, deadlineDate: deadlineDate, taskType: taskType, status: status, priority: priority, tester: tester, responsible: responsible, author: author})\r\n        });\r\n        if(response.status === 200) {\r\n            const task = await response.json();\r\n            this.currentProjectTasks.push(task);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default TaskStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\CommentsStore.tsx",["199"],"﻿import { CommentGroupViewModel } from \"../Typings/viewModels/CommentGroupViewModel\";\r\nimport { UserReadModel } from \"../Typings/viewModels/UserReadModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\n\r\nclass CommentsStore {\r\n    currentCommentGroup: CommentGroupViewModel = new CommentGroupViewModel();\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            currentCommentGroup: observable\r\n        });\r\n    }\r\n\r\n    async getCurrentTaskComments(taskId: number) {\r\n        const response = await fetch(\"/getcurrenttaskcommentgroup\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({taskId: taskId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.currentCommentGroup = await response.json();\r\n        } else {\r\n            this.currentCommentGroup = new CommentGroupViewModel();\r\n        }\r\n    }\r\n\r\n    async addComment(text: string, userId: number, groupId: number): Promise<number> {\r\n        const user = new UserReadModel();\r\n        user.id = userId;\r\n        const response = await fetch(\"/addorupdatecomment\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({text: text, groupId: groupId, user: user})\r\n        });\r\n        if(response.status === 200) {\r\n            return await response.json();\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    async deleteComment(commentId: number) {\r\n        const response = await fetch(\"/deletecomment\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: commentId})\r\n        });\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default CommentsStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyTasks.tsx",["200","201"],"﻿import React from \"react\";\r\nimport { IMyTasksProps } from \"./IMyTasksProps\";\r\nimport { Alert, Modal, Table } from 'reactstrap';\r\nimport { TaskViewModel } from \"../../Typings/viewModels/TaskViewModel\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { Task } from \"../Tasks/Task\";\r\nimport { UserTaskViewModel } from \"../../Typings/viewModels/UserTaskViewModel\";\r\nimport { translatePriority, translateTaskRole, translateTaskType } from \"../../functions/translater\";\r\nimport {formatDate} from \"../../functions/formatDate\";\r\n\r\n@observer\r\nexport class MyTasks extends React.Component<IMyTasksProps> {\r\n    taskOpen: boolean;\r\n    taskToRender: TaskViewModel;\r\n\r\n    componentDidMount(): void {\r\n        this.props.store.taskStore.getCurrentUserTasks();\r\n    }\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            taskOpen: observable\r\n        });\r\n    }\r\n\r\n    filterTasks(taskStatus: TaskStatus, currentUserTasks: UserTaskViewModel[]): UserTaskViewModel[] {\r\n        return currentUserTasks?.\r\n            filter(ut => ut.task.status === taskStatus);\r\n    }\r\n\r\n    renderAlert() {\r\n        return(\r\n            <Alert color=\"primary\">Задач пока нет!!!</Alert>\r\n        );\r\n    }\r\n\r\n    renderMyTasks(userTasks: UserTaskViewModel[]) {\r\n        return(\r\n            <Table bordered style={{backgroundColor: \"#fff\", color:\"#003B46\", marginTop: \"2%\", fontSize: \"1.2em\"}}>\r\n                {userTasks.length === 0 && this.renderAlert()}\r\n                {userTasks.length !== 0 && <thead style={{color:\"fff\"}}>\r\n                    <tr>\r\n                        <th>Номер</th>\r\n                        <th>Задача</th>\r\n                        <th>Дедлайн</th>\r\n                        <th>Приоритет</th>\r\n                        <th>Роль</th>\r\n                        <th>Тип</th>\r\n                    </tr>\r\n                </thead>}\r\n                {userTasks.length !== 0 && <tbody>\r\n                    {userTasks.map((ut) => {\r\n                        return(\r\n                            <tr key={ut.task.id} onClick={() => this.taskOpenToggle(ut.task)}>\r\n                                <th>{ut.task.id}</th>\r\n                                <th>{ut.task.header}</th>\r\n                                <th>{formatDate(ut.task.deadlineDate)}</th>\r\n                                <th>{translatePriority(ut.task.priority)}</th>\r\n                                <th>{translateTaskRole(ut.role)}</th>\r\n                                <th>{translateTaskType(ut.task.taskType)}</th>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>}\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    renderTask() {\r\n        return(\r\n            <Modal\r\n                isOpen={this.taskOpen}\r\n                toggle={() => this.taskOpenToggle()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                   onClick={() => this.taskOpenToggle()}/>\r\n                <Task store={this.props.store} task={this.taskToRender}/>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let currentTasks = this.props.store.taskStore.currentUserTasks;\r\n        let tasks = this.filterTasks(this.props.tasksStatus, currentTasks);\r\n        return(\r\n            <>\r\n                {tasks !== undefined && this.renderMyTasks(tasks)}\r\n                {tasks === undefined && this.renderAlert()}\r\n                {this.taskOpen && this.renderTask()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    taskOpenToggle(task: TaskViewModel = new TaskViewModel()) {\r\n        this.taskOpen = !this.taskOpen;\r\n        this.taskToRender = task;\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskStatus.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddProject.tsx",["202"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input, Dropdown, DropdownToggle, DropdownItem, DropdownMenu, Label } from \"reactstrap\";\r\nimport Calendar from \"react-calendar\";\r\nimport {UserViewModel} from \"../../Typings/viewModels/UserViewModel\";\r\n\r\n@observer\r\nexport class AddProject extends React.Component<IProjectsProps> {\r\n    addProjectWindowOpen: boolean;\r\n    projectName: string = \"\";\r\n    description: string = \"\";\r\n    responsibleDropdownOpen: boolean;\r\n    startDate: Date | Date[] = new Date();\r\n    deadline: Date | Date[] = new Date();\r\n    responsiblePerson: UserViewModel = new UserViewModel();\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addProjectWindowOpen: observable,\r\n            projectName: observable,\r\n            description: observable,\r\n            responsibleDropdownOpen: observable,\r\n            startDate: observable,\r\n            deadline: observable,\r\n            responsiblePerson: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.responsiblePerson = this.props.store.userStore.users[0];\r\n    }\r\n\r\n    toggleAddProjectWindow() {\r\n        this.addProjectWindowOpen = !this.addProjectWindowOpen;\r\n    }\r\n\r\n    toggleResponsibleDropdown() {\r\n        this.responsibleDropdownOpen = !this.responsibleDropdownOpen;\r\n    }\r\n\r\n    renderAddProjectWindow() {\r\n        let users = this.props.store.userStore.users;\r\n        let responsible = this.responsiblePerson;\r\n        return(\r\n            <Modal isOpen={this.addProjectWindowOpen} toggle={() => this.toggleAddProjectWindow()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                   onClick={() => this.toggleAddProjectWindow()}/>\r\n                <ModalHeader>\r\n                    СОЗДАНИЕ ПРОЕКТА\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label style={{width: \"100%\"}} align=\"center\">Название проекта</Label>\r\n                        <Input style={{width: \"90%\"}} onChange={(e) => this.inputProjectName(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\" style={{marginTop: \"10px\"}}>\r\n                        <Label style={{width: \"100%\"}} align=\"center\">Описание проекта</Label>\r\n                        <textarea style={{width: \"90%\"}} onChange={(e) => this.inputDescription(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">Дата начала</Label>\r\n                            <div style={{width: \"100%\", paddingLeft: \"15%\"}}>\r\n                                <Calendar\r\n                                    value={this.startDate}\r\n                                    onChange={(date) => this.inputDate(date, \"startDate\")}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">Дедлайн</Label>\r\n                            <div style={{width: \"100%\", paddingLeft: \"15%\"}}>\r\n                                <Calendar\r\n                                    value={this.deadline}\r\n                                    onChange={(date) => this.inputDate(date, \"deadline\")}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label style={{width: \"100%\"}} align=\"center\">Ответственный</Label>\r\n                        <Dropdown isOpen={this.responsibleDropdownOpen} toggle={() => this.toggleResponsibleDropdown()}>\r\n                            <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{responsible !== undefined ? `${responsible.firstName} ${responsible.lastName}` : \"Пока нет пользователей\"}</DropdownToggle>\r\n                            <DropdownMenu>\r\n                                {users.map((user, index) => {\r\n                                    return(\r\n                                        <>\r\n                                            <DropdownItem key={index} onClick={() => this.chooseResponsiblePerson(user)}>{user.firstName + \" \" + user.lastName}</DropdownItem>\r\n                                        </>\r\n                                    );\r\n                                })}\r\n                            </DropdownMenu>\r\n                        </Dropdown>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.saveProject()}>\r\n                        СОХРАНИТЬ\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <>\r\n                <div className=\"col-6\"/>\r\n                <div className=\"col-6\">\r\n                    <Button\r\n                        style={{width: \"100%\", borderColor: \"#66A5AD\", color: \"#66A5AD\", backgroundColor: \"#fff\"}}\r\n                        onClick={() => this.toggleAddProjectWindow()}>Создать проект</Button>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.addProjectWindowOpen && this.renderAddProjectWindow()}\r\n                {!this.addProjectWindowOpen && this.renderButton()}\r\n            </>\r\n        )\r\n    }\r\n\r\n    inputProjectName(event: React.FormEvent<HTMLInputElement>) {\r\n        this.projectName = event.currentTarget.value;\r\n    }\r\n\r\n    inputDescription(event: React.FormEvent<HTMLTextAreaElement>) {\r\n        this.description = event.currentTarget.value;\r\n    }\r\n\r\n    inputDate(date: Date | Date[], dateType: string) {\r\n        if(dateType === \"startDate\") {\r\n            this.startDate = date;\r\n        } else if(dateType === \"deadline\") {\r\n            this.deadline = date;\r\n        }\r\n    }\r\n\r\n    chooseResponsiblePerson(user: UserViewModel) {\r\n        this.responsiblePerson = user;\r\n    }\r\n\r\n    saveProject() {\r\n        this.props.store.projectStore\r\n            .addNewProject(this.projectName, this.description, this.startDate, this.deadline, this.responsiblePerson.id)\r\n            .then(() => this.addProjectWindowOpen = false);\r\n}\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Projects.tsx",["203"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { ProjectViewModel } from \"../../Typings/viewModels/ProjectViewModel\";\r\nimport { Tab, Nav, Alert } from \"react-bootstrap\";\r\nimport { Project } from \"./Project\";\r\nimport { observer } from \"mobx-react\";\r\nimport { renderSpinner } from \"../../functions/renderSpinner\";\r\n\r\n@observer\r\nexport class Projects extends React.Component<IProjectsProps> {\r\n    renderMenu(projects: ProjectViewModel[], choosenProject: ProjectViewModel) {\r\n        // @ts-ignore\r\n        return(\r\n            <Tab.Container defaultActiveKey={`${choosenProject.id === undefined ? 0 : choosenProject.id.toString()}`}>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-4\">\r\n                        <Nav variant=\"pills\" className=\"flex-column\" activeKey={`${choosenProject.id === undefined ? 0 : choosenProject.id.toString()}`}>\r\n                            <div className=\"container\">\r\n                                {projects.map((project) => {\r\n                                    return (\r\n                                        <div className=\"row\">\r\n                                            <Nav.Item key={project.id}\r\n                                                 style={{width: \"100%\"}}\r\n                                                 onClick={() => {this.changeData(project)}}>\r\n                                                <Nav.Link eventKey={project.id}>{project.name}</Nav.Link>\r\n                                            </Nav.Item>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </Nav>\r\n                    </div>\r\n                    <div className=\"col-8\">\r\n                        <Tab.Content>\r\n                            {projects.map((project) => {\r\n                                return (\r\n                                    <Tab.Pane eventKey={project.id}\r\n                                         key={project.id}>\r\n                                        <Project store={this.props.store} />\r\n                                    </Tab.Pane>\r\n                                );\r\n                            })}\r\n                        </Tab.Content>\r\n                    </div>\r\n                </div>\r\n            </Tab.Container>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let projects = this.props.store.projectStore.projects;\r\n        let choosenProject =  this.props.store.projectStore.choosenProject;\r\n        return(\r\n            <>\r\n                {projects.length === 0 && <Alert variant=\"primary\">\r\n                    <span>Пока нет никаких проектов</span>\r\n                </Alert>}\r\n                {choosenProject !== undefined && this.renderMenu(projects, choosenProject)}\r\n                {choosenProject === undefined && renderSpinner()}\r\n            </>\r\n        )\r\n    }\r\n\r\n    changeData(project: ProjectViewModel) {\r\n        this.props.store.projectStore.setChoosenProject(project);\r\n        this.props.store.projectStore.getProjectUsers(project.id);\r\n        this.props.store.taskStore.getTasks(project.id)\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Project.tsx",["204"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { AddTask } from \"../Tasks/AddTask\";\r\nimport { AddUserToProject } from \"./AddUserToProject\";\r\nimport { Tasks } from \"../Tasks/Tasks\";\r\nimport { ProjectViewModel } from \"../../Typings/viewModels/ProjectViewModel\";\r\nimport { Card, CardText, CardTitle, Label } from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\nimport { Col, Nav, NavItem, Row, TabContent, TabPane, NavLink, Alert } from \"reactstrap\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { renderSpinner } from \"../../functions/renderSpinner\";\r\nimport { observer } from \"mobx-react\";\r\nimport Circle from \"react-circle\";\r\nimport { formatDate } from \"../../functions/formatDate\";\r\n\r\n@observer\r\nexport class Project extends React.Component<IProjectsProps> {\r\n    activeTab: string = \"1\";\r\n    loaded: boolean;\r\n    notDeleted: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            activeTab: observable,\r\n            loaded: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.props.store.projectStore.getProjects();\r\n        this.props.store.taskStore.getTasks(this.props.store.projectStore.choosenProject.id)\r\n            .then(() => this.loaded = true);\r\n    }\r\n\r\n    renderProjectDiagram() {\r\n        let completedPercentage = this.props.store.taskStore.completedPercentage;\r\n        return (\r\n            <Circle\r\n                size=\"300\"\r\n                progress={completedPercentage}\r\n                />\r\n        );\r\n    }\r\n\r\n    getResponsible(responsibleId: number) {\r\n        let responsible = this.props.store.userStore.users.filter(u => u.id === responsibleId)[0];\r\n        if(responsible === undefined) {\r\n            return undefined;\r\n        } else {\r\n            return responsible;\r\n        }\r\n    }\r\n\r\n    renderResponsible(responsible: UserViewModel | undefined) {\r\n        if(responsible === undefined) {\r\n            return(\r\n                <Alert>Руководитель не выбран</Alert>\r\n            );\r\n        } else {\r\n            return(\r\n                <CardText>Руководитель: <span>{responsible?.firstName} {responsible?.lastName}</span></CardText>\r\n            )\r\n        }\r\n    }\r\n\r\n    renderProjectInfo(project: ProjectViewModel) {\r\n        let responsible = this.getResponsible(project.responsiblePerson);\r\n        return (\r\n            <div className=\"row justify-content-center\" style={{marginTop: \"35px\"}}>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                    <Card style={{backgroundColor: \"#66A5AD\", color: \"#fff\"}}>\r\n                        <CardTitle style={{fontSize: \"1.3em\"}}>{project.name}</CardTitle>\r\n                        {this.renderResponsible(responsible)}\r\n                        <CardText><Label style={{width: \"100%\", fontSize: \"1.2em\"}}>Дата начала:</Label> {formatDate(project.startDate)}</CardText>\r\n                        <CardText><Label style={{width: \"100%\", fontSize: \"1.2em\"}}>Дедлайн:</Label> {formatDate(project.deadlineDate)}</CardText>\r\n                        <CardText><Label style={{width: \"100%\", fontSize: \"1.2em\"}}>Описание:</Label> {project.description}</CardText>\r\n                    </Card>\r\n                </div>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                    {this.renderProjectDiagram()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderTasksMenu() {\r\n        return(\r\n            <div style={{marginTop: 35}} className=\"container-fluid\">\r\n                <Row>\r\n                    <Col sm=\"12\">\r\n                        <Nav tabs>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    className={classnames({ active: this.activeTab === \"1\"})}\r\n                                    onClick={(e) => this.toggleTab(\"1\")}\r\n                                >Текущие</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    className={classnames({ active: this.activeTab === \"2\"})}\r\n                                    onClick={(e) => this.toggleTab(\"2\")}>Законченные</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    className={classnames({ active: this.activeTab === \"3\"})}\r\n                                    onClick={(e) => this.toggleTab(\"3\")}>Будущие</NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                        <TabContent activeTab={this.activeTab}>\r\n                            <TabPane tabId=\"1\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <Tasks store={this.props.store} status={TaskStatus.InProgress}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                            <TabPane tabId=\"2\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <Tasks store={this.props.store} status={TaskStatus.Completed}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                            <TabPane tabId=\"3\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <Tasks store={this.props.store} status={TaskStatus.Future}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                        </TabContent>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row justify-content-center\">\r\n                    {this.notDeleted && <Alert color=\"danger\">Что-то пошло не так и проект не удалился :(</Alert>}\r\n                    <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                       onClick={() => this.deleteProject(this.props.store.projectStore.choosenProject.id)}/>\r\n                </div>\r\n                {this.renderProjectInfo(this.props.store.projectStore.choosenProject)}\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-lg-3 col-sm-6\">\r\n                        <AddTask store={this.props.store}/>\r\n                    </div>\r\n                    <div className=\"col-lg-3 col-sm-6\">\r\n                        <AddUserToProject store={this.props.store}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.loaded && this.renderTasksMenu()}\r\n                    {!this.loaded && renderSpinner()}\r\n                </div>\r\n            </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    @action\r\n    toggleTab(activeTab: string): void {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    deleteProject(projectId: number) {\r\n        console.log(\"i want to delete...\");\r\n        this.props.store.projectStore.deleteProject(projectId)\r\n            .then((status) => {\r\n                if(status === 200) {\r\n                    this.props.store.projectStore.getProjects();\r\n                    this.notDeleted = false;\r\n                } else {\r\n                    this.notDeleted = true;\r\n                }\r\n            });\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddUserToProject.tsx",["205"],"﻿import React from \"react\";\r\nimport RootStore from \"../../stores/RootStore\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport {\r\n    Button,\r\n    Dropdown,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    Modal,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalHeader,\r\n    Alert\r\n} from \"reactstrap\";\r\nimport { ProjectRole } from \"../../Typings/enums/ProjectRole\";\r\nimport { translateProjectRole } from \"../../functions/translater\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\n\r\nexport interface IAddUserToProjectProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nexport class AddUserToProject extends React.Component<IAddUserToProjectProps> {\r\n    addUserToProjectWindowOpen: boolean;\r\n    roleDropdownOpen: boolean;\r\n    usersDropdownOpen: boolean;\r\n    choosenUser: UserViewModel;\r\n    role: ProjectRole = ProjectRole.Head;\r\n    notAttached: boolean;\r\n\r\n    componentDidMount(): void {\r\n        this.choosenUser = this.props.store.userStore.users[0];\r\n    }\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addUserToProjectWindowOpen: observable,\r\n            usersDropdownOpen: observable,\r\n            roleDropdownOpen: observable\r\n        })\r\n    }\r\n\r\n    toggleWindow() {\r\n        this.addUserToProjectWindowOpen = !this.addUserToProjectWindowOpen;\r\n    }\r\n\r\n    toggleUserDropdown() {\r\n        this.usersDropdownOpen = !this.usersDropdownOpen;\r\n    }\r\n\r\n    toggleRoleDropdown() {\r\n        this.roleDropdownOpen = !this.roleDropdownOpen;\r\n    }\r\n\r\n    renderAddUserToProjectWindow() {\r\n        let users = this.props.store.userStore.users;\r\n        let choosenUser = this.choosenUser;\r\n        return(\r\n            <Modal\r\n                style={{backgroundColor: \"#003b46\", color: \"#003b46\", fontSize: \"1.4em\"}}\r\n                isOpen={this.addUserToProjectWindowOpen}\r\n                toggle={() => this.toggleWindow()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                   onClick={() => this.toggleWindow()}/>\r\n                {this.notAttached && <Alert color=\"primary\">Что-то пошло не так и пользователь не прикрепился :(</Alert>}\r\n                <ModalHeader>ПРИКРЕПЛЕНИЕ ПОЛЬЗОВАТЕЛЯ</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-sm-6\">\r\n                            <Dropdown isOpen={this.usersDropdownOpen} toggle={() => this.toggleUserDropdown()}>\r\n                                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{choosenUser !== undefined ? `${choosenUser.firstName} ${choosenUser.lastName}` : \"Пока нет пользователей\"}</DropdownToggle>\r\n                                <DropdownMenu>\r\n                                    {users.map((user, index) => {\r\n                                        return(\r\n                                            <>\r\n                                                {<DropdownItem onClick={() => this.choosenUser = user}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                                            </>\r\n                                        );\r\n                                    })}\r\n                                </DropdownMenu>\r\n                            </Dropdown>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-sm-6\">\r\n                            <Dropdown isOpen={this.roleDropdownOpen} toggle={() => this.toggleRoleDropdown()}>\r\n                                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateProjectRole(this.role)}</DropdownToggle>\r\n                                <DropdownMenu>\r\n                                    <DropdownItem onClick={() => this.role = ProjectRole.Head}>{translateProjectRole(ProjectRole.Head)}</DropdownItem>\r\n                                </DropdownMenu>\r\n                            </Dropdown>\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.attach()}\r\n                    >\r\n                        Прикрепить\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <div className=\"row justify-content-center\" style={{marginTop: \"5%\"}}>\r\n                <Button\r\n                    style={{width: \"80%\", borderColor: \"#66A5AD\", color: \"#66A5AD\", backgroundColor: \"#fff\"}}\r\n                    onClick={() => this.toggleWindow()}>Прикрепить участников</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {!this.addUserToProjectWindowOpen && this.renderButton()}\r\n                {this.addUserToProjectWindowOpen && this.renderAddUserToProjectWindow()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    attach() {\r\n        this.props.store.projectStore.attachUserToProject(this.props.store.projectStore.choosenProject.id, this.choosenUser.id, this.role)\r\n            .then((status) => {\r\n                if(status === 200) {\r\n                    this.props.store.projectStore.getProjectUsers(this.props.store.projectStore.choosenProject.id);\r\n                    this.addUserToProjectWindowOpen = false;\r\n                    this.notAttached = false;\r\n                } else {\r\n                    this.notAttached = true;\r\n                }\r\n            });\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\AddTask.tsx",["206"],"﻿import React from \"react\";\r\nimport { IAddTasksProps } from \"./IAddTasksProps\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport {\r\n    Button,\r\n    Dropdown,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    Input,\r\n    Label,\r\n    Modal,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalHeader,\r\n    Alert\r\n} from \"reactstrap\";\r\nimport Calendar from \"react-calendar\";\r\nimport { TaskType } from \"../../Typings/enums/TaskType\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\nimport { observer } from \"mobx-react\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { TaskPriority } from \"../../Typings/enums/TaskPriority\";\r\nimport { translatePriority, translateTaskType } from \"../../functions/translater\";\r\n\r\n@observer\r\nexport class AddTask extends React.Component<IAddTasksProps> {\r\n    addTaskWindowOpen: boolean;\r\n    responsibleDropdownOpen: boolean;\r\n    testerDropdownOpen: boolean;\r\n    taskTypeDropdownOpen: boolean;\r\n    priorityDropdownOpen: boolean;\r\n    taskName: string;\r\n    description: string;\r\n    startDate: Date | Date[];\r\n    deadline: Date | Date[];\r\n    priority: TaskPriority = TaskPriority.Average;\r\n    responsiblePerson: UserViewModel;\r\n    tester: UserViewModel;\r\n    taskType: TaskType = TaskType.Feature;\r\n    taskStatus: TaskStatus;\r\n    notSaved: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addTaskWindowOpen: observable,\r\n            responsibleDropdownOpen: observable,\r\n            testerDropdownOpen: observable,\r\n            taskTypeDropdownOpen: observable,\r\n            priorityDropdownOpen: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.responsiblePerson = this.props.store.projectStore.choosenProjectUsers[0];\r\n        this.tester = this.props.store.projectStore.choosenProjectUsers[0];\r\n    }\r\n\r\n    @action\r\n    toggleAddTaskWindow() {\r\n        this.addTaskWindowOpen = !this.addTaskWindowOpen;\r\n    }\r\n\r\n    @action\r\n    toggleResponsibleDropdown() {\r\n        this.responsibleDropdownOpen = !this.responsibleDropdownOpen;\r\n    }\r\n\r\n    toggleTesterDropdown() {\r\n        this.testerDropdownOpen = !this.testerDropdownOpen;\r\n    }\r\n\r\n    toggleTaskTypeDropdown() {\r\n        this.taskTypeDropdownOpen = !this.taskTypeDropdownOpen;\r\n    }\r\n\r\n    togglePriorityDropdown() {\r\n        this.priorityDropdownOpen = !this.priorityDropdownOpen;\r\n    }\r\n\r\n    renderTaskType() {\r\n        return(\r\n            <Dropdown \r\n                isOpen={this.taskTypeDropdownOpen}\r\n                toggle={() => this.toggleTaskTypeDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateTaskType(this.taskType)}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem onClick={() => this.taskType = TaskType.Feature}>Фича</DropdownItem>\r\n                    <DropdownItem onClick={() => this.taskType = TaskType.Bug}>Баг</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderPriority() {\r\n        return(\r\n            <Dropdown\r\n                isOpen={this.priorityDropdownOpen}\r\n                toggle={() => this.togglePriorityDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translatePriority(this.priority)}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem onClick={() => this.priority = TaskPriority.Average}>Средняя</DropdownItem>\r\n                    <DropdownItem onClick={() => this.priority = TaskPriority.High}>Высокая</DropdownItem>\r\n                    <DropdownItem onClick={() => this.priority = TaskPriority.Low}>Низкая</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        )\r\n    }\r\n\r\n    renderResponsibleDropdown() {\r\n        let users = this.props.store.projectStore.choosenProjectUsers;\r\n        let responsible = this.responsiblePerson;\r\n        return(\r\n            <Dropdown isOpen={this.responsibleDropdownOpen} toggle={() => this.toggleResponsibleDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{responsible !== undefined ? `${responsible.firstName} ${responsible.lastName}` : \"Пока нет пользователей\"}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    {users.map((user, index) => {\r\n                        return(\r\n                            <>\r\n                              {<DropdownItem key={index}  onClick={() => this.choosePerson(user, \"responsible\")}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                            </>\r\n                        );\r\n                    })}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderTesterDropdown() {\r\n        let users = this.props.store.projectStore.choosenProjectUsers;\r\n        let tester = this.tester;\r\n        return(\r\n            <Dropdown isOpen={this.testerDropdownOpen} toggle={() => this.toggleTesterDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{tester !== undefined ? `${tester.firstName} ${tester.lastName}` : \"Пока нет пользователей\"}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    {users.map((user, index) => {\r\n                        return(\r\n                            <>\r\n                                {<DropdownItem key={index}  onClick={() => this.choosePerson(user, \"tester\")}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                            </>\r\n                        );\r\n                    })}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderAddTaskWindow() {\r\n        let currentUser = this.props.store.userStore.currentUser;\r\n        return(\r\n            <Modal \r\n                style={{backgroundColor: \"#003b46\", color: \"#003b46\", fontSize: \"1.4em\"}}\r\n                isOpen={this.addTaskWindowOpen}\r\n                size=\"lg\"\r\n                centered\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                toggle={() => this.toggleAddTaskWindow()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                   onClick={() => this.toggleAddTaskWindow()}/>\r\n                <ModalHeader closeButton>СОЗДАНИЕ ЗАДАЧИ</ModalHeader>\r\n                {this.notSaved && <Alert color=\"primary\">Что-то пошло не так и задача не сохранилась!!!</Alert>}\r\n                <ModalBody>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label style={{width: \"100%\"}} align=\"center\">НАЗВАНИЕ</Label>\r\n                        <Input style={{width: \"90%\"}} onChange={(e) => this.inputTaskName(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\" style={{marginTop: \"10px\"}}>\r\n                        <Label style={{width: \"100%\"}} align=\"center\">ОПИСАНИЕ</Label>\r\n                        <textarea style={{width: \"90%\"}} onChange={(e) => this.inputDescription(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ДАТА НАЧАЛА</Label>\r\n                            <div style={{width: \"100%\", paddingLeft: \"15%\"}}>\r\n                                <Calendar\r\n                                    value={this.startDate}\r\n                                    onChange={(date) => this.inputDate(date, \"startDate\")}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ДЕДЛАЙН</Label>\r\n                            <div style={{width: \"100%\", paddingLeft: \"15%\"}}>\r\n                                <Calendar\r\n                                    value={this.deadline}\r\n                                    onChange={(date) => this.inputDate(date, \"deadline\")}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ТЕСТИРОВЩИК</Label>\r\n                            <div className=\"row justify-content-center\">\r\n                                {this.renderTesterDropdown()}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ОТВЕТСТВЕННЫЙ</Label>\r\n                            <div className=\"row justify-content-center\">\r\n                                {this.renderResponsibleDropdown()}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ТИП</Label>\r\n                            <div className=\"row justify-content-center\">\r\n                                {this.renderTaskType()}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ПРИОРИТЕТ</Label>\r\n                            <div className=\"row justify-content-center\">\r\n                                {this.renderPriority()}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label style={{width: \"100%\"}} align=\"center\">Автор:\r\n                            <span>{currentUser.firstName} {currentUser.lastName}</span>\r\n                        </Label>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.saveTask()}>\r\n                        СОХРАНИТЬ\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <div className=\"row justify-content-center\" style={{marginTop: \"5%\"}}>\r\n                <Button\r\n                    style={{width: \"80%\", borderColor: \"#66A5AD\", color: \"#66A5AD\", backgroundColor: \"#fff\"}}\r\n                    onClick={() => this.toggleAddTaskWindow()}>Создать задачу</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.addTaskWindowOpen && this.renderAddTaskWindow()}\r\n                {!this.addTaskWindowOpen && this.renderButton()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    inputTaskName(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.taskName = event.currentTarget.value;\r\n    }\r\n\r\n    inputDescription(event: React.FormEvent<HTMLTextAreaElement>): void {\r\n        this.description = event.currentTarget.value;\r\n    }\r\n\r\n    inputDate(date: Date | Date[], dateType: string): void {\r\n        if(dateType === \"startDate\") {\r\n            this.startDate = date;\r\n        } else if(dateType === \"deadline\") {\r\n            this.deadline = date;\r\n        }\r\n    }\r\n\r\n    choosePerson(user: UserViewModel, type: string): void {\r\n        if(type === \"responsible\") {\r\n            this.responsiblePerson = user;\r\n        } else if(type === \"tester\") {\r\n            this.tester = user;\r\n        }\r\n    }\r\n\r\n    saveTask() {\r\n        this.props.store.taskStore.addOrUpdateTask(this.taskName, this.description, this.startDate, this.deadline, this.taskType, this.taskStatus, this.priority, this.tester.id, this.responsiblePerson.id, this.props.store.userStore.currentUser.id, 0, this.props.store.projectStore.choosenProject.id)\r\n            .then((status) => {\r\n                if(status === 200) {\r\n                    this.props.store.taskStore.getTasks(this.props.store.projectStore.choosenProject.id);\r\n                    this.addTaskWindowOpen = false;\r\n                    this.notSaved = false;\r\n                } else {\r\n                    this.notSaved = true;\r\n                    this.addTaskWindowOpen = false;\r\n                }\r\n            });\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Tasks.tsx",["207","208"],"﻿import React from \"react\";\r\nimport { ITasksProps } from \"./ITasksProps\";\r\nimport { TaskViewModel } from \"../../Typings/viewModels/TaskViewModel\";\r\nimport { Table, Modal, Alert } from \"reactstrap\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { makeObservable, observable, toJS } from \"mobx\";\r\nimport { Task } from \"./Task\";\r\nimport { observer } from \"mobx-react\";\r\nimport { translateTaskType } from \"../../functions/translater\";\r\nimport { formatDate } from \"../../functions/formatDate\";\r\n\r\n@observer\r\nexport class Tasks extends React.Component<ITasksProps> {\r\n    taskOpen: boolean;\r\n    taskToRender: TaskViewModel;\r\n\r\n    getResponsible(responsible: number): UserViewModel {\r\n        return this.props.store.userStore.users\r\n            .filter(u => u.id === responsible)[0];\r\n    }\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            taskOpen: observable\r\n        });\r\n    }\r\n\r\n    renderTask() {\r\n        return(\r\n            <Modal\r\n                isOpen={this.taskOpen}\r\n                toggle={() => this.taskOpenToggle()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                   onClick={() => this.taskOpenToggle()}/>\r\n                <Task store={this.props.store} task={this.taskToRender}/>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    renderAlert() {\r\n        return(\r\n            <Alert color=\"primary\">Задач пока нет!!!</Alert>\r\n        );\r\n    }\r\n\r\n    renderTasks(tasks: TaskViewModel[]) {\r\n        return(\r\n            <Table bordered style={{backgroundColor: \"#fff\", color:\"#003B46\", marginTop: \"2%\", fontSize: \"1.2em\"}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Номер</th>\r\n                        <th>Задача</th>\r\n                        <th>Дедлайн</th>\r\n                        <th>Тип задачи</th>\r\n                        <th>Ответственный</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {tasks.map((task) => {\r\n                    let responsible = this.getResponsible(task.responsible);//вообще здесь лучше дропдаун сделать\r\n                    return(\r\n                        <tr key={task.id} onClick={() => this.taskOpenToggle(task)}>\r\n                            <th>{task.id}</th>\r\n                            <th>{task.header}</th>\r\n                            <th>{formatDate(task.deadlineDate)}</th>\r\n                            <th>{translateTaskType(task.taskType)}</th>\r\n                            <th>{responsible.firstName + \" \" + responsible.lastName}</th>\r\n                        </tr>\r\n                    );\r\n                })}\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let currentProjectTasks = this.props.store.taskStore.currentProjectTasks;\r\n        let tasks = currentProjectTasks.filter(t => t.status === this.props.status);\r\n        return(\r\n            <>\r\n                {tasks !== undefined && this.renderTasks(tasks)}\r\n                {(tasks === undefined || tasks.length === 0) && this.renderAlert()}\r\n                {this.taskOpen && this.renderTask()}\r\n            </>\r\n        )\r\n    }\r\n\r\n    taskOpenToggle(task: TaskViewModel = new TaskViewModel()) {\r\n        this.taskOpen = !this.taskOpen;\r\n        this.taskToRender = task;\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskRole.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\Users.tsx",["209"],"﻿import React from \"react\";\r\nimport { IUsersProps } from \"./IUsersProps\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { Table } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport { User } from \"./User\";\r\n\r\n@observer\r\nexport class  Users extends React.Component<IUsersProps> {\r\n    renderUsers(users: UserViewModel[]) {\r\n        return(\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Id</th>\r\n                        <th>Имя Фамилия</th>\r\n                        <th>Email</th>\r\n                        <th>Роль</th>\r\n                        <th>Управление</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {users.map(user => {\r\n                        return(\r\n                           <User store={this.props.store} currentUser={user}/>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderUsers(this.props.store.userStore.users)}\r\n            </>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentGroupViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserReadModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\Role.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\User.tsx",["210"],"﻿import React from \"react\";\r\nimport { IUserProps } from \"./IUserProps\";\r\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Button } from \"reactstrap\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Role } from \"../../Typings/enums/Role\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { observer } from \"mobx-react\";\r\nimport {UserReadModel} from \"../../Typings/viewModels/UserReadModel\";\r\nimport {translateRole} from \"../../functions/translater\";\r\n\r\n@observer\r\nexport class User extends React.Component<IUserProps> {\r\n    roleDropdownOpen: boolean;\r\n    role: Role;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            roleDropdownOpen: observable,\r\n            role: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.role = this.props.currentUser.role;\r\n    }\r\n\r\n    toggleRoleDropdown() {\r\n        this.roleDropdownOpen = !this.roleDropdownOpen;\r\n    }\r\n\r\n    chooseUserRole(role: Role) {\r\n        this.role = role;\r\n    }\r\n\r\n    renderRoleDropdown(role: Role) {\r\n        return(\r\n            <Dropdown isOpen={this.roleDropdownOpen} toggle={() => this.toggleRoleDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateRole(role)}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Developer)}>{translateRole(Role.Developer)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Tester)}>{translateRole(Role.Tester)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Administrator)}>{translateRole(Role.Administrator)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Accounter)}>{translateRole(Role.Accounter)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Marketolog)}>{translateRole(Role.Marketolog)}</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderUser(user: UserViewModel) {\r\n        return(\r\n            <tr>\r\n                <th>{user.id}</th>\r\n                <th>{user.firstName} {user.lastName}</th>\r\n                <th>{user.email}</th>\r\n                <th>{this.renderRoleDropdown(this.role)}</th>\r\n                <th>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Button color=\"success\" \r\n                            className=\"controlButton\"\r\n                            onClick={() => this.updateUser()}>СОХРАНИТЬ</Button>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Button color=\"danger\"\r\n                            className=\"controlButton\"\r\n                            onClick={() => this.deleteUser()}>УДАЛИТЬ</Button>\r\n                    </div>\r\n                </th>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let user = this.props.currentUser;\r\n        return(\r\n            <>{this.renderUser(user)}</>\r\n        );\r\n    }\r\n\r\n    updateUser() {\r\n        let currentUser = this.props.currentUser;\r\n        let user = new UserReadModel();\r\n        user.id = currentUser.id;\r\n        user.role = this.role;\r\n        user.firstName = currentUser.firstName;\r\n        user.lastName = currentUser.lastName;\r\n        user.email = currentUser.email;\r\n        this.props.store.userStore.addOrUpdateUser(user);\r\n    }\r\n\r\n    deleteUser() {\r\n        this.props.store.userStore.deleteUser(this.props.currentUser.id);\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\AddUser.tsx",["211"],"﻿import React from \"react\";\r\nimport {IUsersProps} from \"./IUsersProps\";\r\nimport {makeObservable, observable} from \"mobx\";\r\nimport {\r\n    Button,\r\n    Dropdown,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    Input,\r\n    Label,\r\n    Modal,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalHeader\r\n} from \"reactstrap\";\r\nimport {Alert} from \"react-bootstrap\";\r\nimport {Role} from \"../../Typings/enums/Role\";\r\nimport {observer} from \"mobx-react\";\r\nimport {UserReadModel} from \"../../Typings/viewModels/UserReadModel\";\r\nimport {translateRole} from \"../../functions/translater\";\r\n\r\n@observer\r\nexport class AddUser extends React.Component<IUsersProps>{\r\n    addUserWindowOpen: boolean;\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    password: string;\r\n    roleDropdownOpen: boolean;\r\n    role: Role;\r\n    notSaved: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addUserWindowOpen: observable,\r\n            roleDropdownOpen: observable\r\n        });\r\n        this.role = Role.Developer;\r\n    }\r\n\r\n    isAuthor(role: Role) {\r\n        return role === Role.Administrator;\r\n    }\r\n\r\n    toggleAddUserWindow() {\r\n        this.addUserWindowOpen = !this.addUserWindowOpen;\r\n    }\r\n\r\n    toggleRoleDropdown() {\r\n        this.roleDropdownOpen = !this.roleDropdownOpen;\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <>\r\n                <div className=\"col-6\">\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.toggleAddUserWindow()}>Добавить пользователя</Button>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderRoleDropdown() {\r\n        return(\r\n            <Dropdown isOpen={this.roleDropdownOpen} toggle={() => this.toggleRoleDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateRole(this.role)}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Developer)}>{translateRole(Role.Developer)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Administrator)}>{translateRole(Role.Administrator)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Tester)}>{translateRole(Role.Tester)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Accounter)}>{translateRole(Role.Accounter)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Marketolog)}>{translateRole(Role.Marketolog)}</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderAddUserWindow() {\r\n        return(\r\n            <Modal\r\n                isOpen={this.addUserWindowOpen}\r\n                toggle={() => this.toggleAddUserWindow()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                onClick={() => this.toggleAddUserWindow()}/>\r\n                {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и пользователь не сохранился!</Alert>}\r\n                <ModalHeader closeButton>ДОБАВЛЕНИЕ НОВОГО ПОЛЬЗОВАТЕЛЯ</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                            <Label>Имя</Label>\r\n                            <Input onChange={(e) => this.inputFirstName(e)}/>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                            <Label>Фамилия</Label>\r\n                            <Input onChange={(e) => this.inputLastName(e)}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                            <Label>Email</Label>\r\n                            <Input onChange={(e) => this.inputEmail(e)}/>\r\n                        </div>\r\n                        {this.isAuthor(this.props.store.userStore.currentUser?.role) &&\r\n                            <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                                <Label>Password</Label>\r\n                                <Input onChange={(e) => this.inputPassword(e)}/>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                            {this.renderRoleDropdown()}\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.saveUser()}>\r\n                        СОХРАНИТЬ\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.addUserWindowOpen && this.renderAddUserWindow()}\r\n                {!this.addUserWindowOpen && this.renderButton()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    inputFirstName(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.firstName = event.currentTarget.value;\r\n    }\r\n\r\n    inputLastName(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.lastName = event.currentTarget.value;\r\n    }\r\n\r\n    inputEmail(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.email = event.currentTarget.value;\r\n    }\r\n\r\n    inputPassword(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.password = event.currentTarget.value;\r\n    }\r\n\r\n    chooseRole(role: Role) {\r\n        this.role = role;\r\n    }\r\n\r\n    saveUser() {\r\n        let user = new UserReadModel();\r\n        user.firstName = this.firstName;\r\n        user.lastName = this.lastName;\r\n        user.email = this.email;\r\n        user.role = this.role;\r\n        user.password = this.password;\r\n        this.props.store.userStore.addOrUpdateUser(user)\r\n            .then(status => {\r\n                if(status !== 200) {\r\n                    this.notSaved = true;\r\n                } else {\r\n                    this.notSaved = false;\r\n                    this.addUserWindowOpen = false;\r\n                }\r\n            });\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\ProjectViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\renderSpinner.tsx",["212"],"﻿import React from \"react\";\r\nimport { Spinner } from 'reactstrap';\r\n\r\nexport function renderSpinner() {\r\n    return(\r\n        <Spinner color=\"primary\"/>\r\n    )\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\translater.tsx",["213"],"﻿import {Role} from \"../Typings/enums/Role\";\r\nimport {TaskType} from \"../Typings/enums/TaskType\";\r\nimport {TaskPriority} from \"../Typings/enums/TaskPriority\";\r\nimport {ProjectRole} from \"../Typings/enums/ProjectRole\";\r\nimport {TaskRole} from \"../Typings/enums/TaskRole\";\r\nimport {TaskStatus} from \"../Typings/enums/TaskStatus\";\r\n\r\nexport function translateRole(role: Role): string {\r\n    if(role === Role.Developer) {\r\n        return \"Разработчик\";\r\n    } else if(role === Role.Marketolog) {\r\n        return \"Маркетолог\";\r\n    } else if(role === Role.Accounter) {\r\n        return \"Бухгалтер\";\r\n    } else if(role === Role.Administrator) {\r\n        return \"Администратор\";\r\n    } else if(role === Role.Tester) {\r\n        return \"Тестировщик\";\r\n    } \r\n    return \"\";\r\n}\r\n\r\nexport function translateTaskType(taskType: TaskType): string {\r\n    if(taskType === TaskType.Bug) {\r\n        return \"Баг\"\r\n    } else if(taskType === TaskType.Feature) {\r\n        return \"Фича\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport function translatePriority(priority: TaskPriority): string {\r\n    if(priority === TaskPriority.High) {\r\n        return \"Высокая\";\r\n    } else if(priority === TaskPriority.Average) {\r\n        return \"Средняя\";\r\n    } else if(priority === TaskPriority.Low) {\r\n        return \"Низкая\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport function translateProjectRole(role: ProjectRole): string {\r\n    if(role === ProjectRole.Head) {\r\n        return \"Руководитель\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport function translateTaskRole(role: TaskRole) : string {\r\n    if(role === TaskRole.Responsible) {\r\n        return \"Ответственный\";\r\n    } else if(role === TaskRole.Author) {\r\n        return \"Автор\";\r\n    } else if(role === TaskRole.Tester) {\r\n        return \"Тестировщик\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport function translateStatus(status: TaskStatus): string {\r\n    if(status ===  TaskStatus.InProgress) {\r\n        return \"В прогрессе\";\r\n    } else if(status === TaskStatus.Completed) {\r\n        return \"Завершена\";\r\n    } else if(status === TaskStatus.Future) {\r\n        return \"Еще не начата\";\r\n    }\r\n    return \"\";\r\n} ","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Authorization.tsx",["214"],"﻿import React from \"react\";\r\nimport RootStore from \"../../stores/RootStore\";\r\nimport { Label, Input, Button, Alert }from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\n\r\ninterface IAuthorizationProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nexport class Authorization extends React.Component<IAuthorizationProps> {\r\n    email: string;\r\n    password: string;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            email: observable,\r\n            password: observable\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container\" style={{backgroundColor:\"#66A5AD\", marginTop: \"5%\", color: \"#fff\", fontSize: \"1.5em\"}}>\r\n                {this.props.store.userStore.wrongCredetianals && <div className=\"row justify-content-center\">\r\n                    <Alert color=\"danger\">Пользователя с такими данными не существует. Попробуйте ещё раз</Alert>\r\n                </div> }\r\n                <div className=\"row justify-content-center\">\r\n                    <Label style={{width: \"100%\", marginTop: \"10px\"}}>EMAIL</Label>\r\n                    <Input\r\n                        style={{width: \"80%\"}}\r\n                        onChange={(e) => this.inputEmail(e)}/>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <Label style={{width: \"100%\"}}>ПАРОЛЬ</Label>\r\n                    <Input\r\n                        style={{width: \"80%\"}}\r\n                        type=\"password\"\r\n                        onChange={(e) => this.inputPassword(e)}/>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <Button\r\n                        style={{width: \"80%\", backgroundColor: \"#07575b\", marginTop: \"25px\", marginBottom: \"15px\"}}\r\n                        onClick={() => this.authorize()}>\r\n                        ВОЙТИ\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    inputEmail(event: React.FormEvent<HTMLInputElement>) {\r\n        this.email = event.currentTarget.value;\r\n    }\r\n\r\n    inputPassword(event: React.FormEvent<HTMLInputElement>) {\r\n        this.password = event.currentTarget.value;\r\n    }\r\n\r\n    async authorize() {\r\n        const response = await fetch(\"/authorization\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({email: this.email, password: this.password})\r\n        });\r\n        if(response.status === 200) {\r\n            this.props.store.userStore.authorizationRequire(false);\r\n            this.props.store.userStore.wrongCredetianalsToggle(false);\r\n            this.props.store.userStore.getCurrentUser();\r\n        } else {\r\n            this.props.store.userStore.authorizationRequire(true);\r\n            this.props.store.userStore.wrongCredetianalsToggle(true);\r\n        }\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Task.tsx",["215"],"﻿import React from \"react\";\r\nimport { ITaskProps } from \"../MyWork/ITaskProps\";\r\nimport {\r\n    Button,\r\n    Dropdown,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalHeader,\r\n    Label\r\n} from \"reactstrap\";\r\nimport { TaskViewModel } from \"../../Typings/viewModels/TaskViewModel\";\r\nimport { renderSpinner } from \"../../functions/renderSpinner\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\nimport { TaskType } from \"../../Typings/enums/TaskType\";\r\nimport { TaskPriority } from \"../../Typings/enums/TaskPriority\";\r\nimport { translatePriority, translateStatus, translateTaskType } from \"../../functions/translater\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport Calendar from \"react-calendar\";\r\nimport {Comments} from \"../Comments/Comments\";\r\n\r\n@observer\r\nexport class Task extends React.Component<ITaskProps> {\r\n    task: TaskViewModel;\r\n    statusDropdownOpen: boolean;\r\n    priorityDropdownOpen: boolean;\r\n    typeDropdownOpen: boolean;\r\n    testerDropdownOpen: boolean;\r\n    responsibleDropdownOpen: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            statusDropdownOpen: observable,\r\n            priorityDropdownOpen: observable,\r\n            typeDropdownOpen: observable,\r\n            task: observable,\r\n            testerDropdownOpen: observable,\r\n            responsibleDropdownOpen: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.task = this.props.task;\r\n    }\r\n\r\n    renderStatusDropdown() {\r\n        return(\r\n            <>\r\n                <Dropdown\r\n                    isOpen={this.statusDropdownOpen}\r\n                    toggle={() => this.toggleStatus()}>\r\n                    <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateStatus(this.task.status)}</DropdownToggle>\r\n                    <DropdownMenu>\r\n                        <DropdownItem onClick={() => this.task.status = TaskStatus.InProgress}>{translateStatus(TaskStatus.InProgress)}</DropdownItem>\r\n                        <DropdownItem onClick={() => this.task.status = TaskStatus.Completed}>{translateStatus(TaskStatus.Completed)}</DropdownItem>\r\n                        <DropdownItem onClick={() => this.task.status = TaskStatus.Future}>{translateStatus(TaskStatus.Future)}</DropdownItem>\r\n                    </DropdownMenu>\r\n                </Dropdown>\r\n            </>\r\n        );\r\n    }\r\n\r\n    toggleStatus() {\r\n        this.statusDropdownOpen = !this.statusDropdownOpen;\r\n    }\r\n\r\n    togglePriority() {\r\n        this.priorityDropdownOpen = !this.priorityDropdownOpen;\r\n    }\r\n\r\n    toggleTypeDropdown() {\r\n        this.typeDropdownOpen = !this.typeDropdownOpen;\r\n    }\r\n\r\n    toggleResponsibleDropdown() {\r\n        this.responsibleDropdownOpen = !this.responsibleDropdownOpen;\r\n    }\r\n\r\n    toggleTesterDropdown() {\r\n        this.testerDropdownOpen = !this.testerDropdownOpen;\r\n    }\r\n\r\n    renderResponsible() {\r\n        let users = this.props.store.userStore.users;\r\n        let responsible = this.props.store.userStore.users.filter(u => u.id === this.task.responsible)[0];\r\n        return(\r\n            <Dropdown isOpen={this.responsibleDropdownOpen} toggle={() => this.toggleResponsibleDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{responsible !== undefined ? `${responsible.firstName} ${responsible.lastName}` : \"Пока нет пользователей\"}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    {users.map((user, index) => {\r\n                        return(\r\n                            <>\r\n                                {<DropdownItem key={index} onClick={() => this.task.responsible = user.id}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                            </>\r\n                        );\r\n                    })}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n    \r\n    renderTester() {\r\n        let users = this.props.store.userStore.users;\r\n        let tester = this.props.store.userStore.users.filter(u => u.id === this.task.tester)[0];\r\n        return(\r\n            <Dropdown isOpen={this.testerDropdownOpen} toggle={() => this.toggleTesterDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{tester !== undefined ? `${tester.firstName} ${tester.lastName}` : \"Пока нет пользователей\"}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    {users.map((user, index) => {\r\n                        return(\r\n                            <>\r\n                                {<DropdownItem key={index}  onClick={() => this.task.tester = user.id}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                            </>\r\n                        );\r\n                    })}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderTaskPriority() {\r\n        return(\r\n            <>\r\n                <Dropdown\r\n                    isOpen={this.priorityDropdownOpen}\r\n                    toggle={() => this.togglePriority()}>\r\n                    <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translatePriority(this.task.priority)}</DropdownToggle>\r\n                    <DropdownMenu>\r\n                        <DropdownItem onClick={() => this.task.priority = TaskPriority.Average}>{translatePriority(TaskPriority.Average)}</DropdownItem>\r\n                        <DropdownItem onClick={() => this.task.priority = TaskPriority.Low}>{translatePriority(TaskPriority.Low)}</DropdownItem>\r\n                        <DropdownItem onClick={() => this.task.priority = TaskPriority.High}>{translatePriority(TaskPriority.High)}</DropdownItem>\r\n                    </DropdownMenu>\r\n                </Dropdown>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderTypeDropdown() {\r\n        return(\r\n            <>\r\n                <Dropdown\r\n                    isOpen={this.typeDropdownOpen}\r\n                    toggle={() => this.toggleTypeDropdown()}>\r\n                    <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateTaskType(this.task.taskType)}</DropdownToggle>\r\n                    <DropdownMenu>\r\n                        <DropdownItem onClick={() => this.task.taskType = TaskType.Feature}>{translateTaskType(TaskType.Feature)}</DropdownItem>\r\n                        <DropdownItem onClick={() => this.task.taskType = TaskType.Bug}>{translateTaskType(TaskType.Bug)}</DropdownItem>\r\n                    </DropdownMenu>\r\n                </Dropdown>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderTask(task: TaskViewModel) {\r\n        let author = this.props.store.userStore.users.filter(u => u.id === task.author)[0];\r\n        return(\r\n            <>\r\n                <ModalHeader style={{fontSize: \"1.5em\"}}>{task.header}</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row justify-content-center\">\r\n                                <div className=\"col-12\">\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <p style={{fontSize: \"1.2em\"}}>{task.description}</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-lg-3 col-md-3 col-sm-12 col-xs-12\">\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <Label style={{width: \"100%\"}} align=\"center\">Приоритет: </Label>\r\n                                        {this.renderTaskPriority()}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-lg-3 col-md-3 col-sm-12 col-xs-12\">\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <Label style={{width: \"100%\"}} align=\"center\">Статус: </Label>\r\n                                        {this.renderStatusDropdown()}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-lg-3 col-md-3 col-sm-12 col-xs-12\">\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <Label style={{width: \"100%\"}} align=\"center\">Тип: </Label>\r\n                                        {this.renderTypeDropdown()}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"row justify-content-center\">\r\n                                    <Label style={{width: \"100%\"}} align=\"center\">Ответственный: </Label>\r\n                                    {this.renderResponsible()}\r\n                                </div>\r\n                                <div className=\"row justify-content-center\">\r\n                                    <Label style={{width: \"100%\"}} align=\"center\">Тестировщик: </Label>\r\n                                    {this.renderTester()}\r\n                                </div>\r\n                                <div className=\"row justify-content-center\">\r\n                                    <Label>Автор: </Label>\r\n                                    {author.firstName} {author.lastName}\r\n                                </div>\r\n                                <div className=\"row justify-content-center\">\r\n                                    <Label style={{width: \"100%\"}} align=\"center\">Дата начала: </Label>\r\n                                    <Calendar\r\n                                        value={new Date(this.task.startDate)}\r\n                                        onChange={(date) => this.task.startDate = date}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"row justify-content-center\">\r\n                                    <Label style={{width: \"100%\"}} align=\"center\">Дедлайн: </Label>\r\n                                    <Calendar\r\n                                        value={new Date(this.task.deadlineDate)}\r\n                                        onChange={(date) => this.task.deadlineDate = date}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                    </div>\r\n                    <Comments taskId={this.props.task.id} store={this.props.store}/>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.save()}>\r\n                        СОХРАНИТЬ\r\n                    </Button>\r\n                </ModalFooter>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.task !== undefined && this.renderTask(this.task)}\r\n                {this.task === undefined && renderSpinner()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    save() {\r\n        let task = this.task;\r\n        this.props.store.taskStore.addOrUpdateTask(task.header, task.description, task.startDate, task.deadlineDate, task.taskType, task.status, task.priority, task.tester,task.responsible,task.author, task.id, 0)\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\TaskViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskPriority.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskType.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\ProjectRole.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Comments\\Comments.tsx",["216","217","218","219","220"],"﻿import React from \"react\";\r\nimport { ICommentsProps } from \"./ICommentsProps\";\r\nimport { CommentViewModel } from \"../../Typings/viewModels/CommentViewModel\";\r\nimport { observer } from \"mobx-react\";\r\nimport { AddComment } from \"./AddComment\";\r\nimport { Card, CardText, CardTitle, Label } from \"reactstrap\";\r\nimport { CommentGroupViewModel } from \"../../Typings/viewModels/CommentGroupViewModel\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\n\r\n@observer\r\nexport class Comments extends React.Component<ICommentsProps> {\r\n    componentDidMount(): void {\r\n        this.props.store.commentStore.getCurrentTaskComments(this.props.taskId);\r\n    }\r\n\r\n    deleteComment(commentId: number) {\r\n        this.props.store.commentStore.deleteComment(commentId)\r\n            .then(() => this.props.store.commentStore.getCurrentTaskComments(this.props.taskId));\r\n    }\r\n\r\n    isAuthor(userId: number): boolean {\r\n        return this.props.store.userStore.currentUser.id === userId;\r\n    }\r\n\r\n    renderComments(comments: CommentViewModel[]) {\r\n        return (\r\n            <>\r\n                {comments.map(comment => {\r\n                    return(\r\n                        <Card sm=\"12\">\r\n                            <div className=\"row justify-content-center\">\r\n                                {this.isAuthor(comment.user.id) && <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                                   onClick={() => this.deleteComment(comment.id)}/>}\r\n                                <CardTitle>{comment.user.firstName} {comment.user.lastName}</CardTitle>\r\n                            </div>\r\n                            <div className=\"row justify-content-center\">\r\n                                <CardText>{comment.text}</CardText>\r\n                            </div>\r\n                        </Card>\r\n                    );\r\n                })}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let commentGroup = this.props.store.commentStore.currentCommentGroup;\r\n        let comments = commentGroup.comments;\r\n        return(\r\n            <>\r\n                <Label style={{width: \"100%\"}} align=\"center\">КОММЕНТАРИИ</Label>\r\n                <AddComment store={this.props.store} taskId={this.props.taskId} groupId={commentGroup.id}/>\r\n                {comments.length > 0 && this.renderComments(comments)}\r\n            </>\r\n        )\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Comments\\AddComment.tsx",["221"],"﻿import React from \"react\";\r\nimport { Input, Button, Alert } from \"reactstrap\";\r\nimport { IAddCommentsProps } from \"./IAddCommentsProps\";\r\n\r\nexport class AddComment extends React.Component<IAddCommentsProps>{\r\n    commentText: string;\r\n    notSaved: boolean;\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-9\">\r\n                        <Input placeholder=\"Добавить комментарий\" onChange={(e) => { this.inputComment(e) }}/>\r\n                    </div>\r\n                    <div className=\"col-3\">\r\n                        <Button style={{width: \"100%\", backgroundColor: \"#07575b\"}} \r\n                             onClick={() => this.addComment()}>Добавить</Button>\r\n                    </div>\r\n                    {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и комментарий не сохранился</Alert>}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    inputComment(event: React.FormEvent<HTMLInputElement>) {\r\n        this.commentText = event.currentTarget.value;\r\n    }\r\n\r\n    addComment() {\r\n        let commentStore = this.props.store.commentStore;\r\n        let userStore = this.props.store.userStore;\r\n        commentStore.addComment(this.commentText, userStore.currentUser.id, this.props.groupId)\r\n            .then((status) => {\r\n                if (status === 200) {\r\n                    commentStore.getCurrentTaskComments(this.props.taskId);\r\n                    this.notSaved = false;\r\n                } else {\r\n                    this.notSaved = true;\r\n                }\r\n            })\r\n            .then(() => this.commentText = \"\");\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\formatDate.tsx",["222"],"﻿export function formatDate(dateStr: string) {\r\n    let date = new Date(dateStr);\r\n\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth() + 1;\r\n    let day = date.getDate();\r\n    return day + '-' + month + '-' + year;\r\n}",{"ruleId":"223","replacedBy":"224"},{"ruleId":"225","replacedBy":"226"},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","messageId":"230","fix":"231"},{"ruleId":"232","severity":1,"message":"233","line":1,"column":37,"nodeType":"234","messageId":"235","endLine":1,"endColumn":53},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","messageId":"230","fix":"236"},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","messageId":"230","fix":"237"},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","messageId":"230","fix":"238"},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","messageId":"230","fix":"239"},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","messageId":"230","fix":"240"},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","messageId":"230","fix":"241"},{"ruleId":"232","severity":1,"message":"242","line":57,"column":19,"nodeType":"234","messageId":"235","endLine":57,"endColumn":26},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","messageId":"230","fix":"243"},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","messageId":"230","fix":"244"},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","messageId":"230","fix":"245"},{"ruleId":"246","severity":1,"message":"247","line":31,"column":32,"nodeType":"248","messageId":"249","endLine":31,"endColumn":34,"fix":"250"},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","messageId":"230","fix":"251"},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","messageId":"230","fix":"252"},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","messageId":"230","fix":"253"},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","messageId":"230","fix":"254"},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","messageId":"230","fix":"255"},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","messageId":"230","fix":"256"},{"ruleId":"232","severity":1,"message":"257","line":6,"column":38,"nodeType":"234","messageId":"235","endLine":6,"endColumn":42},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","messageId":"230","fix":"258"},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","messageId":"230","fix":"259"},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","messageId":"230","fix":"260"},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","messageId":"230","fix":"261"},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","messageId":"230","fix":"262"},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","messageId":"230","fix":"263"},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","messageId":"230","fix":"264"},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","messageId":"230","fix":"265"},{"ruleId":"232","severity":1,"message":"266","line":7,"column":10,"nodeType":"234","messageId":"235","endLine":7,"endColumn":31},{"ruleId":"232","severity":1,"message":"267","line":8,"column":9,"nodeType":"234","messageId":"235","endLine":8,"endColumn":23},{"ruleId":"232","severity":1,"message":"268","line":8,"column":25,"nodeType":"234","messageId":"235","endLine":8,"endColumn":35},{"ruleId":"232","severity":1,"message":"257","line":8,"column":37,"nodeType":"234","messageId":"235","endLine":8,"endColumn":41},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","messageId":"230","fix":"269"},{"ruleId":"227","severity":1,"message":"228","line":1,"column":1,"nodeType":"229","messageId":"230","fix":"270"},"no-native-reassign",["271"],"no-negated-in-lhs",["272"],"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"273","text":"274"},"@typescript-eslint/no-unused-vars","'extendObservable' is defined but never used.","Identifier","unusedVar",{"range":"275","text":"274"},{"range":"276","text":"274"},{"range":"277","text":"274"},{"range":"278","text":"274"},{"range":"279","text":"274"},{"range":"280","text":"274"},"'project' is assigned a value but never used.",{"range":"281","text":"274"},{"range":"282","text":"274"},{"range":"283","text":"274"},"dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"284","text":"285"},{"range":"286","text":"274"},{"range":"287","text":"274"},{"range":"288","text":"274"},{"range":"289","text":"274"},{"range":"290","text":"274"},{"range":"291","text":"274"},"'toJS' is defined but never used.",{"range":"292","text":"274"},{"range":"293","text":"274"},{"range":"294","text":"274"},{"range":"295","text":"274"},{"range":"296","text":"274"},{"range":"297","text":"274"},{"range":"298","text":"274"},{"range":"299","text":"274"},"'CommentGroupViewModel' is defined but never used.","'makeObservable' is defined but never used.","'observable' is defined but never used.",{"range":"300","text":"274"},{"range":"301","text":"274"},"no-global-assign","no-unsafe-negation",[-1,0],"",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[1156,1172],"\r\n            ?.",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]]