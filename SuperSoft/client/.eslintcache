[{"C:\\SuperSoft\\SuperSoft\\client\\src\\index.tsx":"1","C:\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts":"2","C:\\SuperSoft\\SuperSoft\\client\\src\\App.tsx":"3","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx":"4","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx":"5","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Main\\Main.tsx":"6","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyWorkPage.tsx":"7","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\ProjectsPage.tsx":"8","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\UsersPage.tsx":"9","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\ProjectStore.tsx":"10","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx":"11","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\CommentsStore.tsx":"12","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyTasks.tsx":"13","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskStatus.ts":"14","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddProject.tsx":"15","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Projects.tsx":"16","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Project.tsx":"17","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddUserToProject.tsx":"18","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\AddTask.tsx":"19","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Tasks.tsx":"20","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskRole.ts":"21","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\Users.tsx":"22","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentGroupViewModel.ts":"23","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserReadModel.ts":"24","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\Role.ts":"25","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\User.tsx":"26","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\AddUser.tsx":"27","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\ProjectViewModel.ts":"28","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserViewModel.ts":"29","C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\renderSpinner.tsx":"30","C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\translater.tsx":"31","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Authorization.tsx":"32","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Task.tsx":"33","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\TaskViewModel.ts":"34","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskPriority.ts":"35","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskType.ts":"36","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\ProjectRole.ts":"37","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Comments\\Comments.tsx":"38","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Comments\\AddComment.tsx":"39","C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\formatDate.tsx":"40","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\index.tsx":"41","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts":"42","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\App.tsx":"43","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx":"44","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx":"45","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Authorization.tsx":"46","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\ProjectViewModel.ts":"47","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserReadModel.ts":"48","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentGroupViewModel.ts":"49","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserViewModel.ts":"50","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\formatDate.tsx":"51","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\renderSpinner.tsx":"52","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\translater.tsx":"53","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\TaskViewModel.ts":"54","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Registration.tsx":"55","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Main\\AdminMain.tsx":"56","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Main\\UserMain.tsx":"57","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\CourseStore.tsx":"58","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\LessonStore.tsx":"59","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CourseViewModel.ts":"60","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserCourseViewModel.ts":"61","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\LessonViewModel.ts":"62","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx":"63","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\UserRole.ts":"64","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserSubtaskViewModel.ts":"65","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\CommentStore.tsx":"66","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\WordStore.tsx":"67","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Courses\\CoursesPage.tsx":"68","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\DictionaryPage.tsx":"69","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Courses\\Course.tsx":"70","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Courses\\AddNewCourse.tsx":"71","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\LessonsMenu.tsx":"72","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\LessonPage.tsx":"73","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\CompletedHomeworkPage.tsx":"74","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Homework\\HomeworkPage.tsx":"75","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Lesson\\Lesson.tsx":"76","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\AddOrUpdateNewLesson.tsx":"77","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\UserHomework.tsx":"78","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Lesson\\Content.tsx":"79","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\ContentUpload.tsx":"80","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\TaskUpload.tsx":"81","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\Task.tsx":"82","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\CompletedHomework.tsx":"83","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\SubtaskType.ts":"84","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserTaskViewModel.ts":"85","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Lesson\\Material.tsx":"86","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\TaskReadModel.ts":"87","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\TaskUploadWindow.tsx":"88","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\DetailedAnswerSubtask.tsx":"89","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\TaskEdit.tsx":"90","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\FillGapsSubtask.tsx":"91","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\LoadAudioSubtask.tsx":"92","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\RightVerbFormSubtask.tsx":"93","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\LoadFileSubtask.tsx":"94","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\consts\\TaskTypeTranslater.tsx":"95","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\CompletedTask.tsx":"96","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserSubtaskReadModel.ts":"97","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\SubtaskReadModel.ts":"98","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\SubtaskViewModel.ts":"99","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserSubtaskAnswerGroupReadModel.ts":"100","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskType.ts":"101","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\SubtaskUploadWindow.tsx":"102","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\getTaskTitle.tsx":"103","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\subtaskTranspiler.tsx":"104","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\getTooltipText.tsx":"105","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\WordReadModel.ts":"106","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserWordViewModel.ts":"107","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\WordsTrainingPage.tsx":"108","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\Words.tsx":"109","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\Word.tsx":"110","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\WordViewModel.ts":"111","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\AddOrUpdateWord.tsx":"112","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\PartOfSpeech.ts":"113","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\transformer.tsx":"114","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\ExampleReadModel.ts":"115","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\WordTrainingType.ts":"116","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\Settings.tsx":"117","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\CompletingStatus.ts":"118","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\TrainingTypes\\ShowWordTraining.tsx":"119","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\TrainingStore.tsx":"120","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Training\\TrainingPage.tsx":"121","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Training\\TrainingContent.tsx":"122","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\Search.tsx":"123","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\TagReadModel.ts":"124","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserWordReadModel.ts":"125","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\TrainingTypes\\EnglishWordRussianMeaningTraining.tsx":"126","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\TrainingTypes\\RussianWordEnglishWordTraining.tsx":"127","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\shuffleWords.tsx":"128","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\AddSubtask.tsx":"129"},{"size":704,"mtime":1607787725088,"results":"130","hashOfConfig":"131"},{"size":425,"mtime":1607420618541,"results":"132","hashOfConfig":"131"},{"size":1092,"mtime":1608407182954,"results":"133","hashOfConfig":"131"},{"size":1207,"mtime":1608718514662,"results":"134","hashOfConfig":"131"},{"size":2405,"mtime":1608718319712,"results":"135","hashOfConfig":"131"},{"size":2558,"mtime":1608717577926,"results":"136","hashOfConfig":"131"},{"size":3541,"mtime":1608557262746,"results":"137","hashOfConfig":"131"},{"size":1005,"mtime":1608490669706,"results":"138","hashOfConfig":"131"},{"size":673,"mtime":1608370217935,"results":"139","hashOfConfig":"131"},{"size":3086,"mtime":1608720092368,"results":"140","hashOfConfig":"131"},{"size":2923,"mtime":1608619065455,"results":"141","hashOfConfig":"131"},{"size":1835,"mtime":1608718968831,"results":"142","hashOfConfig":"131"},{"size":4419,"mtime":1608733592437,"results":"143","hashOfConfig":"131"},{"size":256,"mtime":1608743121589,"results":"144","hashOfConfig":"131"},{"size":6943,"mtime":1608709178403,"results":"145","hashOfConfig":"131"},{"size":3253,"mtime":1608618370542,"results":"146","hashOfConfig":"131"},{"size":8107,"mtime":1608719005032,"results":"147","hashOfConfig":"131"},{"size":6274,"mtime":1608734357365,"results":"148","hashOfConfig":"131"},{"size":12974,"mtime":1608743524781,"results":"149","hashOfConfig":"131"},{"size":3481,"mtime":1608744419351,"results":"150","hashOfConfig":"131"},{"size":252,"mtime":1608743121581,"results":"151","hashOfConfig":"131"},{"size":1206,"mtime":1608370045224,"results":"152","hashOfConfig":"131"},{"size":366,"mtime":1608743121494,"results":"153","hashOfConfig":"131"},{"size":399,"mtime":1608743121559,"results":"154","hashOfConfig":"131"},{"size":290,"mtime":1608743121586,"results":"155","hashOfConfig":"131"},{"size":3678,"mtime":1608530673218,"results":"156","hashOfConfig":"131"},{"size":6700,"mtime":1608617434826,"results":"157","hashOfConfig":"131"},{"size":376,"mtime":1608743121526,"results":"158","hashOfConfig":"131"},{"size":403,"mtime":1608743121537,"results":"159","hashOfConfig":"131"},{"size":164,"mtime":1608361997793,"results":"160","hashOfConfig":"131"},{"size":2531,"mtime":1608734413778,"results":"161","hashOfConfig":"131"},{"size":3093,"mtime":1608489549893,"results":"162","hashOfConfig":"131"},{"size":11518,"mtime":1608555987750,"results":"163","hashOfConfig":"131"},{"size":665,"mtime":1608743121531,"results":"164","hashOfConfig":"131"},{"size":247,"mtime":1608743121594,"results":"165","hashOfConfig":"131"},{"size":230,"mtime":1608743121591,"results":"166","hashOfConfig":"131"},{"size":268,"mtime":1608743121583,"results":"167","hashOfConfig":"131"},{"size":2264,"mtime":1608719008227,"results":"168","hashOfConfig":"131"},{"size":2052,"mtime":1608718971081,"results":"169","hashOfConfig":"131"},{"size":237,"mtime":1608621198055,"results":"170","hashOfConfig":"131"},{"size":704,"mtime":1607787725088,"results":"171","hashOfConfig":"172"},{"size":425,"mtime":1607420618541,"results":"173","hashOfConfig":"172"},{"size":3061,"mtime":1609927449532,"results":"174","hashOfConfig":"172"},{"size":1852,"mtime":1610974098523,"results":"175","hashOfConfig":"172"},{"size":1829,"mtime":1610358768890,"results":"176","hashOfConfig":"172"},{"size":3030,"mtime":1609926194055,"results":"177","hashOfConfig":"172"},{"size":376,"mtime":1608743121526,"results":"178","hashOfConfig":"172"},{"size":399,"mtime":1608743121559,"results":"179","hashOfConfig":"172"},{"size":338,"mtime":1609924088938,"results":"180","hashOfConfig":"172"},{"size":388,"mtime":1609924088964,"results":"181","hashOfConfig":"172"},{"size":237,"mtime":1608621198055,"results":"182","hashOfConfig":"172"},{"size":164,"mtime":1608361997793,"results":"183","hashOfConfig":"172"},{"size":547,"mtime":1610611940411,"results":"184","hashOfConfig":"172"},{"size":470,"mtime":1609924088959,"results":"185","hashOfConfig":"172"},{"size":3769,"mtime":1609926194193,"results":"186","hashOfConfig":"172"},{"size":3910,"mtime":1611218710254,"results":"187","hashOfConfig":"172"},{"size":3684,"mtime":1609928311653,"results":"188","hashOfConfig":"172"},{"size":2697,"mtime":1610358768848,"results":"189","hashOfConfig":"172"},{"size":3971,"mtime":1610093126137,"results":"190","hashOfConfig":"172"},{"size":286,"mtime":1611399399613,"results":"191","hashOfConfig":"172"},{"size":385,"mtime":1610279419634,"results":"192","hashOfConfig":"172"},{"size":338,"mtime":1611399399615,"results":"193","hashOfConfig":"172"},{"size":7189,"mtime":1611218274743,"results":"194","hashOfConfig":"172"},{"size":229,"mtime":1611399399672,"results":"195","hashOfConfig":"172"},{"size":567,"mtime":1611399399626,"results":"196","hashOfConfig":"172"},{"size":295,"mtime":1610440144599,"results":"197","hashOfConfig":"172"},{"size":6127,"mtime":1611399393089,"results":"198","hashOfConfig":"172"},{"size":4025,"mtime":1610011110587,"results":"199","hashOfConfig":"172"},{"size":4125,"mtime":1610961293611,"results":"200","hashOfConfig":"172"},{"size":3309,"mtime":1610015136642,"results":"201","hashOfConfig":"172"},{"size":3970,"mtime":1610529118267,"results":"202","hashOfConfig":"172"},{"size":5552,"mtime":1610095807977,"results":"203","hashOfConfig":"172"},{"size":3457,"mtime":1610465801881,"results":"204","hashOfConfig":"172"},{"size":688,"mtime":1610358768866,"results":"205","hashOfConfig":"172"},{"size":1218,"mtime":1610465786838,"results":"206","hashOfConfig":"172"},{"size":1578,"mtime":1610357685459,"results":"207","hashOfConfig":"172"},{"size":6441,"mtime":1610018805150,"results":"208","hashOfConfig":"172"},{"size":1739,"mtime":1610359651594,"results":"209","hashOfConfig":"172"},{"size":1159,"mtime":1610039766849,"results":"210","hashOfConfig":"172"},{"size":2196,"mtime":1610093343411,"results":"211","hashOfConfig":"172"},{"size":4065,"mtime":1610267256393,"results":"212","hashOfConfig":"172"},{"size":7564,"mtime":1611218620209,"results":"213","hashOfConfig":"172"},{"size":1219,"mtime":1610439306270,"results":"214","hashOfConfig":"172"},{"size":330,"mtime":1611399399671,"results":"215","hashOfConfig":"172"},{"size":332,"mtime":1611399399628,"results":"216","hashOfConfig":"172"},{"size":1570,"mtime":1610021337152,"results":"217","hashOfConfig":"172"},{"size":563,"mtime":1611399399646,"results":"218","hashOfConfig":"172"},{"size":5415,"mtime":1610267997984,"results":"219","hashOfConfig":"172"},{"size":4754,"mtime":1611216908493,"results":"220","hashOfConfig":"172"},{"size":1915,"mtime":1610269543295,"results":"221","hashOfConfig":"172"},{"size":8223,"mtime":1611216928894,"results":"222","hashOfConfig":"172"},{"size":5628,"mtime":1611217000975,"results":"223","hashOfConfig":"172"},{"size":8785,"mtime":1611216944612,"results":"224","hashOfConfig":"172"},{"size":5624,"mtime":1611217014704,"results":"225","hashOfConfig":"172"},{"size":637,"mtime":1610097038609,"results":"226","hashOfConfig":"172"},{"size":1644,"mtime":1610438869790,"results":"227","hashOfConfig":"172"},{"size":443,"mtime":1611399399650,"results":"228","hashOfConfig":"172"},{"size":419,"mtime":1611399399643,"results":"229","hashOfConfig":"172"},{"size":531,"mtime":1611399399619,"results":"230","hashOfConfig":"172"},{"size":367,"mtime":1611399399649,"results":"231","hashOfConfig":"172"},{"size":327,"mtime":1611399399673,"results":"232","hashOfConfig":"172"},{"size":3946,"mtime":1611132015745,"results":"233","hashOfConfig":"172"},{"size":922,"mtime":1610266646824,"results":"234","hashOfConfig":"172"},{"size":844,"mtime":1610267491403,"results":"235","hashOfConfig":"172"},{"size":1826,"mtime":1610268304124,"results":"236","hashOfConfig":"172"},{"size":509,"mtime":1611399399655,"results":"237","hashOfConfig":"172"},{"size":454,"mtime":1611399399631,"results":"238","hashOfConfig":"172"},{"size":7937,"mtime":1610909520461,"results":"239","hashOfConfig":"172"},{"size":1526,"mtime":1610699172367,"results":"240","hashOfConfig":"172"},{"size":5163,"mtime":1610969449253,"results":"241","hashOfConfig":"172"},{"size":445,"mtime":1611399399632,"results":"242","hashOfConfig":"172"},{"size":8134,"mtime":1610614121978,"results":"243","hashOfConfig":"172"},{"size":265,"mtime":1611399399675,"results":"244","hashOfConfig":"172"},{"size":471,"mtime":1611132687334,"results":"245","hashOfConfig":"172"},{"size":260,"mtime":1611399399638,"results":"246","hashOfConfig":"172"},{"size":242,"mtime":1611399399676,"results":"247","hashOfConfig":"172"},{"size":4575,"mtime":1610878752632,"results":"248","hashOfConfig":"172"},{"size":249,"mtime":1611399399670,"results":"249","hashOfConfig":"172"},{"size":1290,"mtime":1610907301339,"results":"250","hashOfConfig":"172"},{"size":409,"mtime":1610974495381,"results":"251","hashOfConfig":"172"},{"size":3719,"mtime":1611134740355,"results":"252","hashOfConfig":"172"},{"size":3103,"mtime":1611218817608,"results":"253","hashOfConfig":"172"},{"size":3032,"mtime":1610961477487,"results":"254","hashOfConfig":"172"},{"size":253,"mtime":1611399399644,"results":"255","hashOfConfig":"172"},{"size":509,"mtime":1611399399652,"results":"256","hashOfConfig":"172"},{"size":3021,"mtime":1610908909781,"results":"257","hashOfConfig":"172"},{"size":3095,"mtime":1610908908507,"results":"258","hashOfConfig":"172"},{"size":335,"mtime":1610907535944,"results":"259","hashOfConfig":"172"},{"size":2063,"mtime":1611132984953,"results":"260","hashOfConfig":"172"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},"18g08rn",{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"270","usedDeprecatedRules":"263"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"273","usedDeprecatedRules":"263"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"276","usedDeprecatedRules":"263"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"279","usedDeprecatedRules":"263"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"282","usedDeprecatedRules":"263"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"285","usedDeprecatedRules":"263"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"288","usedDeprecatedRules":"263"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"291","usedDeprecatedRules":"263"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"294","usedDeprecatedRules":"263"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"297","usedDeprecatedRules":"263"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"302","usedDeprecatedRules":"263"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"305","usedDeprecatedRules":"263"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"308","usedDeprecatedRules":"263"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"311","usedDeprecatedRules":"263"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"314","usedDeprecatedRules":"263"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"317","usedDeprecatedRules":"263"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"322","usedDeprecatedRules":"263"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"331","usedDeprecatedRules":"263"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"334","usedDeprecatedRules":"263"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"341","usedDeprecatedRules":"263"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"344","usedDeprecatedRules":"263"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"347","usedDeprecatedRules":"263"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"350","usedDeprecatedRules":"263"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"263"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"361","usedDeprecatedRules":"263"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"364","usedDeprecatedRules":"365"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"368","usedDeprecatedRules":"263"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pty4v8",{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"375","messages":"376","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"377","messages":"378","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"379","messages":"380","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"389","messages":"390","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"391","messages":"392","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"393","messages":"394","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"397","messages":"398","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"399","messages":"400","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"401","messages":"402","errorCount":4,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"403","messages":"404","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"405","messages":"406","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"407","messages":"408","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"413","messages":"414","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"419","messages":"420","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"421","messages":"422","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"423","messages":"424","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"425","messages":"426","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"427","messages":"428","errorCount":2,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"429","messages":"430","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"431","messages":"432","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"433","messages":"434","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"435","messages":"436","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"437","messages":"438","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"439","messages":"440","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"441","messages":"442","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"443","messages":"444","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"445","messages":"446","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"447","messages":"448","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"449","messages":"450","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"451","messages":"452","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"453","messages":"454","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"455","messages":"456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"459","messages":"460","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"461","messages":"462","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"463","messages":"464","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"465","messages":"466","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"467","messages":"468","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"469","messages":"470","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"471","messages":"472","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"473","messages":"474","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"475","messages":"476","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"477","messages":"478","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"479","messages":"480","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"481","messages":"482","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"487","messages":"488","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"489","messages":"490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"491","messages":"492","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"493","messages":"494","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"495","messages":"496","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"497","messages":"498","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"499","messages":"500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"501","messages":"502","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"503","messages":"504","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"505","messages":"506","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"507","messages":"508","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"509","messages":"510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"511","messages":"512","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"513","messages":"514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"515","messages":"516","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"517","messages":"518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"519","messages":"520","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"521","messages":"522","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"523","messages":"524","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"525","messages":"526","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"527","messages":"528","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"529","messages":"530","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"531","messages":"532","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"533","messages":"534","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"535","messages":"536","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"537","messages":"538","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"539","messages":"540","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"541","messages":"542","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"543","messages":"544","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\SuperSoft\\SuperSoft\\client\\src\\index.tsx",[],["547","548"],"C:\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\App.tsx",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx",["549","550"],"﻿import {observable, makeObservable, extendObservable} from \"mobx\";\r\nimport UserStore from \"./UserStore\";\r\nimport ProjectStore from \"./ProjectStore\";\r\nimport TaskStore from \"./TaskStore\";\r\nimport CommentsStore from \"./CommentsStore\";\r\n\r\nexport class RootStore {\r\n    userStore: UserStore;\r\n    taskStore: TaskStore;\r\n    projectStore: ProjectStore;\r\n    commentStore: CommentsStore;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            userStore: observable,\r\n            taskStore: observable,\r\n            projectStore: observable,\r\n            commentStore: observable\r\n        });\r\n        this.userStore = new UserStore();\r\n        this.taskStore = new TaskStore();\r\n        this.projectStore = new ProjectStore();\r\n        this.commentStore = new CommentsStore();\r\n    }\r\n\r\n    reset() {\r\n        this.exit().then(() => {\r\n            this.userStore = new UserStore();\r\n            this.taskStore = new TaskStore();\r\n            this.projectStore = new ProjectStore();\r\n            this.commentStore = new CommentsStore();\r\n        });\r\n    }\r\n\r\n    async exit() {\r\n        const response = await fetch(\"/exit\");\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default RootStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx",["551"],"﻿import { UserViewModel } from \"../Typings/viewModels/UserViewModel\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport { UserReadModel } from \"../Typings/viewModels/UserReadModel\";\r\n\r\nclass UserStore {\r\n    currentUser: UserViewModel;\r\n    users: UserViewModel[];\r\n    authorizationRequired: boolean = true;\r\n    wrongCredetianals: boolean = false;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            users: observable,\r\n            currentUser: observable,\r\n            authorizationRequired: observable,\r\n            wrongCredetianals: observable,\r\n        });\r\n        this.users = new Array<UserViewModel>();\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        this.getCurrentUser();\r\n        this.getUsers();\r\n    }\r\n\r\n    async getCurrentUser() {\r\n        const response = await fetch(\"/getcurrentuser\");\r\n        if(response.status === 200) {\r\n            this.currentUser = await response.json();\r\n            this.authorizationRequired = false;\r\n        } else {\r\n            this.authorizationRequired = true;\r\n        }\r\n    }\r\n\r\n    async getUsers() {\r\n        const response = await fetch(\"/getusers\");\r\n        this.users = await response.json();\r\n    }\r\n\r\n    async deleteUser(userId: number) {\r\n        const response = await fetch(\"/deleteuser\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: userId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getUsers();\r\n        }\r\n    }\r\n\r\n    async addOrUpdateUser(user: UserReadModel) {\r\n        const response = await fetch(\"/addorupdateuser\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: user.id, firstName: user.firstName, lastName: user.lastName, email: user.email, role: user.role, password: user.password})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getUsers();\r\n        }\r\n        return response.status;\r\n    }\r\n\r\n    @action\r\n    authorizationRequire(required: boolean) {\r\n        this.authorizationRequired = required;\r\n    }\r\n\r\n    @action\r\n    wrongCredetianalsToggle(turn: boolean) {\r\n        this.wrongCredetianals = turn;\r\n    }\r\n}\r\n\r\nexport default UserStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Main\\Main.tsx",["552"],"﻿import React from \"react\";\r\nimport { IMainProps } from \"./IMainProps\";\r\nimport { Card, CardHeader, Nav, NavItem, Button } from \"reactstrap\";\r\nimport { NavLink, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { MyWorkPage } from \"../MyWork/MyWorkPage\";\r\nimport { ProjectsPage } from \"../Projects/ProjectsPage\";\r\nimport { UsersPage } from \"../Users/UsersPage\";\r\nimport { observer } from  \"mobx-react\";\r\nimport 'react-calendar/dist/Calendar.css'\r\n\r\n@observer\r\nexport class Main extends React.Component<IMainProps> {\r\n    render() {\r\n        return(\r\n            <>\r\n                <Card>\r\n                    <CardHeader>\r\n                        <Nav tabs className=\"nav\">\r\n                              <NavItem>\r\n                                  <NavLink to=\"/mywork\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}} activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>МОЯ РАБОТА</NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink to=\"/projects\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}} activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>ПРОЕКТЫ</NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink to=\"/users\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}} activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>ПОЛЬЗОВАТЕЛИ</NavLink>\r\n                              </NavItem>\r\n                            <Button\r\n                                outline color=\"primary\"\r\n                                onClick={() => this.exit()}>\r\n                                ВЫЙТИ\r\n                            </Button>\r\n                        </Nav>\r\n                    </CardHeader>\r\n                </Card>\r\n                <Switch>\r\n                    <Route exact path=\"/mywork\" \r\n                         render={(props) => <MyWorkPage store={this.props.store} />} />\r\n                    <Route exact path=\"/projects\"\r\n                         render={(props) => <ProjectsPage store={this.props.store} />} />\r\n                    <Route exact path=\"/users\"\r\n                         render={(props) => <UsersPage store={this.props.store} />} />\r\n                    <Redirect to=\"/mywork\" />\r\n                </Switch>\r\n            </>\r\n        );\r\n    }\r\n\r\n    exit() {\r\n        this.props.store.reset();\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyWorkPage.tsx",["553"],"﻿import React from \"react\";\r\nimport { Col, Nav, NavItem, Row, TabContent, TabPane, NavLink } from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\nimport { MyTasks } from \"./MyTasks\";\r\nimport { observer } from \"mobx-react\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport { IMyWorkProps } from \"./IMyWorkProps\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\n\r\n@observer\r\nexport class  MyWorkPage extends React.Component<IMyWorkProps> {\r\n    activeTab: string = \"1\";\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n           activeTab: observable\r\n       });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{marginTop: 35}} className=\"container-fluid\">\r\n            <Row>\r\n                <Col sm=\"12\">\r\n                    <Nav tabs style={{fontSize: \"1.4em\"}}>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                to=\"#\"\r\n                                activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                className={classnames({ active: this.activeTab === \"1\"})}\r\n                                onClick={(e) => this.toggleTab(\"1\")}\r\n                            >Текущие</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                to=\"#\"\r\n                                activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                className={classnames({ active: this.activeTab === \"2\"})}\r\n                                onClick={(e) => this.toggleTab(\"2\")}>Законченные</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                to=\"#\"\r\n                                activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                className={classnames({ active: this.activeTab === \"3\"})}\r\n                                onClick={(e) => this.toggleTab(\"3\")}>Будущие</NavLink>\r\n                        </NavItem>\r\n                    </Nav>\r\n                    <TabContent activeTab={this.activeTab}>\r\n                        <TabPane tabId=\"1\">\r\n                            <Row>\r\n                                <Col sm=\"12\">\r\n                                    <MyTasks store={this.props.store} tasksStatus={TaskStatus.InProgress}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </TabPane>\r\n                        <TabPane tabId=\"2\">\r\n                            <Row>\r\n                                <Col sm=\"12\">\r\n                                    <MyTasks store={this.props.store} tasksStatus={TaskStatus.Completed}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </TabPane>\r\n                        <TabPane tabId=\"3\">\r\n                            <Row>\r\n                                <Col sm=\"12\">\r\n                                    <MyTasks store={this.props.store} tasksStatus={TaskStatus.Future}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </TabPane>\r\n                    </TabContent>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n    }\r\n\r\n    @action\r\n    toggleTab(activeTab: string): void {\r\n        this.activeTab = activeTab;\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\ProjectsPage.tsx",["554"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { AddProject } from \"./AddProject\";\r\nimport { Projects } from \"./Projects\";\r\nimport { makeObservable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nexport class  ProjectsPage extends React.Component<IProjectsProps> {\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\" style={{marginTop: \"30px\"}}>\r\n                <div className=\"row justify-content-center\">\r\n                    <AddProject store={this.props.store} />\r\n                </div>\r\n                <div className=\"row justify-content-center\" style={{marginTop: \"20px\"}}>\r\n                    <div className=\"col-lg-12 col-sm-12\">\r\n                        <Projects store={this.props.store} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\UsersPage.tsx",["555"],"﻿import React from \"react\";\r\nimport { IUsersProps } from \"./IUsersProps\";\r\nimport { Users } from \"./Users\";\r\nimport {AddUser} from \"./AddUser\";\r\n\r\nexport class  UsersPage extends React.Component<IUsersProps> {\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\" style={{marginTop: \"30px\"}}>\r\n                <div className=\"row justify-content-center\">\r\n                    <AddUser store={this.props.store}/>\r\n                </div>\r\n                <div className=\"row justify-content-center\" style={{marginTop: \"20px\"}}>\r\n                    <Users store={this.props.store}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\ProjectStore.tsx",["556"],"﻿import { ProjectViewModel } from \"../Typings/viewModels/ProjectViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { ProjectRole } from \"../Typings/enums/ProjectRole\";\r\nimport { UserViewModel } from \"../Typings/viewModels/UserViewModel\";\r\n\r\nclass ProjectStore {\r\n    public projects: ProjectViewModel[] = new Array<ProjectViewModel>(0);\r\n    public choosenProject: ProjectViewModel = new ProjectViewModel();\r\n    public choosenProjectUsers: UserViewModel[] = new Array<UserViewModel>(0);\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            projects: observable,\r\n            choosenProject: observable,\r\n            choosenProjectUsers: observable\r\n        });\r\n        this.getProjects();\r\n    }\r\n\r\n    setChoosenProject(project: ProjectViewModel): void {\r\n        this.choosenProject = project;\r\n    }\r\n\r\n    async getProjectUsers(projectId: number) {\r\n        const response = await fetch(\"/getprojectusers\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: projectId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.choosenProjectUsers = await response.json();\r\n        }\r\n    }\r\n\r\n    async getProjects() {\r\n        const response = await fetch(\"/getprojects\");\r\n        if(response.status === 200) {\r\n            let projects = await response.json();\r\n            this.projects = projects;\r\n            this.choosenProject = projects[0];\r\n        } else {\r\n            return new Array<ProjectViewModel>(0);\r\n        }\r\n    }\r\n\r\n    async addNewProject(name: string, description: string, startDate: Date | Date[], deadlineDate: Date | Date[], responsibleId: number) {\r\n        const response = await fetch(\"/addorupdateproject\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({ name: name, description: description,startDate: startDate, deadlineDate: deadlineDate, responsiblePerson: responsibleId })\r\n        });\r\n        if(response.status === 200) {\r\n            this.getProjects();\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n    \r\n    async attachUserToProject(projectId: number, userId: number, projectRole: ProjectRole) {\r\n        const response = await fetch(\"/attachusertoproject\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({userId: userId, role: projectRole, projectId: projectId})\r\n        });\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async deleteProject(projectId: number) {\r\n        const response = await fetch(\"/deleteproject\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: projectId})\r\n        });\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default ProjectStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx",["557"],"﻿import { makeObservable, observable } from \"mobx\";\r\nimport { UserTaskViewModel } from \"../Typings/viewModels/UserTaskViewModel\";\r\nimport { TaskViewModel } from \"../Typings/viewModels/TaskViewModel\";\r\nimport { TaskStatus } from \"../Typings/enums/TaskStatus\";\r\nimport { TaskType } from \"../Typings/enums/TaskType\";\r\nimport {TaskPriority} from \"../Typings/enums/TaskPriority\";\r\n\r\nclass TaskStore {\r\n    currentUserTasks: UserTaskViewModel[];\r\n    currentProjectTasks: TaskViewModel[] = new Array<TaskViewModel>();\r\n    public completedPercentage: number = 0;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            currentUserTasks: observable,\r\n            currentProjectTasks: observable,\r\n            completedPercentage: observable\r\n        });\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        this.getCurrentUserTasks();\r\n    }\r\n\r\n    async getCurrentUserTasks() {\r\n        const response = await fetch(\"/getusertasks\");\r\n        if(response.status === 200) {\r\n            this.currentUserTasks = await response.json();\r\n        } else {\r\n            this.currentUserTasks = new Array<UserTaskViewModel>(0);\r\n        }\r\n    }\r\n\r\n    async getTasks(projectId: number) {\r\n        const response = await fetch(\"/gettasks\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: projectId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.currentProjectTasks = await response.json();\r\n            this.computeCompletedPercentage();\r\n        }\r\n    }\r\n\r\n    computeCompletedPercentage() {\r\n        let completedTasks = this.currentProjectTasks.filter(t => t.status === TaskStatus.Completed);\r\n        let percentage = completedTasks.length / this.currentProjectTasks.length * 100;\r\n        this.completedPercentage = isNaN(percentage) ? 100 : percentage;\r\n    }\r\n\r\n    async addOrUpdateTask(header: string, description: string, startDate: Date | Date[], deadlineDate: Date | Date[], taskType: TaskType, status: TaskStatus, priority: TaskPriority, tester: number, responsible: number, author: number, id: number = 0, projectId: number = 0) {\r\n        const response = await fetch(\"/addorupdatetask\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: id, projectId: projectId, header: header, description: description, startDate: startDate, deadlineDate: deadlineDate, taskType: taskType, status: status, priority: priority, tester: tester, responsible: responsible, author: author})\r\n        });\r\n        if(response.status === 200) {\r\n            const task = await response.json();\r\n            this.currentProjectTasks.push(task);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default TaskStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\CommentsStore.tsx",["558"],"﻿import { CommentGroupViewModel } from \"../Typings/viewModels/CommentGroupViewModel\";\r\nimport { UserReadModel } from \"../Typings/viewModels/UserReadModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\n\r\nclass CommentsStore {\r\n    currentCommentGroup: CommentGroupViewModel = new CommentGroupViewModel();\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            currentCommentGroup: observable\r\n        });\r\n    }\r\n\r\n    async getCurrentTaskComments(taskId: number) {\r\n        const response = await fetch(\"/getcurrenttaskcommentgroup\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({taskId: taskId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.currentCommentGroup = await response.json();\r\n        } else {\r\n            this.currentCommentGroup = new CommentGroupViewModel();\r\n        }\r\n    }\r\n\r\n    async addComment(text: string, userId: number, groupId: number): Promise<number> {\r\n        const user = new UserReadModel();\r\n        user.id = userId;\r\n        const response = await fetch(\"/addorupdatecomment\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({text: text, groupId: groupId, user: user})\r\n        });\r\n        return response.status;\r\n    }\r\n\r\n    async deleteComment(commentId: number) {\r\n        const response = await fetch(\"/deletecomment\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: commentId})\r\n        });\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default CommentsStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyTasks.tsx",["559","560"],"﻿import React from \"react\";\r\nimport { IMyTasksProps } from \"./IMyTasksProps\";\r\nimport { Alert, Modal, Table } from 'reactstrap';\r\nimport { TaskViewModel } from \"../../Typings/viewModels/TaskViewModel\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { Task } from \"../Tasks/Task\";\r\nimport { UserTaskViewModel } from \"../../Typings/viewModels/UserTaskViewModel\";\r\nimport { translatePriority, translateTaskRole, translateTaskType } from \"../../functions/translater\";\r\nimport { formatDate } from \"../../functions/formatDate\";\r\n\r\n@observer\r\nexport class MyTasks extends React.Component<IMyTasksProps> {\r\n    taskOpen: boolean;\r\n    taskToRender: TaskViewModel;\r\n    sortDescendent: boolean = false;\r\n\r\n    componentDidMount(): void {\r\n        this.props.store.taskStore.getCurrentUserTasks();\r\n    }\r\n\r\n    sort() {\r\n        this.props.store.taskStore.currentUserTasks.sort();\r\n        this.sortDescendent = !this.sortDescendent;\r\n    }\r\n    renderSortIcon() {\r\n        return (\r\n            <>\r\n                {this.sortDescendent\r\n                    ? <i className=\"fa fa-chevron-circle-down\" aria-hidden=\"true\" onClick={() => this.sort()}/>\r\n                    : <i className=\"fa fa-chevron-circle-up\" aria-hidden=\"true\" onClick={() => this.sort()}/>\r\n                }\r\n                </>\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            taskOpen: observable\r\n        });\r\n    }\r\n\r\n    filterTasks(taskStatus: TaskStatus, currentUserTasks: UserTaskViewModel[]): UserTaskViewModel[] {\r\n        return currentUserTasks?.\r\n            filter(ut => ut.task.status === taskStatus);\r\n    }\r\n\r\n    renderAlert() {\r\n        return(\r\n            <Alert color=\"primary\">Задач пока нет!!!</Alert>\r\n        );\r\n    }\r\n\r\n    renderMyTasks(userTasks: UserTaskViewModel[]) {\r\n        return(\r\n            <Table bordered style={{backgroundColor: \"#fff\", color:\"#003B46\", marginTop: \"2%\", fontSize: \"1.2em\"}}>\r\n                {userTasks.length === 0 && this.renderAlert()}\r\n                {userTasks.length !== 0 && <thead style={{color:\"fff\"}}>\r\n                    <tr>\r\n                        <th>Номер</th>\r\n                        <th>Задача</th>\r\n                        <th>Дедлайн</th>\r\n                        <th>Приоритет{this.renderSortIcon()}</th>\r\n                        <th>Роль</th>\r\n                        <th>Тип</th>\r\n                    </tr>\r\n                </thead>}\r\n                {userTasks.length !== 0 && <tbody>\r\n                    {userTasks.map((ut) => {\r\n                        return(\r\n                            <tr key={ut.task.id} onClick={() => this.taskOpenToggle(ut.task)}>\r\n                                <th>{ut.task.id}</th>\r\n                                <th>{ut.task.header}</th>\r\n                                <th>{formatDate(ut.task.deadlineDate)}</th>\r\n                                <th>{translatePriority(ut.task.priority)}</th>\r\n                                <th>{translateTaskRole(ut.role)}</th>\r\n                                <th>{translateTaskType(ut.task.taskType)}</th>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>}\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    renderTask() {\r\n        return(\r\n            <Modal\r\n                isOpen={this.taskOpen}\r\n                toggle={() => this.taskOpenToggle()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                   onClick={() => this.taskOpenToggle()}/>\r\n                <Task store={this.props.store} task={this.taskToRender}/>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let currentTasks = this.props.store.taskStore.currentUserTasks;\r\n        let tasks = this.filterTasks(this.props.tasksStatus, currentTasks);\r\n        return(\r\n            <>\r\n                {tasks !== undefined && this.renderMyTasks(tasks)}\r\n                {tasks === undefined && this.renderAlert()}\r\n                {this.taskOpen && this.renderTask()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    taskOpenToggle(task: TaskViewModel = new TaskViewModel()) {\r\n        this.taskOpen = !this.taskOpen;\r\n        this.taskToRender = task;\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskStatus.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddProject.tsx",["561"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input, Dropdown, DropdownToggle, DropdownItem, DropdownMenu, Label } from \"reactstrap\";\r\nimport Calendar from \"react-calendar\";\r\nimport {UserViewModel} from \"../../Typings/viewModels/UserViewModel\";\r\n\r\n@observer\r\nexport class AddProject extends React.Component<IProjectsProps> {\r\n    addProjectWindowOpen: boolean;\r\n    projectName: string = \"\";\r\n    description: string = \"\";\r\n    responsibleDropdownOpen: boolean;\r\n    startDate: Date | Date[] = new Date();\r\n    deadline: Date | Date[] = new Date();\r\n    responsiblePerson: UserViewModel = new UserViewModel();\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addProjectWindowOpen: observable,\r\n            projectName: observable,\r\n            description: observable,\r\n            responsibleDropdownOpen: observable,\r\n            startDate: observable,\r\n            deadline: observable,\r\n            responsiblePerson: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.responsiblePerson = this.props.store.userStore.users[0];\r\n    }\r\n\r\n    toggleAddProjectWindow() {\r\n        this.addProjectWindowOpen = !this.addProjectWindowOpen;\r\n    }\r\n\r\n    toggleResponsibleDropdown() {\r\n        this.responsibleDropdownOpen = !this.responsibleDropdownOpen;\r\n    }\r\n\r\n    renderAddProjectWindow() {\r\n        let users = this.props.store.userStore.users;\r\n        let responsible = this.responsiblePerson;\r\n        return(\r\n            <Modal isOpen={this.addProjectWindowOpen} toggle={() => this.toggleAddProjectWindow()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                   onClick={() => this.toggleAddProjectWindow()}/>\r\n                <ModalHeader>\r\n                    СОЗДАНИЕ ПРОЕКТА\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label style={{width: \"100%\"}} align=\"center\">Название проекта</Label>\r\n                        <Input style={{width: \"90%\"}} onChange={(e) => this.inputProjectName(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\" style={{marginTop: \"10px\"}}>\r\n                        <Label style={{width: \"100%\"}} align=\"center\">Описание проекта</Label>\r\n                        <textarea style={{width: \"90%\"}} onChange={(e) => this.inputDescription(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">Дата начала</Label>\r\n                            <div style={{width: \"100%\", paddingLeft: \"15%\"}}>\r\n                                <Calendar\r\n                                    value={this.startDate}\r\n                                    onChange={(date) => this.inputDate(date, \"startDate\")}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">Дедлайн</Label>\r\n                            <div style={{width: \"100%\", paddingLeft: \"15%\"}}>\r\n                                <Calendar\r\n                                    value={this.deadline}\r\n                                    onChange={(date) => this.inputDate(date, \"deadline\")}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label style={{width: \"100%\"}} align=\"center\">Ответственный</Label>\r\n                        <Dropdown isOpen={this.responsibleDropdownOpen} toggle={() => this.toggleResponsibleDropdown()}>\r\n                            <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{responsible !== undefined ? `${responsible.firstName} ${responsible.lastName}` : \"Пока нет пользователей\"}</DropdownToggle>\r\n                            <DropdownMenu>\r\n                                {users.map((user, index) => {\r\n                                    return(\r\n                                        <>\r\n                                            <DropdownItem key={index} onClick={() => this.chooseResponsiblePerson(user)}>{user.firstName + \" \" + user.lastName}</DropdownItem>\r\n                                        </>\r\n                                    );\r\n                                })}\r\n                            </DropdownMenu>\r\n                        </Dropdown>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.saveProject()}>\r\n                        СОХРАНИТЬ\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <>\r\n                <div className=\"col-6\"/>\r\n                <div className=\"col-6\">\r\n                    <Button\r\n                        style={{width: \"100%\", borderColor: \"#66A5AD\", color: \"#66A5AD\", backgroundColor: \"#fff\"}}\r\n                        onClick={() => this.toggleAddProjectWindow()}>Создать проект</Button>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.addProjectWindowOpen && this.renderAddProjectWindow()}\r\n                {!this.addProjectWindowOpen && this.renderButton()}\r\n            </>\r\n        )\r\n    }\r\n\r\n    inputProjectName(event: React.FormEvent<HTMLInputElement>) {\r\n        this.projectName = event.currentTarget.value;\r\n    }\r\n\r\n    inputDescription(event: React.FormEvent<HTMLTextAreaElement>) {\r\n        this.description = event.currentTarget.value;\r\n    }\r\n\r\n    inputDate(date: Date | Date[], dateType: string) {\r\n        if(dateType === \"startDate\") {\r\n            this.startDate = date;\r\n        } else if(dateType === \"deadline\") {\r\n            this.deadline = date;\r\n        }\r\n    }\r\n\r\n    chooseResponsiblePerson(user: UserViewModel) {\r\n        this.responsiblePerson = user;\r\n    }\r\n\r\n    saveProject() {\r\n        this.props.store.projectStore\r\n            .addNewProject(this.projectName, this.description, this.startDate, this.deadline, this.responsiblePerson.id)\r\n            .then(() => this.addProjectWindowOpen = false);\r\n}\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Projects.tsx",["562"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { ProjectViewModel } from \"../../Typings/viewModels/ProjectViewModel\";\r\nimport { Tab, Nav, Alert } from \"react-bootstrap\";\r\nimport { Project } from \"./Project\";\r\nimport { observer } from \"mobx-react\";\r\nimport { renderSpinner } from \"../../functions/renderSpinner\";\r\n\r\n@observer\r\nexport class Projects extends React.Component<IProjectsProps> {\r\n    renderMenu(projects: ProjectViewModel[], choosenProject: ProjectViewModel) {\r\n        // @ts-ignore\r\n        return(\r\n            <Tab.Container defaultActiveKey={`${choosenProject.id === undefined ? 0 : choosenProject.id.toString()}`}>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-4\">\r\n                        <Nav variant=\"pills\" className=\"flex-column\" activeKey={`${choosenProject.id === undefined ? 0 : choosenProject.id.toString()}`}>\r\n                            <div className=\"container\">\r\n                                {projects.map((project) => {\r\n                                    return (\r\n                                        <div className=\"row\">\r\n                                            <Nav.Item key={project.id}\r\n                                                 style={{width: \"100%\"}}\r\n                                                 onClick={() => {this.changeData(project)}}>\r\n                                                <Nav.Link eventKey={project.id}>{project.name}</Nav.Link>\r\n                                            </Nav.Item>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </Nav>\r\n                    </div>\r\n                    <div className=\"col-8\">\r\n                        <Tab.Content>\r\n                            {projects.map((project) => {\r\n                                return (\r\n                                    <Tab.Pane eventKey={project.id}\r\n                                         key={project.id}>\r\n                                        <Project store={this.props.store} />\r\n                                    </Tab.Pane>\r\n                                );\r\n                            })}\r\n                        </Tab.Content>\r\n                    </div>\r\n                </div>\r\n            </Tab.Container>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let projects = this.props.store.projectStore.projects;\r\n        let choosenProject =  this.props.store.projectStore.choosenProject;\r\n        return(\r\n            <>\r\n                {projects.length === 0 && <Alert variant=\"primary\">\r\n                    <span>Пока нет никаких проектов</span>\r\n                </Alert>}\r\n                {choosenProject !== undefined && this.renderMenu(projects, choosenProject)}\r\n                {choosenProject === undefined && renderSpinner()}\r\n            </>\r\n        )\r\n    }\r\n\r\n    changeData(project: ProjectViewModel) {\r\n        this.props.store.projectStore.setChoosenProject(project);\r\n        this.props.store.projectStore.getProjectUsers(project.id);\r\n        this.props.store.taskStore.getTasks(project.id)\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Project.tsx",["563"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { AddTask } from \"../Tasks/AddTask\";\r\nimport { AddUserToProject } from \"./AddUserToProject\";\r\nimport { Tasks } from \"../Tasks/Tasks\";\r\nimport { ProjectViewModel } from \"../../Typings/viewModels/ProjectViewModel\";\r\nimport { Card, CardText, CardTitle, Label } from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\nimport { Col, Nav, NavItem, Row, TabContent, TabPane, NavLink, Alert } from \"reactstrap\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { renderSpinner } from \"../../functions/renderSpinner\";\r\nimport { observer } from \"mobx-react\";\r\nimport Circle from \"react-circle\";\r\nimport { formatDate } from \"../../functions/formatDate\";\r\n\r\n@observer\r\nexport class Project extends React.Component<IProjectsProps> {\r\n    activeTab: string = \"1\";\r\n    loaded: boolean;\r\n    notDeleted: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            activeTab: observable,\r\n            loaded: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.props.store.projectStore.getProjects();\r\n        this.props.store.taskStore.getTasks(this.props.store.projectStore.choosenProject.id)\r\n            .then(() => this.loaded = true);\r\n    }\r\n\r\n    renderProjectDiagram() {\r\n        let completedPercentage = this.props.store.taskStore.completedPercentage;\r\n        return (\r\n            <Circle\r\n                size=\"300\"\r\n                progress={completedPercentage}\r\n                />\r\n        );\r\n    }\r\n\r\n    getResponsible(responsibleId: number) {\r\n        let responsible = this.props.store.userStore.users.filter(u => u.id === responsibleId)[0];\r\n        if(responsible === undefined) {\r\n            return undefined;\r\n        } else {\r\n            return responsible;\r\n        }\r\n    }\r\n\r\n    renderResponsible(responsible: UserViewModel | undefined) {\r\n        if(responsible === undefined) {\r\n            return(\r\n                <Alert>Руководитель не выбран</Alert>\r\n            );\r\n        } else {\r\n            return(\r\n                <CardText>Руководитель: <span>{responsible?.firstName} {responsible?.lastName}</span></CardText>\r\n            )\r\n        }\r\n    }\r\n\r\n    renderProjectInfo(project: ProjectViewModel) {\r\n        let responsible = this.getResponsible(project.responsiblePerson);\r\n        return (\r\n            <div className=\"row justify-content-center\" style={{marginTop: \"35px\"}}>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                    <Card style={{backgroundColor: \"#66A5AD\", color: \"#fff\"}}>\r\n                        <CardTitle style={{fontSize: \"1.3em\"}}>{project.name}</CardTitle>\r\n                        {this.renderResponsible(responsible)}\r\n                        <CardText><Label style={{width: \"100%\", fontSize: \"1.2em\"}}>Дата начала:</Label> {formatDate(project.startDate)}</CardText>\r\n                        <CardText><Label style={{width: \"100%\", fontSize: \"1.2em\"}}>Дедлайн:</Label> {formatDate(project.deadlineDate)}</CardText>\r\n                        <CardText><Label style={{width: \"100%\", fontSize: \"1.2em\"}}>Описание:</Label> {project.description}</CardText>\r\n                    </Card>\r\n                </div>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                    {this.renderProjectDiagram()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderTasksMenu() {\r\n        return(\r\n            <div style={{marginTop: 35}} className=\"container-fluid\">\r\n                <Row>\r\n                    <Col sm=\"12\">\r\n                        <Nav tabs>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    className={classnames({ active: this.activeTab === \"1\"})}\r\n                                    onClick={(e) => this.toggleTab(\"1\")}\r\n                                >Текущие</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    className={classnames({ active: this.activeTab === \"2\"})}\r\n                                    onClick={(e) => this.toggleTab(\"2\")}>Законченные</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    className={classnames({ active: this.activeTab === \"3\"})}\r\n                                    onClick={(e) => this.toggleTab(\"3\")}>Будущие</NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                        <TabContent activeTab={this.activeTab}>\r\n                            <TabPane tabId=\"1\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <Tasks store={this.props.store} status={TaskStatus.InProgress}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                            <TabPane tabId=\"2\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <Tasks store={this.props.store} status={TaskStatus.Completed}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                            <TabPane tabId=\"3\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <Tasks store={this.props.store} status={TaskStatus.Future}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                        </TabContent>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row justify-content-center\">\r\n                    {this.notDeleted && <Alert color=\"danger\">Что-то пошло не так и проект не удалился :(</Alert>}\r\n                    <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                       onClick={() => this.deleteProject(this.props.store.projectStore.choosenProject.id)}/>\r\n                </div>\r\n                {this.renderProjectInfo(this.props.store.projectStore.choosenProject)}\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-lg-3 col-sm-6\">\r\n                        <AddTask store={this.props.store}/>\r\n                    </div>\r\n                    <div className=\"col-lg-3 col-sm-6\">\r\n                        <AddUserToProject store={this.props.store}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.loaded && this.renderTasksMenu()}\r\n                    {!this.loaded && renderSpinner()}\r\n                </div>\r\n            </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    @action\r\n    toggleTab(activeTab: string): void {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    deleteProject(projectId: number) {\r\n        this.props.store.projectStore.deleteProject(projectId)\r\n            .then((status) => {\r\n                if(status === 200) {\r\n                    this.props.store.projectStore.getProjects();\r\n                    this.notDeleted = false;\r\n                } else {\r\n                    this.notDeleted = true;\r\n                }\r\n            });\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddUserToProject.tsx",["564"],"﻿import React from \"react\";\r\nimport RootStore from \"../../stores/RootStore\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport {\r\n    Button,\r\n    Dropdown,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    Modal,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalHeader,\r\n    Alert\r\n} from \"reactstrap\";\r\nimport { ProjectRole } from \"../../Typings/enums/ProjectRole\";\r\nimport { translateProjectRole } from \"../../functions/translater\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\n\r\nexport interface IAddUserToProjectProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nexport class AddUserToProject extends React.Component<IAddUserToProjectProps> {\r\n    addUserToProjectWindowOpen: boolean;\r\n    roleDropdownOpen: boolean;\r\n    usersDropdownOpen: boolean;\r\n    choosenUser: UserViewModel;\r\n    role: ProjectRole = ProjectRole.Head;\r\n    notAttached: boolean;\r\n\r\n    componentDidMount(): void {\r\n        this.choosenUser = this.props.store.userStore.users[0];\r\n    }\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addUserToProjectWindowOpen: observable,\r\n            usersDropdownOpen: observable,\r\n            roleDropdownOpen: observable\r\n        })\r\n    }\r\n\r\n    toggleWindow() {\r\n        this.addUserToProjectWindowOpen = !this.addUserToProjectWindowOpen;\r\n    }\r\n\r\n    toggleUserDropdown() {\r\n        this.usersDropdownOpen = !this.usersDropdownOpen;\r\n    }\r\n\r\n    toggleRoleDropdown() {\r\n        this.roleDropdownOpen = !this.roleDropdownOpen;\r\n    }\r\n\r\n    renderAddUserToProjectWindow() {\r\n        let users = this.props.store.userStore.users;\r\n        let choosenUser = this.choosenUser;\r\n        return(\r\n            <Modal\r\n                style={{backgroundColor: \"#003b46\", color: \"#003b46\", fontSize: \"1.4em\"}}\r\n                isOpen={this.addUserToProjectWindowOpen}\r\n                toggle={() => this.toggleWindow()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                   onClick={() => this.toggleWindow()}/>\r\n                {this.notAttached && <Alert color=\"primary\">Что-то пошло не так и пользователь не прикрепился :(</Alert>}\r\n                <ModalHeader>ПРИКРЕПЛЕНИЕ ПОЛЬЗОВАТЕЛЯ</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-sm-6\">\r\n                            <Dropdown isOpen={this.usersDropdownOpen} toggle={() => this.toggleUserDropdown()}>\r\n                                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{choosenUser !== undefined ? `${choosenUser.firstName} ${choosenUser.lastName}` : \"Пока нет пользователей\"}</DropdownToggle>\r\n                                <DropdownMenu>\r\n                                    {users.map((user, index) => {\r\n                                        return(\r\n                                            <>\r\n                                                {<DropdownItem onClick={() => this.choosenUser = user}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                                            </>\r\n                                        );\r\n                                    })}\r\n                                </DropdownMenu>\r\n                            </Dropdown>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-sm-6\">\r\n                            <Dropdown isOpen={this.roleDropdownOpen} toggle={() => this.toggleRoleDropdown()}>\r\n                                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateProjectRole(this.role)}</DropdownToggle>\r\n                                <DropdownMenu>\r\n                                    <DropdownItem onClick={() => this.role = ProjectRole.Head}>{translateProjectRole(ProjectRole.Head)}</DropdownItem>\r\n                                    <DropdownItem onClick={() => this.role = ProjectRole.Executor}>{translateProjectRole(ProjectRole.Executor)}</DropdownItem>\r\n                                    <DropdownItem onClick={() => this.role = ProjectRole.Developer}>{translateProjectRole(ProjectRole.Developer)}</DropdownItem>\r\n                                    <DropdownItem onClick={() => this.role = ProjectRole.Tester}>{translateProjectRole(ProjectRole.Tester)}</DropdownItem>\r\n                                </DropdownMenu>\r\n                            </Dropdown>\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.attach()}\r\n                    >\r\n                        Прикрепить\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <div className=\"row justify-content-center\" style={{marginTop: \"5%\"}}>\r\n                <Button\r\n                    style={{width: \"80%\", borderColor: \"#66A5AD\", color: \"#66A5AD\", backgroundColor: \"#fff\"}}\r\n                    onClick={() => this.toggleWindow()}>Прикрепить участников</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {!this.addUserToProjectWindowOpen && this.renderButton()}\r\n                {this.addUserToProjectWindowOpen && this.renderAddUserToProjectWindow()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    attach() {\r\n        this.props.store.projectStore.attachUserToProject(this.props.store.projectStore.choosenProject.id, this.choosenUser.id, this.role)\r\n            .then((status) => {\r\n                if(status === 200) {\r\n                    this.props.store.projectStore.getProjectUsers(this.props.store.projectStore.choosenProject.id);\r\n                    this.addUserToProjectWindowOpen = false;\r\n                    this.notAttached = false;\r\n                } else {\r\n                    this.notAttached = true;\r\n                }\r\n            });\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\AddTask.tsx",["565"],"﻿import React from \"react\";\r\nimport { IAddTasksProps } from \"./IAddTasksProps\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport {\r\n    Button,\r\n    Dropdown,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    Input,\r\n    Label,\r\n    Modal,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalHeader,\r\n    Alert\r\n} from \"reactstrap\";\r\nimport Calendar from \"react-calendar\";\r\nimport { TaskType } from \"../../Typings/enums/TaskType\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\nimport { observer } from \"mobx-react\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { TaskPriority } from \"../../Typings/enums/TaskPriority\";\r\nimport { translatePriority, translateTaskType } from \"../../functions/translater\";\r\n\r\n@observer\r\nexport class AddTask extends React.Component<IAddTasksProps> {\r\n    addTaskWindowOpen: boolean;\r\n    responsibleDropdownOpen: boolean;\r\n    testerDropdownOpen: boolean;\r\n    taskTypeDropdownOpen: boolean;\r\n    priorityDropdownOpen: boolean;\r\n    taskName: string;\r\n    description: string;\r\n    startDate: Date | Date[] = new Date();\r\n    deadline: Date | Date[] = new Date();\r\n    priority: TaskPriority = TaskPriority.Average;\r\n    responsiblePerson: UserViewModel;\r\n    tester: UserViewModel;\r\n    taskType: TaskType = TaskType.Feature;\r\n    taskStatus: TaskStatus;\r\n    notSaved: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addTaskWindowOpen: observable,\r\n            responsibleDropdownOpen: observable,\r\n            testerDropdownOpen: observable,\r\n            taskTypeDropdownOpen: observable,\r\n            priorityDropdownOpen: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.responsiblePerson = this.props.store.projectStore.choosenProjectUsers[0];\r\n        this.tester = this.props.store.projectStore.choosenProjectUsers[0];\r\n    }\r\n\r\n    @action\r\n    toggleAddTaskWindow() {\r\n        this.addTaskWindowOpen = !this.addTaskWindowOpen;\r\n    }\r\n\r\n    @action\r\n    toggleResponsibleDropdown() {\r\n        this.responsibleDropdownOpen = !this.responsibleDropdownOpen;\r\n    }\r\n\r\n    toggleTesterDropdown() {\r\n        this.testerDropdownOpen = !this.testerDropdownOpen;\r\n    }\r\n\r\n    toggleTaskTypeDropdown() {\r\n        this.taskTypeDropdownOpen = !this.taskTypeDropdownOpen;\r\n    }\r\n\r\n    togglePriorityDropdown() {\r\n        this.priorityDropdownOpen = !this.priorityDropdownOpen;\r\n    }\r\n\r\n    renderTaskType() {\r\n        return(\r\n            <Dropdown \r\n                isOpen={this.taskTypeDropdownOpen}\r\n                toggle={() => this.toggleTaskTypeDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateTaskType(this.taskType)}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem onClick={() => this.taskType = TaskType.Feature}>Фича</DropdownItem>\r\n                    <DropdownItem onClick={() => this.taskType = TaskType.Bug}>Баг</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderPriority() {\r\n        return(\r\n            <Dropdown\r\n                isOpen={this.priorityDropdownOpen}\r\n                toggle={() => this.togglePriorityDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translatePriority(this.priority)}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem onClick={() => this.priority = TaskPriority.Average}>Средняя</DropdownItem>\r\n                    <DropdownItem onClick={() => this.priority = TaskPriority.High}>Высокая</DropdownItem>\r\n                    <DropdownItem onClick={() => this.priority = TaskPriority.Low}>Низкая</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        )\r\n    }\r\n\r\n    renderResponsibleDropdown() {\r\n        let users = this.props.store.projectStore.choosenProjectUsers;\r\n        let responsible = this.responsiblePerson;\r\n        return(\r\n            <Dropdown isOpen={this.responsibleDropdownOpen} toggle={() => this.toggleResponsibleDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{responsible !== undefined ? `${responsible.firstName} ${responsible.lastName}` : \"Пока нет пользователей\"}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    {users.map((user, index) => {\r\n                        return(\r\n                            <>\r\n                              {<DropdownItem key={index}  onClick={() => this.choosePerson(user, \"responsible\")}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                            </>\r\n                        );\r\n                    })}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderTesterDropdown() {\r\n        let users = this.props.store.projectStore.choosenProjectUsers;\r\n        let tester = this.tester;\r\n        return(\r\n            <Dropdown isOpen={this.testerDropdownOpen} toggle={() => this.toggleTesterDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{tester !== undefined ? `${tester.firstName} ${tester.lastName}` : \"Пока нет пользователей\"}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    {users.map((user, index) => {\r\n                        return(\r\n                            <>\r\n                                {<DropdownItem key={index}  onClick={() => this.choosePerson(user, \"tester\")}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                            </>\r\n                        );\r\n                    })}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderAddTaskWindow() {\r\n        let currentUser = this.props.store.userStore.currentUser;\r\n        return(\r\n            <Modal \r\n                style={{backgroundColor: \"#003b46\", color: \"#003b46\", fontSize: \"1.4em\"}}\r\n                isOpen={this.addTaskWindowOpen}\r\n                size=\"lg\"\r\n                centered\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                toggle={() => this.toggleAddTaskWindow()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                   onClick={() => this.toggleAddTaskWindow()}/>\r\n                <ModalHeader closeButton>СОЗДАНИЕ ЗАДАЧИ</ModalHeader>\r\n                {this.notSaved && <Alert color=\"primary\">Что-то пошло не так и задача не сохранилась!!!</Alert>}\r\n                <ModalBody>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label style={{width: \"100%\"}} align=\"center\">НАЗВАНИЕ</Label>\r\n                        <Input style={{width: \"90%\"}} onChange={(e) => this.inputTaskName(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\" style={{marginTop: \"10px\"}}>\r\n                        <Label style={{width: \"100%\"}} align=\"center\">ОПИСАНИЕ</Label>\r\n                        <textarea style={{width: \"90%\"}} onChange={(e) => this.inputDescription(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ДАТА НАЧАЛА</Label>\r\n                            <div style={{width: \"100%\", paddingLeft: \"15%\"}}>\r\n                                <Calendar\r\n                                    value={this.startDate}\r\n                                    onChange={(date) => this.inputDate(date, \"startDate\")}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ДЕДЛАЙН</Label>\r\n                            <div style={{width: \"100%\", paddingLeft: \"15%\"}}>\r\n                                <Calendar\r\n                                    value={this.deadline}\r\n                                    onChange={(date) => this.inputDate(date, \"deadline\")}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ТЕСТИРОВЩИК</Label>\r\n                            <div className=\"row justify-content-center\">\r\n                                {this.renderTesterDropdown()}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ОТВЕТСТВЕННЫЙ</Label>\r\n                            <div className=\"row justify-content-center\">\r\n                                {this.renderResponsibleDropdown()}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ТИП</Label>\r\n                            <div className=\"row justify-content-center\">\r\n                                {this.renderTaskType()}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ПРИОРИТЕТ</Label>\r\n                            <div className=\"row justify-content-center\">\r\n                                {this.renderPriority()}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label style={{width: \"100%\"}} align=\"center\">Автор:\r\n                            <span>{currentUser.firstName} {currentUser.lastName}</span>\r\n                        </Label>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.saveTask()}>\r\n                        СОХРАНИТЬ\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <div className=\"row justify-content-center\" style={{marginTop: \"5%\"}}>\r\n                <Button\r\n                    style={{width: \"80%\", borderColor: \"#66A5AD\", color: \"#66A5AD\", backgroundColor: \"#fff\"}}\r\n                    onClick={() => this.toggleAddTaskWindow()}>Создать задачу</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.addTaskWindowOpen && this.renderAddTaskWindow()}\r\n                {!this.addTaskWindowOpen && this.renderButton()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    inputTaskName(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.taskName = event.currentTarget.value;\r\n    }\r\n\r\n    inputDescription(event: React.FormEvent<HTMLTextAreaElement>): void {\r\n        this.description = event.currentTarget.value;\r\n    }\r\n\r\n    inputDate(date: Date | Date[], dateType: string): void {\r\n        if(dateType === \"startDate\") {\r\n            this.startDate = date;\r\n        } else if(dateType === \"deadline\") {\r\n            this.deadline = date;\r\n        }\r\n    }\r\n\r\n    choosePerson(user: UserViewModel, type: string): void {\r\n        if(type === \"responsible\") {\r\n            this.responsiblePerson = user;\r\n        } else if(type === \"tester\") {\r\n            this.tester = user;\r\n        }\r\n    }\r\n\r\n    saveTask() {\r\n        this.props.store.taskStore.addOrUpdateTask(this.taskName, this.description, this.startDate, this.deadline, this.taskType, this.taskStatus, this.priority, this.tester.id, this.responsiblePerson.id, this.props.store.userStore.currentUser.id, 0, this.props.store.projectStore.choosenProject.id)\r\n            .then((status) => {\r\n                if(status === 200) {\r\n                    this.props.store.taskStore.getTasks(this.props.store.projectStore.choosenProject.id);\r\n                    this.addTaskWindowOpen = false;\r\n                    this.notSaved = false;\r\n                } else {\r\n                    this.notSaved = true;\r\n                    this.addTaskWindowOpen = false;\r\n                }\r\n            });\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Tasks.tsx",["566","567"],"﻿import React from \"react\";\r\nimport { ITasksProps } from \"./ITasksProps\";\r\nimport { TaskViewModel } from \"../../Typings/viewModels/TaskViewModel\";\r\nimport { Table, Modal, Alert } from \"reactstrap\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { makeObservable, observable, toJS } from \"mobx\";\r\nimport { Task } from \"./Task\";\r\nimport { observer } from \"mobx-react\";\r\nimport { translateTaskType } from \"../../functions/translater\";\r\nimport { formatDate } from \"../../functions/formatDate\";\r\n\r\n@observer\r\nexport class Tasks extends React.Component<ITasksProps> {\r\n    taskOpen: boolean;\r\n    taskToRender: TaskViewModel;\r\n\r\n    getResponsible(responsible: number): UserViewModel {\r\n        return this.props.store.userStore.users\r\n            .filter(u => u.id === responsible)[0];\r\n    }\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            taskOpen: observable\r\n        });\r\n    }\r\n\r\n    renderTask() {\r\n        return(\r\n            <Modal\r\n                isOpen={this.taskOpen}\r\n                toggle={() => this.taskOpenToggle()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                   onClick={() => this.taskOpenToggle()}/>\r\n                <Task store={this.props.store} task={this.taskToRender}/>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    renderAlert() {\r\n        return(\r\n            <Alert color=\"primary\">Задач пока нет!!!</Alert>\r\n        );\r\n    }\r\n\r\n    renderTasks(tasks: TaskViewModel[]) {\r\n        return(\r\n            <Table bordered style={{backgroundColor: \"#fff\", color:\"#003B46\", marginTop: \"2%\", fontSize: \"1.2em\"}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Номер</th>\r\n                        <th>Задача</th>\r\n                        <th>Дедлайн</th>\r\n                        <th>Тип задачи</th>\r\n                        <th>Ответственный</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {tasks.map((task) => {\r\n                    let responsible = this.getResponsible(task.responsible);//вообще здесь лучше дропдаун сделать\r\n                    return(\r\n                        <tr key={task.id} onClick={() => this.taskOpenToggle(task)}>\r\n                            <th>{task.id}</th>\r\n                            <th>{task.header}</th>\r\n                            <th>{formatDate(task.deadlineDate)}</th>\r\n                            <th>{translateTaskType(task.taskType)}</th>\r\n                            <th>{responsible?.firstName + \" \" + responsible?.lastName}</th>\r\n                        </tr>\r\n                    );\r\n                })}\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let currentProjectTasks = this.props.store.taskStore.currentProjectTasks;\r\n        let tasks = currentProjectTasks.filter(t => t.status === this.props.status);\r\n        return(\r\n            <>\r\n                {tasks !== undefined && this.renderTasks(tasks)}\r\n                {(tasks === undefined || tasks.length === 0) && this.renderAlert()}\r\n                {this.taskOpen && this.renderTask()}\r\n            </>\r\n        )\r\n    }\r\n\r\n    taskOpenToggle(task: TaskViewModel = new TaskViewModel()) {\r\n        this.taskOpen = !this.taskOpen;\r\n        this.taskToRender = task;\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskRole.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\Users.tsx",["568"],"﻿import React from \"react\";\r\nimport { IUsersProps } from \"./IUsersProps\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { Table } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport { User } from \"./User\";\r\n\r\n@observer\r\nexport class  Users extends React.Component<IUsersProps> {\r\n    renderUsers(users: UserViewModel[]) {\r\n        return(\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Id</th>\r\n                        <th>Имя Фамилия</th>\r\n                        <th>Email</th>\r\n                        <th>Роль</th>\r\n                        <th>Управление</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {users.map(user => {\r\n                        return(\r\n                           <User store={this.props.store} currentUser={user}/>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderUsers(this.props.store.userStore.users)}\r\n            </>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentGroupViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserReadModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\Role.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\User.tsx",["569"],"﻿import React from \"react\";\r\nimport { IUserProps } from \"./IUserProps\";\r\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Button } from \"reactstrap\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Role } from \"../../Typings/enums/Role\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { observer } from \"mobx-react\";\r\nimport {UserReadModel} from \"../../Typings/viewModels/UserReadModel\";\r\nimport {translateRole} from \"../../functions/translater\";\r\n\r\n@observer\r\nexport class User extends React.Component<IUserProps> {\r\n    roleDropdownOpen: boolean;\r\n    role: Role;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            roleDropdownOpen: observable,\r\n            role: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.role = this.props.currentUser.role;\r\n    }\r\n\r\n    toggleRoleDropdown() {\r\n        this.roleDropdownOpen = !this.roleDropdownOpen;\r\n    }\r\n\r\n    chooseUserRole(role: Role) {\r\n        this.role = role;\r\n    }\r\n\r\n    renderRoleDropdown(role: Role) {\r\n        return(\r\n            <Dropdown isOpen={this.roleDropdownOpen} toggle={() => this.toggleRoleDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateRole(role)}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Developer)}>{translateRole(Role.Developer)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Tester)}>{translateRole(Role.Tester)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Administrator)}>{translateRole(Role.Administrator)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Accounter)}>{translateRole(Role.Accounter)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Marketolog)}>{translateRole(Role.Marketolog)}</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderUser(user: UserViewModel) {\r\n        return(\r\n            <tr>\r\n                <th>{user.id}</th>\r\n                <th>{user.firstName} {user.lastName}</th>\r\n                <th>{user.email}</th>\r\n                <th>{this.renderRoleDropdown(this.role)}</th>\r\n                <th>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Button color=\"success\" \r\n                            className=\"controlButton\"\r\n                            onClick={() => this.updateUser()}>СОХРАНИТЬ</Button>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Button color=\"danger\"\r\n                            className=\"controlButton\"\r\n                            onClick={() => this.deleteUser()}>УДАЛИТЬ</Button>\r\n                    </div>\r\n                </th>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let user = this.props.currentUser;\r\n        return(\r\n            <>{this.renderUser(user)}</>\r\n        );\r\n    }\r\n\r\n    updateUser() {\r\n        let currentUser = this.props.currentUser;\r\n        let user = new UserReadModel();\r\n        user.id = currentUser.id;\r\n        user.role = this.role;\r\n        user.firstName = currentUser.firstName;\r\n        user.lastName = currentUser.lastName;\r\n        user.email = currentUser.email;\r\n        this.props.store.userStore.addOrUpdateUser(user);\r\n    }\r\n\r\n    deleteUser() {\r\n        this.props.store.userStore.deleteUser(this.props.currentUser.id);\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\AddUser.tsx",["570"],"﻿import React from \"react\";\r\nimport {IUsersProps} from \"./IUsersProps\";\r\nimport {makeObservable, observable} from \"mobx\";\r\nimport {\r\n    Button,\r\n    Dropdown,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    Input,\r\n    Label,\r\n    Modal,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalHeader\r\n} from \"reactstrap\";\r\nimport {Alert} from \"react-bootstrap\";\r\nimport {Role} from \"../../Typings/enums/Role\";\r\nimport {observer} from \"mobx-react\";\r\nimport {UserReadModel} from \"../../Typings/viewModels/UserReadModel\";\r\nimport {translateRole} from \"../../functions/translater\";\r\n\r\n@observer\r\nexport class AddUser extends React.Component<IUsersProps>{\r\n    addUserWindowOpen: boolean;\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    password: string;\r\n    roleDropdownOpen: boolean;\r\n    role: Role;\r\n    notSaved: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addUserWindowOpen: observable,\r\n            roleDropdownOpen: observable\r\n        });\r\n        this.role = Role.Developer;\r\n    }\r\n\r\n    isAuthor(role: Role) {\r\n        return role === Role.Administrator;\r\n    }\r\n\r\n    toggleAddUserWindow() {\r\n        this.addUserWindowOpen = !this.addUserWindowOpen;\r\n    }\r\n\r\n    toggleRoleDropdown() {\r\n        this.roleDropdownOpen = !this.roleDropdownOpen;\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <>\r\n                <div className=\"col-6\">\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.toggleAddUserWindow()}>Добавить пользователя</Button>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderRoleDropdown() {\r\n        return(\r\n            <Dropdown isOpen={this.roleDropdownOpen} toggle={() => this.toggleRoleDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateRole(this.role)}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Developer)}>{translateRole(Role.Developer)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Administrator)}>{translateRole(Role.Administrator)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Tester)}>{translateRole(Role.Tester)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Accounter)}>{translateRole(Role.Accounter)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Marketolog)}>{translateRole(Role.Marketolog)}</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderAddUserWindow() {\r\n        return(\r\n            <Modal\r\n                isOpen={this.addUserWindowOpen}\r\n                toggle={() => this.toggleAddUserWindow()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                onClick={() => this.toggleAddUserWindow()}/>\r\n                {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и пользователь не сохранился!</Alert>}\r\n                <ModalHeader closeButton>ДОБАВЛЕНИЕ НОВОГО ПОЛЬЗОВАТЕЛЯ</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                            <Label>Имя</Label>\r\n                            <Input onChange={(e) => this.inputFirstName(e)}/>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                            <Label>Фамилия</Label>\r\n                            <Input onChange={(e) => this.inputLastName(e)}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                            <Label>Email</Label>\r\n                            <Input onChange={(e) => this.inputEmail(e)}/>\r\n                        </div>\r\n                        {this.isAuthor(this.props.store.userStore.currentUser?.role) &&\r\n                            <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                                <Label>Password</Label>\r\n                                <Input onChange={(e) => this.inputPassword(e)}/>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                            {this.renderRoleDropdown()}\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.saveUser()}>\r\n                        СОХРАНИТЬ\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.addUserWindowOpen && this.renderAddUserWindow()}\r\n                {!this.addUserWindowOpen && this.renderButton()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    inputFirstName(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.firstName = event.currentTarget.value;\r\n    }\r\n\r\n    inputLastName(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.lastName = event.currentTarget.value;\r\n    }\r\n\r\n    inputEmail(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.email = event.currentTarget.value;\r\n    }\r\n\r\n    inputPassword(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.password = event.currentTarget.value;\r\n    }\r\n\r\n    chooseRole(role: Role) {\r\n        this.role = role;\r\n    }\r\n\r\n    saveUser() {\r\n        let user = new UserReadModel();\r\n        user.firstName = this.firstName;\r\n        user.lastName = this.lastName;\r\n        user.email = this.email;\r\n        user.role = this.role;\r\n        user.password = this.password;\r\n        this.props.store.userStore.addOrUpdateUser(user)\r\n            .then(status => {\r\n                if(status !== 200) {\r\n                    this.notSaved = true;\r\n                } else {\r\n                    this.notSaved = false;\r\n                    this.addUserWindowOpen = false;\r\n                }\r\n            });\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\ProjectViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\renderSpinner.tsx",["571"],"﻿import React from \"react\";\r\nimport { Spinner } from 'reactstrap';\r\n\r\nexport function renderSpinner() {\r\n    return(\r\n        <Spinner color=\"primary\"/>\r\n    )\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\translater.tsx",["572"],"﻿import {Role} from \"../Typings/enums/Role\";\r\nimport {TaskType} from \"../Typings/enums/TaskType\";\r\nimport {TaskPriority} from \"../Typings/enums/TaskPriority\";\r\nimport {ProjectRole} from \"../Typings/enums/ProjectRole\";\r\nimport {TaskRole} from \"../Typings/enums/TaskRole\";\r\nimport {TaskStatus} from \"../Typings/enums/TaskStatus\";\r\n\r\nexport function translateRole(role: Role): string {\r\n    if(role === Role.Developer) {\r\n        return \"Разработчик\";\r\n    } else if(role === Role.Marketolog) {\r\n        return \"Маркетолог\";\r\n    } else if(role === Role.Accounter) {\r\n        return \"Бухгалтер\";\r\n    } else if(role === Role.Administrator) {\r\n        return \"Администратор\";\r\n    } else if(role === Role.Tester) {\r\n        return \"Тестировщик\";\r\n    } \r\n    return \"\";\r\n}\r\n\r\nexport function translateTaskType(taskType: TaskType): string {\r\n    if(taskType === TaskType.Bug) {\r\n        return \"Баг\"\r\n    } else if(taskType === TaskType.Feature) {\r\n        return \"Фича\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport function translatePriority(priority: TaskPriority): string {\r\n    if(priority === TaskPriority.High) {\r\n        return \"Высокая\";\r\n    } else if(priority === TaskPriority.Average) {\r\n        return \"Средняя\";\r\n    } else if(priority === TaskPriority.Low) {\r\n        return \"Низкая\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport function translateProjectRole(role: ProjectRole): string {\r\n    if(role === ProjectRole.Head) {\r\n        return \"Руководитель\";\r\n    } else if(role === ProjectRole.Executor) {\r\n        return \"Исполнитель\";\r\n    } else if(role === ProjectRole.Developer) {\r\n        return \"Разработчик\";\r\n    } else if(role === ProjectRole.Tester) {\r\n        return \"Тестировщик\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport function translateTaskRole(role: TaskRole) : string {\r\n    if(role === TaskRole.Responsible) {\r\n        return \"Ответственный\";\r\n    } else if(role === TaskRole.Author) {\r\n        return \"Автор\";\r\n    } else if(role === TaskRole.Tester) {\r\n        return \"Тестировщик\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport function translateStatus(status: TaskStatus): string {\r\n    if(status ===  TaskStatus.InProgress) {\r\n        return \"В прогрессе\";\r\n    } else if(status === TaskStatus.Completed) {\r\n        return \"Завершена\";\r\n    } else if(status === TaskStatus.Future) {\r\n        return \"Еще не начата\";\r\n    }\r\n    return \"\";\r\n} ","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Authorization.tsx",["573"],"﻿import React from \"react\";\r\nimport RootStore from \"../../stores/RootStore\";\r\nimport { Label, Input, Button, Alert }from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\n\r\ninterface IAuthorizationProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nexport class Authorization extends React.Component<IAuthorizationProps> {\r\n    email: string;\r\n    password: string;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            email: observable,\r\n            password: observable\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container\" style={{backgroundColor:\"#66A5AD\", marginTop: \"5%\", color: \"#fff\", fontSize: \"1.5em\"}}>\r\n                {this.props.store.userStore.wrongCredetianals && <div className=\"row justify-content-center\">\r\n                    <Alert color=\"danger\">Пользователя с такими данными не существует. Попробуйте ещё раз</Alert>\r\n                </div> }\r\n                <div className=\"row justify-content-center\">\r\n                    <Label style={{width: \"100%\", marginTop: \"10px\"}}>EMAIL</Label>\r\n                    <Input\r\n                        style={{width: \"80%\"}}\r\n                        onChange={(e) => this.inputEmail(e)}/>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <Label style={{width: \"100%\"}}>ПАРОЛЬ</Label>\r\n                    <Input\r\n                        style={{width: \"80%\"}}\r\n                        type=\"password\"\r\n                        onChange={(e) => this.inputPassword(e)}/>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <Button\r\n                        style={{width: \"80%\", backgroundColor: \"#07575b\", marginTop: \"25px\", marginBottom: \"15px\"}}\r\n                        onClick={() => this.authorize()}>\r\n                        ВОЙТИ\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    inputEmail(event: React.FormEvent<HTMLInputElement>) {\r\n        this.email = event.currentTarget.value;\r\n    }\r\n\r\n    inputPassword(event: React.FormEvent<HTMLInputElement>) {\r\n        this.password = event.currentTarget.value;\r\n    }\r\n\r\n    async authorize() {\r\n        const response = await fetch(\"/authorization\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({email: this.email, password: this.password})\r\n        });\r\n        if(response.status === 200) {\r\n            this.props.store.userStore.authorizationRequire(false);\r\n            this.props.store.userStore.wrongCredetianalsToggle(false);\r\n            this.props.store.userStore.getCurrentUser();\r\n        } else {\r\n            this.props.store.userStore.authorizationRequire(true);\r\n            this.props.store.userStore.wrongCredetianalsToggle(true);\r\n        }\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Task.tsx",["574"],"﻿import React from \"react\";\r\nimport { ITaskProps } from \"../MyWork/ITaskProps\";\r\nimport {\r\n    Button,\r\n    Dropdown,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalHeader,\r\n    Label\r\n} from \"reactstrap\";\r\nimport { TaskViewModel } from \"../../Typings/viewModels/TaskViewModel\";\r\nimport { renderSpinner } from \"../../functions/renderSpinner\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\nimport { TaskType } from \"../../Typings/enums/TaskType\";\r\nimport { TaskPriority } from \"../../Typings/enums/TaskPriority\";\r\nimport { translatePriority, translateStatus, translateTaskType } from \"../../functions/translater\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport Calendar from \"react-calendar\";\r\nimport {Comments} from \"../Comments/Comments\";\r\n\r\n@observer\r\nexport class Task extends React.Component<ITaskProps> {\r\n    task: TaskViewModel;\r\n    statusDropdownOpen: boolean;\r\n    priorityDropdownOpen: boolean;\r\n    typeDropdownOpen: boolean;\r\n    testerDropdownOpen: boolean;\r\n    responsibleDropdownOpen: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            statusDropdownOpen: observable,\r\n            priorityDropdownOpen: observable,\r\n            typeDropdownOpen: observable,\r\n            task: observable,\r\n            testerDropdownOpen: observable,\r\n            responsibleDropdownOpen: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.task = this.props.task;\r\n    }\r\n\r\n    renderStatusDropdown() {\r\n        return(\r\n            <>\r\n                <Dropdown\r\n                    isOpen={this.statusDropdownOpen}\r\n                    toggle={() => this.toggleStatus()}>\r\n                    <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateStatus(this.task.status)}</DropdownToggle>\r\n                    <DropdownMenu>\r\n                        <DropdownItem onClick={() => this.task.status = TaskStatus.InProgress}>{translateStatus(TaskStatus.InProgress)}</DropdownItem>\r\n                        <DropdownItem onClick={() => this.task.status = TaskStatus.Completed}>{translateStatus(TaskStatus.Completed)}</DropdownItem>\r\n                        <DropdownItem onClick={() => this.task.status = TaskStatus.Future}>{translateStatus(TaskStatus.Future)}</DropdownItem>\r\n                    </DropdownMenu>\r\n                </Dropdown>\r\n            </>\r\n        );\r\n    }\r\n\r\n    toggleStatus() {\r\n        this.statusDropdownOpen = !this.statusDropdownOpen;\r\n    }\r\n\r\n    togglePriority() {\r\n        this.priorityDropdownOpen = !this.priorityDropdownOpen;\r\n    }\r\n\r\n    toggleTypeDropdown() {\r\n        this.typeDropdownOpen = !this.typeDropdownOpen;\r\n    }\r\n\r\n    toggleResponsibleDropdown() {\r\n        this.responsibleDropdownOpen = !this.responsibleDropdownOpen;\r\n    }\r\n\r\n    toggleTesterDropdown() {\r\n        this.testerDropdownOpen = !this.testerDropdownOpen;\r\n    }\r\n\r\n    renderResponsible() {\r\n        let users = this.props.store.userStore.users;\r\n        let responsible = this.props.store.userStore.users.filter(u => u.id === this.task.responsible)[0];\r\n        return(\r\n            <Dropdown isOpen={this.responsibleDropdownOpen} toggle={() => this.toggleResponsibleDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{responsible !== undefined ? `${responsible.firstName} ${responsible.lastName}` : \"Пока нет пользователей\"}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    {users.map((user, index) => {\r\n                        return(\r\n                            <>\r\n                                {<DropdownItem key={index} onClick={() => this.task.responsible = user.id}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                            </>\r\n                        );\r\n                    })}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n    \r\n    renderTester() {\r\n        let users = this.props.store.userStore.users;\r\n        let tester = this.props.store.userStore.users.filter(u => u.id === this.task.tester)[0];\r\n        return(\r\n            <Dropdown isOpen={this.testerDropdownOpen} toggle={() => this.toggleTesterDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{tester !== undefined ? `${tester.firstName} ${tester.lastName}` : \"Пока нет пользователей\"}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    {users.map((user, index) => {\r\n                        return(\r\n                            <>\r\n                                {<DropdownItem key={index}  onClick={() => this.task.tester = user.id}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                            </>\r\n                        );\r\n                    })}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderTaskPriority() {\r\n        return(\r\n            <>\r\n                <Dropdown\r\n                    isOpen={this.priorityDropdownOpen}\r\n                    toggle={() => this.togglePriority()}>\r\n                    <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translatePriority(this.task.priority)}</DropdownToggle>\r\n                    <DropdownMenu>\r\n                        <DropdownItem onClick={() => this.task.priority = TaskPriority.Average}>{translatePriority(TaskPriority.Average)}</DropdownItem>\r\n                        <DropdownItem onClick={() => this.task.priority = TaskPriority.Low}>{translatePriority(TaskPriority.Low)}</DropdownItem>\r\n                        <DropdownItem onClick={() => this.task.priority = TaskPriority.High}>{translatePriority(TaskPriority.High)}</DropdownItem>\r\n                    </DropdownMenu>\r\n                </Dropdown>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderTypeDropdown() {\r\n        return(\r\n            <>\r\n                <Dropdown\r\n                    isOpen={this.typeDropdownOpen}\r\n                    toggle={() => this.toggleTypeDropdown()}>\r\n                    <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateTaskType(this.task.taskType)}</DropdownToggle>\r\n                    <DropdownMenu>\r\n                        <DropdownItem onClick={() => this.task.taskType = TaskType.Feature}>{translateTaskType(TaskType.Feature)}</DropdownItem>\r\n                        <DropdownItem onClick={() => this.task.taskType = TaskType.Bug}>{translateTaskType(TaskType.Bug)}</DropdownItem>\r\n                    </DropdownMenu>\r\n                </Dropdown>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderTask(task: TaskViewModel) {\r\n        let author = this.props.store.userStore.users.filter(u => u.id === task.author)[0];\r\n        return(\r\n            <>\r\n                <ModalHeader style={{fontSize: \"1.5em\"}}>{task.header}</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row justify-content-center\">\r\n                                <div className=\"col-12\">\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <p style={{fontSize: \"1.2em\"}}>{task.description}</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-lg-3 col-md-3 col-sm-12 col-xs-12\">\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <Label style={{width: \"100%\"}} align=\"center\">Приоритет: </Label>\r\n                                        {this.renderTaskPriority()}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-lg-3 col-md-3 col-sm-12 col-xs-12\">\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <Label style={{width: \"100%\"}} align=\"center\">Статус: </Label>\r\n                                        {this.renderStatusDropdown()}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-lg-3 col-md-3 col-sm-12 col-xs-12\">\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <Label style={{width: \"100%\"}} align=\"center\">Тип: </Label>\r\n                                        {this.renderTypeDropdown()}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"row justify-content-center\">\r\n                                    <Label style={{width: \"100%\"}} align=\"center\">Ответственный: </Label>\r\n                                    {this.renderResponsible()}\r\n                                </div>\r\n                                <div className=\"row justify-content-center\">\r\n                                    <Label style={{width: \"100%\"}} align=\"center\">Тестировщик: </Label>\r\n                                    {this.renderTester()}\r\n                                </div>\r\n                                <div className=\"row justify-content-center\">\r\n                                    <Label>Автор: </Label>\r\n                                    {author.firstName} {author.lastName}\r\n                                </div>\r\n                                <div className=\"row justify-content-center\">\r\n                                    <Label style={{width: \"100%\"}} align=\"center\">Дата начала: </Label>\r\n                                    <Calendar\r\n                                        value={new Date(this.task.startDate)}\r\n                                        onChange={(date) => this.task.startDate = date}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"row justify-content-center\">\r\n                                    <Label style={{width: \"100%\"}} align=\"center\">Дедлайн: </Label>\r\n                                    <Calendar\r\n                                        value={new Date(this.task.deadlineDate)}\r\n                                        onChange={(date) => this.task.deadlineDate = date}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                    </div>\r\n                    <Comments taskId={this.props.task.id} store={this.props.store}/>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.save()}>\r\n                        СОХРАНИТЬ\r\n                    </Button>\r\n                </ModalFooter>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.task !== undefined && this.renderTask(this.task)}\r\n                {this.task === undefined && renderSpinner()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    save() {\r\n        let task = this.task;\r\n        this.props.store.taskStore.addOrUpdateTask(task.header, task.description, task.startDate, task.deadlineDate, task.taskType, task.status, task.priority, task.tester,task.responsible,task.author, task.id, 0)\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\TaskViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskPriority.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskType.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\ProjectRole.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Comments\\Comments.tsx",["575"],"﻿import React from \"react\";\r\nimport { ICommentsProps } from \"./ICommentsProps\";\r\nimport { CommentViewModel } from \"../../Typings/viewModels/CommentViewModel\";\r\nimport { observer } from \"mobx-react\";\r\nimport { AddComment } from \"./AddComment\";\r\nimport { Card, CardText, CardTitle, Label } from \"reactstrap\";\r\n\r\n@observer\r\nexport class Comments extends React.Component<ICommentsProps> {\r\n    componentDidMount(): void {\r\n        this.props.store.commentStore.getCurrentTaskComments(this.props.taskId);\r\n    }\r\n\r\n    deleteComment(commentId: number) {\r\n        this.props.store.commentStore.deleteComment(commentId)\r\n            .then(() => this.props.store.commentStore.getCurrentTaskComments(this.props.taskId));\r\n    }\r\n\r\n    isAuthor(userId: number): boolean {\r\n        return this.props.store.userStore.currentUser.id === userId;\r\n    }\r\n\r\n    renderComments(comments: CommentViewModel[]) {\r\n        return (\r\n            <>\r\n                {comments.map(comment => {\r\n                    return(\r\n                        <Card sm=\"12\">\r\n                            <div className=\"row justify-content-center\">\r\n                                {this.isAuthor(comment.user.id) && <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                                   onClick={() => this.deleteComment(comment.id)}/>}\r\n                                <CardTitle>{comment.user.firstName} {comment.user.lastName}</CardTitle>\r\n                            </div>\r\n                            <div className=\"row justify-content-center\">\r\n                                <CardText>{comment.text}</CardText>\r\n                            </div>\r\n                        </Card>\r\n                    );\r\n                })}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let commentGroup = this.props.store.commentStore.currentCommentGroup;\r\n        let comments = commentGroup.comments;\r\n        return(\r\n            <>\r\n                <Label style={{width: \"100%\"}} align=\"center\">КОММЕНТАРИИ</Label>\r\n                <AddComment store={this.props.store} taskId={this.props.taskId} groupId={commentGroup.id}/>\r\n                {comments.length > 0 && this.renderComments(comments)}\r\n            </>\r\n        )\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Comments\\AddComment.tsx",["576"],"﻿import React from \"react\";\r\nimport { Input, Button, Alert } from \"reactstrap\";\r\nimport { IAddCommentsProps } from \"./IAddCommentsProps\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\n\r\n@observer\r\nexport class AddComment extends React.Component<IAddCommentsProps>{\r\n    commentText: string;\r\n    notSaved: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            commentText: observable\r\n        })\r\n    }\r\n    render() {\r\n        return(\r\n            <>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-9\">\r\n                        <Input placeholder=\"Добавить комментарий\" value={this.commentText} onChange={(e) => { this.inputComment(e) }}/>\r\n                    </div>\r\n                    <div className=\"col-3\">\r\n                        <Button style={{width: \"100%\", backgroundColor: \"#07575b\"}} \r\n                             onClick={() => this.addComment()}>Добавить</Button>\r\n                    </div>\r\n                    {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и комментарий не сохранился</Alert>}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    inputComment(event: React.FormEvent<HTMLInputElement>) {\r\n        this.commentText = event.currentTarget.value;\r\n    }\r\n\r\n    addComment() {\r\n        let commentStore = this.props.store.commentStore;\r\n        let userStore = this.props.store.userStore;\r\n        commentStore.addComment(this.commentText, userStore.currentUser.id, this.props.groupId)\r\n            .then((status) => {\r\n                if (status === 200) {\r\n                    \r\n                    commentStore.getCurrentTaskComments(this.props.taskId);\r\n                    this.commentText = \"\";\r\n                    this.notSaved = false;\r\n                } else {\r\n                    this.notSaved = true;\r\n                }\r\n            });\r\n    }\r\n}",["577","578"],"C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\formatDate.tsx",["579"],"﻿export function formatDate(dateStr: string) {\r\n    let date = new Date(dateStr);\r\n\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth() + 1;\r\n    let day = date.getDate();\r\n    return day + '-' + month + '-' + year;\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\index.tsx",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\App.tsx",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx",["580"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx",["581"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Authorization.tsx",["582"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\ProjectViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentGroupViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\formatDate.tsx",["583"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\renderSpinner.tsx",["584"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\translater.tsx",["585"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\TaskViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Registration.tsx",["586","587"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Main\\AdminMain.tsx",["588"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Main\\UserMain.tsx",["589","590","591","592","593"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\CourseStore.tsx",["594","595"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\LessonStore.tsx",["596"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CourseViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserCourseViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\LessonViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx",["597","598"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\UserRole.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserSubtaskViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\CommentStore.tsx",["599"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\WordStore.tsx",["600","601"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Courses\\CoursesPage.tsx",["602","603","604"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\DictionaryPage.tsx",["605"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Courses\\Course.tsx",["606","607","608"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Courses\\AddNewCourse.tsx",["609"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\LessonsMenu.tsx",["610","611"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\LessonPage.tsx",["612"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\CompletedHomeworkPage.tsx",["613"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Homework\\HomeworkPage.tsx",["614"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Lesson\\Lesson.tsx",["615"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\AddOrUpdateNewLesson.tsx",["616"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\UserHomework.tsx",["617","618"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Lesson\\Content.tsx",["619"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\ContentUpload.tsx",["620"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\TaskUpload.tsx",["621"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\Task.tsx",["622"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\CompletedHomework.tsx",["623"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\SubtaskType.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserTaskViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Lesson\\Material.tsx",["624"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\TaskReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\TaskUploadWindow.tsx",["625"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\DetailedAnswerSubtask.tsx",["626"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\TaskEdit.tsx",["627","628"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\FillGapsSubtask.tsx",["629"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\LoadAudioSubtask.tsx",["630"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\RightVerbFormSubtask.tsx",["631","632","633"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\LoadFileSubtask.tsx",["634"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\consts\\TaskTypeTranslater.tsx",["635"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\CompletedTask.tsx",["636","637"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserSubtaskReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\SubtaskReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\SubtaskViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserSubtaskAnswerGroupReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskType.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\SubtaskUploadWindow.tsx",["638","639"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\getTaskTitle.tsx",["640"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\subtaskTranspiler.tsx",["641"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\getTooltipText.tsx",["642"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\WordReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserWordViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\WordsTrainingPage.tsx",["643","644","645","646"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\Words.tsx",["647","648"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\Word.tsx",["649"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\WordViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\AddOrUpdateWord.tsx",["650"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\PartOfSpeech.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\transformer.tsx",["651"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\ExampleReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\WordTrainingType.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\Settings.tsx",["652"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\CompletingStatus.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\TrainingTypes\\ShowWordTraining.tsx",["653"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\TrainingStore.tsx",["654"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Training\\TrainingPage.tsx",["655","656"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Training\\TrainingContent.tsx",["657"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\Search.tsx",["658"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\TagReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserWordReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\TrainingTypes\\EnglishWordRussianMeaningTraining.tsx",["659","660","661","662"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\TrainingTypes\\RussianWordEnglishWordTraining.tsx",["663","664","665","666"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\shuffleWords.tsx",["667"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\AddSubtask.tsx",[],{"ruleId":"668","replacedBy":"669"},{"ruleId":"670","replacedBy":"671"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"676"},{"ruleId":"677","severity":1,"message":"678","line":1,"column":37,"nodeType":"679","messageId":"680","endLine":1,"endColumn":53},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"681"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"682"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"683"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"684"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"685"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"686"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"687"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"688"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"689"},{"ruleId":"690","severity":1,"message":"691","line":47,"column":32,"nodeType":"692","messageId":"693","endLine":47,"endColumn":34,"fix":"694"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"695"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"696"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"697"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"698"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"699"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"700"},{"ruleId":"677","severity":1,"message":"701","line":6,"column":38,"nodeType":"679","messageId":"680","endLine":6,"endColumn":42},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"702"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"703"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"704"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"705"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"706"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"707"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"708"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"709"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"710"},{"ruleId":"668","replacedBy":"711"},{"ruleId":"670","replacedBy":"712"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"713"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"714"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"715"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"716"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"717"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"718"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"719"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"720"},{"ruleId":"677","severity":1,"message":"721","line":3,"column":32,"nodeType":"679","messageId":"680","endLine":3,"endColumn":37},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"722"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"723"},{"ruleId":"724","severity":2,"message":"725","line":57,"column":48,"nodeType":"726","endLine":57,"endColumn":58},{"ruleId":"724","severity":2,"message":"727","line":59,"column":48,"nodeType":"726","endLine":59,"endColumn":60},{"ruleId":"724","severity":2,"message":"728","line":61,"column":48,"nodeType":"726","endLine":61,"endColumn":57},{"ruleId":"724","severity":2,"message":"728","line":63,"column":48,"nodeType":"726","endLine":63,"endColumn":57},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"729"},{"ruleId":"677","severity":1,"message":"730","line":37,"column":15,"nodeType":"679","messageId":"680","endLine":37,"endColumn":23},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"731"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"732"},{"ruleId":"677","severity":1,"message":"733","line":9,"column":9,"nodeType":"679","messageId":"680","endLine":9,"endColumn":40},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"734"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"735"},{"ruleId":"677","severity":1,"message":"730","line":163,"column":15,"nodeType":"679","messageId":"680","endLine":163,"endColumn":23},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"736"},{"ruleId":"677","severity":1,"message":"737","line":3,"column":17,"nodeType":"679","messageId":"680","endLine":3,"endColumn":23},{"ruleId":"677","severity":1,"message":"738","line":5,"column":38,"nodeType":"679","messageId":"680","endLine":5,"endColumn":44},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"739"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"740"},{"ruleId":"724","severity":2,"message":"741","line":68,"column":39,"nodeType":"726","endLine":68,"endColumn":50},{"ruleId":"724","severity":2,"message":"742","line":69,"column":40,"nodeType":"726","endLine":69,"endColumn":52},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"743"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"744"},{"ruleId":"677","severity":1,"message":"745","line":61,"column":41,"nodeType":"679","messageId":"680","endLine":61,"endColumn":51},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"746"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"747"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"748"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"749"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"750"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"751"},{"ruleId":"677","severity":1,"message":"721","line":3,"column":46,"nodeType":"679","messageId":"680","endLine":3,"endColumn":51},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"752"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"753"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"754"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"755"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"756"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"757"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"758"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"759"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"760"},{"ruleId":"677","severity":1,"message":"761","line":6,"column":10,"nodeType":"679","messageId":"680","endLine":6,"endColumn":18},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"762"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"763"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"764"},{"ruleId":"765","severity":1,"message":"766","line":183,"column":62,"nodeType":"767","messageId":"675","endLine":183,"endColumn":64},{"ruleId":"765","severity":1,"message":"766","line":184,"column":54,"nodeType":"767","messageId":"675","endLine":184,"endColumn":56},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"768"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"769"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"770"},{"ruleId":"724","severity":2,"message":"771","line":47,"column":50,"nodeType":"726","endLine":47,"endColumn":62},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"772"},{"ruleId":"677","severity":1,"message":"773","line":104,"column":13,"nodeType":"679","messageId":"680","endLine":104,"endColumn":17},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"774"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"775"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"776"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"777"},{"ruleId":"765","severity":1,"message":"766","line":108,"column":53,"nodeType":"767","messageId":"675","endLine":108,"endColumn":55},{"ruleId":"765","severity":1,"message":"766","line":188,"column":67,"nodeType":"767","messageId":"675","endLine":188,"endColumn":69},{"ruleId":"765","severity":1,"message":"766","line":194,"column":38,"nodeType":"767","messageId":"675","endLine":194,"endColumn":40},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"778"},{"ruleId":"677","severity":1,"message":"779","line":2,"column":10,"nodeType":"679","messageId":"680","endLine":2,"endColumn":24},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"780"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"781"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"782"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"783"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"784"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"785"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"786"},{"ruleId":"677","severity":1,"message":"737","line":3,"column":30,"nodeType":"679","messageId":"680","endLine":3,"endColumn":36},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"787"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"788"},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"789"},{"ruleId":"765","severity":1,"message":"766","line":36,"column":63,"nodeType":"767","messageId":"675","endLine":36,"endColumn":65},{"ruleId":"765","severity":1,"message":"766","line":37,"column":61,"nodeType":"767","messageId":"675","endLine":37,"endColumn":63},{"ruleId":"765","severity":1,"message":"766","line":71,"column":47,"nodeType":"767","messageId":"675","endLine":71,"endColumn":49},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"790"},{"ruleId":"765","severity":1,"message":"766","line":36,"column":63,"nodeType":"767","messageId":"675","endLine":36,"endColumn":65},{"ruleId":"765","severity":1,"message":"766","line":37,"column":61,"nodeType":"767","messageId":"675","endLine":37,"endColumn":63},{"ruleId":"765","severity":1,"message":"766","line":71,"column":47,"nodeType":"767","messageId":"675","endLine":71,"endColumn":49},{"ruleId":"672","severity":1,"message":"673","line":1,"column":1,"nodeType":"674","messageId":"675","fix":"791"},"no-native-reassign",["792"],"no-negated-in-lhs",["793"],"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"794","text":"795"},"@typescript-eslint/no-unused-vars","'extendObservable' is defined but never used.","Identifier","unusedVar",{"range":"796","text":"795"},{"range":"797","text":"795"},{"range":"798","text":"795"},{"range":"799","text":"795"},{"range":"800","text":"795"},{"range":"801","text":"795"},{"range":"802","text":"795"},{"range":"803","text":"795"},{"range":"804","text":"795"},"dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"805","text":"806"},{"range":"807","text":"795"},{"range":"808","text":"795"},{"range":"809","text":"795"},{"range":"810","text":"795"},{"range":"811","text":"795"},{"range":"812","text":"795"},"'toJS' is defined but never used.",{"range":"813","text":"795"},{"range":"814","text":"795"},{"range":"815","text":"795"},{"range":"816","text":"795"},{"range":"817","text":"795"},{"range":"818","text":"795"},{"range":"819","text":"795"},{"range":"820","text":"795"},{"range":"821","text":"795"},["792"],["793"],{"range":"822","text":"795"},{"range":"823","text":"795"},{"range":"824","text":"795"},{"range":"825","text":"795"},{"range":"826","text":"795"},{"range":"827","text":"795"},{"range":"828","text":"795"},{"range":"829","text":"795"},"'Alert' is defined but never used.",{"range":"830","text":"795"},{"range":"831","text":"795"},"react/jsx-no-undef","'MyWorkPage' is not defined.","JSXIdentifier","'ProjectsPage' is not defined.","'UsersPage' is not defined.",{"range":"832","text":"795"},"'response' is assigned a value but never used.",{"range":"833","text":"795"},{"range":"834","text":"795"},"'UserSubtaskAnswerGroupViewModel' is defined but never used.",{"range":"835","text":"795"},{"range":"836","text":"795"},{"range":"837","text":"795"},"'Button' is defined but never used.","'action' is defined but never used.",{"range":"838","text":"795"},{"range":"839","text":"795"},"'WordsOfADay' is not defined.","'Participants' is not defined.",{"range":"840","text":"795"},{"range":"841","text":"795"},"'isDisabled' is assigned a value but never used.",{"range":"842","text":"795"},{"range":"843","text":"795"},{"range":"844","text":"795"},{"range":"845","text":"795"},{"range":"846","text":"795"},{"range":"847","text":"795"},{"range":"848","text":"795"},{"range":"849","text":"795"},{"range":"850","text":"795"},{"range":"851","text":"795"},{"range":"852","text":"795"},{"range":"853","text":"795"},{"range":"854","text":"795"},{"range":"855","text":"795"},{"range":"856","text":"795"},"'TaskType' is defined but never used.",{"range":"857","text":"795"},{"range":"858","text":"795"},{"range":"859","text":"795"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression",{"range":"860","text":"795"},{"range":"861","text":"795"},{"range":"862","text":"795"},"'CommentGroup' is not defined.",{"range":"863","text":"795"},"'file' is assigned a value but never used.",{"range":"864","text":"795"},{"range":"865","text":"795"},{"range":"866","text":"795"},{"range":"867","text":"795"},{"range":"868","text":"795"},"'makeObservable' is defined but never used.",{"range":"869","text":"795"},{"range":"870","text":"795"},{"range":"871","text":"795"},{"range":"872","text":"795"},{"range":"873","text":"795"},{"range":"874","text":"795"},{"range":"875","text":"795"},{"range":"876","text":"795"},{"range":"877","text":"795"},{"range":"878","text":"795"},{"range":"879","text":"795"},{"range":"880","text":"795"},"no-global-assign","no-unsafe-negation",[-1,0],"",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[1712,1728],"\r\n