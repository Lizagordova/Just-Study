[{"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\index.tsx":"1","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts":"2","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\App.tsx":"3","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx":"4","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\UserRole.ts":"5","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx":"6","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\CourseStore.tsx":"7","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\LessonStore.tsx":"8","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx":"9","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\TrainingStore.tsx":"10","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\WordStore.tsx":"11","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\TrackerStore.tsx":"12","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\NotificationStore.tsx":"13","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Authorization.tsx":"14","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Registration.tsx":"15","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Main\\AdminMain.tsx":"16","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Main\\UserMain.tsx":"17","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CourseViewModel.ts":"18","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\LessonViewModel.ts":"19","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserSubtaskViewModel.ts":"20","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserTaskViewModel.ts":"21","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\WordViewModel.ts":"22","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserWordViewModel.ts":"23","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\TrackerViewModel.ts":"24","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\WordReadModel.ts":"25","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Courses\\CoursesPage.tsx":"26","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Users\\UsersPage.tsx":"27","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Home\\HomePage.tsx":"28","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\MyLessons\\MyLessonsPage.tsx":"29","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\DictionaryPage.tsx":"30","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Notifications\\Notifications.tsx":"31","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Training\\TrainingPage.tsx":"32","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\MyLessons\\LessonPage.tsx":"33","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Home\\OverallProgress.tsx":"34","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Training\\TrainingContent.tsx":"35","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Notifications\\Notification.tsx":"36","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Tracker\\Tracker.tsx":"37","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\AddOrUpdateWord.tsx":"38","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\Search.tsx":"39","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\Words.tsx":"40","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\WordsTrainingPage.tsx":"41","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\WordsOfADay\\WordsOfADay.tsx":"42","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\TagReadModel.ts":"43","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserNotificationReadModel.ts":"44","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\MyLessons\\Homework.tsx":"45","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Lesson\\Lesson.tsx":"46","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserViewModel.ts":"47","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Tracker\\Types\\NaStarteTracker.tsx":"48","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Courses\\AddNewCourse.tsx":"49","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Users\\Users.tsx":"50","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Users\\AddOrUpdateUserWindow.tsx":"51","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Courses\\Course.tsx":"52","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\renderSpinner.tsx":"53","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\Task.tsx":"54","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\WordOfADayReadModel.ts":"55","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\mapper.tsx":"56","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\Word.tsx":"57","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\TaskViewModel.ts":"58","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\CompletingStatus.ts":"59","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\ExampleReadModel.ts":"60","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\PartOfSpeech.ts":"61","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\shuffleWords.tsx":"62","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\WordsOfADay\\WordOfADay.tsx":"63","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\TrainingTypes\\ShowWordTraining.tsx":"64","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\TrainingTypes\\RussianWordEnglishWordTraining.tsx":"65","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\TrainingTypes\\EnglishWordRussianMeaningTraining.tsx":"66","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\NavigationType.tsx":"67","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\MyLessons\\HomeworkTask.tsx":"68","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\Settings.tsx":"69","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\transformer.tsx":"70","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\translater.tsx":"71","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\TrackerByDayReadModel.ts":"72","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\TrackerReadModel.ts":"73","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Lesson\\Content.tsx":"74","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\ContentUpload.tsx":"75","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\SubtaskType.ts":"76","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Users\\User.tsx":"77","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\LoadFileSubtask.tsx":"78","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Participants\\ParticipantsPage.tsx":"79","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\AddSubtask.tsx":"80","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\RightVerbFormSubtask.tsx":"81","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\LoadAudioSubtask.tsx":"82","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\FillGapsSubtask.tsx":"83","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\TaskEdit.tsx":"84","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\LessonsMenu.tsx":"85","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\DetailedAnswerSubtask.tsx":"86","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserSubtaskAnswerGroupReadModel.ts":"87","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\TaskReadModel.ts":"88","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserReadModel.ts":"89","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\SubtaskReadModel.ts":"90","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\CommentedEntityType.ts":"91","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\TrackerByDayViewModel.ts":"92","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserWordReadModel.ts":"93","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\WordTrainingType.ts":"94","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\CourseRole.ts":"95","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\Tarif.ts":"96","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\WordsOfADay\\UserAnswers.tsx":"97","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\WordsOfADay\\AnswerToWordOfADay.tsx":"98","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Comments\\CommentGroup.tsx":"99","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Lesson\\Material.tsx":"100","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserSubtaskReadModel.ts":"101","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserSubtaskAnswerGroupViewModel.ts":"102","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\SubtaskViewModel.ts":"103","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\SubtaskAnswerGroupViewModel.ts":"104","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserCourseViewModel.ts":"105","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\renderLoadingProgress.tsx":"106","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\SubtaskUploadWindow.tsx":"107","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\LessonPage.tsx":"108","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\AddOrUpdateNewLesson.tsx":"109","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\TaskUploadWindow.tsx":"110","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Participants\\Participants.tsx":"111","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentGroupViewModel.ts":"112","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\WordsOfADay\\UserAnswer.tsx":"113","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\CommentReadModel.ts":"114","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentViewModel.ts":"115","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Comments\\Comment.tsx":"116","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\getTooltipText.tsx":"117","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\subtaskTranspiler.tsx":"118","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\getTaskTitle.tsx":"119","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Participants\\Participant.tsx":"120","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\CompletedHomeworkPage.tsx":"121","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Homework\\HomeworkPage.tsx":"122","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskType.ts":"123","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\UserHomework.tsx":"124","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\TaskUpload.tsx":"125","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\CompletedHomework.tsx":"126","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\consts\\TaskTypeTranslater.tsx":"127","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\CompletedTask.tsx":"128","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\getFileName.tsx":"129","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\FeedbackStore.tsx":"130","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Feedback\\AddFeedbackWindow.tsx":"131","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\FeedbackReadModel.ts":"132","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Feedback\\FeedbackPage.tsx":"133","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Feedback\\Feedback.tsx":"134","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\TaskFromPoolUpload.tsx":"135","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Progress\\CourseProgress.tsx":"136","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Progress\\LessonProgress.tsx":"137","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tags\\TagsControlWindow.tsx":"138","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\TagStore.tsx":"139","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\CommentStore.tsx":"140"},{"size":704,"mtime":1607787725088,"results":"141","hashOfConfig":"142"},{"size":425,"mtime":1607420618541,"results":"143","hashOfConfig":"142"},{"size":4564,"mtime":1614759729761,"results":"144","hashOfConfig":"142"},{"size":2758,"mtime":1615372482195,"results":"145","hashOfConfig":"142"},{"size":229,"mtime":1615373608627,"results":"146","hashOfConfig":"142"},{"size":3318,"mtime":1614620682950,"results":"147","hashOfConfig":"142"},{"size":5774,"mtime":1614193806351,"results":"148","hashOfConfig":"142"},{"size":4662,"mtime":1615228466960,"results":"149","hashOfConfig":"142"},{"size":11775,"mtime":1615026976454,"results":"150","hashOfConfig":"142"},{"size":346,"mtime":1614862792669,"results":"151","hashOfConfig":"142"},{"size":8204,"mtime":1615294605411,"results":"152","hashOfConfig":"142"},{"size":1418,"mtime":1613754998489,"results":"153","hashOfConfig":"142"},{"size":1508,"mtime":1611906912957,"results":"154","hashOfConfig":"142"},{"size":3727,"mtime":1614787118618,"results":"155","hashOfConfig":"142"},{"size":5349,"mtime":1614787114957,"results":"156","hashOfConfig":"142"},{"size":4747,"mtime":1614761365320,"results":"157","hashOfConfig":"142"},{"size":8040,"mtime":1615292832839,"results":"158","hashOfConfig":"142"},{"size":286,"mtime":1615373608373,"results":"159","hashOfConfig":"142"},{"size":361,"mtime":1615373608390,"results":"160","hashOfConfig":"142"},{"size":567,"mtime":1615373608438,"results":"161","hashOfConfig":"142"},{"size":332,"mtime":1615373608442,"results":"162","hashOfConfig":"142"},{"size":445,"mtime":1615373608463,"results":"163","hashOfConfig":"142"},{"size":454,"mtime":1615373608459,"results":"164","hashOfConfig":"142"},{"size":356,"mtime":1615373608423,"results":"165","hashOfConfig":"142"},{"size":536,"mtime":1615373608530,"results":"166","hashOfConfig":"142"},{"size":5429,"mtime":1615106481221,"results":"167","hashOfConfig":"142"},{"size":1036,"mtime":1613288780020,"results":"168","hashOfConfig":"142"},{"size":2607,"mtime":1612978888976,"results":"169","hashOfConfig":"142"},{"size":5115,"mtime":1615280917734,"results":"170","hashOfConfig":"142"},{"size":4590,"mtime":1613826893236,"results":"171","hashOfConfig":"142"},{"size":2265,"mtime":1614864633866,"results":"172","hashOfConfig":"142"},{"size":3424,"mtime":1614755988190,"results":"173","hashOfConfig":"142"},{"size":2557,"mtime":1613996304303,"results":"174","hashOfConfig":"142"},{"size":1525,"mtime":1614279231006,"results":"175","hashOfConfig":"142"},{"size":6849,"mtime":1615375593211,"results":"176","hashOfConfig":"142"},{"size":2500,"mtime":1614244319366,"results":"177","hashOfConfig":"142"},{"size":1596,"mtime":1614279399174,"results":"178","hashOfConfig":"142"},{"size":11166,"mtime":1615294457179,"results":"179","hashOfConfig":"142"},{"size":3785,"mtime":1614341531565,"results":"180","hashOfConfig":"142"},{"size":2355,"mtime":1613827604629,"results":"181","hashOfConfig":"142"},{"size":7908,"mtime":1614067184431,"results":"182","hashOfConfig":"142"},{"size":1790,"mtime":1614245859963,"results":"183","hashOfConfig":"142"},{"size":253,"mtime":1615373608502,"results":"184","hashOfConfig":"142"},{"size":304,"mtime":1615373608515,"results":"185","hashOfConfig":"142"},{"size":3130,"mtime":1614186605331,"results":"186","hashOfConfig":"142"},{"size":1681,"mtime":1614866940434,"results":"187","hashOfConfig":"142"},{"size":463,"mtime":1615373608445,"results":"188","hashOfConfig":"142"},{"size":6615,"mtime":1614279400183,"results":"189","hashOfConfig":"142"},{"size":5240,"mtime":1615032144397,"results":"190","hashOfConfig":"142"},{"size":1361,"mtime":1614067220180,"results":"191","hashOfConfig":"142"},{"size":8327,"mtime":1614679240418,"results":"192","hashOfConfig":"142"},{"size":4696,"mtime":1615025618741,"results":"193","hashOfConfig":"142"},{"size":165,"mtime":1614105967726,"results":"194","hashOfConfig":"142"},{"size":10286,"mtime":1615378463338,"results":"195","hashOfConfig":"142"},{"size":345,"mtime":1615373608527,"results":"196","hashOfConfig":"142"},{"size":7134,"mtime":1614784978111,"results":"197","hashOfConfig":"142"},{"size":5883,"mtime":1615103586810,"results":"198","hashOfConfig":"142"},{"size":546,"mtime":1615373608416,"results":"199","hashOfConfig":"142"},{"size":313,"mtime":1615373608622,"results":"200","hashOfConfig":"142"},{"size":260,"mtime":1615373608474,"results":"201","hashOfConfig":"142"},{"size":265,"mtime":1615373608633,"results":"202","hashOfConfig":"142"},{"size":335,"mtime":1610907535944,"results":"203","hashOfConfig":"142"},{"size":9047,"mtime":1615371242698,"results":"204","hashOfConfig":"142"},{"size":1382,"mtime":1613828471217,"results":"205","hashOfConfig":"142"},{"size":3273,"mtime":1614067169334,"results":"206","hashOfConfig":"142"},{"size":3282,"mtime":1614067166548,"results":"207","hashOfConfig":"142"},{"size":58,"mtime":1611738335944,"results":"208","hashOfConfig":"142"},{"size":3119,"mtime":1615375551169,"results":"209","hashOfConfig":"142"},{"size":4612,"mtime":1614067162966,"results":"210","hashOfConfig":"142"},{"size":1159,"mtime":1613578838320,"results":"211","hashOfConfig":"142"},{"size":2415,"mtime":1615284575049,"results":"212","hashOfConfig":"142"},{"size":435,"mtime":1615373608510,"results":"213","hashOfConfig":"142"},{"size":403,"mtime":1615373608512,"results":"214","hashOfConfig":"142"},{"size":1545,"mtime":1614868364638,"results":"215","hashOfConfig":"142"},{"size":3347,"mtime":1614678628141,"results":"216","hashOfConfig":"142"},{"size":330,"mtime":1615373608624,"results":"217","hashOfConfig":"142"},{"size":3881,"mtime":1614761462849,"results":"218","hashOfConfig":"142"},{"size":8046,"mtime":1614951888623,"results":"219","hashOfConfig":"142"},{"size":6706,"mtime":1615031648482,"results":"220","hashOfConfig":"142"},{"size":3921,"mtime":1614679065212,"results":"221","hashOfConfig":"142"},{"size":9610,"mtime":1614952241556,"results":"222","hashOfConfig":"142"},{"size":7427,"mtime":1614951891261,"results":"223","hashOfConfig":"142"},{"size":9813,"mtime":1614952287769,"results":"224","hashOfConfig":"142"},{"size":1910,"mtime":1615029986970,"results":"225","hashOfConfig":"142"},{"size":6445,"mtime":1615280886900,"results":"226","hashOfConfig":"142"},{"size":6481,"mtime":1615379167818,"results":"227","hashOfConfig":"142"},{"size":442,"mtime":1615373608519,"results":"228","hashOfConfig":"142"},{"size":575,"mtime":1615373608506,"results":"229","hashOfConfig":"142"},{"size":459,"mtime":1615373608517,"results":"230","hashOfConfig":"142"},{"size":439,"mtime":1615373608501,"results":"231","hashOfConfig":"142"},{"size":264,"mtime":1615373608631,"results":"232","hashOfConfig":"142"},{"size":435,"mtime":1615373608419,"results":"233","hashOfConfig":"142"},{"size":509,"mtime":1615373608524,"results":"234","hashOfConfig":"142"},{"size":242,"mtime":1615373608635,"results":"235","hashOfConfig":"142"},{"size":234,"mtime":1615373608636,"results":"236","hashOfConfig":"142"},{"size":229,"mtime":1615373608618,"results":"237","hashOfConfig":"142"},{"size":2715,"mtime":1614245061935,"results":"238","hashOfConfig":"142"},{"size":3828,"mtime":1614678403455,"results":"239","hashOfConfig":"142"},{"size":5753,"mtime":1615373585614,"results":"240","hashOfConfig":"142"},{"size":4025,"mtime":1615379068389,"results":"241","hashOfConfig":"142"},{"size":440,"mtime":1615373608521,"results":"242","hashOfConfig":"142"},{"size":389,"mtime":1615373608434,"results":"243","hashOfConfig":"142"},{"size":531,"mtime":1615373608405,"results":"244","hashOfConfig":"142"},{"size":364,"mtime":1615373608396,"results":"245","hashOfConfig":"142"},{"size":469,"mtime":1615373608431,"results":"246","hashOfConfig":"142"},{"size":229,"mtime":1614151103383,"results":"247","hashOfConfig":"142"},{"size":6391,"mtime":1615378867339,"results":"248","hashOfConfig":"142"},{"size":3849,"mtime":1614962756295,"results":"249","hashOfConfig":"142"},{"size":9473,"mtime":1615032125353,"results":"250","hashOfConfig":"142"},{"size":8362,"mtime":1615377788337,"results":"251","hashOfConfig":"142"},{"size":1557,"mtime":1615025674842,"results":"252","hashOfConfig":"142"},{"size":522,"mtime":1615373608360,"results":"253","hashOfConfig":"142"},{"size":3247,"mtime":1615025565024,"results":"254","hashOfConfig":"142"},{"size":309,"mtime":1615373608469,"results":"255","hashOfConfig":"142"},{"size":309,"mtime":1615373608368,"results":"256","hashOfConfig":"142"},{"size":4654,"mtime":1615373504570,"results":"257","hashOfConfig":"142"},{"size":1686,"mtime":1614256744669,"results":"258","hashOfConfig":"142"},{"size":844,"mtime":1610267491403,"results":"259","hashOfConfig":"142"},{"size":937,"mtime":1615284565401,"results":"260","hashOfConfig":"142"},{"size":8167,"mtime":1615292532206,"results":"261","hashOfConfig":"142"},{"size":978,"mtime":1614158575067,"results":"262","hashOfConfig":"142"},{"size":3180,"mtime":1615375582500,"results":"263","hashOfConfig":"142"},{"size":344,"mtime":1615373608629,"results":"264","hashOfConfig":"142"},{"size":1768,"mtime":1615025486143,"results":"265","hashOfConfig":"142"},{"size":4799,"mtime":1615378328252,"results":"266","hashOfConfig":"142"},{"size":1233,"mtime":1614066417142,"results":"267","hashOfConfig":"142"},{"size":652,"mtime":1615284549147,"results":"268","hashOfConfig":"142"},{"size":1885,"mtime":1615375569018,"results":"269","hashOfConfig":"142"},{"size":275,"mtime":1614617030208,"results":"270","hashOfConfig":"142"},{"size":1414,"mtime":1614761599400,"results":"271","hashOfConfig":"142"},{"size":6225,"mtime":1614785487782,"results":"272","hashOfConfig":"142"},{"size":331,"mtime":1615373608476,"results":"273","hashOfConfig":"142"},{"size":3508,"mtime":1614786705559,"results":"274","hashOfConfig":"142"},{"size":2345,"mtime":1614786455053,"results":"275","hashOfConfig":"142"},{"size":7386,"mtime":1615375592012,"results":"276","hashOfConfig":"142"},{"size":1218,"mtime":1615374321732,"results":"277","hashOfConfig":"142"},{"size":1804,"mtime":1615374459675,"results":"278","hashOfConfig":"142"},{"size":5232,"mtime":1615033850423,"results":"279","hashOfConfig":"142"},{"size":1618,"mtime":1615028172163,"results":"280","hashOfConfig":"142"},{"size":2059,"mtime":1615373207033,"results":"281","hashOfConfig":"142"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},"1xtkd6x",{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"291","usedDeprecatedRules":"284"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"294","messages":"295","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"296","usedDeprecatedRules":"284"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"299","usedDeprecatedRules":"284"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"302","usedDeprecatedRules":"284"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"305","usedDeprecatedRules":"284"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"308","usedDeprecatedRules":"284"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"311","usedDeprecatedRules":"284"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"314","usedDeprecatedRules":"284"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"317","usedDeprecatedRules":"284"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"320","usedDeprecatedRules":"284"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"323","usedDeprecatedRules":"284"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"326","usedDeprecatedRules":"284"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"329","usedDeprecatedRules":"284"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"348","usedDeprecatedRules":"284"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"353","usedDeprecatedRules":"284"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"356","usedDeprecatedRules":"284"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"359","usedDeprecatedRules":"284"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"362","usedDeprecatedRules":"284"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"365","usedDeprecatedRules":"284"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"368","usedDeprecatedRules":"284"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"371","usedDeprecatedRules":"284"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"374","usedDeprecatedRules":"284"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"377","usedDeprecatedRules":"284"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"380","usedDeprecatedRules":"284"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"383","usedDeprecatedRules":"284"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"386","usedDeprecatedRules":"284"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"389","usedDeprecatedRules":"284"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":1,"source":"392","usedDeprecatedRules":"284"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"395","usedDeprecatedRules":"284"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"402","usedDeprecatedRules":"284"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"405","usedDeprecatedRules":"284"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410","usedDeprecatedRules":"284"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"413","usedDeprecatedRules":"284"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"416","usedDeprecatedRules":"284"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"419","usedDeprecatedRules":"284"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"422","usedDeprecatedRules":"284"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"425","usedDeprecatedRules":"284"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"432","usedDeprecatedRules":"284"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"435","usedDeprecatedRules":"284"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"446","usedDeprecatedRules":"284"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"449","usedDeprecatedRules":"284"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"452","usedDeprecatedRules":"284"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"455","usedDeprecatedRules":"284"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"458","usedDeprecatedRules":"284"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"461","usedDeprecatedRules":"284"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"464","messages":"465","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"466","usedDeprecatedRules":"284"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"469","usedDeprecatedRules":"284"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"472","usedDeprecatedRules":"284"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"479","usedDeprecatedRules":"284"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"482","usedDeprecatedRules":"284"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"487","usedDeprecatedRules":"284"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"490","usedDeprecatedRules":"284"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"493","usedDeprecatedRules":"284"},{"filePath":"494","messages":"495","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"498","usedDeprecatedRules":"284"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"501","usedDeprecatedRules":"284"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"504","usedDeprecatedRules":"284"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"507","usedDeprecatedRules":"284"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"510","usedDeprecatedRules":"284"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"513","messages":"514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"521","messages":"522","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"525","messages":"526","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"527","messages":"528","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"529","messages":"530","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"533","messages":"534","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"535","usedDeprecatedRules":"284"},{"filePath":"536","messages":"537","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"538","usedDeprecatedRules":"284"},{"filePath":"539","messages":"540","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"541","messages":"542","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"543","messages":"544","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"555","usedDeprecatedRules":"284"},{"filePath":"556","messages":"557","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"558","messages":"559","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"560","usedDeprecatedRules":"284"},{"filePath":"561","messages":"562","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"563","usedDeprecatedRules":"284"},{"filePath":"564","messages":"565","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"566","messages":"567","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"568","usedDeprecatedRules":"284"},{"filePath":"569","messages":"570","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"571","messages":"572","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"573","usedDeprecatedRules":"284"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"578","messages":"579","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"580","messages":"581","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"582","usedDeprecatedRules":"284"},{"filePath":"583","messages":"584","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"585","usedDeprecatedRules":"284"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"588","usedDeprecatedRules":"284"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"591","usedDeprecatedRules":"284"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"594","usedDeprecatedRules":"284"},{"filePath":"595","messages":"596","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"597","messages":"598","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"599","messages":"600","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"601","usedDeprecatedRules":"284"},{"filePath":"602","messages":"603","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"604","messages":"605","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"606","usedDeprecatedRules":"284"},{"filePath":"607","messages":"608","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"609","usedDeprecatedRules":"284"},{"filePath":"610","messages":"611","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"612","messages":"613","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"614","usedDeprecatedRules":"284"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"617","usedDeprecatedRules":"284"},{"filePath":"618","messages":"619","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":1,"source":"620","usedDeprecatedRules":"284"},{"filePath":"621","messages":"622","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"284"},{"filePath":"623","messages":"624","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"625","usedDeprecatedRules":"284"},{"filePath":"626","messages":"627","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"628","usedDeprecatedRules":"284"},{"filePath":"629","messages":"630","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"631","messages":"632","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"633","messages":"634","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"635","messages":"636","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"637","usedDeprecatedRules":"284"},{"filePath":"638","messages":"639","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"640","usedDeprecatedRules":"284"},{"filePath":"641","messages":"642","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\index.tsx",[],["643","644"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\App.tsx",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx",["645"],"﻿import { observable, makeObservable } from \"mobx\";\r\nimport UserStore from \"./UserStore\";\r\nimport CourseStore from \"./CourseStore\";\r\nimport LessonStore from \"./LessonStore\";\r\nimport TaskStore from \"./TaskStore\";\r\nimport WordStore from \"./WordStore\";\r\nimport TrainingStore from \"./TrainingStore\";\r\nimport TrackerStore from \"./TrackerStore\";\r\nimport NotificationStore from \"./NotificationStore\";\r\nimport FeedbackStore from \"./FeedbackStore\";\r\nimport TagStore from \"./TagStore\";\r\nimport CommentStore from \"./CommentStore\";\r\n\r\nexport class RootStore {\r\n    userStore: UserStore;\r\n    courseStore: CourseStore;\r\n    lessonStore: LessonStore;\r\n    taskStore: TaskStore;\r\n    wordStore: WordStore;\r\n    trainingStore: TrainingStore;\r\n    trackerStore: TrackerStore;\r\n    notificationStore: NotificationStore;\r\n    feedbackStore: FeedbackStore;\r\n    tagStore: TagStore;\r\n    commentStore: CommentStore;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            userStore: observable,\r\n            courseStore: observable,\r\n            lessonStore: observable,\r\n            taskStore: observable,\r\n            wordStore: observable,\r\n            trainingStore: observable,\r\n            trackerStore: observable,\r\n            notificationStore: observable,\r\n            feedbackStore: observable,\r\n            tagStore: observable,\r\n            commentStore: observable\r\n        });\r\n        this.userStore = new UserStore();\r\n        this.courseStore = new CourseStore();\r\n        this.lessonStore = new LessonStore();\r\n        this.taskStore = new TaskStore();\r\n        this.wordStore = new WordStore();\r\n        this.trainingStore = new TrainingStore();\r\n        this.trackerStore = new TrackerStore();\r\n        this.notificationStore = new NotificationStore();\r\n        this.feedbackStore = new FeedbackStore();\r\n        this.tagStore = new TagStore();\r\n        this.commentStore = new CommentStore();\r\n    }\r\n\r\n    reset() {\r\n        this.exit()\r\n            .then(() => {\r\n                this.userStore = new UserStore();\r\n                this.courseStore = new CourseStore();\r\n                this.lessonStore = new LessonStore();\r\n                this.taskStore = new TaskStore();\r\n                this.wordStore = new WordStore();\r\n                this.trainingStore = new TrainingStore();\r\n                this.trackerStore = new TrackerStore();\r\n                this.notificationStore = new NotificationStore();\r\n                this.feedbackStore = new FeedbackStore();\r\n                this.tagStore = new TagStore();\r\n                this.commentStore = new CommentStore();\r\n            });\r\n    }\r\n\r\n    async exit() {\r\n        const response = await fetch(\"/exit\");\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default RootStore;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\UserRole.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx",["646"],"﻿import { UserViewModel } from \"../Typings/viewModels/UserViewModel\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport { UserReadModel } from \"../Typings/readModels/UserReadModel\";\r\n\r\nclass UserStore {\r\n    currentUser: UserViewModel;\r\n    authorizationRequired: boolean = true;\r\n    registrationRequired: boolean = false;\r\n    wrongCredetianals: boolean = false;\r\n    users: UserViewModel[] = new Array<UserViewModel>();\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            currentUser: observable,\r\n            authorizationRequired: observable,\r\n            wrongCredetianals: observable,\r\n            registrationRequired: observable,\r\n            users: observable\r\n        });\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        this.getCurrentUser();\r\n        this.getUsers();\r\n    }\r\n\r\n    async getCurrentUser() {\r\n        const response = await fetch(\"/checktoken\");\r\n        if(response.status === 200) {\r\n            this.currentUser = await response.json();\r\n            this.authorizationRequired = false;\r\n        } else {\r\n            this.authorizationRequired = true;\r\n            this.registrationRequired = false;\r\n        }\r\n    }\r\n\r\n    async getUsers() {\r\n        const response = await fetch(\"/getusers\");\r\n        if(response.status === 200) {\r\n            this.users = await response.json();\r\n        }\r\n    }\r\n\r\n    @action\r\n    authorizationRequire(required: boolean) {\r\n        this.authorizationRequired = required;\r\n    }\r\n\r\n    @action\r\n    registrationRequire(required: boolean) {\r\n        this.registrationRequired = required;\r\n    }\r\n\r\n    @action\r\n    registrationToggle(type: string) {\r\n        if(type === \"authorization\") {\r\n            this.authorizationRequired = true;\r\n            this.registrationRequired = false;\r\n        } else if(type === \"registration\") {\r\n            this.authorizationRequired = false;\r\n            this.registrationRequired = true;\r\n        }\r\n    }\r\n\r\n    @action\r\n    wrongCredetianalsToggle(turn: boolean) {\r\n        this.wrongCredetianals = turn;\r\n    }\r\n\r\n    async addOrUpdateUser(user: UserReadModel): Promise<number> {\r\n        const response = await fetch(\"/addorupdateuser\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                id: user.id, firstName: user.firstName,\r\n                lastName: user.lastName, email: user.email,\r\n                login: user.login, role: user.role,\r\n                // todo: подумать как и когда их передавать::: passwordHash: user.passwordHash, token: user.token\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            this.getUsers();\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n    \r\n    async deleteUser(userId: number): Promise<number> {\r\n        const response = await fetch(\"/deleteuser\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: userId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getUsers();\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default UserStore;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\CourseStore.tsx",["647","648"],"﻿import { CourseViewModel } from \"../Typings/viewModels/CourseViewModel\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport { UserCourseViewModel } from \"../Typings/viewModels/UserCourseViewModel\";\r\n\r\nclass CourseStore {\r\n    coursesForTeacher: CourseViewModel[] = new Array<CourseViewModel>();\r\n    userCourses: UserCourseViewModel[] = new Array<UserCourseViewModel>();\r\n    choosenCourse: CourseViewModel = new CourseViewModel();\r\n    usersByCourse: UserCourseViewModel[] = new Array<UserCourseViewModel>();\r\n    coursesInfo: CourseViewModel[] = new Array<CourseViewModel>();\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            coursesForTeacher: observable,\r\n            userCourses: observable,\r\n            choosenCourse: observable,\r\n            usersByCourse: observable\r\n        });\r\n    }\r\n\r\n    async getCoursesForTeacher() {\r\n        const response = await fetch(\"/getcoursesforteacher\");\r\n        if (response.status === 200) {\r\n            this.coursesForTeacher = await response.json();\r\n        } else {\r\n            this.coursesForTeacher = new Array<CourseViewModel>();\r\n        }\r\n    }\r\n\r\n    async getUserCourses(): Promise<number> {\r\n        const response = await fetch(\"/getusercourses\");\r\n        if(response.status === 200) {\r\n            let courses = await response.json();\r\n            this.userCourses = courses;\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async getCoursesInfo(ids: number[]) {\r\n        const response = await fetch(\"/getcoursesinfo\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({coursesIds: ids})\r\n        });\r\n        if(response.status === 200) {\r\n            let coursesInfo = await response.json();\r\n            this.coursesInfo = coursesInfo;\r\n            if(coursesInfo.length > 0) {\r\n                this.choosenCourse = coursesInfo[0];\r\n            }\r\n        }\r\n    }\r\n\r\n    async getUsersByCourse(courseId: number) {\r\n        const response = await fetch(\"/getusersbycourse\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: courseId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.usersByCourse = await response.json();\r\n        }\r\n    }\r\n\r\n    async addOrUpdateCourse(id: number, name: string, description: string): Promise<number> {\r\n        const response = await fetch(\"addorupdatecourse\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: id, name: name, description: description})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getCoursesForTeacher();\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async deleteCourse(courseId: number): Promise<number> {\r\n        const response = await fetch(\"/deletecourse\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: courseId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getCoursesForTeacher();\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async addOrUpdateParticipantsList(participants: number[], courseId: number): Promise<number> {\r\n        const response = await fetch(\"/addorupdateparticipantslist\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({participantsIds: participants, id: courseId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getUsersByCourse(courseId);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async addOrUpdateUserCourseDetails(details: UserCourseViewModel): Promise<number> {\r\n        const response = await fetch(\"/addorupdateusercoursedetails\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({userId: details.userId,\r\n            courseRole: details.courseRole, tarif: details.tarif, startDate: details.startDate,\r\n            expireDate: details.expireDate, courseId: details.courseId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getUsersByCourse(details.courseId);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async getUserCourseProgress(userId: number, courseId: number): Promise<number> {//todo: доделать + сделать модельку под прогресс\r\n        const response = await fetch(\"/getusercourseprogress\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({userId: userId, courseId: courseId})\r\n        });\r\n\r\n        return await response.json();\r\n    }\r\n\r\n    async deleteUserFromCourse(userId: number, courseId: number): Promise<number> {\r\n        const response = await fetch(\"/deleteuserfromcourse\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({userId: userId, courseId: courseId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getUsersByCourse(courseId);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    setChoosenCourse(course: CourseViewModel): void {\r\n        this.choosenCourse = course;\r\n    }\r\n}\r\n\r\nexport default CourseStore;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\LessonStore.tsx",["649"],"﻿import { makeObservable, observable } from \"mobx\";\r\nimport { LessonViewModel } from \"../Typings/viewModels/LessonViewModel\";\r\nimport { LessonMaterialViewModel } from \"../Typings/viewModels/LessonMaterialViewModel\";\r\n\r\nclass LessonStore {\r\n    lessonsByChoosenCourse: LessonViewModel[] = new Array<LessonViewModel>();\r\n    choosenLesson: LessonViewModel = new LessonViewModel();\r\n    materialsByChoosenLesson: LessonMaterialViewModel[] = new Array<LessonMaterialViewModel>();\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            lessonsByChoosenCourse: observable,\r\n            choosenLesson: observable,\r\n            materialsByChoosenLesson: observable,\r\n        });\r\n    }\r\n\r\n    setChoosenLesson(lesson: LessonViewModel) {\r\n        this.choosenLesson = lesson;\r\n        this.getMaterialsByLesson(lesson.id);\r\n    }\r\n\r\n    async getLessonsByCourse(courseId: number) {\r\n        const response = await fetch(\"getlessonsbycourse\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: courseId})\r\n        });\r\n        if(response.status === 200) {\r\n            const data = await response.json();\r\n            this.lessonsByChoosenCourse = data;\r\n            if(data[0] !== undefined) {\r\n                this.choosenLesson = data[0];\r\n                this.getMaterialsByLesson(this.choosenLesson.id);\r\n            } else {\r\n                this.materialsByChoosenLesson = new Array<LessonMaterialViewModel>();\r\n            }\r\n        }\r\n    }\r\n\r\n    async addOrUpdateLesson(id: number, order: number, courseId: number, name: string, description: string, startDate: Date | Date[], expireDate: Date | Date[]): Promise<number> {\r\n        const response = await fetch(\"addorupdatelesson\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: id, courseId: courseId, name: name, description: description, startDate: startDate, expireDate: expireDate})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getLessonsByCourse(courseId);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async deleteLesson(lessonId: number, courseId: number): Promise<number> {\r\n        const response = await fetch(\"deletelesson\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: lessonId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getLessonsByCourse(courseId);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async getMaterialsByLesson(lessonId: number): Promise<number> {\r\n        const response = await fetch(\"getmaterialsbylesson\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: lessonId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.materialsByChoosenLesson = await response.json();\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async deleteMaterial(materialId: number): Promise<number> {\r\n        const response = await fetch(\"deletematerial\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: materialId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getMaterialsByLesson(this.choosenLesson.id);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async addOrUpdateMaterial(file: File): Promise<number> {\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n        formData.append(\"lessonId\", this.choosenLesson.id.toString());\r\n        const response = await fetch(\"/addorupdatematerial\", {\r\n            body: formData,\r\n            method: \"POST\"\r\n        });\r\n        if(response.status === 200) {\r\n            this.getMaterialsByLesson(this.choosenLesson.id);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async getProgressByLesson(lessonId: number): Promise<number> {\r\n        const response = await fetch(\"/getprogressbylesson\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                id: lessonId\r\n            })\r\n        });\r\n\r\n        return await response.json();\r\n    }\r\n}\r\n\r\nexport default LessonStore;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx",["650","651","652","653","654","655"],"﻿import {makeObservable, observable, toJS} from \"mobx\";\r\nimport { TaskViewModel } from \"../Typings/viewModels/TaskViewModel\";\r\nimport {TaskReadModel} from \"../Typings/readModels/TaskReadModel\";\r\nimport {SubtaskReadModel} from \"../Typings/readModels/SubtaskReadModel\";\r\nimport {TagViewModel} from \"../Typings/viewModels/TagViewModel\";\r\nimport {UserSubtaskReadModel} from \"../Typings/readModels/UserSubtaskReadModel\";\r\nimport {UserSubtaskAnswerGroupReadModel} from \"../Typings/readModels/UserSubtaskAnswerGroupReadModel\";\r\nimport {UserSubtaskViewModel} from \"../Typings/viewModels/UserSubtaskViewModel\";\r\nimport {UserSubtaskAnswerGroupViewModel} from \"../Typings/viewModels/UserSubtaskAnswerGroupViewModel\";\r\nimport {TagReadModel} from \"../Typings/readModels/TagReadModel\";\r\nimport {UserTaskViewModel} from \"../Typings/viewModels/UserTaskViewModel\";\r\n\r\nclass TaskStore {\r\n    tasksByChoosenLesson: TaskViewModel[] = new Array<TaskViewModel>();\r\n    tasksByQuery: TaskViewModel[] = new Array<TaskViewModel>();\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            tasksByChoosenLesson: observable,\r\n            tasksByQuery: observable\r\n        });\r\n    }\r\n\r\n    async getTasksByLesson(lessonId: number): Promise<number> {\r\n        const response = await fetch(\"/gettasksbychoosenlesson\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: lessonId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.tasksByChoosenLesson  = await response.json();\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async addOrUpdateTask(task: TaskReadModel, lessonId: number | null): Promise<number> {\r\n        const formData = this.getFormDataForTask(task, lessonId);\r\n        const response = await fetch(\"/addorupdatetask\", {\r\n            method: \"POST\",\r\n            body: formData\r\n        });\r\n        if(response.status === 200) {\r\n            let taskId = await response.json();\r\n            this.attachTagsToTask(taskId, task.tagIds);\r\n            task.subtasks.forEach((sub, i) => {\r\n                sub.taskId = taskId;\r\n                this.addOrUpdateSubtask(sub);\r\n            });\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async attachTagsToTask(taskId: number, tagIds: number[])\r\n    {\r\n        const response = await fetch(\"/attachtagstotask\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({taskId: taskId, tagIds: tagIds})\r\n        });\r\n    }\r\n\r\n    getFormDataForTask(task: TaskReadModel, lessonId: number | null): FormData {\r\n        let formData = new FormData();\r\n        if(lessonId !== null) {\r\n            formData.append(\"lessonId\", lessonId.toString());\r\n        }\r\n        if(task.id !== undefined && task.id !== null) {\r\n            formData.append(\"id\", task.id.toString());\r\n        }\r\n        if(task.taskType !== undefined && task.taskType !== null) {\r\n            formData.append(\"taskType\", task.taskType.toString());\r\n        }\r\n        if(task.text !== undefined && task.text !== null) {\r\n            formData.append(\"text\", task.text.toString());\r\n        }\r\n        if(task.instruction !== undefined && task.instruction !== null) {\r\n            formData.append(\"instruction\", task.instruction.toString());\r\n        }\r\n        if(task.subtasks !== undefined && task.subtasks !== null) {\r\n            // @ts-ignore\r\n            formData.append(\"subtasks\", task.subtasks);\r\n        }\r\n        if(task.tagIds !== undefined && task.tagIds !== null) {\r\n            // @ts-ignore\r\n            formData.append(\"tagIds\", task.tagIds);\r\n        }\r\n\r\n        return formData;\r\n    }\r\n\r\n    async addOrUpdateSubtask(subtask: SubtaskReadModel): Promise<number> {\r\n        const formData = this.getFormDataForSubtask(subtask);\r\n        const response = await fetch(\"/addorupdatesubtask\", {\r\n            method: \"POST\",\r\n            body: formData\r\n        });\r\n        if(response.status === 200) {\r\n            this.updateTaskByTaskId(subtask.taskId);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    getFormDataForSubtask(subtask: SubtaskReadModel): FormData {\r\n        const formData = new FormData();\r\n        formData.append(\"subtaskType\", subtask.subtaskType.toString());\r\n        if(subtask.order !== undefined && subtask.order !== null) {\r\n            formData.append(\"order\", subtask.order.toString());\r\n        }\r\n        if(subtask.text !== undefined && subtask.text !== null) {\r\n            formData.append(\"text\", subtask.text.toString());\r\n        }\r\n        if(subtask.path !== undefined  && subtask.path !== null) {\r\n            formData.append(\"path\", subtask.path.toString());\r\n        }\r\n        if(subtask.id !== undefined && subtask.id !== null) {\r\n            formData.append(\"id\", subtask.id.toString());\r\n        }\r\n        if(subtask.taskId !== undefined && subtask.taskId !== null) {\r\n            formData.append(\"taskId\", subtask.taskId.toString());\r\n        }\r\n        if(subtask.file !== undefined && subtask.file !== null) {\r\n            formData.append(\"file\", subtask.file);\r\n        }\r\n        \r\n        return formData;\r\n    }\r\n\r\n    async deleteTask(taskId: number, deleteOnlyFromLesson: boolean, lessonId: number = 0) {\r\n        const response = await fetch(\"/deletetask\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                id: taskId,\r\n                deleteOnlyFromLesson: deleteOnlyFromLesson,\r\n                lessonId: lessonId\r\n            })\r\n        });\r\n        return response.status;\r\n    }\r\n\r\n    async deleteSubtask(subtaskId: number, taskId: number) {\r\n        const response = await fetch(\"/deletesubtask\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                id: subtaskId\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            this.updateTaskByTaskId(taskId);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n   async deleteUserSubtask(userId: number, subtaskId: number, taskId: number) {\r\n        const response = await fetch(\"/deleteusersubtask\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                userId: userId, subtaskId: subtaskId\r\n            })\r\n        });\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async addOrUpdateUserSubtask(userSubtask: UserSubtaskReadModel): Promise<number> {\r\n        let formData = this.getFormDataForUserSubtask(userSubtask);\r\n        const response = await fetch(\"/addorupdateusersubtask\", {\r\n            method: \"POST\",\r\n            body: formData\r\n        });\r\n\r\n        return response.status;\r\n    }\r\n\r\n    getFormDataForUserSubtask(userSubtask: UserSubtaskReadModel): FormData {\r\n        let formData = new FormData();\r\n        if(userSubtask.userId !== undefined && userSubtask.userId !== null) {\r\n            formData.append(\"userId\", userSubtask.userId.toString());\r\n        }\r\n        if(userSubtask.answer !== undefined && userSubtask.answer !== null) {\r\n            formData.append(\"answer\", userSubtask.answer.toString());\r\n        }\r\n        if(userSubtask.status !== undefined && userSubtask.status !== null) {\r\n            formData.append(\"status\", userSubtask.status.toString());\r\n        }\r\n        if(userSubtask.subtaskId !== undefined && userSubtask.subtaskId !== null) {\r\n            formData.append(\"subtaskId\", userSubtask.subtaskId.toString());\r\n        }\r\n        if(userSubtask.taskId !== undefined && userSubtask.taskId !== null) {\r\n            formData.append(\"taskId\", userSubtask.taskId.toString());\r\n        }\r\n        if(userSubtask.file !== undefined && userSubtask.file !== null) {\r\n            formData.append(\"file\", userSubtask.file);\r\n        }\r\n\r\n        return formData;\r\n    }\r\n\r\n    async addOrUpdateUserSubtaskAnswerGroup(userSubtaskAnswerGroup: UserSubtaskAnswerGroupReadModel): Promise<number> {\r\n        const response = await fetch(\"/addorupdateusersubtaskanswergroup\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                userId: userSubtaskAnswerGroup.userId, answerGroupId: userSubtaskAnswerGroup.answerGroupId,\r\n                subtaskId: userSubtaskAnswerGroup.subtaskId, status: userSubtaskAnswerGroup.status,\r\n                lastAnswer: userSubtaskAnswerGroup.lastAnswer\r\n            })\r\n        });\r\n        return response.status;\r\n    }\r\n\r\n    async getUserSubtask(subtaskId: number, userId: number): Promise<UserSubtaskViewModel> {\r\n        let userSubtask =  new UserSubtaskViewModel();\r\n        const response = await fetch(\"/getusersubtask\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                userId: userId, subtaskId: subtaskId\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            userSubtask = await response.json();\r\n        }\r\n\r\n        return userSubtask;\r\n    }\r\n\r\n    async getUserTask(taskId: number, userId: number): Promise<UserTaskViewModel> {\r\n        let userTask =  new UserTaskViewModel();\r\n        const response = await fetch(\"/getusertask\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                userId: userId, taskId: taskId\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            userTask = await response.json();\r\n        }\r\n\r\n        return userTask;\r\n    }\r\n\r\n    async getTasks(tags: TagReadModel[], ignoreIds: number[] = new Array<number>(0)): Promise<number> {\r\n        let tagIds = tags.map(t => t.id);\r\n        let tasks = new Array<TaskViewModel>();\r\n        const response = await fetch(\"/gettasks\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                tagIds: tagIds,\r\n                ignoreIds: ignoreIds\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            this.tasksByQuery = await response.json();\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async updateTaskByTaskId(taskId: number) {\r\n        const response = await fetch(\"/gettaskbyid\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                id: taskId\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            let taskIndex = this.tasksByChoosenLesson.findIndex(t => t.id === taskId);\r\n            this.tasksByChoosenLesson[taskIndex] =  await response.json();\r\n        }\r\n    }\r\n\r\n    async attachTaskToLesson(taskId: number, lessonId: number): Promise<number> {\r\n        const response = await fetch(\"/attachtasktolesson\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                id: taskId, lessonId: lessonId\r\n            })\r\n        });\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default TaskStore;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\TrainingStore.tsx",["656"],"﻿import { makeObservable, observable } from \"mobx\";\r\nimport { TaskViewModel } from \"../Typings/viewModels/TaskViewModel\";\r\n\r\nclass TrainingStore {\r\n    tasks: TaskViewModel[] = new Array<TaskViewModel>();\r\n    constructor() {\r\n        makeObservable(this, {\r\n            tasks: observable\r\n        });\r\n    }\r\n}\r\n\r\nexport default TrainingStore;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\WordStore.tsx",["657","658"],"﻿import { WordViewModel } from \"../Typings/viewModels/WordViewModel\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport { UserWordViewModel } from \"../Typings/viewModels/UserWordViewModel\";\r\nimport { WordReadModel } from \"../Typings/readModels/WordReadModel\";\r\nimport { UserWordReadModel } from \"../Typings/readModels/UserWordReadModel\";\r\nimport {WordOfADayReadModel} from \"../Typings/readModels/WordOfADayReadModel\";\r\n\r\nclass WordStore {\r\n    dictionary: WordViewModel[] = new Array<WordViewModel>();\r\n    userDictionary: UserWordViewModel[] = new Array<UserWordViewModel>();\r\n    wordOfADay: WordViewModel = new WordViewModel();\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            dictionary: observable,\r\n            userDictionary: observable,\r\n            wordOfADay: observable\r\n        });\r\n    }\r\n\r\n   async deleteWordFromDictionary(wordId: number): Promise<number> {\r\n       const response = await fetch(\"/deletewordfromdictionary\", {\r\n           method: \"POST\",\r\n           headers: {\r\n               'Content-Type': 'application/json;charset=utf-8'\r\n           },\r\n           body: JSON.stringify({id: wordId})\r\n       });\r\n       if(response.status === 200) {\r\n           this.getDictionary();\r\n       }\r\n\r\n       return response.status;\r\n    }\r\n\r\n   async deleteWordFromUserDictionary(wordId: number, userId: number): Promise<number> {\r\n        let word = new WordReadModel();\r\n        word.id = wordId;\r\n       const response = await fetch(\"/deletewordfromuserdictionary\", {\r\n           method: \"POST\",\r\n           headers: {\r\n               'Content-Type': 'application/json;charset=utf-8'\r\n           },\r\n           body: JSON.stringify({userId: userId, word: word})\r\n       });\r\n       if(response.status === 200) {\r\n           this.getUserDictionary(userId);\r\n       }\r\n\r\n       return response.status;\r\n   }\r\n\r\n   async getDictionary(): Promise<number> {\r\n        const response = await fetch(\"/getdictionary\");\r\n        if(response.status === 200) {\r\n            this.dictionary = await response.json();\r\n        }\r\n\r\n        return response.status;\r\n   }\r\n\r\n   async getUserDictionary(userId: number): Promise<number> {\r\n       const response = await fetch(\"/getuserdictionary\", {\r\n           method: \"POST\",\r\n           headers: {\r\n               'Content-Type': 'application/json;charset=utf-8'\r\n           },\r\n           body: JSON.stringify({id: userId})\r\n       });\r\n       if(response.status === 200) {\r\n           this.userDictionary = await response.json();\r\n       }\r\n\r\n        return response.status;\r\n   }\r\n\r\n   async addOrUpdateWordToDictionary(word: WordReadModel): Promise<number> {\r\n       const response = await fetch(\"/addorupdatewordtodictionary\", {\r\n           method: \"POST\",\r\n           headers: {\r\n               'Content-Type': 'application/json;charset=utf-8'\r\n           },\r\n           body: JSON.stringify({\r\n               id: word.id, word: word.word,\r\n               russianMeaning: word.russianMeaning, englishMeaning: word.englishMeaning, \r\n               partOfSpeech: word.partOfSpeech, examples: word.examples\r\n           })\r\n       });\r\n       if(response.status === 200) {\r\n           this.getDictionary();\r\n       } \r\n\r\n       return response.status;\r\n   }\r\n\r\n    async addOrUpdateWordToUserDictionary(word: WordReadModel, userId: number): Promise<number> {\r\n        const response = await fetch(\"/addorupdatewordtouserdictionary\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                word: word,\r\n                userId: userId\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            this.getDictionary()\r\n                .then((status) => {\r\n                    this.getUserDictionary(userId);\r\n                });\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async addOrUpdateUserWordsProgress(userWords: UserWordReadModel[]) {\r\n        const response = await fetch(\"/addorupdateuserwordsprogress\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                userWords: userWords\r\n            })\r\n        });\r\n        if(response.status !== 200) {\r\n            this.addOrUpdateUserWordsProgress(userWords);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async deleteWordOfADay(wordId: number): Promise<number> {\r\n        const response = await fetch(\"/deletewordofaday\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                id: wordId\r\n            })\r\n        });\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async getWordOfADay(date: Date | Date[], courseId: number): Promise<WordViewModel> {\r\n        let wordOfADay = new WordViewModel();\r\n        let dateWithTime = new Date(date.toString());\r\n        dateWithTime.setHours(12);\r\n        const response = await fetch(\"/getwordofaday\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                courseId: courseId, date: dateWithTime\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            wordOfADay = await response.json();\r\n            this.wordOfADay = wordOfADay;\r\n        }\r\n\r\n        return wordOfADay;\r\n    }\r\n\r\n    async addOrUpdateWordOfADay(wordOfADay: WordOfADayReadModel): Promise<number> {\r\n        let dateWithTime = new Date(wordOfADay.date.toString());\r\n        dateWithTime.setHours(12);\r\n        wordOfADay.date = dateWithTime;\r\n        const response = await fetch(\"/addorupdatewordofaday\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                word: wordOfADay.word,\r\n                courseId: wordOfADay.courseId,\r\n                date: wordOfADay.date\r\n            })\r\n        });\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async getUserWordsProgress(wordId: number, userId: number): Promise<UserWordViewModel> {\r\n        let userWord = new UserWordViewModel();\r\n        let word = new WordReadModel();\r\n        word.id = wordId;\r\n        const response = await fetch(\"/getuserwordsprogress\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                userId: userId,\r\n                word: word\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            userWord = await response.json();\r\n        }\r\n \r\n        return userWord;\r\n    }\r\n\r\n    async addOrUpdateUserWordProgress(userWord: UserWordReadModel): Promise<number> {\r\n        const response = await fetch(\"/addorupdateuserword\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                userId: userWord.userId, word: userWord.word,\r\n                rightAnswers: userWord.rightAnswers, answer: userWord.answer,\r\n                countOfAttempts: userWord.countOfAttempts, status: userWord.status\r\n            })\r\n        });\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async getAnswersToWordOfADayByWord(wordId: number, courseId: number): Promise<UserWordViewModel[]> {\r\n        let userWords = new Array<UserWordViewModel>();\r\n        const response = await fetch(\"/getanswerstowordofadaybyword\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n               id: wordId,\r\n                courseId: courseId\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            userWords = await response.json();\r\n        }\r\n\r\n        return userWords;\r\n    }\r\n}\r\n\r\nexport default WordStore;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\TrackerStore.tsx",["659","660"],"﻿import { TrackerViewModel } from \"../Typings/viewModels/TrackerViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { TrackerReadModel } from \"../Typings/readModels/TrackerReadModel\";\r\n\r\nclass TrackerStore {\r\n    currentTracker: TrackerViewModel = new TrackerViewModel();\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            currentTracker: observable\r\n        });\r\n    }\r\n\r\n    async getTracker(userId: number, courseId: number): Promise<number> {\r\n        const response = await fetch(\"/gettracker\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({userId: userId, courseId: courseId})\r\n        });\r\n        if(response.status === 200) {\r\n            let currentTracker = await response.json();\r\n            this.currentTracker = currentTracker;\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async addOrUpdateTracker(tracker: TrackerReadModel) {\r\n        const response = await fetch(\"/addorupdatetracker\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({ id: tracker.id, courseId: tracker.courseId, userId: tracker.userId, trackersByDay: tracker.trackersByDay })\r\n        });\r\n    }\r\n}\r\n\r\nexport default TrackerStore;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\NotificationStore.tsx",["661"],"﻿import { NotificationViewModel } from \"../Typings/viewModels/NotificationViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { UserNotificationReadModel } from \"../Typings/readModels/UserNotificationReadModel\";\r\n\r\nclass NotificationStore {\r\n    currentNotifications: NotificationViewModel[] = new Array<NotificationViewModel>();\r\n    \r\n    constructor() {\r\n        makeObservable(this, {\r\n            currentNotifications: observable\r\n        });\r\n    }\r\n\r\n    async getNotifications(userId: number): Promise<number> {\r\n        const response = await fetch(\"/getnotifications\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: userId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.currentNotifications = await response.json();\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async addOrUpdateUserNotification(userNotification: UserNotificationReadModel): Promise<number> {\r\n        const response = await fetch(\"/addorupdateusernotification\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({userId: userNotification.userId, notificationId: userNotification.notificationId, seen: userNotification.seen})\r\n        });\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default NotificationStore;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Authorization.tsx",["662"],"﻿import React from \"react\";\r\nimport RootStore from \"../../stores/RootStore\";\r\nimport { Label, Input, Button, Alert }from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\n\r\ninterface IAuthorizationProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nexport class Authorization extends React.Component<IAuthorizationProps> {\r\n    login: string;\r\n    password: string;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            login: observable,\r\n            password: observable\r\n        });\r\n    }\r\n\r\n    renderWarnings() {\r\n        setTimeout(() => {\r\n            this.props.store.userStore.wrongCredetianalsToggle(false);\r\n        }, 6000);\r\n        return(\r\n            <>\r\n                {this.props.store.userStore.wrongCredetianals && <div className=\"row justify-content-center\">\r\n                    <Alert color=\"danger\">Пользователя с такими данными не существует. Попробуйте ещё раз</Alert>\r\n                </div> }\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderLoginInput() {\r\n        return (\r\n            <>\r\n                <Label className=\"formLabel\">ЛОГИН</Label>\r\n                <Input\r\n                    style={{width: \"80%\"}}\r\n                    onChange={(e) => this.inputLogin(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderPasswordInput() {\r\n        return (\r\n            <>\r\n                <Label className=\"formLabel\">ПАРОЛЬ</Label>\r\n                <Input\r\n                    style={{width: \"80%\"}}\r\n                    type=\"password\"\r\n                    onChange={(e) => this.inputPassword(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderEnterButton() {\r\n        return(\r\n            <Button\r\n                style={{width: \"80%\", backgroundColor: \"#07575b\", marginTop: \"25px\", marginBottom: \"15px\"}}\r\n                onClick={() => this.authorize()}>\r\n                ВОЙТИ\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid authorizationForm\">\r\n                {this.renderWarnings()}\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderLoginInput()}\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderPasswordInput()}\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderEnterButton()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    inputLogin(event: React.FormEvent<HTMLInputElement>) {\r\n        this.login = event.currentTarget.value;\r\n    }\r\n\r\n    inputPassword(event: React.FormEvent<HTMLInputElement>) {\r\n        this.password = event.currentTarget.value;\r\n    }\r\n\r\n    async authorize() {\r\n        const response = await fetch(\"/authorization\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({login: this.login, password: this.password})\r\n        });\r\n        if(response.status === 200) {\r\n            this.props.store.userStore.getCurrentUser()\r\n                .then(() => {\r\n                    this.props.store.userStore.authorizationRequire(false);\r\n                    this.props.store.userStore.wrongCredetianalsToggle(false);\r\n                    this.props.store.userStore.getUsers();\r\n                });\r\n        } else {\r\n            this.props.store.userStore.authorizationRequire(true);\r\n            this.props.store.userStore.wrongCredetianalsToggle(true);\r\n        }\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Registration.tsx",["663"],"﻿import React from \"react\";\r\nimport RootStore from \"../../stores/RootStore\";\r\nimport { Label, Input, Button, Alert } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\n\r\ninterface IRegistrationProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nexport class Registration extends React.Component<IRegistrationProps> {\r\n    email: string;\r\n    password: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    login: string;\r\n    notRegistered: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            email: observable,\r\n            password: observable,\r\n            firstName: observable,\r\n            lastName: observable,\r\n            login: observable,\r\n            notRegistered: observable,\r\n        });\r\n    }\r\n\r\n    renderFirstNameInput() {\r\n        return(\r\n            <>\r\n                <Label className=\"formLabel\">ИМЯ</Label>\r\n                <Input\r\n                    style={{width: \"80%\"}}\r\n                    onChange={(e) => this.inputFirstName(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderLastNameInput() {\r\n        return(\r\n            <>\r\n                <Label className=\"formLabel\">ФАМИЛИЯ</Label>\r\n                <Input\r\n                    style={{width: \"80%\"}}\r\n                    onChange={(e) => this.inputLastName(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderLoginInput() {\r\n        return(\r\n            <>\r\n                <Label className=\"formLabel\">ЛОГИН</Label>\r\n                <Input\r\n                    style={{width: \"80%\"}}\r\n                    onChange={(e) => this.inputLogin(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderEmailInput() {\r\n        return(\r\n            <>\r\n                <Label className=\"formLabel\">Email</Label>\r\n                <Input\r\n                    style={{width: \"80%\"}}\r\n                    onChange={(e) => this.inputEmail(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderPasswordInput() {\r\n        return(\r\n            <>\r\n                <Label className=\"formLabel\">ПАРОЛЬ</Label>\r\n                <Input\r\n                    style={{width: \"80%\"}}\r\n                    type=\"password\"\r\n                    onChange={(e) => this.inputPassword(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderRegisterButton() {\r\n        return(\r\n            <Button\r\n                style={{width: \"80%\", backgroundColor: \"#07575b\", marginTop: \"25px\", marginBottom: \"15px\"}}\r\n                onClick={() => this.register()}>\r\n                ЗАРЕГИСТРИРОВАТЬСЯ\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderWarnings() {\r\n        setTimeout(() => {\r\n            this.notRegistered = false;\r\n        }, 6000);\r\n        return(\r\n            <>\r\n            {this.notRegistered && <Alert color=\"danger\">Что-то пошло не так и не удалось зарегистрироваться :(</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"col-12 authorizationForm\">\r\n                {this.renderWarnings()}\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderFirstNameInput()}\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderLastNameInput()}\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderLoginInput()}\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderEmailInput()}\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderPasswordInput()}\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderRegisterButton()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    inputEmail(event: React.FormEvent<HTMLInputElement>) {\r\n        this.email = event.currentTarget.value;\r\n    }\r\n\r\n    inputPassword(event: React.FormEvent<HTMLInputElement>) {\r\n        this.password = event.currentTarget.value;\r\n    }\r\n\r\n    inputFirstName(event: React.FormEvent<HTMLInputElement>) {\r\n        this.firstName = event.currentTarget.value;\r\n    }\r\n\r\n    inputLastName(event: React.FormEvent<HTMLInputElement>) {\r\n        this.lastName = event.currentTarget.value;\r\n    }\r\n\r\n    inputLogin(event: React.FormEvent<HTMLInputElement>) {\r\n        this.login = event.currentTarget.value;\r\n    }\r\n\r\n    async register() {\r\n        const response = await fetch(\"/registration\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({login: this.login, email: this.email, password: this.password, firstName: this.firstName, lastName: this.lastName})\r\n        });\r\n        if(response.status === 200) {\r\n            this.props.store.userStore.getCurrentUser()\r\n                .then(() => {\r\n                    this.props.store.userStore.registrationRequire(false);\r\n                    this.props.store.userStore.wrongCredetianalsToggle(false);\r\n                });\r\n        } else {\r\n            \r\n        }\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Main\\AdminMain.tsx",["664"],"﻿import React from \"react\";\r\nimport { observer } from  \"mobx-react\";\r\nimport { IAdminMainProps } from \"./IAdminMainProps\";\r\nimport { Card, CardHeader, Nav, NavItem, Button } from \"reactstrap\";\r\nimport { NavLink, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport CoursesPage from \"../Courses/CoursesPage\";\r\nimport DictionaryPage from \"../../Common/Dictionary/DictionaryPage\";\r\nimport TrainingPage from \"../../Common/Training/TrainingPage\";\r\nimport UsersPage from \"../Users/UsersPage\";\r\nimport FeedbackPage from \"../Feedback/FeedbackPage\";\r\n\r\n\r\n@observer\r\nexport class AdminMain extends React.Component<IAdminMainProps> {\r\n    render() {\r\n        return (\r\n            <>\r\n                <Card>\r\n                    <CardHeader className=\"mainMenuHeader\">\r\n                        <Nav tabs className=\"nav\">\r\n                            <NavItem>\r\n                                <NavLink to=\"/courses\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}}\r\n                                    activeStyle={{\r\n                                    color: '#ffffff',\r\n                                    backgroundColor: '#4169E1',\r\n                                    textDecoration: 'none'\r\n                                    }}>\r\n                                    КУРСЫ\r\n                                </NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink to=\"/users\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}}\r\n                                    activeStyle={{\r\n                                    color: '#ffffff',\r\n                                    backgroundColor: '#4169E1',\r\n                                    textDecoration: 'none'\r\n                                    }}>\r\n                                    ПОЛЬЗОВАТЕЛИ\r\n                                </NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink to=\"/dictionary\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}}\r\n                                     activeStyle={{\r\n                                     color: '#ffffff',\r\n                                     backgroundColor: '#4169E1',\r\n                                     textDecoration: 'none'\r\n                                    }}>СЛОВАРЬ</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink to=\"/trainings\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}}\r\n                                     activeStyle={{\r\n                                     color: '#ffffff',\r\n                                     backgroundColor: '#4169E1',\r\n                                     textDecoration: 'none'\r\n                                     }}>ТРЕНИРОВКИ</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink to=\"/feedbacks\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}}\r\n                                         activeStyle={{\r\n                                             color: '#ffffff',\r\n                                             backgroundColor: '#4169E1',\r\n                                             textDecoration: 'none'\r\n                                         }}>ОБРАТНАЯ СВЯЗЬ</NavLink>\r\n                            </NavItem>\r\n                            <Button\r\n                                outline color=\"primary\"\r\n                                onClick={() => this.exit()}>\r\n                                ВЫЙТИ\r\n                            </Button>\r\n                        </Nav>\r\n                    </CardHeader>\r\n                </Card>\r\n                <Switch>\r\n                    <Route exact path=\"/courses\"\r\n                           render={(props) => <CoursesPage store={this.props.store} />} />\r\n                    {<Route exact path=\"/users\"\r\n                           render={(props) => <UsersPage store={this.props.store} />} />}\r\n                    <Route exact path=\"/dictionary\"\r\n                           render={(props) => <DictionaryPage store={this.props.store} />} />\r\n                    {<Route exact path=\"/trainings\"\r\n                           render={(props) => <TrainingPage store={this.props.store} />} />}\r\n                    {<Route exact path=\"/feedbacks\"\r\n                            render={(props) => <FeedbackPage feedbackStore={this.props.store.feedbackStore}/>} />}\r\n                    <Redirect to=\"/courses\" />\r\n                </Switch>\r\n            </>\r\n        );\r\n    }\r\n\r\n    exit() {\r\n        this.props.store.reset();\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Main\\UserMain.tsx",["665","666"],"﻿import React from \"react\";\r\nimport { observer } from  \"mobx-react\";\r\nimport { Card, CardHeader, Nav, NavItem, Button, ButtonDropdown, DropdownItem, DropdownMenu, DropdownToggle, CardFooter } from \"reactstrap\";\r\nimport { NavLink, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { IUserMainProps } from \"./IUserMainProps\";\r\nimport DictionaryPage from \"../../Common/Dictionary/DictionaryPage\";\r\nimport TrainingPage from \"../../Common/Training/TrainingPage\";\r\nimport HomePage from \"../Home/HomePage\";\r\nimport MyLessonsPage from \"../MyLessons/MyLessonsPage\";\r\nimport { CourseViewModel } from \"../../../Typings/viewModels/CourseViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport Notifications from \"../../Common/Notifications/Notifications\";\r\n\r\n@observer\r\nexport class UserMain extends React.Component<IUserMainProps> {\r\n    courseMenuOpen: boolean;\r\n    notificationsOpen: boolean;\r\n\r\n    constructor(props: IUserMainProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            courseMenuOpen: observable,\r\n            notificationsOpen: observable,\r\n        });\r\n        this.getInitialStateOfApplication();\r\n    }\r\n\r\n    getInitialStateOfApplication() {\r\n        let courseStore = this.props.store.courseStore;\r\n        courseStore.getUserCourses()\r\n            .then((status) => {\r\n                if(status === 200) {\r\n                    let userCoursesIds = this.props.store.courseStore.userCourses.map(c => {\r\n                        return c.courseId\r\n                    });\r\n                    courseStore.getCoursesInfo(userCoursesIds);\r\n                }\r\n            });\r\n        let userId = this.props.store.userStore.currentUser.id;\r\n        this.props.store.notificationStore.getNotifications(userId);\r\n    }\r\n\r\n    renderNotifications() {\r\n        return(\r\n            <>\r\n                {this.notificationsOpen && <Notifications toggle={this.toggleNotifications} notificationStore={this.props.store.notificationStore} userStore={this.props.store.userStore} />}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Card>\r\n                    <CardHeader className=\"mainMenuHeader\">\r\n                        <Nav tabs className=\"nav\">\r\n                            <NavItem>\r\n                                {this.renderCoursesToggler(this.props.store.courseStore.coursesInfo)}\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink to=\"/home\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}}\r\n                                     activeStyle={{\r\n                                         color: '#ffffff',\r\n                                         backgroundColor: '#4169E1',\r\n                                         textDecoration: 'none'\r\n                                     }}>ГЛАВНАЯ</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink to=\"/mylessons\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}}\r\n                                         activeStyle={{\r\n                                             color: '#ffffff',\r\n                                             backgroundColor: '#4169E1',\r\n                                             textDecoration: 'none'\r\n                                         }}>МОИ УРОКИ</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink to=\"/dictionary\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}}\r\n                                         activeStyle={{\r\n                                            color: '#ffffff',\r\n                                             backgroundColor: '#4169E1',\r\n                                             textDecoration: 'none'\r\n                                         }}>СЛОВАРЬ</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink to=\"/trainings\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}}\r\n                                         activeStyle={{\r\n                                             color: '#ffffff',\r\n                                             backgroundColor: '#4169E1',\r\n                                             textDecoration: 'none'\r\n                                         }}>ТРЕНИРОВКИ</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink to={\"#\"}\r\n                                         exact \r\n                                         \r\n                                         className=\"nav-link\" style={{fontSize: \"1.5em\"}}\r\n                                         activeStyle={{\r\n                                             color: '#ffffff',\r\n                                             backgroundColor: '#4169E1',\r\n                                             textDecoration: 'none'\r\n                                         }}>\r\n                                    <i className=\"fa fa-bell\" onClick={() => this.toggleNotifications()} />\r\n                                </NavLink>\r\n                            </NavItem>\r\n                            <Button\r\n                                outline color=\"primary\"\r\n                                onClick={() => this.exit()}>\r\n                                ВЫЙТИ\r\n                            </Button>\r\n                        </Nav>\r\n                    </CardHeader>\r\n                    {this.renderNotifications()}\r\n                </Card>\r\n                <Switch>\r\n                    <Route exact path=\"/home\"\r\n                           render={(props) => <HomePage store={this.props.store} />} />\r\n                    <Route exact path=\"/mylessons\"\r\n                           render={(props) => <MyLessonsPage store={this.props.store} />} />\r\n                    <Route exact path=\"/dictionary\"\r\n                           render={(props) => <DictionaryPage store={this.props.store} />} />\r\n                    <Route exact path=\"/trainings\"\r\n                           render={(props) => <TrainingPage store={this.props.store} />} />\r\n                    <Redirect to=\"/home\" />\r\n                </Switch>\r\n            </>\r\n        );\r\n    }\r\n\r\n    async exit() {\r\n        const response = await fetch(\"/exit\");\r\n        if(response.status === 200) {\r\n            this.props.store.reset();\r\n        }\r\n    }\r\n\r\n    renderCoursesToggler(courses: CourseViewModel[]) {\r\n        let choosenCourse = this.props.store.courseStore.choosenCourse;\r\n        return(\r\n            <ButtonDropdown isOpen={this.courseMenuOpen} toggle={() => this.toggleCourseMenuOpen()}>\r\n                <DropdownToggle caret outline color=\"primary\">\r\n                    {choosenCourse.name}\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                    {courses.map((course) => {\r\n                        return(\r\n                            <DropdownItem\r\n                                onClick={(e) => this.toggleCourse(course)}\r\n                                key={course.id.toString()}\r\n                            >{course.name}</DropdownItem>\r\n                        );\r\n                    })}\r\n                </DropdownMenu>\r\n            </ButtonDropdown>\r\n        );\r\n    }\r\n\r\n    toggleCourseMenuOpen() {\r\n        this.courseMenuOpen = !this.courseMenuOpen;\r\n    }\r\n\r\n    toggleCourse(course: CourseViewModel) {\r\n        this.props.store.courseStore.setChoosenCourse(course);\r\n        this.props.store.lessonStore.getLessonsByCourse(course.id);\r\n        let choosenLessonId = this.props.store.lessonStore.choosenLesson.id;\r\n        this.props.store.taskStore.getTasksByLesson(choosenLessonId);\r\n        this.props.store.wordStore.getWordOfADay(new Date(), course.id);\r\n    }\r\n\r\n    toggleNotifications = () => {\r\n        this.notificationsOpen = !this.notificationsOpen;\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CourseViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\LessonViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserSubtaskViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserTaskViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\WordViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserWordViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\TrackerViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\WordReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Courses\\CoursesPage.tsx",["667","668"],"﻿import React, { Component } from 'react';\r\nimport  { Tab, Nav } from \"react-bootstrap\";\r\nimport { Alert, Button, Col, Row, Collapse } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport { observable, makeObservable, action } from \"mobx\";\r\nimport { CourseViewModel } from \"../../../Typings/viewModels/CourseViewModel\";\r\nimport { renderSpinner } from \"../../../functions/renderSpinner\";\r\nimport { AddNewCourse } from \"./AddNewCourse\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport {Course} from \"./Course\";\r\n\r\nclass ICoursesPageProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass CoursesPage extends Component<ICoursesPageProps> {\r\n    notDeleted: boolean = false;\r\n    isNavOpen: boolean = true;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            notDeleted: observable,\r\n            isNavOpen: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.props.store.courseStore.getCoursesForTeacher();\r\n    }\r\n\r\n    renderCourse() {\r\n        let coursesExists = this.props.store.courseStore.coursesForTeacher.length !== 0;\r\n        if(!coursesExists) {\r\n            return(\r\n                <Alert>Добавьте курсы. Пока нет ни одного курса.</Alert>\r\n            );\r\n        } else {\r\n            return (\r\n                <Course store={this.props.store}/>\r\n            );\r\n        }\r\n    }\r\n\r\n    toggleNav() {\r\n        this.isNavOpen = !this.isNavOpen;\r\n    }\r\n\r\n    renderCautions() {\r\n        setTimeout(() => {\r\n            this.notDeleted = false;\r\n        }, 6000);\r\n        return (\r\n            <>\r\n                {this.notDeleted && <Alert>Что-то пошло не так и курс не удалился</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderCoursesMenu(courses: CourseViewModel[]) {\r\n        let rowHeight = this.isNavOpen ? courses.length * 130 : 40;\r\n            return (\r\n                <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\r\n                    {this.renderCautions()}\r\n                    <Row>\r\n                        <Col sm={3} style={{height: `${rowHeight}px`}}>\r\n                            <Button color=\"primary\" onClick={() => this.toggleNav()}>КУРСЫ</Button>\r\n                            <Collapse isOpen={this.isNavOpen}>\r\n                                <Nav variant=\"pills\" className=\"flex-column\">\r\n                                    <div className=\"container-fluid\">\r\n                                        {courses.map((course) => {\r\n                                            return (\r\n                                                <Nav.Item key={course.id}>\r\n                                                    <div className=\"row\" key={course.id}>\r\n                                                        <i style={{marginLeft: '96%', width: '2%'}}\r\n                                                           onClick={() => this.deleteCourse(course.id)}\r\n                                                           className=\"fa fa-window-close fa-2x\" aria-hidden=\"true\"/>\r\n                                                            <Nav.Link\r\n                                                                eventKey={course.id}\r\n                                                                className=\"nav-link lesson\"\r\n                                                                onClick={() => this.changeCourse(course)}>\r\n                                                                {course.name}\r\n                                                            </Nav.Link>\r\n                                                    </div>\r\n                                                </Nav.Item>\r\n                                            );\r\n                                        })}\r\n                                        {<AddNewCourse courseStore={this.props.store.courseStore}/>}\r\n                                    </div>\r\n                                </Nav>\r\n                            </Collapse>\r\n                        </Col>\r\n                        <Col sm={9}>\r\n                            {this.renderCourse()}\r\n                        </Col>\r\n                    </Row>\r\n                </Tab.Container>\r\n            );\r\n    }\r\n\r\n    render() {\r\n        let courses = this.props.store.courseStore.coursesForTeacher;\r\n        return (\r\n            <div style={{marginTop: \"5px\"}}>\r\n                {courses !== undefined && this.renderCoursesMenu(courses)}\r\n                {courses === undefined && renderSpinner()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    deleteCourse(courseId: number) {\r\n        let result = window.confirm('Вы уверены, что хотите удалить этот курс?');\r\n        if(result) {\r\n            this.props.store.courseStore.deleteCourse(courseId)\r\n                .then((status) => {\r\n                    this.notDeleted = status !== 200;\r\n            });\r\n        }\r\n    }\r\n\r\n    changeCourse(course: CourseViewModel) {\r\n        this.props.store.courseStore.setChoosenCourse(course);\r\n        this.props.store.courseStore.getUsersByCourse(course.id);\r\n        this.props.store.lessonStore.getLessonsByCourse(course.id);\r\n        this.props.store.courseStore.getUsersByCourse(course.id);\r\n        this.props.store.wordStore.getWordOfADay(new Date(), course.id);\r\n    }\r\n}\r\n\r\nexport default CoursesPage;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Users\\UsersPage.tsx",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Home\\HomePage.tsx",["669"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport { Alert } from \"reactstrap\";\r\nimport WordsOfADay from \"../../Admin/WordsOfADay/WordsOfADay\";\r\nimport OverallProgress from \"./OverallProgress\";\r\nimport Tracker from \"../Tracker/Tracker\";\r\n\r\nclass IHomePageProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass HomePage extends Component<IHomePageProps> {\r\n    renderCautions() {\r\n        let coursesLength = this.props.store.courseStore.userCourses.length;\r\n        return(\r\n            <>\r\n                {coursesLength !== 0 && <Alert color=\"danger\">Курс не доступен. Обратитесь к администратору.</Alert>}\r\n                {coursesLength === 0 && <Alert color=\"danger\">Вы пока ещё не зачислены ни на один курс.</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderHomeContent() {\r\n        return(\r\n            <>\r\n                {this.renderWordsOfADay()}\r\n                {this.renderOverallProgress()}\r\n                {this.renderTracker()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderWordsOfADay() {\r\n        return(\r\n            <WordsOfADay store={this.props.store}/>\r\n        );\r\n    }\r\n\r\n    renderOverallProgress() {\r\n        return(\r\n            <OverallProgress courseStore={this.props.store.courseStore} currentUser={this.props.store.userStore.currentUser}/>\r\n        );\r\n    }\r\n\r\n    renderTracker() {\r\n        let courseId = this.props.store.courseStore.choosenCourse.id;\r\n        let userId = this.props.store.userStore.currentUser.id;\r\n        return(\r\n            <Tracker courseId={courseId} trackerStore={this.props.store.trackerStore} userId={userId} />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let courseAvailable = this.choosenCourseIsAvailable();\r\n        return(\r\n            <>\r\n                {courseAvailable && this.renderHomeContent()}\r\n                {!courseAvailable && this.renderCautions()}\r\n            </>\r\n        );\r\n    }\r\n    \r\n    choosenCourseIsAvailable(): boolean {\r\n        let courseStore = this.props.store.courseStore;\r\n        let choosenCourseId = courseStore.choosenCourse.id;\r\n        if(choosenCourseId === 0 || choosenCourseId === undefined) {\r\n            return false;\r\n        }\r\n        let userCourse = courseStore.userCourses.filter(uc => uc.courseId === choosenCourseId)[0];\r\n        if(userCourse.expireDate < new Date() || userCourse.startDate > new Date()) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default HomePage;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\MyLessons\\MyLessonsPage.tsx",["670","671"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport { Nav, Tab } from \"react-bootstrap\";\r\nimport { Button, Col, Collapse, Row, Alert } from \"reactstrap\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport { LessonViewModel } from \"../../../Typings/viewModels/LessonViewModel\";\r\nimport LessonPage from \"./LessonPage\";\r\n\r\nclass IMyLessonsPageProps {\r\n    store: RootStore;\r\n}\r\n\r\n\r\n@observer\r\nclass MyLessonsPage extends Component<IMyLessonsPageProps> {\r\n    isNavOpen: boolean = true;\r\n    courseId: number;\r\n\r\n    constructor(props: IMyLessonsPageProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            isNavOpen: observable,\r\n            courseId: observable,\r\n        });\r\n        if(this.props.store.courseStore.choosenCourse.id !== undefined) {\r\n            this.getLessons();\r\n        }\r\n        \r\n    }\r\n\r\n    getLessons() {\r\n        let courseId = this.props.store.courseStore.choosenCourse.id;\r\n        this.props.store.lessonStore.getLessonsByCourse(courseId);\r\n        this.courseId = courseId;\r\n    }\r\n    \r\n    componentDidUpdate(prevProps: Readonly<IMyLessonsPageProps>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        if(prevProps.store.courseStore.choosenCourse.id !== this.courseId) {\r\n            this.getLessons();\r\n        }\r\n    }\r\n\r\n    renderLessonsMenu(lessons: LessonViewModel[]) {\r\n        let rowHeight = this.isNavOpen ? lessons.length * 80 + 50  : 60;\r\n        return(\r\n            <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\r\n                <Row>\r\n                    <Col sm={3} style={{height: `${rowHeight}px`}}>\r\n                        <Button color=\"primary\" onClick={() => this.toggleNav()}>УРОКИ</Button>\r\n                        <Collapse isOpen={this.isNavOpen}>\r\n                            <Nav variant=\"pills\" className=\"flex-column\">\r\n                                <div className=\"container-fluid\">\r\n                                    {lessons.map((lesson) => {\r\n                                        let currentDate = new Date().toString();\r\n                                        let isDisabled = Date.parse(currentDate) > Date.parse(lesson.expireDate)  && Date.parse(currentDate) < Date.parse(lesson.startDate);\r\n                                        return (\r\n                                                <Nav.Item key={lesson.id}>\r\n                                                    <div className=\"row\" key={lesson.id}>\r\n                                                        <Nav.Link\r\n                                                            key={lesson.id}\r\n                                                            eventKey={lesson.id}\r\n                                                            disabled={isDisabled}\r\n                                                            className=\"nav-link lesson\"\r\n                                                            onClick={() => this.lessonToggle(lesson)}>\r\n                                                            {lesson.name}\r\n                                                        </Nav.Link>\r\n                                                    </div>\r\n                                                </Nav.Item>\r\n                                        );\r\n                                    })}\r\n                                </div>\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </Col>\r\n                    <Col sm={9}>\r\n                        <LessonPage store={this.props.store}/>\r\n                    </Col>\r\n                </Row>\r\n            </Tab.Container>\r\n        );\r\n    }\r\n\r\n    renderCautions() {\r\n        return(\r\n            <Alert color=\"danger\">Курс не доступен. Обратитесь к администратору.</Alert>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let lessons = this.props.store.lessonStore.lessonsByChoosenCourse;\r\n        let courseAvailable = this.choosenCourseIsAvailable();\r\n        return(\r\n            <>\r\n                \r\n                {courseAvailable && this.renderLessonsMenu(lessons)}\r\n                {!courseAvailable && this.renderCautions()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    toggleNav() {\r\n        this.isNavOpen = !this.isNavOpen;\r\n    }\r\n\r\n    lessonToggle(lesson: LessonViewModel) {\r\n        this.props.store.lessonStore.setChoosenLesson(lesson);\r\n        this.props.store.taskStore.getTasksByLesson(lesson.id);\r\n    }\r\n\r\n    choosenCourseIsAvailable(): boolean {\r\n        let courseStore = this.props.store.courseStore;\r\n        let choosenCourseId = courseStore.choosenCourse.id;\r\n        if(choosenCourseId === 0) {\r\n            return false;\r\n        }\r\n        let userCourse = courseStore.userCourses.filter(uc => uc.courseId === choosenCourseId)[0];\r\n        if(userCourse === undefined || (userCourse.expireDate < new Date() || userCourse.startDate > new Date())) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nexport default MyLessonsPage;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\DictionaryPage.tsx",["672"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport { Button } from 'reactstrap';\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { UserRole } from \"../../../Typings/enums/UserRole\";\r\nimport Words from \"./Words\";\r\nimport WordsTrainingPage from \"../../User/Dictionary/WordsTrainingPage\";\r\nimport Search from \"./Search\";\r\nimport \"../../../styles/dictionary.css\";\r\nimport { WordViewModel } from \"../../../Typings/viewModels/WordViewModel\";\r\nimport AddOrUpdateWord from \"./AddOrUpdateWord\";\r\n\r\nclass IDictionaryPageProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass DictionaryPage extends Component<IDictionaryPageProps> {\r\n    addNewWord: boolean;\r\n    training: boolean;\r\n    searchAllowed: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addNewWord: observable,\r\n            training: observable,\r\n            searchAllowed: observable\r\n        });\r\n    }\r\n\r\n    componentWillMount(): void {\r\n        let role = this.props.store.userStore.currentUser.role;\r\n        this.props.store.wordStore.getDictionary()\r\n            .then(() => {\r\n                this.searchAllowed = true;\r\n                if(role === UserRole.User) {\r\n                    let userId = this.props.store.userStore.currentUser.id;\r\n                    this.props.store.wordStore.getUserDictionary(userId);\r\n                }\r\n            });\r\n    }\r\n\r\n    addNewWordToggle = () => {\r\n        this.addNewWord = !this.addNewWord;\r\n    };\r\n\r\n    trainingToggle = () => {\r\n        this.training = !this.training;\r\n    };\r\n\r\n    renderSearch() {\r\n        return(\r\n            <div className=\"col-lg-6 col-md-6 col-sm-12\" style={{marginTop: \"10px\"}}>\r\n                <Search wordStore={this.props.store.wordStore} user={this.props.store.userStore.currentUser} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderAddNewWordButton() {\r\n        return(\r\n            <div className=\"col-lg-6 col-md-6 col-sm-12\" style={{marginTop: \"10px\", marginBottom: \"10px\"}}>\r\n                <Button\r\n                    outline\r\n                    color=\"primary\"\r\n                    onClick={() => this.addNewWordToggle()}>\r\n                    Добавить новое слово\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderAddNewWordWindow() {\r\n        return(\r\n            <>\r\n                {this.addNewWord && <div className=\"row justify-content-center\">\r\n                    <AddOrUpdateWord word={new WordViewModel()} wordStore={this.props.store.wordStore} cancelEdit={this.addNewWordToggle} courseId={undefined} currentUser={this.props.store.userStore.currentUser} date={undefined} isWordOfADay={false}/>\r\n                </div>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderTrainingButton() {\r\n        let role = this.props.store.userStore.currentUser.role;\r\n        if(role === UserRole.User) {\r\n            return(\r\n                <div className=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\" style={{marginTop: 10, marginBottom: 10}}>\r\n                    <Button\r\n                        disabled={false}\r\n                        color=\"primary trainingButton\"\r\n                        onClick={() => this.trainingToggle()}>\r\n                        Тренировка\r\n                    </Button>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderWordTrainingPage() {\r\n        return(\r\n            <>\r\n                {this.training && <WordsTrainingPage onToggle={this.trainingToggle} wordStore={this.props.store.wordStore} userId={this.props.store.userStore.currentUser.id}/>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderWords() {\r\n        return(\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-12\">\r\n                    <Words userStore={this.props.store.userStore} wordStore={this.props.store.wordStore}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row justify-content-center\">\r\n                    {this.searchAllowed && this.renderSearch()}\r\n                    {this.renderAddNewWordButton()}\r\n                    {this.renderTrainingButton()}\r\n                    {this.renderWordTrainingPage()}\r\n                </div>\r\n                {this.renderAddNewWordWindow()}\r\n                {this.renderWords()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DictionaryPage;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Notifications\\Notifications.tsx",["673"],"﻿import React, { Component } from \"react\";\r\nimport { NotificationViewModel } from \"../../../Typings/viewModels/NotificationViewModel\";\r\nimport { Modal, ModalBody, Alert } from \"reactstrap\";\r\nimport NotificationStore from \"../../../stores/NotificationStore\";\r\nimport UserStore from \"../../../stores/UserStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport Notification from \"./Notification\"\r\n\r\nclass INotificationsProps {\r\n    toggle: any;\r\n    notificationStore: NotificationStore;\r\n    userStore: UserStore;\r\n}\r\n\r\n@observer\r\nclass Notifications extends Component<INotificationsProps> {\r\n    renderBody(notifications: NotificationViewModel[]) {\r\n        return (\r\n            <ModalBody>\r\n                {notifications.map((notification,i) => {\r\n                    return (\r\n                        <div className=\"container-fluid\" key={i}>\r\n                            <Notification notification={notification} notificationStore={this.props.notificationStore} userStore={this.props.userStore} />\r\n                        </div>\r\n                    );\r\n                })}\r\n            </ModalBody>\r\n        );\r\n    }\r\n\r\n    renderCloseButton() {\r\n        return (\r\n            <i style={{marginLeft: '96%', width: '2%'}}\r\n               onClick={() => this.props.toggle()}\r\n               className=\"fa fa-window-close fa-2x\" aria-hidden=\"true\"/>\r\n        );\r\n    }\r\n\r\n    renderNotifications(notifications: NotificationViewModel[]) {\r\n        return(\r\n            <Modal toggle={this.props.toggle} isOpen={true}>\r\n                {this.renderCloseButton()}\r\n                {notifications.length === 0 && this.renderCaution()}\r\n                {notifications.length !== 0 && this.renderBody(notifications)}\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    renderCaution() {\r\n        return(\r\n            <Alert color=\"primary\" style={{marginTop: \"10px\", marginLeft: \"10px\", marginRight: \"10px\"}}>\r\n                Уведомлений пока нет.\r\n            </Alert>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let notifications = this.props.notificationStore.currentNotifications;\r\n        return(\r\n            <>\r\n                {this.renderNotifications(notifications)}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Notifications;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Training\\TrainingPage.tsx",["674"],"﻿import React, { Component } from \"react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Nav, Tab, Row, Col }  from \"react-bootstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport TrainingContent from \"./TrainingContent\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\n\r\nclass ITrainingPageProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass TrainingPage extends Component<ITrainingPageProps> {\r\n    filtersOpen: boolean;\r\n    mainTag: number = 1;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            filtersOpen: observable,\r\n            mainTag: observable\r\n        });\r\n    }\r\n\r\n    renderMenu() {\r\n        return(\r\n            <Tab.Container id=\"left-tabs-example\" defaultActiveKey={1}>\r\n                <Row>\r\n                    <Col sm={2} style={{height: \"160px\"}}>\r\n                        <Nav  variant=\"pills\" className=\"flex-column\">\r\n                            <div className=\"container-fluid\">\r\n                                <Nav.Item key={1}>\r\n                                    <div className=\"row\" key={1}>\r\n                                        <Nav.Link\r\n                                            eventKey={1}\r\n                                                className=\"nav-link lesson\"\r\n                                                onClick={() => this.changeMainTag(1)}>\r\n                                                ГРАММАТИКА\r\n                                            </Nav.Link>\r\n                                    </div>\r\n                                </Nav.Item>\r\n                                <Nav.Item key={2}>\r\n                                    <div className=\"row\" key={2}>\r\n                                            <Nav.Link\r\n                                                eventKey={2}\r\n                                                className=\"nav-link lesson\"\r\n                                                onClick={() => this.changeMainTag(2)}>\r\n                                                ЧТЕНИЕ\r\n                                            </Nav.Link>\r\n                                    </div>\r\n                                </Nav.Item>\r\n                                <Nav.Item key={3}>\r\n                                    <div className=\"row\" key={3}>\r\n                                            <Nav.Link\r\n                                                eventKey={3}\r\n                                                className=\"nav-link lesson\"\r\n                                                onClick={() => this.changeMainTag(3)}>\r\n                                                АУДИРОВАНИЕ\r\n                                            </Nav.Link>\r\n                                    </div>\r\n                                </Nav.Item>\r\n                            </div>\r\n                        </Nav>\r\n                    </Col>\r\n                    <Col sm={10}>\r\n                        <TrainingContent store={this.props.store} mainTag={this.mainTag}/>\r\n                    </Col>\r\n                </Row>\r\n            </Tab.Container>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\">\r\n                 {this.renderMenu()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    changeMainTag(tagId: number) {\r\n        this.mainTag = tagId;\r\n    }\r\n}\r\n\r\nexport default TrainingPage;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\MyLessons\\LessonPage.tsx",["675"],"﻿import React, { Component } from 'react';\r\nimport { Nav, Tab } from \"react-bootstrap\";\r\nimport { Lesson } from \"../../Common/Lesson/Lesson\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Card, CardHeader } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport Homework from \"./Homework\";\r\n\r\nclass ILessonPageProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass LessonPage extends Component<ILessonPageProps> {\r\n    lessonActive: boolean = true;\r\n    homeworkActive: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            lessonActive: observable,\r\n            homeworkActive: observable\r\n        });\r\n    }\r\n\r\n    renderLessonMenu() {\r\n        return(\r\n            <Tab.Container>\r\n                <Card>\r\n                    <CardHeader className=\"userMenuHeader\">\r\n                        <Nav variant=\"pills\">\r\n                            <Nav.Item>\r\n                                <Nav.Link\r\n                                    className=\"nav-link\"\r\n                                    eventKey=\"Lesson\"\r\n                                    onClick={() => this.toggleMenu(\"lesson\")}>\r\n                                    УРОК\r\n                                </Nav.Link>\r\n                            </Nav.Item>\r\n                            <Nav.Item>\r\n                                <Nav.Link\r\n                                    className=\"nav-link\"\r\n                                    eventKey=\"Homework\"\r\n                                    onClick={() => this.toggleMenu(\"homework\")}>\r\n                                    ДОМАШНЯЯ РАБОТА\r\n                                </Nav.Link>\r\n                            </Nav.Item>\r\n                        </Nav>\r\n                    </CardHeader>\r\n                    {this.lessonActive && <Lesson store={this.props.store} />}\r\n                    {this.homeworkActive && <Homework store={this.props.store} />}\r\n                </Card>\r\n            </Tab.Container>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderLessonMenu()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    toggleMenu(turnOn: string) {\r\n        this.lessonActive = false;\r\n        this.homeworkActive = false;\r\n        if(turnOn === \"lesson\") {\r\n            this.lessonActive = true;\r\n        } else if (turnOn === \"homework\") {\r\n            this.homeworkActive = true;\r\n        }\r\n    }\r\n}\r\n\r\nexport default LessonPage;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Home\\OverallProgress.tsx",["676"],"﻿import React, { Component } from 'react';\r\nimport { UserViewModel } from \"../../../Typings/viewModels/UserViewModel\";\r\nimport Circle from \"react-circle\";\r\nimport CourseStore from \"../../../stores/CourseStore\";\r\nimport {observer} from \"mobx-react\";\r\nimport {makeObservable, observable} from \"mobx\";\r\n\r\nclass IOverallProgressProps {\r\n    courseStore: CourseStore;\r\n    currentUser: UserViewModel;\r\n}\r\n\r\n@observer\r\nclass OverallProgress extends Component<IOverallProgressProps> {\r\n    progress: number = 0;\r\n\r\n    constructor(props: IOverallProgressProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            progress: observable\r\n        });\r\n        this.computeProgress();\r\n    }\r\n\r\n    renderProgress() {\r\n        return(\r\n            <Circle//todo: изучи побольше, может быть тут можно несколько данных отображать\r\n                size=\"300\"\r\n                progress={this.progress}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div style={{marginTop: \"10px\"}}>\r\n                {this.renderProgress()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    computeProgress() {\r\n        let userId = this.props.currentUser.id;\r\n        let courseId = this.props.courseStore.choosenCourse.id;\r\n        this.props.courseStore\r\n            .getUserCourseProgress(userId, courseId)\r\n            .then((progress) => {\r\n                this.progress =  progress;\r\n            });\r\n    }\r\n}\r\n\r\nexport default OverallProgress;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Training\\TrainingContent.tsx",["677","678","679"],"﻿import React, {Component} from \"react\";\r\nimport { Alert, Button } from \"reactstrap\";\r\nimport {TagViewModel} from \"../../../Typings/viewModels/TagViewModel\";\r\nimport {observer} from \"mobx-react\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport {TaskViewModel} from \"../../../Typings/viewModels/TaskViewModel\";\r\nimport {Task} from \"../Tasks/Task\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport {TagReadModel} from \"../../../Typings/readModels/TagReadModel\";\r\nimport TaskUpload from \"../../Admin/Tasks/TaskUpload\";\r\nimport {UserRole} from \"../../../Typings/enums/UserRole\";\r\nimport TagsControlWindow from \"../../Admin/Tags/TagsControlWindow\";\r\n\r\nclass ITrainingContentProps {\r\n    store: RootStore;\r\n    mainTag: number;\r\n}\r\n\r\n@observer\r\nclass TrainingContent extends Component<ITrainingContentProps> {\r\n    choosenTags: TagViewModel[] = new Array<TagViewModel>();\r\n    taskUploadWindowOpen: boolean = false;\r\n    update: boolean = false;\r\n    notReceived: boolean;\r\n    tagsControlWindowOpen: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            choosenTags: observable,\r\n            taskUploadWindowOpen: observable,\r\n            update: observable,\r\n            notReceived: observable,\r\n            tagsControlWindowOpen: observable\r\n        });\r\n    }\r\n\r\n    updateToggle() {\r\n        this.update = !this.update;\r\n    }\r\n\r\n    renderApplyButton() {\r\n        return (\r\n            <div className=\"row justify-content-center\" style={{marginTop: \"10px\", marginBottom: \"10px\"}}>\r\n                <Button\r\n                    color=\"primary\"\r\n                    style={{width: '50%'}}\r\n                    onClick={() => this.applyTags()}>\r\n                    ПРИМЕНИТЬ\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderTags(tags: TagViewModel[], update: boolean) {\r\n        return (\r\n            <div className=\"row\" style={{marginTop: \"10px\", marginLeft: \"10px\", marginRight: \"10px\"}}>\r\n                {tags.map((tag, i) => {\r\n                    let outline = !this.choosenTags.includes(tag);\r\n                    if(tag.id !== 1 && tag.id !== 2 && tag.id !== 3) {//todo: неприятный хардкод \r\n                        return (\r\n                            <Button\r\n                                outline={outline} color=\"primary\"\r\n                                style={{\r\n                                    marginLeft: \"10px\",\r\n                                    marginBottom: \"10px\",\r\n                                    height: \"auto\",\r\n                                    width: \"auto\",\r\n                                    fontSize: \"0.8em\"\r\n                                }}\r\n                                active={false}\r\n                                key={i}\r\n                                onClick={() => this.toggleTag(tag)}>\r\n                                {tag.name}\r\n                            </Button>\r\n                        );\r\n                    }\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderFilters(tags: TagViewModel[]) {\r\n        if(tags.length > 0) {\r\n            return(\r\n                <>\r\n                    {this.renderTags(tags, this.update)}\r\n                    {this.renderApplyButton()}\r\n                    {this.renderTagsControl()}\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderTasks(tasks: TaskViewModel[]) {\r\n        if(tasks.length >  0) {\r\n            return(\r\n                <div className=\"row\">\r\n                    {tasks.map((task, i) => {\r\n                        return(\r\n                            <Task task={task} store={this.props.store} userId={this.props.store.userStore.currentUser.id} key={i}  isTrainingOrPool={true} tags={this.choosenTags}/>\r\n                        );\r\n                    })}\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"row justify-content-center\">\r\n                    <Alert color=\"primary\" style={{width: \"80%\"}}>К сожалению, пока нет заданий в этом разделе</Alert>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderCautions() {\r\n        setTimeout(() => { this.notReceived = false }, 3000);\r\n        return(\r\n            <>\r\n                {this.notReceived && <Alert color=\"danger\">Что-то пошло не так и не удалось получить задания по выбранным тегам. Попробуйте ещё раз.</Alert>}\r\n            </>\r\n        );\r\n    }\r\n    \r\n    renderTaskUpload() {\r\n        if(this.props.store.userStore.currentUser.role === UserRole.Admin) {\r\n            return (\r\n                <TaskUpload store={this.props.store} isTrainingOrPool={true} />\r\n            );\r\n        }\r\n    }\r\n\r\n    renderTagsControl() {\r\n        if(this.props.store.userStore.currentUser.role === UserRole.Admin) {\r\n            return (\r\n                <>\r\n                    {<Button \r\n                        style={{marginBottom: \"10px\"}}\r\n                        outline color=\"secondary\" onClick={() => this.toggleTagsControlWindowOpen()}>\r\n                        Редактировать теги\r\n                    </Button>}\r\n                    {this.tagsControlWindowOpen && <TagsControlWindow tagStore={this.props.store.tagStore} toggle={this.toggleTagsControlWindowOpen} />}\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let tags = this.props.store.tagStore.tags;\r\n        return(\r\n            <>\r\n                {this.renderCautions()}\r\n                {this.renderFilters(tags)}\r\n                {this.renderTasks(this.props.store.taskStore.tasksByQuery)}\r\n                {this.renderTaskUpload()}\r\n            </>\r\n        )\r\n    }\r\n\r\n    toggleTag(tag: TagViewModel) {\r\n        if(this.choosenTags.filter(t => t.id === tag.id).length > 0) {\r\n            let choosenTags = this.choosenTags\r\n                .filter(t => t !== tag);\r\n            this.choosenTags = choosenTags;\r\n        } else {\r\n            this.choosenTags.push(tag);\r\n        }\r\n        this.updateToggle();\r\n    }\r\n\r\n    applyTags() {\r\n        let mainTag = new TagReadModel();\r\n        mainTag.id = this.props.mainTag;\r\n        let choosenTags = this.choosenTags;\r\n        choosenTags.push(mainTag);\r\n        this.props.store.taskStore\r\n            .getTasks(choosenTags)\r\n            .then((status) => {\r\n                this.notReceived = status !== 200;\r\n            });\r\n    }\r\n\r\n    toggleTaskUploadWindow() {\r\n        this.taskUploadWindowOpen = !this.taskUploadWindowOpen;\r\n    }\r\n\r\n    toggleTagsControlWindowOpen = () => {\r\n        this.tagsControlWindowOpen = !this.tagsControlWindowOpen;\r\n    }\r\n}\r\n\r\nexport default TrainingContent;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Notifications\\Notification.tsx",["680","681"],"﻿import React, { Component } from \"react\";\r\nimport { NotificationViewModel } from \"../../../Typings/viewModels/NotificationViewModel\";\r\nimport NotificationStore from \"../../../stores/NotificationStore\";\r\nimport UserStore from \"../../../stores/UserStore\";\r\nimport { Input } from \"reactstrap\";\r\nimport { UserNotificationReadModel } from \"../../../Typings/readModels/UserNotificationReadModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nclass INotificationProps {\r\n    notification: NotificationViewModel;\r\n    notificationStore: NotificationStore;\r\n    userStore: UserStore;\r\n}\r\n\r\n@observer\r\nclass Notification extends Component<INotificationProps> {\r\n    userNotification: UserNotificationReadModel = new UserNotificationReadModel();\r\n    \r\n    constructor(props: INotificationProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            userNotification: observable\r\n        });\r\n        this.userNotification.notificationId = this.props.notification.id;\r\n        this.userNotification.userId = this.props.userStore.currentUser.id;\r\n    }\r\n    \r\n    componentWillUnmount(): void {\r\n        this.updateUserNotification();\r\n    }\r\n\r\n    renderNotification(notification: NotificationViewModel) {\r\n        let message = this.generateMessage(notification.createdBy, notification.message);//todo: пока упраздним\r\n        return(\r\n            <div className=\"row justify-content-center\" style={{marginTop:'2px'}}>\r\n                <div className=\"col-11\">\r\n                    <span>{notification.message}</span>\r\n                </div>\r\n                <div className=\"col-1\">\r\n                    <Input type=\"checkbox\" onClick={(e) => this.changeSeen(e)}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderNotification(this.props.notification)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    updateUserNotification() {\r\n        this.props.notificationStore.addOrUpdateUserNotification(this.userNotification);\r\n    }\r\n\r\n    generateMessage(createdBy: number, message: string): string {\r\n        let user = this.props.userStore.users.filter(u => u.id === createdBy)[0];\r\n\r\n        return user.firstName + ' ' + user.lastName + ' ' + message;\r\n    }\r\n\r\n    changeSeen(event: React.MouseEvent<HTMLInputElement, MouseEvent>) {\r\n        this.userNotification.seen = event.currentTarget.checked;\r\n    }\r\n}\r\n\r\nexport default Notification;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Tracker\\Tracker.tsx",["682","683"],"﻿import React, { Component } from 'react';\r\nimport {TrackerViewModel} from \"../../../Typings/viewModels/TrackerViewModel\";\r\nimport TrackerStore from \"../../../stores/TrackerStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable, toJS } from \"mobx\";\r\nimport { renderSpinner } from \"../../../functions/renderSpinner\";\r\nimport NaStarteTracker from \"./Types/NaStarteTracker\";\r\n\r\nclass ITrackerProps {\r\n    trackerStore: TrackerStore;\r\n    userId: number;\r\n    courseId: number;\r\n}\r\n\r\n@observer\r\nclass Tracker extends Component<ITrackerProps> {\r\n    perceived: boolean;\r\n\r\n    constructor(props: ITrackerProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            perceived: observable\r\n        });\r\n        this.getTracker();\r\n    }\r\n\r\n    renderTracker(tracker: TrackerViewModel) {\r\n        return (\r\n            <NaStarteTracker tracker={tracker} trackerStore={this.props.trackerStore} userId={this.props.userId} courseId={this.props.courseId} />\r\n        );\r\n    }\r\n    \r\n    render() {\r\n        let currentTracker = this.props.trackerStore.currentTracker;\r\n        return(\r\n            <div style={{marginTop: \"20px\",  marginLeft:\"10px\"}}>\r\n                {!this.perceived && renderSpinner()}\r\n                {this.perceived && this.renderTracker(currentTracker)}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getTracker() {\r\n        this.props.trackerStore.getTracker(this.props.userId, this.props.courseId)\r\n            .then((status) => {\r\n                this.perceived = status === 200;\r\n            });\r\n    }\r\n}\r\n\r\nexport default Tracker;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\AddOrUpdateWord.tsx",["684","685"],"﻿import React, {Component} from 'react';\r\nimport { WordViewModel } from \"../../../Typings/viewModels/WordViewModel\";\r\nimport { observer } from \"mobx-react\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport { Button, Input, Modal, ModalBody, Alert, Label } from \"reactstrap\";\r\nimport { translatePartOfSpeech } from \"../../../functions/translater\";\r\nimport { PartOfSpeech } from \"../../../Typings/enums/PartOfSpeech\";\r\nimport { ExampleReadModel } from \"../../../Typings/readModels/ExampleReadModel\";\r\nimport { WordReadModel } from \"../../../Typings/readModels/WordReadModel\";\r\nimport { transformValueToPartOfSpeech } from \"../../../functions/transformer\";\r\nimport { UserViewModel } from \"../../../Typings/viewModels/UserViewModel\";\r\nimport { UserRole } from \"../../../Typings/enums/UserRole\";\r\nimport WordStore from \"../../../stores/WordStore\";\r\nimport { WordOfADayReadModel } from \"../../../Typings/readModels/WordOfADayReadModel\";\r\nimport { mapToWordReadModel, mapWordReadModel } from \"../../../functions/mapper\";\r\n\r\nclass IAddOrUpdateWordOfADayProps {\r\n    word: WordViewModel;\r\n    courseId: number | undefined;\r\n    currentUser: UserViewModel;\r\n    wordStore: WordStore;\r\n    date: Date | Date[] | undefined;\r\n    cancelEdit: any;\r\n    isWordOfADay: boolean;\r\n}\r\n\r\n@observer\r\nclass AddOrUpdateWord extends Component<IAddOrUpdateWordOfADayProps> {\r\n    word: WordReadModel = new WordReadModel();\r\n    notSaved: boolean = false;\r\n    saved: boolean = false;\r\n    update: boolean;\r\n\r\n    constructor(props: IAddOrUpdateWordOfADayProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            word: observable,\r\n            notSaved: observable,\r\n            saved: observable,\r\n            update: observable\r\n        });\r\n        this.word = mapToWordReadModel(this.props.word);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<IAddOrUpdateWordOfADayProps>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        if (prevProps.word !== this.props.word) {\r\n            this.word = mapToWordReadModel(this.props.word);\r\n        }\r\n    }\r\n\r\n    renderCautions() {\r\n        setTimeout(() => {\r\n            this.notSaved = false;\r\n            this.saved = false;\r\n        }, 6000);\r\n        return(\r\n            <>\r\n                {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и слово не сохранилось!</Alert>}\r\n                {this.saved && <Alert color=\"success\">Слово успешно сохранилось!!</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderWordInput(word: WordViewModel) {\r\n        return(\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">\r\n                    Слово\r\n                </Label>\r\n                <Input\r\n                    style={{width: \"80%\"}}\r\n                    placeholder=\"слово\"\r\n                    className=\"form-control rounded-0\"\r\n                    name=\"word\"\r\n                    value={word.word !== undefined ? word.word : \"\"}\r\n                    onChange={(e) => this.handleChangeFromInput(e)}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderPartOfSpeechInput() {\r\n        return (\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">\r\n                    Часть речи\r\n                </Label>\r\n                <Input\r\n                    style={{width: \"80%\"}}\r\n                    type=\"select\"\r\n                    id=\"exampleSelect\"\r\n                    onClick={(e) => this.handlePartOfSpeech(e)}>\r\n                    <option value=\"Adjective\">{translatePartOfSpeech(PartOfSpeech.Adjective)}</option>\r\n                    <option value=\"Verb\">{translatePartOfSpeech(PartOfSpeech.Verb)}</option>\r\n                    <option value=\"Noun\">{translatePartOfSpeech(PartOfSpeech.Noun)}</option>\r\n                    <option value=\"Adverb\">{translatePartOfSpeech(PartOfSpeech.Adverb)}</option>\r\n                </Input>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderRussianMeaningInput(word: WordViewModel) {\r\n        return (\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">\r\n                    Значение на русском\r\n                </Label>\r\n                <Input\r\n                    style={{width: \"80%\"}}\r\n                    className=\"form-control rounded-0 fileInput\"\r\n                    onChange={(e) => this.handleChangeFromInput(e)}\r\n                    name=\"russianMeaning\"\r\n                    value={word.russianMeaning !== undefined ? word.russianMeaning : \"\"}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderEnglishMeaningInput(word: WordViewModel) {\r\n        return (\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">\r\n                    Значение на английском\r\n                </Label>\r\n                <Input\r\n                    style={{width: \"80%\"}}\r\n                    className=\"form-control rounded-0 fileInput\"\r\n                    onChange={(e) => this.handleChangeFromInput(e)}\r\n                    name=\"englishMeaning\"\r\n                    value={word.englishMeaning !== undefined ? word.englishMeaning : \"\"}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderExampleInput(word: WordViewModel) {\r\n        return (\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">\r\n                    Пример\r\n                </Label>\r\n                <Input\r\n                    style={{width: \"80%\"}}\r\n                    placeholder=\"пример\"\r\n                    className=\"form-control rounded-0 fileInput\"\r\n                    onChange={(e) => this.handleChangeFromInput(e)}\r\n                    name=\"example\">{word.examples[0]}</Input>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderSaveButton() {\r\n        return (\r\n            <Button\r\n                outline color=\"success\"\r\n                width=\"100%\"\r\n                type=\"submit\"\r\n                style={{width: \"80%\", marginBottom: \"10px\"}}\r\n                onClick={() => this.handleSave()}>\r\n                СОХРАНИТЬ\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderBody(word: WordViewModel) {\r\n        return (\r\n            <>\r\n                <ModalBody>\r\n                    {this.renderCautions()}\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderWordInput(word)}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderPartOfSpeechInput()}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderRussianMeaningInput(word)}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderEnglishMeaningInput(word)}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderExampleInput(word)}\r\n                    </div>\r\n                </ModalBody>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderSaveButton()}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderCancelButton() {\r\n        return(\r\n            <Button\r\n                color=\"primary\"\r\n                onClick={() => this.props.cancelEdit()}>\r\n                ОТМЕНИТЬ\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderAddOrUpdateWordWindow(word: WordViewModel, update: boolean) {\r\n        return (\r\n            <Modal\r\n                centered={true}\r\n                size=\"lg\"\r\n                isOpen={true}\r\n                toggle={() => this.props.cancelEdit()}\r\n            >\r\n                <i style={{marginLeft: '94%', width: '2%'}}\r\n                   onClick={() => this.props.cancelEdit()}\r\n                   className=\"fa fa-window-close fa-2x\" aria-hidden=\"true\"/>\r\n                <div className=\"row justify-content-center\">\r\n                    СЛОВО\r\n                </div>\r\n                {this.renderBody(word)}\r\n                {this.renderCancelButton()}\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderAddOrUpdateWordWindow(this.word, this.update)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    handleChangeFromInput(event: React.ChangeEvent<HTMLInputElement>) {\r\n        let name = event.target.name;\r\n        let value = event.target.value;\r\n        if(name === 'word') {\r\n            this.word.word = value;\r\n        } else if(name === 'russianMeaning') {\r\n            this.word.russianMeaning = value;\r\n        } else if(name === 'englishMeaning') {\r\n            this.word.englishMeaning = value;\r\n        } else if(name === 'example') {\r\n            //todo: наверно, проверку надо делать\r\n            if(this.word.examples.length === 0) {\r\n                this.word.examples.push(new ExampleReadModel());\r\n            }\r\n            this.word.examples[0].example = value;\r\n        }\r\n        this.toggleUpdate();\r\n    }\r\n\r\n    handlePartOfSpeech(event: React.MouseEvent<HTMLInputElement, MouseEvent>) {\r\n        this.word.partOfSpeech = transformValueToPartOfSpeech(event.currentTarget.value);\r\n        this.toggleUpdate()\r\n    }\r\n\r\n    handleSave() {\r\n        let role = this.props.currentUser.role;\r\n        if(this.props.isWordOfADay) {\r\n            if(role === UserRole.Admin) {\r\n                let wordOfADay = new WordOfADayReadModel();\r\n                wordOfADay.word = mapWordReadModel(this.word);\r\n                if(this.props.courseId !== undefined) {\r\n                    wordOfADay.courseId = this.props.courseId;\r\n                }\r\n                console.log(\"date from props\", this.props.date);\r\n                wordOfADay.date = this.props.date;\r\n                this.props.wordStore.addOrUpdateWordOfADay(wordOfADay)\r\n                    .then((status) => {\r\n                        this.notSaved = status !== 200;\r\n                        this.saved = status === 200;\r\n                    });\r\n            }\r\n        }\r\n        if (role === UserRole.Admin) {\r\n            this.props.wordStore.addOrUpdateWordToDictionary(this.word)\r\n                .then((status) => {\r\n                    if(status === 200) {\r\n                        this.props.wordStore.getDictionary()\r\n                            .then((resp) => {\r\n                                this.notSaved = resp !== 200;\r\n                                this.saved = resp === 200;\r\n                            })\r\n                    }\r\n                });\r\n        } else if (role === UserRole.User) {\r\n            let userId = this.props.currentUser.id;\r\n            this.props.wordStore.addOrUpdateWordToUserDictionary(this.word, userId)\r\n                .then((status) => {\r\n                    this.notSaved = status !== 200;\r\n                    this.saved = status === 200;\r\n                });\r\n        }\r\n    }\r\n\r\n    toggleUpdate() {\r\n        this.update = !this.update;\r\n    }\r\n}\r\n\r\nexport default AddOrUpdateWord;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\Search.tsx",["686","687"],"﻿import React, { Component } from 'react';\r\nimport WordStore from \"../../../stores/WordStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport { Input } from \"reactstrap\";\r\nimport { WordViewModel } from \"../../../Typings/viewModels/WordViewModel\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport { UserViewModel } from \"../../../Typings/viewModels/UserViewModel\";\r\nimport { UserRole } from \"../../../Typings/enums/UserRole\";\r\nimport { mapToWordReadModel } from \"../../../functions/mapper\";\r\n\r\nclass ISearchProps {\r\n    wordStore: WordStore;\r\n    user: UserViewModel;\r\n}\r\n\r\n@observer\r\nclass Search extends Component<ISearchProps> {\r\n    foundWords: WordViewModel[] = new Array<WordViewModel>();\r\n    selectOpen: boolean;\r\n    firstFoundWordsSettled: boolean;\r\n\r\n    constructor(props: ISearchProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            foundWords: observable,\r\n            selectOpen: observable,\r\n            firstFoundWordsSettled: observable\r\n        });\r\n        this.computeFoundWords(this.props.wordStore.dictionary);\r\n    }\r\n\r\n    renderSearchBox() {\r\n       if(this.props.wordStore.userDictionary.length !== 0 && !this.firstFoundWordsSettled) {\r\n            this.computeFoundWords(this.props.wordStore.dictionary);\r\n            this.firstFoundWordsSettled = true;\r\n        }\r\n        return(\r\n            <>\r\n                <Input type=\"text\"\r\n                    className=\"searchInput\"\r\n                    onFocus={() => this.selectOpenToggle()}\r\n                    onChange={(e) => this.onChange(e)}\r\n                />\r\n                <button className=\"searchButton\" type=\"submit\"/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderWords() {\r\n        return(\r\n            <select className=\"searchSelect\" size={4}>\r\n                {this.foundWords.map((word) => {\r\n                    return(\r\n                            <option\r\n                                key={word.id}\r\n                                value={word.word}\r\n                                id={word.id.toString()}\r\n                                onClick={() => this.addWordToDictionary(word)}\r\n                            >\r\n                                {word.word}\r\n                            </option>\r\n                    )\r\n                })}\r\n            </select>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"row\" style={{marginLeft: \"5px\", marginRight: \"5px\"}}>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                    <div className=\"searchbar searchForm\">\r\n                        {this.renderSearchBox()}\r\n                        {this.selectOpen && this.renderWords()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onChange(event: React.FormEvent<HTMLInputElement>) {\r\n        let foundWords =  this.props.wordStore.dictionary\r\n            .filter(w => w.word.toLowerCase()\r\n                .includes(event.currentTarget.value.toLowerCase()));\r\n        this.computeFoundWords(foundWords);\r\n    }\r\n\r\n    computeFoundWords(foundWords: WordViewModel[]) {\r\n        let usersDictionary = this.props.wordStore.userDictionary\r\n            .map(uw => {\r\n                return uw.wordId\r\n            });\r\n        this.foundWords = foundWords.filter((w) => {\r\n            return !usersDictionary.includes(w.id)\r\n        });\r\n    }\r\n\r\n    addWordToDictionary(word: WordViewModel) {\r\n        if(this.props.user.role === UserRole.User) {\r\n            let wordReadModel = mapToWordReadModel(word);\r\n            this.props.wordStore.addOrUpdateWordToUserDictionary(wordReadModel, this.props.user.id);\r\n        }\r\n    }\r\n\r\n    selectOpenToggle() {\r\n        this.selectOpen = !this.selectOpen;\r\n    }\r\n}\r\n\r\nexport default Search;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\Words.tsx",["688","689"],"﻿import React, {Component} from 'react';\r\nimport UserStore from \"../../../stores/UserStore\";\r\nimport WordStore from \"../../../stores/WordStore\";\r\nimport {UserRole} from \"../../../Typings/enums/UserRole\";\r\nimport {UserWordViewModel} from \"../../../Typings/viewModels/UserWordViewModel\";\r\nimport Word from \"./Word\";\r\nimport {observer} from \"mobx-react\";\r\nimport {Alert} from \"reactstrap\";\r\nimport {toJS} from \"mobx\";\r\n\r\nclass IWordsProps {\r\n    userStore: UserStore;\r\n    wordStore: WordStore;\r\n}\r\n\r\n@observer\r\nclass Words extends Component<IWordsProps> {\r\n    getUserWords(): UserWordViewModel[] {\r\n        let role = this.props.userStore.currentUser.role;\r\n        if(role === UserRole.Admin) {\r\n            return this.props.wordStore.dictionary.map(word => {\r\n                let userWord = new UserWordViewModel();\r\n                userWord.wordId = word.id;\r\n                return userWord;\r\n            });\r\n        } else {\r\n            return this.props.wordStore.userDictionary;\r\n        }\r\n    }\r\n\r\n    renderCautions() {\r\n        let role = this.props.userStore.currentUser.role;\r\n        if(role === UserRole.Admin) {\r\n            return(\r\n                <Alert color=\"primary\" style={{marginTop: \"0px\"}}> В словарике пока нет слов</Alert>\r\n            );\r\n        } else {\r\n            return(\r\n                <Alert color=\"primary\" style={{marginTop: \"10px\"}}> В вашем словарике пока нет слов. Вы можете добавить слова из общего словарика.</Alert>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderWords() {\r\n        let userWords = this.getUserWords();\r\n        if(userWords.length === 0) {\r\n            return (\r\n                <>\r\n                    {this.renderCautions()}\r\n                </>\r\n            );\r\n        } else {\r\n            return(\r\n                <>\r\n                    {userWords.map((userWord, i) => {\r\n                        return (\r\n                            <Word userWord={userWord} wordStore={this.props.wordStore} userStore={this.props.userStore} key={i}/>\r\n                        )\r\n                    })}\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.renderWords()}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Words;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\WordsTrainingPage.tsx",["690","691","692","693","694","695","696","697"],"﻿import React, {Component} from 'react';\r\nimport { observer } from \"mobx-react\";\r\nimport WordStore from \"../../../stores/WordStore\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport { Button, Card, CardBody, CardFooter, Modal, ModalBody } from \"reactstrap\";\r\nimport { UserWordViewModel } from \"../../../Typings/viewModels/UserWordViewModel\";\r\nimport { WordViewModel } from \"../../../Typings/viewModels/WordViewModel\";\r\nimport { WordTrainingType } from \"../../../Typings/enums/WordTrainingType\";\r\nimport { Settings } from \"./Settings\";\r\nimport { CompletingStatus } from \"../../../Typings/enums/CompletingStatus\";\r\nimport EnglishWordRussianMeaningTraining from \"./TrainingTypes/EnglishWordRussianMeaningTraining\";\r\nimport RussianWordEnglishWordTraining from \"./TrainingTypes/RussianWordEnglishWordTraining\";\r\nimport ShowWordTraining from \"./TrainingTypes/ShowWordTraining\";\r\nimport { UserWordReadModel } from \"../../../Typings/readModels/UserWordReadModel\";\r\nimport {shuffleWords} from \"../../../functions/shuffleWords\";\r\nimport {mapToUserAnswerReadModel, mapToUserReadModel} from \"../../../functions/mapper\";\r\n\r\nclass IWordsTrainingPageProps {\r\n    onToggle: any;\r\n    wordStore: WordStore;\r\n    userId: number;\r\n}\r\n\r\n@observer\r\nclass WordsTrainingPage extends Component<IWordsTrainingPageProps> {\r\n    wordsCount: number;\r\n    settingsOpen: boolean;\r\n    userWords: UserWordViewModel[] = new Array<UserWordViewModel>();\r\n    words: WordViewModel[] = new Array<WordViewModel>();\r\n    wordsCountWarning: boolean;\r\n    trainingType: WordTrainingType;\r\n    settings : boolean = true;\r\n    showWords: boolean;\r\n    showOrder: number = 0;\r\n    countLearntWords: number = 0;\r\n    rightAnswersShouldBe: number = 2;\r\n    toggleTrain: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            wordsCount: observable,\r\n            settingsOpen: observable,\r\n            userWords: observable,\r\n            words: observable,\r\n            wordsCountWarning: observable,\r\n            trainingType: observable,\r\n            settings: observable,\r\n            showWords: observable,\r\n            showOrder: observable,\r\n            countLearntWords: observable,\r\n            toggleTrain: observable\r\n        });\r\n    }\r\n\r\n    startTraining = (userWords: UserWordViewModel[]) => {\r\n         this.userWords = userWords;\r\n        this.settings = false;\r\n        this.showWords = true;\r\n    };\r\n\r\n    getWord(wordId: number): WordViewModel {\r\n        return this.props.wordStore.dictionary.filter(w => w.id === wordId)[0];\r\n    }\r\n \r\n    showWordsTraining(showOrder: number) {\r\n        let word = this.getWord(this.userWords[showOrder].wordId);\r\n        return (\r\n            <ShowWordTraining word={word} continue={this.continueShow} words={new Array<WordViewModel>()}/>\r\n        );\r\n    }\r\n\r\n    continueShow = () => {\r\n        let showOrder = this.showOrder;\r\n        showOrder = ++showOrder;\r\n        if(showOrder <= this.userWords.length - 1) {\r\n            this.showOrder = showOrder;\r\n        } else {\r\n            this.showWords = false;\r\n        }\r\n    };\r\n\r\n    renderSettings() {\r\n        return(\r\n            <>\r\n                {this.settings && <Settings wordStore={this.props.wordStore} continue={this.startTraining} />}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderShowWordTraining() {\r\n        return (\r\n            <>\r\n                {this.showWords && this.showWordsTraining(this.showOrder)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderTraining(toggleTrain: boolean) {\r\n        if(!this.showWords && this.countLearntWords !== this.userWords.length && !this.settings)\r\n        return (\r\n            <>\r\n                {this.train(toggleTrain)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderFinish() {\r\n        if(!this.showWords && this.countLearntWords == this.userWords.length && this.countLearntWords > 0) {\r\n            return(\r\n                <Card>\r\n                    <div className=\"row justify-content-center\">\r\n                        Поздравляем! Ты всё выучил!\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Button\r\n                            outline\r\n                            color=\"primary\"\r\n                            onClick={() => this.handleToggle()}>\r\n                            Закрыть\r\n                        </Button>\r\n                    </div>\r\n                </Card>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Modal toggle={() => this.props.onToggle()} isOpen={true} size=\"lg\">\r\n                <ModalBody>\r\n                    {this.renderSettings()}\r\n                    {this.renderShowWordTraining()}\r\n                    {this.renderTraining(this.toggleTrain)}\r\n                    {this.renderFinish()}\r\n                </ModalBody>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    train(toggleTrain: boolean) {\r\n        let wordId = this.chooseWord();\r\n        let words = shuffleWords(this.chooseWords(wordId));\r\n        let word = this.props.wordStore.dictionary.filter(w => w.id === wordId)[0];\r\n        let trainingType = this.getRandomIntInclusive(1, 2);\r\n        if(trainingType === 1) {\r\n            return(\r\n                <EnglishWordRussianMeaningTraining continue={this.handleAnswer} word={word} words={words}/>\r\n            );\r\n        } else if(trainingType === 2) {\r\n            return(\r\n                <RussianWordEnglishWordTraining continue={this.handleAnswer} word={word} words={words}/>\r\n            );\r\n        }\r\n    }\r\n\r\n    chooseWord(): number {\r\n        let randomWordIndex = this.getRandomIntInclusive(0, this.userWords.length - 1);\r\n        return this.userWords[randomWordIndex].wordId;\r\n    }\r\n\r\n    getRandomIntInclusive(min: number, max: number): number {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    chooseWords(wordId: number): WordViewModel[] {\r\n        let wordsIds = new Array<number>();\r\n        wordsIds.push(wordId);\r\n        while(wordsIds.length !== 4) {\r\n            let choosenWord = this.chooseWord();\r\n            if(wordId !== choosenWord && wordsIds.find(word => word === choosenWord) === undefined) {\r\n                wordsIds.push(choosenWord);\r\n            }\r\n        }\r\n        let words = new Array<WordViewModel>();\r\n        for(let i = 0; i < wordsIds.length; i++) {\r\n            let word = this.props.wordStore.dictionary.filter(w => w.id === wordsIds[i])[0];\r\n            words.push(word);\r\n        }\r\n\r\n        return words;\r\n    }\r\n\r\n    handleAnswer = (wordId: number, right: boolean) => {\r\n         let userWords = this.userWords;\r\n        let userWord = userWords.find(userWord => userWord.wordId == wordId);\r\n         let userWordIndex = userWords\r\n            .map((w) => { return w.wordId ;})\r\n            .indexOf(wordId);\r\n        if(right && userWord !== undefined) {\r\n            userWord.rightAnswers = ++userWord.rightAnswers;\r\n            if(userWord.rightAnswers == this.rightAnswersShouldBe) {\r\n                userWord.status = CompletingStatus.Completed;\r\n                this.countLearntWords =  this.countLearntWords + 1;\r\n            }\r\n            userWords[userWordIndex] = userWord;\r\n        }\r\n        this.toggleTrain = !this.toggleTrain;\r\n    };\r\n\r\n    handleToggle() {\r\n        let userWordsReadModels = new Array<UserWordReadModel>();\r\n        let userWords = this.userWords;\r\n        for(let i = 0; i < userWords.length; i++ ) {\r\n            \r\n            let userWordReadModel = mapToUserAnswerReadModel(userWords[i]);\r\n            userWordsReadModels.push(userWordReadModel)\r\n        }\r\n        this.props.wordStore.addOrUpdateUserWordsProgress(userWordsReadModels);\r\n        this.props.onToggle();\r\n    }\r\n}\r\n\r\nexport default WordsTrainingPage;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\WordsOfADay\\WordsOfADay.tsx",["698"],"﻿import React, { Component } from 'react';\r\nimport { observer } from \"mobx-react\";\r\nimport Calendar from \"react-calendar\";\r\nimport {makeObservable, observable} from \"mobx\";\r\nimport WordOfADay from \"../../Common/WordsOfADay/WordOfADay\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\n\r\nclass IWordsOfADayProps {\r\n    store: RootStore\r\n}\r\n\r\n@observer\r\nclass WordsOfADay extends Component<IWordsOfADayProps> {\r\n    choosenDate: Date | Date[] = new Date();\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            choosenDate: observable\r\n        });\r\n    }\r\n\r\n    renderCalendar() {\r\n        const choosenDate = typeof this.choosenDate === \"string\" ? new Date(this.choosenDate) : this.choosenDate;\r\n        return(\r\n            <Calendar\r\n                value={choosenDate}\r\n                onChange={(date) => this.inputDate(date)}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderWordOfADay() {\r\n        return(\r\n            <>\r\n                <WordOfADay date={this.choosenDate} store={this.props.store}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row justify-content-center\" style={{marginTop: \"15px\"}}>\r\n                    <div className=\"col-lg-3 col-md-6 col-sm-12 col-xs-12\">\r\n                        {this.renderCalendar()}\r\n                    </div>\r\n                    <div className=\"col-lg-9 col-md-6 col-sm-12 col-xs-12\" style={{marginTop: \"15px\"}}>\r\n                        {this.renderWordOfADay()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    inputDate(date: Date | Date[]) {\r\n        this.choosenDate = date;\r\n    }\r\n}\r\n\r\nexport default WordsOfADay;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\TagReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserNotificationReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\MyLessons\\Homework.tsx",["699","700"],"﻿import React, {Component} from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport {TaskViewModel} from \"../../../Typings/viewModels/TaskViewModel\";\r\nimport {Nav, Tab} from \"react-bootstrap\";\r\nimport {observer} from \"mobx-react\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport {Alert} from \"reactstrap\";\r\nimport HomeworkTask from \"./HomeworkTask\";\r\nimport {NavigationType} from \"../../../NavigationType\";\r\n\r\nclass IHomeworkProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass Homework extends Component<IHomeworkProps> {\r\n    taskToRender: TaskViewModel = new TaskViewModel();\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            taskToRender: observable\r\n        });\r\n    }\r\n\r\n    renderTasks(tasks: TaskViewModel[]) {\r\n        return(\r\n            <Tab.Container>\r\n                <div className=\"container-fluid\">\r\n                    <Nav variant=\"pills\">\r\n                        {tasks.map((task, i) => {\r\n                            return (\r\n                                <Nav.Item key={i}>\r\n                                    <Nav.Link\r\n                                        active={task === this.taskToRender}\r\n                                        className=\"nav-link lesson\"\r\n                                        eventKey={i}\r\n                                        onClick={() => this.taskToRender = task}\r\n                                    >{ i + 1 }</Nav.Link>\r\n                                </Nav.Item>\r\n                            );\r\n                        })}\r\n                    </Nav>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-12\">\r\n                            {<HomeworkTask task={this.taskToRender} store={this.props.store} userId={this.props.store.userStore.currentUser.id} taskToggler={this.taskToggler}/>}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Tab.Container>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let tasks = this.props.store.taskStore.tasksByChoosenLesson;\r\n        return(\r\n            <>\r\n                {tasks.length === 0 && <Alert color=\"primary\">Домашнего задания пока нет. Можно отдыхать:)</Alert>}\r\n                {tasks.length !== 0 && this.renderTasks(tasks)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    taskToggler = (navigation: NavigationType) => {\r\n        let tasks = this.props.store.taskStore.tasksByChoosenLesson;\r\n        let index = tasks.indexOf(this.taskToRender);\r\n        if(navigation === NavigationType.Forward) {\r\n            if(index + 1 < tasks.length) {\r\n                this.taskToRender = tasks[index + 1];\r\n            } else {\r\n                this.taskToRender = tasks[0];\r\n            }\r\n        } else if(navigation === NavigationType.Back) {\r\n            if(index - 1 >= 0) {\r\n                this.taskToRender = tasks[index - 1];\r\n            } else {\r\n                this.taskToRender = tasks[tasks.length - 1];\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport default Homework;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Lesson\\Lesson.tsx",["701"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { UserRole } from \"../../../Typings/enums/UserRole\";\r\nimport { Content } from \"./Content\";\r\nimport { ContentUpload } from \"../../Admin/Lessons/ContentUpload\";\r\nimport { Label } from \"reactstrap\";\r\nimport {observer} from \"mobx-react\";\r\n\r\nclass ILessonProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nexport class Lesson extends Component<ILessonProps> {\r\n    renderContentUpload() {\r\n        let role = this.props.store.userStore.currentUser.role;\r\n        if(role === UserRole.Admin) {\r\n            return(\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-lg-12 col-sm-12\">\r\n                        <ContentUpload lessonStore={this.props.store.lessonStore} courseId={this.props.store.courseStore.choosenCourse.id}/>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderLessonDescription() {\r\n        return(\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-lg-12 col-sm-12\">\r\n                    <Label>{this.props.store.lessonStore.choosenLesson.description}</Label>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\">\r\n                {this.renderLessonDescription()}\r\n                <Content lessonStore={this.props.store.lessonStore} courseId={this.props.store.courseStore.choosenCourse.id} currentUser={this.props.store.userStore.currentUser}/>\r\n                {this.renderContentUpload()}\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Tracker\\Types\\NaStarteTracker.tsx",["702","703","704","705","706","707","708","709","710","711","712","713","714","715","716","717","718","719","720","721","722"],"import React, { Component } from 'react';\r\nimport { TrackerViewModel } from \"../../../../Typings/viewModels/TrackerViewModel\";\r\nimport TrackerStore from \"../../../../stores/TrackerStore\";\r\nimport { Table } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport {action, makeObservable, observable, toJS} from \"mobx\";\r\nimport { TrackerReadModel } from \"../../../../Typings/readModels/TrackerReadModel\";\r\nimport { mapToTrackerReadModel } from \"../../../../functions/mapper\";\r\nimport { TrackerByDayReadModel } from \"../../../../Typings/readModels/TrackerByDayReadModel\";\r\n\r\nclass INaStarteTrackerProps {\r\n    tracker: TrackerViewModel;\r\n    trackerStore: TrackerStore;\r\n    userId: number;\r\n    courseId: number;\r\n}\r\n\r\n@observer\r\nclass NaStarteTracker extends Component<INaStarteTrackerProps> {\r\n    days: number[] = new Array<number>(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\r\n    tracker: TrackerReadModel = new TrackerReadModel();\r\n    trackersByDay: TrackerByDayReadModel[] = new Array<TrackerByDayReadModel>();\r\n    update: boolean;\r\n\r\n    constructor(props: INaStarteTrackerProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            tracker: observable,\r\n            update: observable\r\n        });\r\n        observable.map(this.trackersByDay);\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        let tracker = mapToTrackerReadModel(this.props.tracker, this.props.userId, this.props.courseId, this.days.length);\r\n        this.tracker = tracker;\r\n        this.trackersByDay = tracker.trackersByDay;\r\n    }\r\n    componentWillUnmount(): void {\r\n        this.addOrUpdateTracker();\r\n    }\r\n\r\n    renderTracker(update: boolean) {\r\n        return(\r\n            <Table style={{marginRight: \"10px\"}}>\r\n                {this.renderHead()}\r\n                {this.renderBody()}\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    renderHead() {\r\n        return(\r\n            <thead>\r\n            <tr>\r\n                <td></td>\r\n                {this.days.map((day, i) => {\r\n                    return(\r\n                        <td key={i}>{i + 1}</td>\r\n                    );\r\n                })}\r\n            </tr>\r\n            </thead>\r\n        );\r\n    }\r\n\r\n    renderBody() {\r\n        return (\r\n            <tbody>\r\n                {this.renderRowOfTrackerByDay(TrackerType.WebinarWatch)}\r\n                {this.renderRowOfTrackerByDay(TrackerType.CompletedHomework)}\r\n                {this.renderRowOfTrackerByDay(TrackerType.WordOfADay)}\r\n                {this.renderRowOfTrackerByDay(TrackerType.DictionaryOfLesson)}\r\n                {this.renderRowOfTrackerByDay(TrackerType.ChatParticipation)}\r\n            </tbody>\r\n        );\r\n    }\r\n\r\n    renderRowOfTrackerByDay(type: TrackerType) {\r\n        return (\r\n            <tr>\r\n                <th>{this.getHeader(type)}</th>\r\n                {this.days.map((day, i) => {\r\n                    let trackerByDay = this.getTrackerByDay(day);\r\n                    return(\r\n                            <td onClick={(e) => this.handleChange(type, Number(e.currentTarget.id))} key={i}>\r\n                                {this.isCompleted(trackerByDay, type)\r\n                                ? <i className=\"fa fa-check\" aria-hidden=\"true\"/> :\r\n                                <i className=\"fa fa-times\" aria-hidden=\"true\"/>\r\n                            }\r\n                            </td>\r\n                    );\r\n                })}\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderTracker(this.update)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    getTrackerByDay(day: number): TrackerByDayReadModel {\r\n        let trackerByDay = this.trackersByDay.find(t => t.day === day);\r\n        if(trackerByDay === undefined) {\r\n            trackerByDay = new TrackerByDayReadModel();\r\n            trackerByDay.day = day;\r\n        }\r\n\r\n        return trackerByDay;\r\n    }\r\n\r\n    @action\r\n    handleChange(type: TrackerType, day: number) {\r\n        let trackerByDay = this.trackersByDay.filter(t => t.day === day)[0];\r\n        let index = this.trackersByDay.indexOf(trackerByDay);\r\n        if(type === TrackerType.ChatParticipation) {\r\n            trackerByDay.chatParticipation = !trackerByDay.chatParticipation;\r\n        } else if(type === TrackerType.CompletedHomework) {\r\n            trackerByDay.completedHomework = !trackerByDay.completedHomework;\r\n        } else if(type === TrackerType.DictionaryOfLesson) {\r\n            trackerByDay.dictionaryOfLesson = !trackerByDay.dictionaryOfLesson;\r\n        } else if(type === TrackerType.WordOfADay) {\r\n            trackerByDay.wordOfADay = !trackerByDay.wordOfADay;\r\n        } else if(type === TrackerType.WebinarWatch) {\r\n            trackerByDay.webinarWatch = !trackerByDay.webinarWatch;\r\n        }\r\n        let trackersByDay = this.trackersByDay;\r\n        trackersByDay[index] = trackerByDay;\r\n        this.trackersByDay = trackersByDay;\r\n        this.toggleUpdate();\r\n    }\r\n\r\n    isCompleted(trackerByDay: TrackerByDayReadModel, type: TrackerType): boolean {\r\n        if(type === TrackerType.ChatParticipation) {\r\n            return trackerByDay.chatParticipation;\r\n        } else if(type === TrackerType.CompletedHomework) {\r\n            return trackerByDay.completedHomework;\r\n        } else if(type === TrackerType.DictionaryOfLesson) {\r\n            return trackerByDay.dictionaryOfLesson;\r\n        } else if(type === TrackerType.WordOfADay) {\r\n            return trackerByDay.wordOfADay;\r\n        } else if(type === TrackerType.WebinarWatch) {\r\n            return trackerByDay.webinarWatch;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getHeader(type: TrackerType): string {\r\n        if(type === TrackerType.ChatParticipation) {\r\n            return \"УЧАСТИЕ В ЧАТЕ\";\r\n        } else if(type === TrackerType.CompletedHomework) {\r\n            return \"ВЫПОЛНЕНИЕ ДОМАШНЕГО ЗАДАНИЯ\";\r\n        } else if(type === TrackerType.DictionaryOfLesson) {\r\n            return \"СЛОВАРЬ УРОКА\";\r\n        } else if(type === TrackerType.WordOfADay) {\r\n            return \"СЛОВО ДНЯ\";\r\n        } else if(type === TrackerType.WebinarWatch) {\r\n            return \"ПРОСМОТР ВЕБИНАРА\";\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    addOrUpdateTracker() {\r\n        this.props.trackerStore.addOrUpdateTracker(this.tracker);\r\n    }\r\n\r\n    toggleUpdate() {\r\n        this.update = !this.update;\r\n    }\r\n}\r\n\r\nexport default NaStarteTracker;\r\n\r\nenum TrackerType {\r\n    WebinarWatch,\r\n    CompletedHomework,\r\n    WordOfADay,\r\n    DictionaryOfLesson,\r\n    ChatParticipation\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Courses\\AddNewCourse.tsx",["723","724","725"],"﻿import React, { Component } from \"react\";\r\nimport CourseStore from \"../../../stores/CourseStore\";\r\nimport { Alert, Button, Modal, ModalBody, ModalFooter, ModalHeader, Label, Input } from \"reactstrap\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nclass IAddNewCourseProps {\r\n    courseStore: CourseStore;\r\n}\r\n\r\n@observer\r\nexport class AddNewCourse extends Component<IAddNewCourseProps> {\r\n    addNewCourse: boolean = false;\r\n    id: number = 0;\r\n    name: string = \"\";\r\n    description: string = \"\";\r\n    notSaved: boolean = false;\r\n    saved: boolean = false;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addNewCourse: observable,\r\n            id: observable,\r\n            name: observable,\r\n            description: observable,\r\n            notSaved: observable,\r\n            saved: observable\r\n        });\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <>\r\n                <Button\r\n                    style={{marginTop: \"10px\"}}\r\n                    outline color=\"primary\" onClick={() => this.addNewCourseToggle()}>\r\n                    Добавить курс\r\n                </Button>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderCourseNameInput() {\r\n        return(\r\n            <>\r\n                <Label>\r\n                    Введите название курса\r\n                </Label>\r\n                <Input\r\n                    style={{width: \"70%\"}}\r\n                    onChange={(e) => this.inputName(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderDescriptionInput() {\r\n        return(\r\n            <>\r\n                <Label>Введите описание курса</Label>\r\n                <Input\r\n                    style={{width: \"70%\"}}\r\n                    onChange={(e) => this.inputDescription(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderSaveButton() {\r\n        return(\r\n            <Button\r\n                style={{width: \"80%\", marginBottom: \"10px\"}}\r\n                outline color=\"success\"\r\n                onClick={() => this.addCourse()}>\r\n                Сохранить курс\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderWarnings() {\r\n        setTimeout(() => {\r\n            this.notSaved = false;\r\n            this.saved = false;\r\n        }, 6000);\r\n        return (\r\n            <>\r\n                {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и курс не сохранилось</Alert>}\r\n                {this.saved && <Alert color=\"success\">Всё удачно сохранилось</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderBody() {\r\n        return(\r\n            <>\r\n                <ModalBody>\r\n                    {this.renderWarnings()}\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderCourseNameInput()}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderDescriptionInput()}\r\n                    </div>\r\n                </ModalBody>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderSaveButton()}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderCancelButton() {\r\n        return(\r\n            <Button\r\n                color=\"primary\"\r\n                onClick={() => this.addNewCourseToggle()}>\r\n                ОТМЕНИТЬ\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderAddNewCourseWindow() {\r\n        return(\r\n            <Modal\r\n                centered={true}\r\n                size=\"lg\"\r\n                isOpen={this.addNewCourse}\r\n                toggle={() => this.addNewCourseToggle()}\r\n            >\r\n                <i style={{marginLeft: '96%', width: '2%'}}\r\n                   onClick={() => this.addNewCourseToggle()}\r\n                   className=\"fa fa-window-close fa-2x\" aria-hidden=\"true\"/>\r\n                <div className=\"row justify-content-center\">\r\n                    СОЗДАНИЕ НОВОГО КУРСА\r\n                </div>\r\n                {this.renderBody()}\r\n                {this.renderCancelButton()}\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {!this.addNewCourse && this.renderButton()}\r\n                {this.addNewCourse && this.renderAddNewCourseWindow()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    @action\r\n    addNewCourseToggle() {\r\n        this.addNewCourse = !this.addNewCourse;\r\n        this.initialState();\r\n    }\r\n\r\n    initialState() {\r\n        this.notSaved = false;\r\n        this.saved = false;\r\n    }\r\n\r\n    addCourse() {\r\n        this.props.courseStore\r\n            .addOrUpdateCourse(this.id, this.name, this.description)\r\n            .then((status) => {\r\n                this.notSaved = status !== 200;\r\n                this.saved = status === 200;\r\n        });\r\n    }\r\n\r\n    inputName(event: React.FormEvent<HTMLInputElement>) {\r\n        this.name = event.currentTarget.value;\r\n    }\r\n\r\n    inputDescription(event: React.FormEvent<HTMLInputElement>) {\r\n        this.description = event.currentTarget.value;\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Users\\Users.tsx",["726","727"],"﻿import React, { Component } from 'react';\r\nimport UserStore from \"../../../stores/UserStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport { UserViewModel } from \"../../../Typings/viewModels/UserViewModel\";\r\nimport User from \"./User\";\r\nimport { Table } from \"reactstrap\";\r\nimport {toJS} from \"mobx\";\r\n\r\nclass IUsersProps {\r\n    userStore: UserStore;\r\n}\r\n\r\n@observer\r\nclass Users extends Component<IUsersProps> {\r\n    renderUsers(users: UserViewModel[]) {\r\n        return(\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <td>Id</td>\r\n                        <td>Фамилия имя</td>\r\n                        <td>Email</td>\r\n                        <td>Логин</td>\r\n                        <td>Роль</td>\r\n                        <td></td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {users.map(user => {\r\n                    return(\r\n                        <User user={user} userStore={this.props.userStore} key={user.id}/>\r\n                    );\r\n                })}\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let users = this.props.userStore.users;\r\n        return(\r\n            <>\r\n                {this.renderUsers(users)}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Users;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Users\\AddOrUpdateUserWindow.tsx",["728","729"],"﻿import React, {Component} from 'react';\r\nimport UserStore from \"../../../stores/UserStore\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport {\r\n    Alert,\r\n    Button,\r\n    Dropdown,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    Input,\r\n    Label,\r\n    Modal,\r\n    ModalBody,\r\n    ModalFooter\r\n} from \"reactstrap\";\r\nimport { UserViewModel } from \"../../../Typings/viewModels/UserViewModel\";\r\nimport { UserRole } from \"../../../Typings/enums/UserRole\";\r\nimport { mapToUserReadModel } from \"../../../functions/mapper\";\r\nimport { observer } from \"mobx-react\";\r\nimport { translateRole } from \"../../../functions/translater\";\r\n\r\nclass IAddOrUpdateUserProps {\r\n    userStore: UserStore;\r\n    edit: boolean = false;\r\n    userToEdit: UserViewModel;\r\n    cancelEdit: any | undefined;\r\n}\r\n\r\n@observer\r\nclass AddOrUpdateUserWindow extends Component<IAddOrUpdateUserProps> {\r\n    addOrUpdateUserOpen: boolean = false;\r\n    user: UserViewModel = new UserViewModel();\r\n    notSaved: boolean;\r\n    roleMenuOpen: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addOrUpdateUserOpen: observable,\r\n            user: observable,\r\n            notSaved: observable,\r\n            roleMenuOpen: observable,\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if(this.props.edit) {\r\n            this.user = this.props.userToEdit;\r\n            this.addOrUpdateUserOpen = true;\r\n        }\r\n        this.user.role = this.user.role === undefined ? UserRole.User : this.user.role;\r\n    }\r\n\r\n    renderAddUserButton() {\r\n        return (\r\n            <Button\r\n                outline\r\n                className=\"addUserButton\"\r\n                onClick={() => this.toggleAddUser()}>\r\n                Добавить пользователя\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderFirstNameInput(user: UserViewModel) {\r\n        return(\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">\r\n                    Имя\r\n                </Label>\r\n                <Input\r\n                    style={{width: \"70%\"}}\r\n                    placeholder=\"Имя\"\r\n                    value={user.firstName}\r\n                    onChange={(e) => this.inputData(e, \"firstName\")}/>\r\n           </>\r\n        );\r\n    }\r\n\r\n    renderLastNameInput(user: UserViewModel) {\r\n        return(\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">\r\n                    Фамилия\r\n                </Label>\r\n            <Input\r\n                style={{width: \"70%\"}}\r\n                placeholder=\"Фамилия\"\r\n                value={user.lastName}\r\n                onChange={(e) => this.inputData(e, \"lastName\")}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderEmailInput(user: UserViewModel) {\r\n        return(\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">\r\n                    Email\r\n                </Label>\r\n                <Input\r\n                    style={{width: \"70%\"}}\r\n                    placeholder=\"Email\"\r\n                    value={user.email}\r\n                    onChange={(e) => this.inputData(e, \"email\")}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderLoginInput(user: UserViewModel) {\r\n        return(\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">\r\n                    Логин\r\n                </Label>\r\n                <Input\r\n                    style={{width: \"70%\"}}\r\n                    placeholder=\"Логин\"\r\n                    value={user.login}\r\n                    onChange={(e) => this.inputData(e, \"login\")}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderRole(user: UserViewModel) {\r\n        return(\r\n            <Dropdown style={{marginTop: \"7px\", opacity: \".7\"}} isOpen={this.roleMenuOpen} toggle={() => this.toggleRoleMenu()}>\r\n                <DropdownToggle caret>\r\n                    {translateRole(user.role)}\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem id=\"1\" onClick={() => this.roleChange(UserRole.Admin)}>{translateRole(UserRole.Admin)}</DropdownItem>\r\n                    <DropdownItem id=\"2\" onClick={() => this.roleChange(UserRole.User)}>{translateRole(UserRole.User)}</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderSaveUserButton() {\r\n        return(\r\n            <Button\r\n                outline color=\"success\"\r\n                style={{width: \"80%\", marginBottom: \"10px\"}}\r\n                onClick={() => this.save()}>\r\n                Сохранить\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderBody(user: UserViewModel) {\r\n        return(\r\n            <>\r\n                <ModalBody>\r\n                    {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и пользователь не сохранился :(</Alert>}\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderFirstNameInput(user)}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderLastNameInput(user)}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderEmailInput(user)}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderLoginInput(user)}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderRole(user)}\r\n                    </div>\r\n                </ModalBody>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderSaveUserButton()}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderCancelButton() {\r\n        return(\r\n            <Button\r\n                color=\"primary\"\r\n                onClick={() => this.toggleAddUser()}>\r\n                ОТМЕНИТЬ\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderAddOrUpdateUserWindow() {\r\n        return(\r\n            <Modal\r\n                centered={true}\r\n                size=\"lg\"\r\n                isOpen={this.addOrUpdateUserOpen}\r\n                toggle={() => this.toggleAddUser()}\r\n            >\r\n                <div className=\"row justify-content-center\">\r\n                    ПОЛЬЗОВАТЕЛЬ\r\n                </div>\r\n                {this.renderBody(this.user)}\r\n                {this.renderCancelButton()}\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {!this.props.edit && this.renderAddUserButton()}\r\n                {this.addOrUpdateUserOpen && this.renderAddOrUpdateUserWindow()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    toggleAddUser() {\r\n        if(this.props.cancelEdit !== undefined) {\r\n            this.props.cancelEdit();\r\n        }\r\n        this.addOrUpdateUserOpen = !this.addOrUpdateUserOpen;\r\n    }\r\n\r\n    toggleRoleMenu() {\r\n        this.roleMenuOpen = !this.roleMenuOpen;\r\n    }\r\n\r\n    inputData(event: React.FormEvent<HTMLInputElement>, type: string) {\r\n        if(type === \"firstName\") {\r\n            this.user.firstName = event.currentTarget.value;\r\n        } else if(type === \"lastName\") {\r\n            this.user.lastName = event.currentTarget.value;\r\n        } else if(type === \"email\") {\r\n            this.user.email = event.currentTarget.value;\r\n        } else if(type === \"login\") {\r\n            this.user.login = event.currentTarget.value;\r\n        }\r\n    }\r\n\r\n    roleChange(role: UserRole) {\r\n        this.user.role = role;\r\n    }\r\n\r\n    save() {\r\n        let userReadModel = mapToUserReadModel(this.user);\r\n        this.props.userStore.addOrUpdateUser(userReadModel)\r\n            .then((status) => {\r\n                this.notSaved = status !== 200;\r\n                if(status === 200) {\r\n                    this.toggleAddUser();\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport default AddOrUpdateUserWindow;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Courses\\Course.tsx",["730"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { Card, CardHeader, Alert } from \"reactstrap\";\r\nimport { Nav, Tab } from \"react-bootstrap\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { LessonsMenu } from \"../Lessons/LessonsMenu\";\r\nimport WordsOfADay from \"../WordsOfADay/WordsOfADay\";\r\nimport ParticipantsPage from \"../Participants/ParticipantsPage\";\r\nimport CourseProgress from \"../Progress/CourseProgress\";\r\n\r\nclass ICourseProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nexport class Course extends Component<ICourseProps> {\r\n    lessonsActive: boolean = true;\r\n    wordsOfADay: boolean = false;\r\n    participants: boolean = false;\r\n    courseProgress: boolean = false;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            lessonsActive: observable,\r\n            wordsOfADay: observable,\r\n            participants: observable,\r\n            courseProgress: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        let courseId = this.props.store.courseStore.choosenCourse.id;\r\n        this.props.store.lessonStore.getLessonsByCourse(courseId);\r\n    }\r\n\r\n    renderCourseContent() {\r\n            return(\r\n                <>\r\n                    {this.lessonsActive && <LessonsMenu store={this.props.store}/>}\r\n                    {this.wordsOfADay && <WordsOfADay store={this.props.store} />}\r\n                    {this.participants && <ParticipantsPage courseStore={this.props.store.courseStore} userStore={this.props.store.userStore} />}\r\n                    {this.courseProgress && <CourseProgress store={this.props.store} />}\r\n                </>\r\n            );\r\n    }\r\n\r\n    renderCourseMenu() {\r\n        return(\r\n            <Tab.Container>\r\n                <Card>\r\n                    <CardHeader className=\"menuCourseHeader\">\r\n                        <Nav variant=\"pills\">\r\n                            <Nav.Item>\r\n                                <Nav.Link\r\n                                    onClick={() => this.menuToggle(\"lessons\")}\r\n                                    className=\"nav-link\"\r\n                                    eventKey=\"lessons\">\r\n                                    УРОКИ\r\n                                </Nav.Link>\r\n                            </Nav.Item>\r\n                            <Nav.Item>\r\n                                <Nav.Link\r\n                                    onClick={() => this.menuToggle(\"wordsOfADay\")}\r\n                                    className=\"nav-link\"\r\n                                    eventKey=\"wordsOfADay\">\r\n                                    СЛОВА ДНЯ\r\n                                </Nav.Link>\r\n                            </Nav.Item>\r\n                            <Nav.Item>\r\n                                <Nav.Link\r\n                                    onClick={() => this.menuToggle(\"participants\")}\r\n                                    className=\"nav-link\"\r\n                                    eventKey=\"participants\">\r\n                                    УЧАСТНИКИ\r\n                                </Nav.Link>\r\n                            </Nav.Item>\r\n                            <Nav.Item>\r\n                                <Nav.Link\r\n                                    onClick={() => this.menuToggle(\"progress\")}\r\n                                    className=\"nav-link\"\r\n                                    eventKey=\"progress\">\r\n                                    ПРОГРЕСС\r\n                                </Nav.Link>\r\n                            </Nav.Item>\r\n                        </Nav>\r\n                    </CardHeader>\r\n                </Card>\r\n                {this.renderCourseContent()}\r\n            </Tab.Container>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let courseChoosen = this.props.store.courseStore.choosenCourse.id !== undefined;\r\n        return(\r\n            <>\r\n                {courseChoosen && this.renderCourseMenu()}\r\n                {!courseChoosen && <Alert>Выберите курс</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    menuToggle(turnOn: string) {\r\n        this.lessonsActive = false;\r\n        this.wordsOfADay = false;\r\n        this.participants = false;\r\n        this.courseProgress = false;\r\n        if(turnOn === \"lessons\") {\r\n            this.lessonsActive = true;\r\n        } else if(turnOn === \"wordsOfADay\") {\r\n            this.wordsOfADay = true;\r\n        } else if(turnOn === \"participants\") {\r\n            this.participants = true;\r\n        } else if(turnOn === \"progress\") {\r\n            this.courseProgress = true;\r\n        }\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\renderSpinner.tsx",["731"],"﻿import React from \"react\";\r\nimport { Spinner } from 'reactstrap';\r\n\r\nexport function renderSpinner() {\r\n    return(\r\n        <Spinner color=\"primary\"/>\r\n    );\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\Task.tsx",["732","733"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\WordOfADayReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\mapper.tsx",["734","735"],"﻿import { WordReadModel } from \"../Typings/readModels/WordReadModel\";\r\nimport { WordViewModel } from \"../Typings/viewModels/WordViewModel\";\r\nimport { UserWordViewModel } from \"../Typings/viewModels/UserWordViewModel\";\r\nimport { UserWordReadModel } from \"../Typings/readModels/UserWordReadModel\";\r\nimport { TrackerViewModel } from \"../Typings/viewModels/TrackerViewModel\";\r\nimport { TrackerReadModel } from \"../Typings/readModels/TrackerReadModel\";\r\nimport { TrackerByDayReadModel } from \"../Typings/readModels/TrackerByDayReadModel\";\r\nimport { TrackerByDayViewModel } from \"../Typings/viewModels/TrackerByDayViewModel\";\r\nimport { SubtaskViewModel } from \"../Typings/viewModels/SubtaskViewModel\";\r\nimport { SubtaskReadModel } from \"../Typings/readModels/SubtaskReadModel\";\r\nimport { UserViewModel } from \"../Typings/viewModels/UserViewModel\";\r\nimport { UserReadModel } from \"../Typings/readModels/UserReadModel\";\r\nimport { TagViewModel } from \"../Typings/viewModels/TagViewModel\";\r\nimport { TagReadModel } from \"../Typings/readModels/TagReadModel\";\r\nimport { toJS } from \"mobx\";\r\nimport {TaskViewModel} from \"../Typings/viewModels/TaskViewModel\";\r\nimport {TaskReadModel} from \"../Typings/readModels/TaskReadModel\";\r\nimport {UserSubtaskAnswerGroupReadModel} from \"../Typings/readModels/UserSubtaskAnswerGroupReadModel\";\r\nimport {UserSubtaskAnswerGroupViewModel} from \"../Typings/viewModels/UserSubtaskAnswerGroupViewModel\";\r\nimport {FeedbackViewModel} from \"../Typings/viewModels/FeedbackViewModel\";\r\nimport {FeedbackReadModel} from \"../Typings/readModels/FeedbackReadModel\";\r\n\r\nexport function mapWordReadModel(word: WordViewModel): WordReadModel {\r\n    let wordReadModel = new WordReadModel();\r\n    wordReadModel.id = word.id;\r\n    wordReadModel.partOfSpeech = word.partOfSpeech;\r\n    wordReadModel.englishMeaning = word.englishMeaning;\r\n    wordReadModel.russianMeaning = word.russianMeaning;\r\n    wordReadModel.word = word.word;\r\n    wordReadModel.examples = word.examples;\r\n\r\n    return wordReadModel;\r\n}\r\n\r\nexport function mapToUserAnswerReadModel(userWord: UserWordViewModel): UserWordReadModel {\r\n    let userAnswer = new UserWordReadModel();\r\n    userAnswer.answer = userWord.answer;\r\n    userAnswer.rightAnswers = userWord.rightAnswers;\r\n    userAnswer.status = userWord.status;\r\n    userAnswer.countOfAttempts = userWord.countOfAttempts;\r\n    userAnswer.word = new WordReadModel();\r\n    userAnswer.word.id = userWord.wordId;\r\n    userAnswer.userId = userWord.userId;\r\n\r\n    return userAnswer;\r\n}\r\n\r\nexport function mapToTrackerReadModel(tracker: TrackerViewModel, userId: number, courseId: number, daysCount: number): TrackerReadModel {\r\n    let trackerReadModel = new TrackerReadModel();\r\n    trackerReadModel.id = tracker.id;\r\n    trackerReadModel.userId = userId;\r\n    trackerReadModel.courseId = courseId;\r\n    if(tracker.trackersByDay.length === 0) {\r\n        let trackersByDay = new Array<TrackerByDayViewModel>();\r\n        for(let i = 0; i < daysCount; i++) {\r\n            let trackerByDay = new TrackerByDayViewModel();\r\n            trackerByDay.day = i + 1;\r\n            trackersByDay.push(trackerByDay);\r\n        }\r\n        tracker.trackersByDay = trackersByDay;\r\n    }\r\n    trackerReadModel.trackersByDay = tracker.trackersByDay.map(t => {\r\n        return mapToTrackerByDayReadModel(t)\r\n    });\r\n\r\n    return trackerReadModel;\r\n}\r\n\r\nexport function mapToTrackerByDayReadModel(trackerByDay: TrackerByDayViewModel): TrackerByDayReadModel {\r\n    let trackerByDayReadModel = new TrackerByDayReadModel();\r\n    trackerByDayReadModel.id = trackerByDay.id;\r\n    trackerByDayReadModel.chatParticipation = trackerByDay.chatParticipation !== undefined ? trackerByDay.chatParticipation : false;\r\n    trackerByDayReadModel.completedHomework = trackerByDay.completedHomework !== undefined ? trackerByDay.completedHomework : false;\r\n    trackerByDayReadModel.dictionaryOfLesson = trackerByDay.dictionaryOfLesson !== undefined ? trackerByDay.dictionaryOfLesson : false;\r\n    trackerByDayReadModel.webinarWatch = trackerByDay.webinarWatch !== undefined ? trackerByDay.webinarWatch : false;\r\n    trackerByDayReadModel.wordOfADay = trackerByDay.wordOfADay !== undefined ? trackerByDay.wordOfADay : false;\r\n    trackerByDayReadModel.day = trackerByDay.day;\r\n\r\n    return trackerByDayReadModel;\r\n}\r\n\r\nexport function mapToSubtaskReadModel(subtask: SubtaskViewModel): SubtaskReadModel {\r\n    let subtaskReadModel = new SubtaskReadModel();\r\n    subtaskReadModel.id = subtask.id;\r\n    subtaskReadModel.path = subtask.path;\r\n    subtaskReadModel.text = subtask.text;\r\n    subtaskReadModel.order = subtask.order;\r\n    subtaskReadModel.subtaskType = subtask.subtaskType;\r\n\r\n    return subtaskReadModel;\r\n}\r\n\r\nexport function mapToWordReadModel(word: WordViewModel): WordReadModel {\r\n    let wordReadModel = new WordReadModel();\r\n    wordReadModel.id = word.id;\r\n    wordReadModel.word = word.word;\r\n    wordReadModel.russianMeaning = word.russianMeaning;\r\n    wordReadModel.englishMeaning = word.englishMeaning;\r\n    wordReadModel.partOfSpeech = word.partOfSpeech;\r\n    wordReadModel.examples = word.examples;\r\n\r\n    return wordReadModel;\r\n}\r\n\r\nexport function mapToUserReadModel(user: UserViewModel): UserReadModel {\r\n    let userReadModel = new UserReadModel();\r\n    userReadModel.id = user.id;\r\n    userReadModel.firstName = user.firstName;\r\n    userReadModel.lastName = user.lastName;\r\n    userReadModel.login = user.login;\r\n    userReadModel.email = user.email;\r\n    userReadModel.password = user.passwordHash;\r\n    userReadModel.token = user.token;\r\n    userReadModel.role = user.role;\r\n\r\n    return userReadModel;\r\n}\r\n\r\nexport function mapToTagReadModel(tag: TagViewModel): TagReadModel {\r\n    let tagReadModel = new TagReadModel();\r\n    tagReadModel.id = tag.id;\r\n    tagReadModel.name = tag.name;\r\n    \r\n    return tagReadModel;\r\n}\r\n\r\nexport function mapToTaskReadModel(task: TaskViewModel): TaskReadModel {\r\n    let taskReadModel = new TaskReadModel();\r\n    taskReadModel.id = task.id;\r\n    taskReadModel.instruction = task.instruction;\r\n    taskReadModel.text = task.text;\r\n    taskReadModel.taskType = task.taskType;\r\n    taskReadModel.subtasks = task.subtasks.map(s => mapToSubtaskReadModel(s));\r\n    taskReadModel.tagIds = task.tags.map(t => t.id);\r\n\r\n    return taskReadModel;\r\n}\r\n\r\nexport function mapToUserSubtaskAnswerGroupReadModel(userAnswerGroup: UserSubtaskAnswerGroupViewModel): UserSubtaskAnswerGroupReadModel {\r\n    let answerGroupReadModel = new UserSubtaskAnswerGroupReadModel();\r\n    answerGroupReadModel.lastAnswer = userAnswerGroup.lastAnswer;\r\n    answerGroupReadModel.status = userAnswerGroup.status;\r\n    answerGroupReadModel.answerGroupId = userAnswerGroup.answerGroupId;\r\n\r\n    return answerGroupReadModel;\r\n}\r\n\r\nexport function mapToFeedbackReadModel(feedback: FeedbackViewModel, old: boolean) {\r\n    let feedbackReadModel = new FeedbackReadModel();\r\n    feedbackReadModel.id = feedback.id;\r\n    feedbackReadModel.name = feedback.name;\r\n    feedbackReadModel.email = feedback.email;\r\n    feedbackReadModel.message = feedback.message;\r\n    feedbackReadModel.old = old;\r\n\r\n    return feedbackReadModel;\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\Word.tsx",["736","737","738","739"],"﻿import React, {Component} from 'react';\r\nimport {WordViewModel} from \"../../../Typings/viewModels/WordViewModel\";\r\nimport {Card, CardText, Progress} from \"reactstrap\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport WordStore from \"../../../stores/WordStore\";\r\nimport UserStore from \"../../../stores/UserStore\";\r\nimport {UserRole} from \"../../../Typings/enums/UserRole\";\r\nimport {observer} from \"mobx-react\";\r\nimport {UserWordViewModel} from \"../../../Typings/viewModels/UserWordViewModel\";\r\nimport {translatePartOfSpeech} from \"../../../functions/translater\";\r\nimport AddOrUpdateWord from \"./AddOrUpdateWord\";\r\nimport {WordReadModel} from \"../../../Typings/readModels/WordReadModel\";\r\n\r\n\r\nclass IWordProps {\r\n    userWord: UserWordViewModel;\r\n    wordStore: WordStore;\r\n    userStore: UserStore;\r\n}\r\n\r\n@observer\r\nclass Word extends Component<IWordProps> {\r\n    word: WordViewModel = new WordViewModel();\r\n    notDeleted: boolean;\r\n    edit: boolean;\r\n\r\n    constructor(props: IWordProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            word: observable,\r\n            notDeleted: observable,\r\n            edit: observable\r\n        });\r\n        this.setWord();\r\n    }\r\n\r\n    setWord() {\r\n        this.word = this.props.wordStore.dictionary.filter(w => w.id === this.props.userWord.wordId)[0];\r\n    }\r\n\r\n    renderWord() {\r\n        return(\r\n            <div className=\"col-lg-2 col-md-2 col-sm-2 col-xs-2 wordColumn\">\r\n                <span>{this.word.word.toUpperCase()}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderPartOfSpeech() {\r\n        return(\r\n            <div className=\"col-lg-2 col-md-2 col-sm-2 col-xs-2\">\r\n                <span>{translatePartOfSpeech(this.word.partOfSpeech)}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderEnglishMeaning() {\r\n        return(\r\n            <div className=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\r\n                <span>{this.word.englishMeaning}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderRussianMeaning() {\r\n        return(\r\n            <div className=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\r\n                <span>{this.word.russianMeaning}</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderExamples() {\r\n        let examples = this.word.examples;\r\n        if(examples.length > 0) {\r\n            return(\r\n                <div className=\"row\">\r\n                    <div className=\"col-10\">\r\n                        <span style={{marginLeft: \"0px\", paddingLeft: \"10px\"}}>Пример: {examples[0].example}</span>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderControlButtons() {\r\n        return(\r\n            <>\r\n                <div className=\"row justify-content-center\" onClick={() => this.handleDelete()}>\r\n                     <i className=\"fa fa-window-close fa-2x\" aria-hidden=\"true\"/>\r\n                </div>\r\n                <div className=\"row justify-content-center\" onClick={() => this.editToggle()}>\r\n                     <i className=\"fa fa-edit fa-2x\" aria-hidden=\"true\"/>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderProgress() {\r\n        if(this.props.userStore.currentUser.role != UserRole.Admin) {\r\n            return(\r\n                <Progress\r\n                    style={{width: \"100%\"}}\r\n                    color=\"success\" value={this.props.userWord.rightAnswers / 0.05}>\r\n                    выучено на {this.computeProgress()} %\r\n                </Progress>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderWordCard() {\r\n        return(\r\n            <Card className=\"cardWord\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-10\">\r\n                        <div className=\"row justify-content-center\">\r\n                            {this.renderWord()}\r\n                            {this.renderPartOfSpeech()}\r\n                            {this.renderEnglishMeaning()}\r\n                            {this.renderRussianMeaning()}\r\n                        </div>\r\n                        {this.renderExamples()}\r\n                    </div>\r\n                    <div className=\"col-2\">\r\n                        {this.renderControlButtons()}\r\n                    </div>\r\n                </div>\r\n                <CardText style={{marginTop: '5px', width: \"100%\"}}>\r\n                    {this.renderProgress()}\r\n                </CardText>\r\n            </Card>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderWordCard()}\r\n                {this.edit && <AddOrUpdateWord word={this.word} cancelEdit={this.editToggle} courseId={undefined} currentUser={this.props.userStore.currentUser} date={undefined} isWordOfADay={false} wordStore={this.props.wordStore} />}\r\n            </>\r\n        );\r\n    }\r\n\r\n    handleDelete() {\r\n        let result = window.confirm('Вы уверены, что хотите удалить слово?');\r\n        if(result) {\r\n            this.deleteWord()\r\n                .then((status) => {\r\n                    this.notDeleted = status !== 200;\r\n            });\r\n        }\r\n    }\r\n\r\n    async deleteWord(): Promise<number> {\r\n        let role = this.props.userStore.currentUser.role;\r\n        if(role === UserRole.User) {\r\n            let userId = this.props.userStore.currentUser.id;\r\n           return this.props.wordStore.deleteWordFromUserDictionary(this.word.id, userId);\r\n        } else if(role === UserRole.Admin) {\r\n           return this.props.wordStore.deleteWordFromDictionary(this.word.id);\r\n        }\r\n\r\n        return 401;\r\n    }\r\n\r\n    editToggle = () => {\r\n        this.edit = !this.edit;\r\n    };\r\n\r\n    computeProgress() {\r\n        let progress = this.props.userWord.rightAnswers / 5 * 100;\r\n        if(progress > 100) {\r\n            progress = 100;\r\n        }\r\n        return progress;\r\n    }\r\n}\r\n\r\nexport default Word;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\TaskViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\CompletingStatus.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\ExampleReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\PartOfSpeech.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\shuffleWords.tsx",["740"],"﻿import { WordViewModel } from \"../Typings/viewModels/WordViewModel\";\r\n\r\nexport function shuffleWords(array: WordViewModel[]): WordViewModel[] {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n\r\n    return array;\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\WordsOfADay\\WordOfADay.tsx",["741","742"],"﻿import React, {Component} from 'react';\r\nimport { observer} from \"mobx-react\";\r\nimport {Alert, Button, Card, CardBody, CardFooter, CardHeader, CardText, CardTitle, Col, Row} from \"reactstrap\";\r\nimport {WordViewModel} from \"../../../Typings/viewModels/WordViewModel\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport {UserRole} from \"../../../Typings/enums/UserRole\";\r\nimport CommentGroup from \"../Comments/CommentGroup\";\r\nimport {CommentedEntityType} from \"../../../Typings/enums/CommentedEntityType\";\r\nimport AnswerToWordOfADay from \"./AnswerToWordOfADay\";\r\nimport UserAnswers from \"../../Admin/WordsOfADay/UserAnswers\";\r\nimport {translatePartOfSpeech} from \"../../../functions/translater\";\r\nimport AddOrUpdateWord from \"../Dictionary/AddOrUpdateWord\";\r\n\r\nclass IWordOfADayProps {\r\n    date: Date | Date[];\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass WordOfADay extends Component<IWordOfADayProps> {\r\n    addOrUpdate: boolean = false;\r\n    role: UserRole;\r\n    showComments: boolean;\r\n    itIsNotAllowedToWatchNextWords: boolean;\r\n    showUserAnswers: boolean;\r\n\r\n    constructor(props: IWordOfADayProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            addOrUpdate: observable,\r\n            role: observable,\r\n            showComments: observable,\r\n            itIsNotAllowedToWatchNextWords: observable,\r\n            showUserAnswers: observable\r\n        });\r\n        this.setWordOfADay(this.props.date);\r\n        this.role = this.props.store.userStore.currentUser.role;\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<IWordOfADayProps>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        if(prevProps.date !== this.props.date) {\r\n            this.setWordOfADay(this.props.date);\r\n        }\r\n    }\r\n\r\n    setWordOfADay(date: Date | Date[]) {\r\n        let courseId = this.props.store.courseStore.choosenCourse.id;\r\n        this.props.store.wordStore.getWordOfADay(date, courseId);\r\n    }\r\n\r\n    renderCautions() {\r\n        return(\r\n            <Alert style={{marginTop: \"10px\"}} color=\"danger\">На эту дату слово дня отсутствует</Alert>\r\n        );\r\n    }\r\n\r\n    renderDeleteButton() {\r\n        if(this.props.store.userStore.currentUser.role === UserRole.Admin) {\r\n            return(\r\n                <i style={{marginLeft: '90%', width: '2%'}}\r\n                   onClick={() => this.handleDelete()}\r\n                   className=\"fa fa-window-close fa-2x\" aria-hidden=\"true\" />\r\n            );\r\n        }\r\n    }\r\n\r\n    renderWord(word: WordViewModel) {\r\n        if(word !== undefined && word.word !== undefined && word !== null && word.word !== null) {\r\n            return(\r\n                <CardHeader className=\"text-center\">{word.word.toUpperCase()}</CardHeader>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderWordDetails(word: WordViewModel) {\r\n        return(\r\n            <>\r\n                <CardTitle>{translatePartOfSpeech(word.partOfSpeech)}</CardTitle>\r\n                <CardText>{word.russianMeaning}</CardText>\r\n                <CardText>{word.englishMeaning}</CardText>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderEditButton() {\r\n        if(this.role === UserRole.Admin) {\r\n            return(\r\n                <CardFooter className=\"text-center\">\r\n                    <button\r\n                        onClick={() => this.toggleAddOrUpdateWord()}>\r\n                        Отредактировать\r\n                    </button>\r\n                </CardFooter>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderAnswerToWordOfADay() {\r\n        if(this.role === UserRole.User) {\r\n            let userId = this.props.store.userStore.currentUser.id;\r\n            return(\r\n                <AnswerToWordOfADay wordId={this.props.store.wordStore.wordOfADay.id} userId={userId} wordStore={this.props.store.wordStore}/>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderComments() {\r\n        if (this.role === UserRole.User) {\r\n            return(\r\n                <Button\r\n                    style={{marginTop: \"10px\"}}\r\n                    outline color=\"primary\"\r\n                    onClick={() => this.toggleComments()}>\r\n                    Комментарии\r\n                    {this.showComments &&\r\n                    <CommentGroup commentedEntityType={CommentedEntityType.WordOfADay} commentedEntityId={this.props.store.wordStore.wordOfADay.id} onToggle={this.toggleComments} store={this.props.store} userId={this.props.store.userStore.currentUser.id}/>}\r\n                </Button>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderWordOfADay(word: WordViewModel) {\r\n        if(word === undefined || word.word === undefined || word === null || word.word === null) {\r\n            return (\r\n                <>{this.renderCautions()}</>\r\n            )\r\n        } else {\r\n            return(\r\n                <>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Col sm=\"9\">\r\n                            <Card>\r\n                                {this.renderDeleteButton()}\r\n                                {this.renderWord(word)}\r\n                                <CardBody className=\"text-center\">\r\n                                    {this.renderWordDetails(word)}\r\n                                </CardBody>\r\n                                {this.renderEditButton()}\r\n                                {this.renderAnswerToWordOfADay()}\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"justify-content-center\">\r\n                        {this.renderComments()}\r\n                    </Row>\r\n                    <Row className=\"row justify-content-center\" style={{marginTop: \"10px\"}}>\r\n                        {this.renderUserAnswersControl()}\r\n                    </Row>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderAddOrUpdateWordOfADay() {\r\n        let courseId = this.props.store.courseStore.choosenCourse.id;\r\n        let currentUser = this.props.store.userStore.currentUser;\r\n        return (\r\n            <AddOrUpdateWord word={this.props.store.wordStore.wordOfADay} cancelEdit={this.toggleAddOrUpdateWord} courseId={courseId} currentUser={currentUser} date={this.props.date} isWordOfADay={true} wordStore={this.props.store.wordStore} />\r\n        );\r\n    }\r\n\r\n    renderGetUserAnswersButton() {\r\n        return(\r\n            <>\r\n                {<Button outline color=\"secondary\" onClick={() => this.toggleUserAnswers()}>\r\n                    ПОЛУЧИТЬ ОТВЕТЫ ПОЛЬЗОВАТЕЛЕЙ\r\n                </Button>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderUserAnswers() {\r\n        return (\r\n            <UserAnswers store={this.props.store}  wordId={this.props.store.wordStore.wordOfADay.id}/>\r\n        );\r\n    }\r\n\r\n    renderUserAnswersControl() {\r\n        let role = this.props.store.userStore.currentUser.role;\r\n        if(role === UserRole.Admin) {\r\n            return(\r\n                <>\r\n                    {this.renderGetUserAnswersButton()}\r\n                    {this.showUserAnswers && this.renderUserAnswers()}\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderAddWordButton(word: WordViewModel) {\r\n        if(this.props.store.userStore.currentUser.role === UserRole.Admin) {\r\n            if(word.word === null || word === undefined || word.word === undefined || word === null) {\r\n                return(\r\n                    <Button\r\n                        style={{marginTop: \"10px\"}}\r\n                        outline color=\"primary\" onClick={() => this.toggleAddOrUpdateWord()}>\r\n                        Добавить слово\r\n                    </Button>\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n                {this.renderWordOfADay(this.props.store.wordStore.wordOfADay)}\r\n                {this.addOrUpdate && this.renderAddOrUpdateWordOfADay()}\r\n                {this.renderAddWordButton(this.props.store.wordStore.wordOfADay)}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    handleDelete() {\r\n        let result = window.confirm('Вы уверены, что хотите удалить слово дня?');\r\n        if(result) {\r\n            let wordStore = this.props.store.wordStore;\r\n                wordStore.deleteWordOfADay(this.props.store.wordStore.wordOfADay.id)\r\n                    .then((status) => {\r\n                        if(status === 200) {\r\n                            this.setWordOfADay(this.props.date);\r\n                            this.addOrUpdate = true;\r\n                    }\r\n            })\r\n        }\r\n    }\r\n\r\n    toggleAddOrUpdateWord = () => {\r\n        this.addOrUpdate = !this.addOrUpdate;\r\n        this.setWordOfADay(this.props.date);\r\n    };\r\n\r\n    toggleComments = () => {\r\n        this.showComments = !this.showComments;\r\n    };\r\n\r\n    toggleUserAnswers() {\r\n        this.showUserAnswers = !this.showUserAnswers;\r\n    }\r\n}\r\n\r\nexport default WordOfADay;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\TrainingTypes\\ShowWordTraining.tsx",["743"],"﻿import React, { Component } from 'react';\r\nimport { Button, Card, CardText, CardFooter, CardTitle } from \"reactstrap\";\r\nimport { ITrainingTypeProps } from \"./ITrainingTypeProps\";\r\nimport {translatePartOfSpeech} from \"../../../../functions/translater\";\r\n\r\nclass ShowWordTraining extends Component<ITrainingTypeProps> {\r\n    continue() {\r\n        this.props.continue();\r\n    }\r\n\r\n    renderWord() {\r\n        let word = this.props.word;\r\n        return (\r\n            <>\r\n                <CardTitle className=\"text-center\">{word.word}</CardTitle>\r\n                <CardText className=\"text-center\">{translatePartOfSpeech(word.partOfSpeech)}</CardText>\r\n                <CardText className=\"text-center\">{word.englishMeaning}</CardText>\r\n                <CardText className=\"text-center\">{word.russianMeaning}</CardText>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderContinueButton() {\r\n        return (\r\n            <Button color=\"success\" onClick={() => this.continue()} style={{width: '100%'}}>ПРОДОЛЖИТЬ</Button>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Card style={{width: '100%'}}>\r\n                     {this.renderWord()}\r\n                <CardFooter className=\"text-center\">\r\n                    {this.renderContinueButton()}\r\n                </CardFooter>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ShowWordTraining;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\TrainingTypes\\RussianWordEnglishWordTraining.tsx",["744","745","746","747"],"﻿import React, { Component } from \"react\";\r\nimport { ITrainingTypeProps } from \"./ITrainingTypeProps\";\r\nimport { observer } from \"mobx-react\";\r\nimport { Button, Card, CardBody, CardFooter, CardTitle } from \"reactstrap\";\r\nimport { WordViewModel } from \"../../../../Typings/viewModels/WordViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\n\r\n@observer\r\nclass RussianWordEnglishWordTraining extends Component<ITrainingTypeProps> {\r\n    answered: boolean;\r\n    choosenAnswerId: number;\r\n    rightAnswer: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            answered: observable,\r\n            choosenAnswerId: observable,\r\n            rightAnswer: observable,\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ITrainingTypeProps>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        if(prevProps.word !== this.props.word) {\r\n            this.answered = false;\r\n            this.rightAnswer = false;\r\n        }\r\n    }\r\n\r\n    renderWords(words: WordViewModel[]) {\r\n        return(\r\n            <>\r\n                {words.map((word) => {\r\n                    return (\r\n                        <div className=\"row justify-content-center\">\r\n                            <Button\r\n                                disabled={this.answered}\r\n                                style={{width: '100%', marginTop: '5px'}}\r\n                                id={word.id.toString()}\r\n                                onClick={(e) => this.chooseAnswer(e)}\r\n                                outline={this.choosenAnswerId == word.id && this.answered ? this.rightAnswer ? false : false : true}\r\n                                color={this.choosenAnswerId == word.id && this.answered ? this.rightAnswer ? \"success\" : \"danger\" : \"primary\"}>\r\n                                {word.word}\r\n                            </Button>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </>\r\n        )\r\n    }\r\n\r\n    renderButtons() {\r\n        return (\r\n            <>\r\n                {!this.answered && <Button color=\"success\" onClick={() => this.check()} style={{width: '100%'}}>ПРОВЕРИТЬ</Button>}\r\n                {this.answered && <Button color=\"primary\" onClick={() => this.continue()} style={{width: '100%'}}>ПРОДОЛЖИТЬ</Button>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Card style={{width: '100%'}}>\r\n                <CardTitle className=\"text-center\">{this.props.word.russianMeaning}</CardTitle>\r\n                <CardBody>\r\n                    {this.renderWords(this.props.words)}\r\n                </CardBody>\r\n                <CardFooter className=\"text-center\">\r\n                    {this.renderButtons()}\r\n                </CardFooter>\r\n            </Card>\r\n        );\r\n    }\r\n\r\n    check() {\r\n        this.rightAnswer = this.props.word.id == this.choosenAnswerId;\r\n        this.answered = true;\r\n    }\r\n\r\n    continue() {\r\n         this.props.continue(this.props.word.id, this.rightAnswer);\r\n    }\r\n\r\n    chooseAnswer(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\r\n        this.choosenAnswerId = Number(event.currentTarget.id);\r\n    }\r\n}\r\n\r\nexport default RussianWordEnglishWordTraining;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\TrainingTypes\\EnglishWordRussianMeaningTraining.tsx",["748","749","750","751"],"﻿import React, { Component } from \"react\";\r\nimport { Card, CardTitle, CardBody, CardFooter, Button } from \"reactstrap\";\r\nimport { ITrainingTypeProps } from \"./ITrainingTypeProps\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport {WordViewModel} from \"../../../../Typings/viewModels/WordViewModel\";\r\n\r\n@observer\r\nclass EnglishWordRussianMeaningTraining extends Component<ITrainingTypeProps> {\r\n    answered: boolean;\r\n    choosenAnswerId: number;\r\n    rightAnswer: boolean;\r\n\r\n    constructor(props: ITrainingTypeProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            answered: observable,\r\n            choosenAnswerId: observable,\r\n            rightAnswer: observable,\r\n        });\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ITrainingTypeProps>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        if(prevProps.word !== this.props.word) {\r\n            this.answered = false;\r\n            this.rightAnswer = false;\r\n        }\r\n    }\r\n\r\n    renderWords(words: WordViewModel[]) {\r\n        return(\r\n            <>\r\n                {words.map((word) => {\r\n                    return (\r\n                        <div className=\"row justify-content-center\">\r\n                            <Button\r\n                                disabled={this.answered}\r\n                                style={{width: '100%', marginTop: '5px'}}\r\n                                id={word.id.toString()}\r\n                                onClick={(e) => this.chooseAnswer(e)}\r\n                                outline={this.choosenAnswerId == word.id && this.answered ? this.rightAnswer ? false : false : true}\r\n                                color={this.choosenAnswerId == word.id && this.answered ? this.rightAnswer ? \"success\" : \"danger\" : \"primary\"}>\r\n                                {word.russianMeaning}\r\n                            </Button>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </>\r\n        )\r\n    }\r\n\r\n    renderButtons() {\r\n        return(\r\n            <>\r\n                {!this.answered && <Button color=\"success\" onClick={() => this.check()} style={{width: '100%'}}>ПРОВЕРИТЬ</Button>}\r\n                {this.answered && <Button color=\"primary\" onClick={() => this.continue()} style={{width: '100%'}}>ПРОДОЛЖИТЬ</Button>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Card style={{width: '100%'}}>\r\n                <CardTitle className=\"text-center\">{this.props.word.word}</CardTitle>\r\n                <CardBody>\r\n                    {this.renderWords(this.props.words)}\r\n                </CardBody>\r\n                <CardFooter className=\"text-center\">\r\n                    {this.renderButtons()}\r\n                </CardFooter>\r\n            </Card>\r\n        )\r\n    }\r\n\r\n    check() {\r\n        this.rightAnswer = this.props.word.id == this.choosenAnswerId;\r\n        this.answered = true;\r\n    }\r\n\r\n    continue() {\r\n         this.props.continue(this.props.word.id, this.rightAnswer);\r\n    }\r\n\r\n    chooseAnswer(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\r\n        this.choosenAnswerId = Number(event.currentTarget.id);\r\n    }\r\n}\r\n\r\nexport default EnglishWordRussianMeaningTraining;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\NavigationType.tsx",["752"],"﻿export enum NavigationType {\r\n    Forward,\r\n    Back\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\MyLessons\\HomeworkTask.tsx",["753"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\Settings.tsx",["754","755"],"﻿import React, {Component} from 'react';\r\nimport {WordTrainingType} from \"../../../Typings/enums/WordTrainingType\";\r\nimport {Alert, Button, Card, CardBody, Input} from \"reactstrap\";\r\nimport {UserWordViewModel} from \"../../../Typings/viewModels/UserWordViewModel\";\r\nimport {WordViewModel} from \"../../../Typings/viewModels/WordViewModel\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport WordStore from \"../../../stores/WordStore\";\r\nimport {CompletingStatus} from \"../../../Typings/enums/CompletingStatus\";\r\n\r\nclass ISettingsProps {\r\n    wordStore: WordStore;\r\n    continue: any;\r\n}\r\n\r\nexport class Settings extends Component<ISettingsProps> {\r\n    wordsCount: number;\r\n    settingsOpen: boolean;\r\n    userWords: UserWordViewModel[] = new Array<UserWordViewModel>();\r\n    words: WordViewModel[] = new Array<WordViewModel>();\r\n    wordsCountWarning: boolean;\r\n    littleCountWords: boolean;\r\n    trainingType: WordTrainingType = WordTrainingType.LearnNew;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            wordsCount: observable,\r\n            settingsOpen: observable,\r\n            userWords: observable,\r\n            words: observable,\r\n            wordsCountWarning: observable,\r\n            trainingType: observable\r\n        });\r\n    }\r\n\r\n    renderSettings() {\r\n        return (\r\n            <Card style={{width: '100%'}}>\r\n                <CardBody className=\"text-center\">\r\n                    {this.renderCautions()}\r\n                    {this.renderWordsCountInput()}\r\n                </CardBody>\r\n                <CardBody  className=\"text-center\">\r\n                    {this.renderTrainingTypeInput()}\r\n                </CardBody>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderContinueButton()}\r\n                </div>\r\n            </Card>\r\n        );\r\n    }\r\n\r\n    renderCautions() {\r\n        return(\r\n            <>\r\n                {this.littleCountWords && <Alert color=\"danger\">У вас в словарике меньше 5 слов. Добавьте ещё несколько слов, чтобы тренировка стала доступной:)</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderWordsCountInput() {\r\n        return (\r\n            <>\r\n                <Alert outline color={this.wordsCountWarning ? \"danger\" : \"primary\"}>Количество слов не может быть меньше 5</Alert>\r\n                <Input style={{marginTop: '0px'}} type=\"text\" onChange={(e) => this.changeWordsCount(e)} defaultValue={this.wordsCount}>{this.wordsCount}</Input>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderTrainingTypeInput() {\r\n        return (\r\n            <Input type=\"select\" name=\"select\" id=\"exampleSelect\">\r\n                <option key=\"learnnew\" onClick={() => this.selectTrainingType(WordTrainingType.LearnNew)}>УЧИТЬ НОВЫЕ</option>\r\n                <option key=\"repeat\" onClick={() => this.selectTrainingType(WordTrainingType.Repeat)}>ПОВТОРИТЬ</option>\r\n            </Input>\r\n        );\r\n    }\r\n\r\n    renderContinueButton() {\r\n        return(\r\n            <Button disabled={this.wordsCountWarning} outline color=\"primary\" onClick={() => this.continue()}>\r\n                ПРОДОЛЖИТЬ\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.renderSettings()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    selectTrainingType(trainingType: WordTrainingType) {\r\n        this.trainingType = trainingType;\r\n    }\r\n\r\n    changeWordsCount(event: React.FormEvent<HTMLInputElement>) {\r\n        let wordsCount = Number(event.currentTarget.value);\r\n        this.wordsCountWarning = wordsCount < 5;\r\n        this.wordsCount = wordsCount;\r\n    }\r\n\r\n    continue() {\r\n        let userWords = this.chooseWordsForTraining();\r\n        if(userWords.length < 5) {\r\n            this.littleCountWords = true;\r\n        } else {\r\n            this.props.continue(userWords);\r\n        }\r\n    }\r\n\r\n   chooseWordsForTraining(): UserWordViewModel[] {\r\n        let userWords = new Array<UserWordViewModel>();\r\n        if(this.trainingType === WordTrainingType.LearnNew) {\r\n             userWords = this.props.wordStore.userDictionary\r\n                .filter(uw => uw.status === CompletingStatus.NotCompleted)\r\n                .slice(0, 5);\r\n        } else {\r\n            userWords = this.props.wordStore.userDictionary\r\n                .filter(uw => uw.status === CompletingStatus.Completed)\r\n                .slice(0, 5);\r\n        }\r\n\r\n        return userWords;\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\transformer.tsx",["756"],"﻿import { PartOfSpeech } from \"../Typings/enums/PartOfSpeech\";\r\nimport {SubtaskType} from \"../Typings/enums/SubtaskType\";\r\n\r\nexport function transformValueToPartOfSpeech(value: string): PartOfSpeech {\r\n    if(value === \"Noun\") {\r\n        return PartOfSpeech.Noun;\r\n    } else if(value === \"Adverb\") {\r\n        return PartOfSpeech.Adverb;\r\n    } else if(value === \"Adjective\") {\r\n        return PartOfSpeech.Adjective;\r\n    } else if(value === \"Verb\") {\r\n        return PartOfSpeech.Verb;\r\n    }\r\n    return PartOfSpeech.Noun;\r\n}\r\n\r\nexport function transformValueToSubtaskType(value: string): SubtaskType {\r\n    if(value === \"InsertWordsIntoGaps\") {\r\n        return SubtaskType.InsertWordsIntoGaps;\r\n    } else if(value === \"RightVerbForm\") {\r\n        return SubtaskType.RightVerbForm;\r\n    } else if(value === \"DetailedAnswer\") {\r\n        return SubtaskType.DetailedAnswer;\r\n    } else if(value === \"LoadAudio\") {\r\n        return SubtaskType.LoadAudio;\r\n    } else if(value === \"FillGaps\") {\r\n        return SubtaskType.FillGaps;\r\n    } else if(value === \"LoadFile\") {\r\n        return SubtaskType.LoadFile;\r\n    }\r\n\r\n    return SubtaskType.RightVerbForm;\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\translater.tsx",["757"],"﻿import {PartOfSpeech} from \"../Typings/enums/PartOfSpeech\";\r\nimport {Tarif} from \"../Typings/enums/Tarif\";\r\nimport {UserRole} from \"../Typings/enums/UserRole\";\r\nimport {CourseRole} from \"../Typings/enums/CourseRole\";\r\nimport {SubtaskType} from \"../Typings/enums/SubtaskType\";\r\n\r\nexport function translatePartOfSpeech(partOfSpeech: PartOfSpeech): string {\r\n    if(partOfSpeech === PartOfSpeech.Adjective) {\r\n        return \"Прилагательное\";\r\n    } else if(partOfSpeech === PartOfSpeech.Adverb) {\r\n        return \"Наречие\";\r\n    } else if(partOfSpeech === PartOfSpeech.Noun) {\r\n        return \"Существительное\";\r\n    } else if(partOfSpeech === PartOfSpeech.Verb) {\r\n        return \"Глагол\";\r\n    }\r\n\r\n    return \"\";\r\n}\r\n\r\nexport function translateTarif(tarif: Tarif): string {\r\n    if(tarif === Tarif.Usual) {\r\n        return \"Обычный\";\r\n    } else if(tarif === Tarif.Premium) {\r\n        return \"Премиум\";\r\n    }\r\n\r\n    return \"\";\r\n}\r\n\r\nexport function translateRole(role: UserRole): string {\r\n    if(role === UserRole.User) {\r\n        return \"Пользователь\";\r\n    } else if(role === UserRole.Admin) {\r\n        return \"Администратор\"\r\n    }\r\n\r\n    return \"\";\r\n}\r\n\r\nexport function translateCourseRole(role: CourseRole): string {\r\n    if(role === CourseRole.Pupil) {\r\n        return \"Ученик\";\r\n    } else if(role === CourseRole.Teacher) {\r\n        return \"Учитель\"\r\n    }\r\n\r\n    return \"\";\r\n}\r\n\r\nexport function translateSubtaskType(subtaskType: SubtaskType): string {\r\n    if(subtaskType === SubtaskType.DetailedAnswer) {\r\n        return \"Задание на загрузку развёрнутого ответа\";\r\n    } else if(subtaskType === SubtaskType.RightVerbForm) {\r\n        return \"Выбрать правильную форму глагола\"\r\n    } else if(subtaskType === SubtaskType.LoadAudio) {\r\n        return \"Задание на загрузку аудио\"\r\n    } else if(subtaskType === SubtaskType.FillGaps) {\r\n        return \"Задание на заполнение пропусков\"\r\n    } else if(subtaskType === SubtaskType.LoadFile) {\r\n        return \"Задание на загрузку файла\"\r\n    } else if(subtaskType === SubtaskType.InsertWordsIntoGaps) {\r\n        return \"Задание расставить слова в нужном порядке\"\r\n    }\r\n\r\n    return \"\";\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\TrackerByDayReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\TrackerReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Lesson\\Content.tsx",["758","759"],"﻿import React, { Component } from 'react';\r\nimport LessonStore from \"../../../stores/LessonStore\";\r\nimport { LessonMaterialViewModel } from \"../../../Typings/viewModels/LessonMaterialViewModel\";\r\nimport { Material } from \"./Material\";\r\nimport { renderSpinner } from \"../../../functions/renderSpinner\";\r\nimport { Alert } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport {UserViewModel} from \"../../../Typings/viewModels/UserViewModel\";\r\nimport {toJS} from \"mobx\";\r\n\r\nclass IContentProps {\r\n    lessonStore: LessonStore;\r\n    courseId: number;\r\n    currentUser: UserViewModel;\r\n}\r\n\r\n@observer\r\nexport class Content extends Component<IContentProps> {\r\n    renderMaterials(materials: LessonMaterialViewModel[]) {\r\n        return(\r\n            <>\r\n                {materials.map((material) => {\r\n                    return(\r\n                        <Material key={material.id} material={material} lessonStore={this.props.lessonStore}  currentUser={this.props.currentUser}/>\r\n                    );\r\n                })}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let materials = this.props.lessonStore.materialsByChoosenLesson;\r\n        return(\r\n            <>\r\n                {materials !== undefined && materials.length > 0 && this.renderMaterials(materials)}\r\n                {materials === undefined && renderSpinner()}\r\n                {materials.length === 0 && <Alert color=\"primary\">Пока нет материалов для данного урока:(</Alert>}\r\n            </>\r\n        );\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\ContentUpload.tsx",["760"],"﻿import React, { Component } from 'react';\r\nimport LessonStore from \"../../../stores/LessonStore\";\r\nimport { Alert, Button, Fade } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport {renderSpinner} from \"../../../functions/renderSpinner\";\r\n\r\nclass IContentProps {\r\n    lessonStore: LessonStore;\r\n    courseId: number;\r\n}\r\n\r\n@observer\r\nexport class ContentUpload extends Component<IContentProps> {\r\n    file: File;\r\n    notLoaded: boolean = false;\r\n    loaded: boolean = false;\r\n    loading: boolean = false;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            file: observable,\r\n            notLoaded: observable,\r\n            loaded: observable,\r\n            loading: observable\r\n        });\r\n    }\r\n\r\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        event.preventDefault();\r\n        let reader = new FileReader();\r\n        // @ts-ignore\r\n        let file = event.target.files[0];\r\n        reader.onloadend = () => {\r\n            this.file = file;\r\n        };\r\n        reader.readAsDataURL(file)\r\n    }\r\n\r\n    renderCautions() {\r\n        setTimeout(() => {\r\n            this.notLoaded = false;\r\n            this.loaded = false;\r\n        }, 6000);\r\n        return(\r\n            <>\r\n                {this.loading && renderSpinner()}\r\n                {this.notLoaded && <Alert color=\"danger\">Не удалось загрузить материал:(</Alert>}\r\n                {this.loaded && <Alert color=\"success\">Материал урока успешно сохранился!</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderInput() {\r\n        return(\r\n            <>\r\n            <input className=\"fileInput\"\r\n                   type=\"file\"\r\n                   onChange={(e) => this.handleChange(e)} />\r\n            <Fade in={true}\r\n                style={{fontSize: \"0.7em\", color: \"red\", marginTop: \"0px\"}}>\r\n                Допустимые форматы: pdf, mp4, doc, docx\r\n            </Fade>\r\n        </>\r\n        );\r\n    }\r\n\r\n    renderSubmitButton() {\r\n        return (\r\n            <Button outline color=\"primary\"\r\n                    type=\"submit\"\r\n                    onClick={(e) => this.addOrUpdateMaterial(e)}>\r\n                <i className=\"fa fa-plus\" aria-hidden=\"true\"/>\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                \r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderCautions()}\r\n                    <div className=\"col-lg-8 col-md-8 col-sm-12 col-xs-12\">\r\n                        {this.renderInput()}\r\n                    </div>\r\n                    <div className=\"col-lg-4 col-md-4 col-sm-12 col-xs-12\">\r\n                        {this.renderSubmitButton()}\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    addOrUpdateMaterial(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\r\n        event.preventDefault();\r\n        this.loading = true;\r\n        this.props.lessonStore.addOrUpdateMaterial(this.file)\r\n            .then((status) => {\r\n                this.notLoaded = status !== 200;\r\n                this.loading = false;\r\n                this.loaded = status === 200;\r\n        });\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\SubtaskType.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Users\\User.tsx",["761"],"﻿import React, { Component } from 'react';\r\nimport UserStore from \"../../../stores/UserStore\";\r\nimport { UserViewModel } from \"../../../Typings/viewModels/UserViewModel\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Label } from \"reactstrap\";\r\nimport { translateRole } from \"../../../functions/translater\";\r\nimport AddOrUpdateUserWindow from \"./AddOrUpdateUserWindow\";\r\nimport { Alert } from \"reactstrap\";\r\n\r\nclass IUserProps {\r\n    userStore: UserStore;\r\n    user: UserViewModel;\r\n}\r\n\r\n@observer\r\nclass User extends Component<IUserProps> {\r\n    editUser: boolean;\r\n    notDeleted: boolean = false;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            editUser: observable,\r\n            notDeleted: observable\r\n        });\r\n    }\r\n\r\n    renderUser(user: UserViewModel) {\r\n        return(\r\n            <tr>\r\n                <td onClick={() => this.toggleEditUser()}>\r\n                    {this.renderId(user)}\r\n                </td>\r\n                <td onClick={() => this.toggleEditUser()}>\r\n                    {this.renderNames(user)}\r\n                </td>\r\n                <td onClick={() => this.toggleEditUser()}>\r\n                    {this.renderEmail(user)}\r\n                </td>\r\n                <td onClick={() => this.toggleEditUser()}>\r\n                    {this.renderLogin(user)}\r\n                </td>\r\n                <td onClick={() => this.toggleEditUser()}>\r\n                    {this.renderRole(user)}\r\n                </td>\r\n                <td>\r\n                    <i\r\n                       onClick={() => this.deleteUser()}\r\n                       className=\"fa fa-window-close fa-2x\" aria-hidden=\"true\"/>\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    renderId(user: UserViewModel) {\r\n        return(\r\n            <Label>\r\n                {user.id}\r\n            </Label>\r\n        );\r\n    }\r\n\r\n    renderNames(user: UserViewModel) {\r\n        return(\r\n            <Label>\r\n                {user.firstName} {user.lastName}\r\n            </Label>\r\n        );\r\n    }\r\n\r\n    renderEmail(user: UserViewModel) {\r\n        return(\r\n            <Label>\r\n                {user.email}\r\n            </Label>\r\n        );\r\n    }\r\n\r\n    renderLogin(user: UserViewModel) {\r\n        return(\r\n            <Label>\r\n                {user.login}\r\n            </Label>\r\n        );\r\n    }\r\n\r\n    renderRole(user: UserViewModel) {\r\n        return(\r\n            <Label>\r\n                {translateRole(user.role)}\r\n            </Label>\r\n        );\r\n    }\r\n\r\n    renderEditUserWindow() {\r\n        return(\r\n            <AddOrUpdateUserWindow userStore={this.props.userStore} edit={true} userToEdit={this.props.user} cancelEdit={this.toggleEditUser}/>\r\n        );\r\n    }\r\n\r\n    renderCautions() {\r\n        setTimeout(() => {\r\n            this.notDeleted = false;\r\n        }, 6000);\r\n        return (\r\n            <>\r\n                {this.notDeleted && <Alert color=\"danger\">Что-то пошло не так и не удалось удалить пользователя :(</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.editUser && this.renderEditUserWindow()}\r\n                {this.renderUser(this.props.user)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    toggleEditUser = () => {\r\n        this.editUser = !this.editUser;\r\n    };\r\n\r\n    deleteUser() {\r\n        let user = this.props.user;\r\n        let result = window.confirm(`Вы уверены, что хотите удалить ${user.firstName} ${user.lastName}?`);\r\n        if(result) {\r\n            this.props.userStore\r\n                .deleteUser(user.id)\r\n                .then((status) => {\r\n                    this.notDeleted = status !== 200;\r\n                });\r\n        }\r\n    }\r\n}\r\n\r\nexport default User;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\LoadFileSubtask.tsx",["762","763","764","765"],"﻿import React, { Component } from 'react';\r\nimport { Alert, Button, CardImg, CardText, Input } from \"reactstrap\";\r\nimport { ISubtaskProps } from \"./ISubtaskProps\";\r\nimport { SubtaskViewModel } from \"../../../Typings/viewModels/SubtaskViewModel\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { UserRole } from \"../../../Typings/enums/UserRole\";\r\nimport { UserSubtaskReadModel } from \"../../../Typings/readModels/UserSubtaskReadModel\";\r\nimport { UserSubtaskViewModel } from \"../../../Typings/viewModels/UserSubtaskViewModel\";\r\nimport {renderSpinner} from \"../../../functions/renderSpinner\";\r\nimport {renderLoadingProgress} from \"../../../functions/renderLoadingProgress\";\r\nimport {getFileName} from \"../../../functions/getFileName\";\r\n\r\n@observer\r\nexport class LoadFileSubtask extends Component<ISubtaskProps> {\r\n    notSaved: boolean;\r\n    userAnswer: UserSubtaskViewModel = new UserSubtaskViewModel();\r\n    saved: boolean;\r\n    notDeleted: boolean;\r\n    userAnswerReadModel: UserSubtaskReadModel = new UserSubtaskReadModel();\r\n    loading: boolean;\r\n\r\n    constructor(props: ISubtaskProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            notSaved: observable,\r\n            userAnswer: observable,\r\n            saved: observable,\r\n            notDeleted: observable,\r\n            loading: observable,\r\n            userAnswerReadModel: observable\r\n        });\r\n        this.setUserAnswer(this.props.userId, this.props.subtask.id, this.props.userSubtask);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ISubtaskProps>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        if(prevProps.userSubtask !== this.props.userSubtask) {\r\n            this.setUserAnswer(this.props.userId, this.props.subtask.id, this.props.userSubtask);\r\n        }\r\n    }\r\n\r\n    setUserAnswer(userId: number, subtaskId: number, userSubtask: UserSubtaskViewModel) {\r\n        this.userAnswerReadModel.userId = userId;\r\n        this.userAnswerReadModel.subtaskId = subtaskId;\r\n        this.userAnswer = userSubtask;\r\n        this.userAnswerReadModel.status = userSubtask.status;\r\n        this.userAnswerReadModel.answer = userSubtask.answer;\r\n    }\r\n\r\n    renderControlButton() {\r\n        if(this.props.store.userStore.currentUser.role === UserRole.Admin) {\r\n            return(\r\n                <i style={{marginLeft: '94%', width: '2%'}}\r\n                   onClick={() => this.deleteSubtask()}\r\n                   className=\"fa fa-window-close fa-2x\" aria-hidden=\"true\"/>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderSubtaskText(subtask: SubtaskViewModel) {\r\n        return(\r\n            <>\r\n                {subtask.text !== null && <CardText>\r\n                    {subtask.text}\r\n                </CardText>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderImage(subtask: SubtaskViewModel) {\r\n        if(subtask.path !== null && (subtask.path.includes(\"img\") || subtask.path.includes(\"png\" || subtask.path.includes(\"jpeg\")))) {\r\n            return (\r\n                <>\r\n                    {subtask.path !== null &&\r\n                    <CardImg src={subtask.path.replace('client/build', './')} alt=\"Loading...\"/>}\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderFile(subtaskPath: string) {\r\n        if(subtaskPath !== null) {\r\n            let path = subtaskPath.replace('client/build', './');\r\n            let fileName = getFileName(path);\r\n            return(\r\n                <>\r\n                    <a href={path} type=\"application/vnd.openxmlformats-officedocument.wordprocessingml.document\" target=\"_blank\">{fileName}</a>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderSaveButton() {\r\n        return(\r\n            <div className=\"col-3\">\r\n                <Button outline color=\"primary\" onClick={() => this.save()}>СОХРАНИТЬ</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderCautions() {\r\n        setTimeout(() => {\r\n            this.notSaved = false;\r\n            this.saved = false;\r\n            this.notDeleted = false;\r\n        }, 6000);\r\n        return(\r\n            <>\r\n                {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и задание не сохранилось</Alert>}\r\n                {this.saved && <Alert color=\"success\">Задание успешно сохранилось</Alert>}\r\n                {this.notDeleted && <Alert color=\"danger\">Что-то пошло не так и задание не удалилось</Alert>}\r\n                {this.loading && renderLoadingProgress()}\r\n                </>\r\n        );\r\n    }\r\n\r\n    renderDeleteButton() {\r\n        if(this.props.userId === this.props.store.userStore.currentUser.id) {\r\n            return(\r\n                <i style={{marginLeft: '94%', width: '2%'}}\r\n                   onClick={() => this.deleteAnswer()}\r\n                   className=\"fa fa-window-close fa-2x\" aria-hidden=\"true\"/>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderUserAnswers() {\r\n        return(\r\n            <CardText>\r\n                {this.userAnswer.answerFiles.map(ans => {\r\n                    return(\r\n                        <div className= \"row justify-content-center\">\r\n                            {this.renderDeleteButton()}\r\n                            {this.renderFile(ans)}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </CardText>\r\n        );\r\n    }\r\n\r\n    renderInputFile() {\r\n        return(\r\n            <div className=\"col-9\">\r\n                <Input className=\"fileInput\"\r\n                       type=\"file\"\r\n                       id=\"loadAudioFile\"\r\n                       onChange={(e) => this.inputAnswer(e)}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderSubtask(subtask: SubtaskViewModel) {\r\n        return(\r\n            <>\r\n                <CardText style={{border: \"1px solid grey\"}}>\r\n                    {this.renderControlButton()}\r\n                    {this.renderSubtaskText(subtask)}\r\n                    {this.renderImage(subtask)}\r\n                    {this.renderFile(subtask.path)}\r\n                </CardText>\r\n                <CardText>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderUserAnswers()}\r\n                        {this.renderInputFile()}\r\n                        {this.renderSaveButton()}\r\n                        {this.renderCautions()}\r\n                    </div>\r\n                </CardText>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderSubtask(this.props.subtask)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    inputAnswer(event: React.ChangeEvent<HTMLInputElement>) {\r\n        // @ts-ignore\r\n        this.userAnswerReadModel.file = event.target.files[0];\r\n    }\r\n\r\n    save() {\r\n        if(this.props.store.userStore.currentUser.role !== UserRole.Admin) {\r\n            this.loading = true;\r\n            this.props.store.taskStore.addOrUpdateUserSubtask(this.userAnswerReadModel)\r\n                .then((status) => {\r\n                    this.notSaved = status !== 200;\r\n                    this.saved = status === 200;\r\n                    this.loading = false;\r\n                    this.props.updateUserTask();\r\n                });\r\n        }\r\n    }\r\n\r\n    deleteAnswer() {\r\n        let result = window.confirm('Вы уверены, что хотите удалить этот ответ?');\r\n        if(result) {\r\n            this.props.store\r\n                .taskStore\r\n                .deleteUserSubtask(this.props.userId, this.props.subtask.id, this.props.taskId)\r\n                .then((status) => {\r\n                    this.notDeleted = status !== 200;\r\n                    this.props.updateUserTask();\r\n                });\r\n        }\r\n    }\r\n\r\n    deleteSubtask() {\r\n        this.props.store.taskStore\r\n            .deleteSubtask(this.props.subtask.id, this.props.taskId)\r\n            .then((status) => {\r\n                this.notDeleted = status !== 200;\r\n        });\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Participants\\ParticipantsPage.tsx",["766","767"],"﻿import React, { Component }from 'react';\r\nimport { observer } from \"mobx-react\";\r\nimport CourseStore from \"../../../stores/CourseStore\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport { UserViewModel } from \"../../../Typings/viewModels/UserViewModel\";\r\nimport UserStore from \"../../../stores/UserStore\";\r\nimport { Button, Alert, Label } from \"reactstrap\";\r\nimport Participants from \"./Participants\";\r\nimport {UserCourseViewModel} from \"../../../Typings/viewModels/UserCourseViewModel\";\r\nimport {renderSpinner} from \"../../../functions/renderSpinner\";\r\n\r\nclass IParticipantsPageProps {\r\n    courseStore: CourseStore;\r\n    userStore: UserStore;\r\n}\r\n\r\n@observer\r\nclass ParticipantsPage extends Component<IParticipantsPageProps> {\r\n    participants: UserViewModel[] = new Array<UserViewModel>();\r\n    restUsers: UserViewModel[] = new Array<UserViewModel>();\r\n    saved: boolean;\r\n    notSaved: boolean;\r\n    notDeleted: boolean;\r\n    currentCourseId: number;\r\n    loading: boolean;\r\n\r\n    constructor(props: IParticipantsPageProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            participants: observable,\r\n            saved: observable,\r\n            notSaved: observable,\r\n            restUsers: observable,\r\n            notDeleted: observable,\r\n            currentCourseId: observable,\r\n            loading: observable\r\n        });\r\n        this.currentCourseId = this.props.courseStore.choosenCourse.id;\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.setUsers();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<IParticipantsPageProps>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        if(this.currentCourseId !== this.props.courseStore.choosenCourse.id) {\r\n            this.currentCourseId = this.props.courseStore.choosenCourse.id;\r\n            this.loading = true;\r\n            this.setUsers();\r\n        }\r\n    }\r\n\r\n    setUsers() {\r\n        let usersByCourse = this.props.courseStore.usersByCourse;\r\n        let users = this.props.userStore.users;\r\n        let participants = users.filter(u => usersByCourse\r\n            .map(uc => uc.userId)\r\n            .includes(u.id));\r\n        this.restUsers = users.filter(function(u) {\r\n            return !participants.includes(u);\r\n        });\r\n        this.participants = participants;\r\n        this.loading = false;\r\n    }\r\n\r\n    renderCurrentParticipants(participants: UserViewModel[]) {\r\n        return(\r\n            <Participants participants={participants} deleteParticipant={this.deleteParticipant} courseStore={this.props.courseStore} />\r\n        );\r\n    }\r\n\r\n    renderRestUsers(users: UserViewModel[]) {\r\n        return(\r\n            <>\r\n                {users.map(u => {\r\n                    return(\r\n                        <div className=\"row justify-content-center\" style={{border: \"1px solid black\"}}>\r\n                            <Label>\r\n                                {u.lastName} {u.firstName}\r\n                            </Label>\r\n                            <i\r\n                               style={{marginLeft: \"10px\"}}\r\n                               onClick={() => this.addParticipant(u)}\r\n                               className=\"fa fa fa-plus\" aria-hidden=\"true\"/>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderSaveButton() {\r\n        return(\r\n            <Button color=\"primary\"\r\n                onClick={(e) => this.save()}>\r\n                Сохранить\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderSavedDetails() {\r\n        setTimeout(() => {\r\n            this.notSaved = false;\r\n            this.saved = false;\r\n            this.notDeleted = false;\r\n        }, 6000);\r\n        return(\r\n            <>\r\n                {this.saved && <Alert color=\"success\">Список успешно обновлён!</Alert>}\r\n                {this.notSaved && <Alert color=\"danged\">Что-то пошло не так, и список не обновился :(</Alert>}\r\n                {this.notDeleted && <Alert color=\"danged\">Что-то пошло не так, и пользователь не удалился:(</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderDividingLine() {\r\n        return(\r\n            <>\r\n                <hr />\r\n                <span style={{fontSize: \"1.5em\"}}>\r\n                    Добавить:\r\n                </span>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderParticipants() {\r\n        return (\r\n            <>\r\n                {this.renderCurrentParticipants(this.participants)}\r\n                {this.renderSaveButton()}\r\n                {this.renderDividingLine()}\r\n                {this.renderRestUsers(this.restUsers)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderSavedDetails()}\r\n                {this.loading && renderSpinner()}\r\n                {!this.loading && this.renderParticipants()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    save() {\r\n        let participantsIds = this.participants.map(p => p.id);\r\n        this.props.courseStore.addOrUpdateParticipantsList(participantsIds, this.props.courseStore.choosenCourse.id)\r\n            .then((status) => {\r\n                this.saved = status === 200;\r\n                this.notSaved = status !== 200;\r\n            });\r\n    }\r\n\r\n    deleteParticipant = (participant: UserViewModel) => {\r\n        this.props.courseStore.deleteUserFromCourse(participant.id, this.props.courseStore.choosenCourse.id)\r\n            .then((status) => {\r\n                if(status === 200) {\r\n                    this.props.courseStore.getUsersByCourse(this.props.courseStore.choosenCourse.id)\r\n                        .then(() => {\r\n                            this.setUsers(); \r\n                        });\r\n                }\r\n                 this.notDeleted = status !== 200;\r\n                \r\n            })\r\n    };\r\n\r\n    addParticipant(user: UserViewModel) {\r\n        let userCourseViewModel = new UserCourseViewModel();\r\n        userCourseViewModel.courseId = this.props.courseStore.choosenCourse.id;\r\n        userCourseViewModel.userId = user.id;\r\n        userCourseViewModel.expireDate = new Date();\r\n        userCourseViewModel.startDate = new Date();\r\n        this.props.courseStore.addOrUpdateUserCourseDetails(userCourseViewModel)\r\n            .then((status) => {\r\n                if(status === 200) {\r\n                    this.props.courseStore.getUsersByCourse(this.props.courseStore.choosenCourse.id)\r\n                        .then((status) => {\r\n                            this.setUsers();\r\n                        });\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport default ParticipantsPage;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\AddSubtask.tsx",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\RightVerbFormSubtask.tsx",["768","769","770","771","772","773"],"﻿import React, {Component} from 'react';\r\nimport {Badge, ButtonDropdown, CardText, DropdownItem, DropdownMenu, DropdownToggle} from \"reactstrap\";\r\nimport {ISubtaskProps} from \"./ISubtaskProps\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport {observer} from \"mobx-react\";\r\nimport {UserRole} from \"../../../Typings/enums/UserRole\";\r\nimport {UserSubtaskReadModel} from \"../../../Typings/readModels/UserSubtaskReadModel\";\r\nimport {SubtaskViewModel} from \"../../../Typings/viewModels/SubtaskViewModel\";\r\nimport {SubtaskAnswerGroupViewModel} from \"../../../Typings/viewModels/SubtaskAnswerGroupViewModel\";\r\nimport {UserSubtaskAnswerGroupViewModel} from \"../../../Typings/viewModels/UserSubtaskAnswerGroupViewModel\";\r\nimport {UserSubtaskAnswerGroupReadModel} from \"../../../Typings/readModels/UserSubtaskAnswerGroupReadModel\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport {CompletingStatus} from \"../../../Typings/enums/CompletingStatus\";\r\nimport {mapToUserSubtaskAnswerGroupReadModel} from \"../../../functions/mapper\";\r\n\r\n@observer\r\nexport class RightVerbFormSubtask extends Component<ISubtaskProps> {\r\n    saved: boolean;\r\n    notDeleted: boolean;\r\n    partsOfSentence: string [] = new Array<string>();\r\n    answerGroupIds: RegExpMatchArray | null;\r\n    userAnswerGroups: UserSubtaskAnswerGroupViewModel[] = new Array<UserSubtaskAnswerGroupViewModel>();\r\n    subtask: SubtaskViewModel = new SubtaskViewModel();\r\n    loaded: boolean = false;\r\n    update: boolean;\r\n\r\n    constructor(props: ISubtaskProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            saved: observable,\r\n            notDeleted: observable,\r\n            partsOfSentence: observable,\r\n            answerGroupIds: observable,\r\n            subtask: observable,\r\n            loaded: observable,\r\n            update: observable\r\n        });\r\n        this.subtask = this.props.subtask;\r\n    }\r\n\r\n    updateToggle() {\r\n        this.update = !this.update;\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ISubtaskProps>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        if(prevProps.userSubtask !== this.props.userSubtask) {\r\n            this.userAnswerGroups = this.props.userSubtask.userSubtaskAnswerGroups;\r\n            this.updateToggle();\r\n        }\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.parseSubtask(this.subtask);\r\n        this.userAnswerGroups = this.props.userSubtask.userSubtaskAnswerGroups;\r\n        this.loaded = true;\r\n    }\r\n\r\n    parseSubtask(subtask: SubtaskViewModel) {\r\n        let regExp = /\\d+/g;\r\n        let text = subtask.text;\r\n        let groupIds = text.match(regExp);\r\n        let partsOfSentence = new Array<string>();\r\n        if (groupIds !== null) {\r\n            for(let i = 0; i < groupIds.length; i++) {\r\n                text = text.replace(groupIds[i], \"-\").replace(\"[\", \"\").replace(\"]\", \"\");\r\n            }\r\n            partsOfSentence = text.split(\"-\");\r\n        }\r\n        this.answerGroupIds = groupIds;\r\n        this.partsOfSentence = partsOfSentence;\r\n    }\r\n\r\n    renderControlButton() {\r\n        if(this.props.store.userStore.currentUser.role === UserRole.Admin) {\r\n            return(\r\n                <i style={{marginLeft: '98%', width: '2%'}}\r\n                   onClick={() => this.deleteSubtask()}\r\n                   className=\"fa fa-window-close fa-2x\" aria-hidden=\"true\"/>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderBadge() {\r\n        return(\r\n            <Badge outline color=\"primary\">{this.props.order + 1}</Badge>\r\n        );\r\n    }\r\n\r\n    getUserAnswerGroup(groupId: string): UserSubtaskAnswerGroupViewModel {\r\n        return this.userAnswerGroups.filter(ug => ug.answerGroupId === Number(groupId))[0];\r\n    }\r\n\r\n    getAnswerGroup(groupId: string): SubtaskAnswerGroupViewModel {\r\n        return this.subtask.answerGroups.filter(ag => ag.id === Number(groupId))[0];\r\n    }\r\n\r\n    renderSentence() {\r\n        let partsOfSentence = this.partsOfSentence;\r\n        let groupIds = this.answerGroupIds;\r\n        return(\r\n            <>\r\n                {partsOfSentence.map((p, i ) => {\r\n                    return (\r\n                        <>\r\n                            <span style={{clear: 'both'}}>{p}</span>\r\n                            {groupIds !== null && i < groupIds.length && <Dropdown answerGroup={this.getAnswerGroup(groupIds[i])} store={this.props.store} userAnswerGroup={this.getUserAnswerGroup(groupIds[i])} key={i}/>}\r\n                        </>\r\n                    )\r\n                })}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderSubtask(subtask: SubtaskViewModel, update: boolean) {\r\n        return (\r\n            <>\r\n                <CardText>\r\n                    {this.renderControlButton()}\r\n                    {this.renderBadge()}\r\n                    {this.renderSentence()}\r\n                </CardText>\r\n            </>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.loaded && this.renderSubtask(this.subtask, this.update)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    deleteSubtask() {\r\n        this.props.store.taskStore\r\n            .deleteSubtask(this.props.subtask.id, this.props.taskId)\r\n            .then((status) => {\r\n                this.notDeleted = status !== 200;\r\n        });\r\n    }\r\n}\r\n\r\nclass IDropdownProps {\r\n    answerGroup: SubtaskAnswerGroupViewModel;\r\n    userAnswerGroup: UserSubtaskAnswerGroupViewModel;\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass Dropdown extends Component<IDropdownProps> {\r\n    userAnswerGroup: UserSubtaskAnswerGroupViewModel = new UserSubtaskAnswerGroupViewModel();\r\n    answerGroup : SubtaskAnswerGroupViewModel = new SubtaskAnswerGroupViewModel();\r\n    isOpen: boolean;\r\n\r\n    constructor(props: IDropdownProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            userAnswerGroup: observable,\r\n            answerGroup: observable,\r\n            isOpen: observable\r\n        });\r\n        this.setUserAnswerGroup();\r\n        this.answerGroup = this.props.answerGroup;\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<IDropdownProps>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        if(prevProps.userAnswerGroup !== this.props.userAnswerGroup) {\r\n            this.setUserAnswerGroup();\r\n        }\r\n    }\r\n\r\n    setUserAnswerGroup() {\r\n        if(this.props.userAnswerGroup !== undefined) {\r\n            this.userAnswerGroup = this.props.userAnswerGroup;\r\n        } else {\r\n            let userAnswerGroup = new UserSubtaskAnswerGroupViewModel();\r\n            userAnswerGroup.status = CompletingStatus.NotCompleted;\r\n            this.userAnswerGroup = userAnswerGroup;\r\n        }\r\n    }\r\n\r\n    toggle() {\r\n        this.isOpen = !this.isOpen;\r\n    }\r\n\r\n    click(event: React.MouseEvent<HTMLElement, MouseEvent>) {\r\n        let id = event.currentTarget.id;\r\n        let answer = this.answerGroup.answers.find(a => a.id === Number(id));\r\n        if(answer !== undefined && answer.isRight) {\r\n            this.userAnswerGroup.status = 4;\r\n        } else {\r\n            this.userAnswerGroup.status = this.userAnswerGroup.status === 0 ? 1 : 2;\r\n        }\r\n        this.userAnswerGroup.lastAnswer = id;\r\n        this.addOrUpdateUserAnswerGroup();\r\n    }\r\n\r\n    renderDropdownToggle() {\r\n        let lastAnswerId = this.userAnswerGroup.lastAnswer === undefined ? 0 : this.userAnswerGroup.lastAnswer;\r\n        let status = this.userAnswerGroup.status;\r\n        let answers = this.answerGroup.answers;\r\n        if(lastAnswerId !== 0 && answers.findIndex(a => a.id == lastAnswerId) !== -1) {\r\n            let index =  answers.findIndex(a => a.id == lastAnswerId);\r\n            return (\r\n                <DropdownToggle caret outline color={status === 4 || status === 3 ? \"success\" : status === 2 || status === 1 ? \"danger\" : \"primary\"} disabled={status === 4 || status === 2}>\r\n                    {answers[index].answer}\r\n                </DropdownToggle>\r\n            );\r\n        } else {\r\n            return (\r\n                <DropdownToggle caret outline color=\"primary\">\r\n                    {answers[0] !== undefined && answers[0].answer}\r\n                </DropdownToggle>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderMenu() {\r\n        let answers = this.answerGroup.answers;\r\n        return(\r\n            <>\r\n                <ButtonDropdown isOpen={this.isOpen} toggle={() => this.toggle()}>\r\n                    {this.renderDropdownToggle()}\r\n                    <DropdownMenu>\r\n                        {answers.map((answer) => {\r\n                            return(\r\n                                <DropdownItem\r\n                                    key={answer.id.toString()}\r\n                                    onClick={(e) => this.click(e)}\r\n                                    id={answer.id.toString()}\r\n                                >{answer.answer}</DropdownItem>\r\n                            );\r\n                        })}\r\n                    </DropdownMenu>\r\n                </ButtonDropdown>\r\n            </>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderMenu()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    addOrUpdateUserAnswerGroup() {\r\n        if(this.props.store.userStore.currentUser.role !== UserRole.Admin) {\r\n            let answerGroupReadModel = mapToUserSubtaskAnswerGroupReadModel(this.userAnswerGroup);\r\n            answerGroupReadModel.answerGroupId = this.answerGroup.id;\r\n            answerGroupReadModel.userId = this.props.store.userStore.currentUser.id;\r\n            this.props.store.taskStore.addOrUpdateUserSubtaskAnswerGroup(answerGroupReadModel);\r\n        }\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\LoadAudioSubtask.tsx",["774","775","776"],"﻿import React, {Component} from 'react';\r\nimport {Alert, Button, CardImg, CardText, Input} from \"reactstrap\";\r\nimport {ISubtaskProps} from \"./ISubtaskProps\";\r\nimport {SubtaskViewModel} from \"../../../Typings/viewModels/SubtaskViewModel\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport {observer} from \"mobx-react\";\r\nimport {UserRole} from \"../../../Typings/enums/UserRole\";\r\nimport {UserSubtaskReadModel} from \"../../../Typings/readModels/UserSubtaskReadModel\";\r\nimport {UserSubtaskViewModel} from \"../../../Typings/viewModels/UserSubtaskViewModel\";\r\nimport {renderSpinner} from \"../../../functions/renderSpinner\";\r\nimport {renderLoadingProgress} from \"../../../functions/renderLoadingProgress\";\r\n\r\n@observer\r\nexport class LoadAudioSubtask extends Component<ISubtaskProps> {\r\n    notSaved: boolean;\r\n    userAnswer: UserSubtaskViewModel = new UserSubtaskViewModel();\r\n    saved: boolean;\r\n    notDeleted: boolean;\r\n    userAnswerReadModel: UserSubtaskReadModel = new UserSubtaskReadModel();\r\n    loading: boolean;\r\n\r\n    constructor(props: ISubtaskProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            notSaved: observable,\r\n            userAnswer: observable,\r\n            saved: observable,\r\n            notDeleted: observable,\r\n            loading: observable,\r\n            userAnswerReadModel: observable\r\n        });\r\n        this.setUserAnswer();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ISubtaskProps>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        if(prevProps.userSubtask !== this.props.userSubtask) {\r\n            this.setUserAnswer();\r\n        }\r\n    }\r\n\r\n    setUserAnswer() {\r\n        this.userAnswerReadModel.userId = this.props.userId;\r\n        this.userAnswerReadModel.subtaskId = this.props.subtask.id;\r\n        let userSubtask = this.props.userSubtask;\r\n        this.userAnswer = userSubtask;\r\n        this.userAnswerReadModel.status = userSubtask.status;\r\n        this.userAnswerReadModel.answer = userSubtask.answer;\r\n    }\r\n\r\n    renderControlButton() {\r\n        if(this.props.store.userStore.currentUser.role === UserRole.Admin) {\r\n            return(\r\n                <i style={{marginLeft: '98%', width: '2%'}}\r\n                   onClick={() => this.deleteSubtask()}\r\n                   className=\"fa fa-window-close fa-2x\" aria-hidden=\"true\"/>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderSubtaskText(subtask: SubtaskViewModel) {\r\n        return(\r\n            <>\r\n                {subtask.text !== null && <CardText>\r\n                    {subtask.text}\r\n                </CardText>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderImage(subtask: SubtaskViewModel) {\r\n        return (\r\n            <>\r\n                {subtask.path !== null &&\r\n                <CardImg src={subtask.path.replace('client/build', './')} alt=\"Loading...\"/>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderSaveButton() {\r\n        return(\r\n            <div className=\"col-3\">\r\n                <Button outline color=\"primary\" onClick={() => this.save()}>СОХРАНИТЬ</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderCautions() {\r\n        setTimeout(() => {\r\n            this.notSaved = false;\r\n            this.saved = false;\r\n            this.notDeleted = false;\r\n        }, 6000);\r\n        return(\r\n            <>\r\n                {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и задание не сохранилось</Alert>}\r\n                {this.saved && <Alert color=\"success\">Задание успешно сохранилось</Alert>}\r\n                {this.notDeleted && <Alert color=\"danger\">Что-то пошло не так и задание не удалилось</Alert>}\r\n                {this.loading && renderLoadingProgress()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderDeleteButton() {\r\n        if(this.props.userId === this.props.store.userStore.currentUser.id) {\r\n            return(\r\n                <i style={{marginLeft: '96%', width: '2%'}}\r\n                   onClick={() => this.deleteAnswer()}\r\n                   className=\"fa fa-window-close fa-2x\" aria-hidden=\"true\"/>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderUserAnswers() {\r\n        return(\r\n            <CardText>\r\n                {this.userAnswer.answerFiles.map(ans => {\r\n                    let answerPath = ans.replace('client/build', '.');\r\n                    return(\r\n                        <div className=\"row justify-content-center\">\r\n                            {this.renderDeleteButton()}\r\n                            <audio className=\"audio\" controls>\r\n                                <source src={answerPath} type=\"audio/mpeg\"/>\r\n                            </audio>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </CardText>\r\n        );\r\n    }\r\n\r\n    renderInputFile() {\r\n        return(\r\n            <div className=\"col-9\">\r\n                <Input className=\"fileInput\"\r\n                    type=\"file\"\r\n                    id=\"loadAudioFile\"\r\n                    onChange={(e) => this.inputAnswer(e)}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderAnswerInput() {\r\n        if(this.props.store.userStore.currentUser.role !== UserRole.Admin) {\r\n            return (\r\n                <CardText>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderInputFile()}\r\n                        {this.renderSaveButton()}\r\n                        {this.renderCautions()}\r\n                    </div>\r\n                </CardText>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderSubtask(subtask: SubtaskViewModel) {\r\n        return(\r\n            <>\r\n                {this.renderControlButton()}\r\n                {this.renderSubtaskText(subtask)}\r\n                {this.renderImage(subtask)}\r\n                {this.renderUserAnswers()}\r\n                {this.renderAnswerInput()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderSubtask(this.props.subtask)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    inputAnswer(event: React.ChangeEvent<HTMLInputElement>) {\r\n        // @ts-ignore\r\n        this.userAnswerReadModel.file = event.target.files[0];\r\n    }\r\n\r\n    save() {\r\n        if(this.props.store.userStore.currentUser.role !== UserRole.Admin) {\r\n            this.loading = true;\r\n            this.props.store.taskStore.addOrUpdateUserSubtask(this.userAnswerReadModel)\r\n                .then((status) => {\r\n                    this.notSaved = status !== 200;\r\n                    this.saved = status === 200;\r\n                    this.loading = false;\r\n                });\r\n        }\r\n    }\r\n\r\n       deleteAnswer() {\r\n            let result = window.confirm('Вы уверены, что хотите удалить этот ответ?');\r\n            if(result) {\r\n                this.props.store\r\n                    .taskStore\r\n                    .deleteUserSubtask(this.props.userId, this.props.subtask.id, this.props.taskId)\r\n                    .then((status) => {\r\n                        this.notDeleted = status !== 200;\r\n                    });\r\n            }\r\n        }\r\n\r\n        deleteSubtask() {\r\n        this.props.store.taskStore\r\n            .deleteSubtask(this.props.subtask.id, this.props.taskId)\r\n            .then((status) => {\r\n                this.notDeleted = status !== 200;\r\n            });\r\n        }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\FillGapsSubtask.tsx",["777","778","779","780"],"﻿import React, { Component } from 'react';\r\nimport {Badge, CardText, Input} from \"reactstrap\";\r\nimport {ISubtaskProps} from \"./ISubtaskProps\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport {observer} from \"mobx-react\";\r\nimport {UserRole} from \"../../../Typings/enums/UserRole\";\r\nimport {UserSubtaskReadModel} from \"../../../Typings/readModels/UserSubtaskReadModel\";\r\nimport {SubtaskViewModel} from \"../../../Typings/viewModels/SubtaskViewModel\";\r\nimport {SubtaskAnswerGroupViewModel} from \"../../../Typings/viewModels/SubtaskAnswerGroupViewModel\";\r\nimport {UserSubtaskAnswerGroupViewModel} from \"../../../Typings/viewModels/UserSubtaskAnswerGroupViewModel\";\r\nimport {UserSubtaskAnswerGroupReadModel} from \"../../../Typings/readModels/UserSubtaskAnswerGroupReadModel\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport {CompletingStatus} from \"../../../Typings/enums/CompletingStatus\";\r\nimport {mapToUserSubtaskAnswerGroupReadModel} from \"../../../functions/mapper\";\r\n\r\n@observer\r\nexport class FillGapsSubtask extends Component<ISubtaskProps> {\r\n    notSaved: boolean;\r\n    userAnswer: UserSubtaskReadModel = new UserSubtaskReadModel();\r\n    saved: boolean;\r\n    notDeleted: boolean;\r\n    partsOfSentence: string [] = new Array<string>();\r\n    answerGroupIds: RegExpMatchArray | null;\r\n    userAnswerGroups: UserSubtaskAnswerGroupViewModel[] = new Array<UserSubtaskAnswerGroupViewModel>();\r\n    subtask: SubtaskViewModel = new SubtaskViewModel();\r\n    loaded: boolean;\r\n    update: boolean;\r\n\r\n    constructor(props: ISubtaskProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            notSaved: observable,\r\n            userAnswer: observable,\r\n            saved: observable,\r\n            notDeleted: observable,\r\n            partsOfSentence: observable,\r\n            answerGroupIds: observable,\r\n            loaded: observable,\r\n            userAnswerGroups: observable,\r\n            update: observable\r\n        });\r\n        this.subtask = this.props.subtask;\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.parseSubtask(this.subtask);\r\n        this.userAnswerGroups = this.props.userSubtask.userSubtaskAnswerGroups;\r\n        this.loaded = true;\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ISubtaskProps>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        if(prevProps.userSubtask !== this.props.userSubtask) {\r\n            this.userAnswerGroups = this.props.userSubtask.userSubtaskAnswerGroups;\r\n            this.updateToggle();\r\n        }\r\n    }\r\n\r\n    updateToggle() {\r\n        this.update = !this.update;\r\n    }\r\n\r\n    parseSubtask(subtask: SubtaskViewModel) {\r\n        let regExp = /\\[\\d+\\]/g;\r\n        let text = subtask.text;\r\n        let groupIds = text.match(regExp);\r\n        let partsOfSentence = new Array<string>();\r\n        if (groupIds !== null) {\r\n            for(let i = 0; i < groupIds.length; i++) {\r\n                groupIds[i] = groupIds[i].replace(\"[\", \"\").replace(\"]\", \"\");\r\n                text = text.replace(groupIds[i], \"-\").replace(\"[\", \"\").replace(\"]\", \"\");\r\n            }\r\n            partsOfSentence = text.split(\"-\");\r\n            this.setState({answerGroupIds: groupIds, partsOfSentence: partsOfSentence});\r\n        }\r\n        this.answerGroupIds = groupIds;\r\n        this.partsOfSentence = partsOfSentence;\r\n    }\r\n\r\n    renderControlButton() {\r\n        if(this.props.store.userStore.currentUser.role === UserRole.Admin) {\r\n            return(\r\n                <i style={{marginLeft: '98%', width: '2%'}}\r\n                   onClick={() => this.deleteSubtask()}\r\n                   className=\"fa fa-window-close fa-2x\" aria-hidden=\"true\"/>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderBadge() {\r\n        return(\r\n            <Badge outline=\"true\" color=\"primary\">{this.props.order + 1 }</Badge>\r\n        );\r\n    }\r\n\r\n    getUserAnswerGroup(groupId: string): UserSubtaskAnswerGroupViewModel {\r\n        return this.userAnswerGroups.filter(ug => ug.answerGroupId === Number(groupId))[0];\r\n    }\r\n\r\n    getAnswerGroup(groupId: string): SubtaskAnswerGroupViewModel {\r\n        return this.subtask.answerGroups.filter(ag => ag.id === Number(groupId))[0];\r\n    }\r\n\r\n    renderSentence() {\r\n        let partsOfSentence = this.partsOfSentence;\r\n        let groupIds = this.answerGroupIds;\r\n        return(\r\n            <>\r\n                {partsOfSentence.map((p, i ) => {\r\n                    return (\r\n                        <>\r\n                            <span style={{clear: 'both'}}>{p}</span>\r\n                            {groupIds !== null && i < groupIds.length && <Gap answerGroup={this.getAnswerGroup(groupIds[0])} store={this.props.store} userAnswerGroup={this.getUserAnswerGroup(groupIds[0])} key={i}/>}\r\n                        </>\r\n                    )\r\n                })}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderSubtask(subtask: SubtaskViewModel, update: boolean) {\r\n        return (\r\n            <>\r\n                <CardText>\r\n                    {this.renderControlButton()}\r\n                    {this.renderBadge()}\r\n                    {this.renderSentence()}\r\n                </CardText>\r\n            </>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.loaded && this.renderSubtask(this.subtask, this.update)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    save() {\r\n        if(this.props.store.userStore.currentUser.role !== UserRole.Admin) {\r\n            this.props.store.taskStore.addOrUpdateUserSubtask(this.userAnswer)\r\n                .then((status) => {\r\n                    this.notSaved = status !== 200;\r\n                    this.saved = status === 200;\r\n                });\r\n        }\r\n    }\r\n\r\n    deleteSubtask() {\r\n        this.props.store.taskStore\r\n            .deleteSubtask(this.props.subtask.id, this.props.taskId)\r\n            .then((status) => {\r\n                this.notDeleted = status !== 200;\r\n            });\r\n    }\r\n}\r\n\r\nclass IGapProps {\r\n    answerGroup: SubtaskAnswerGroupViewModel;\r\n    userAnswerGroup: UserSubtaskAnswerGroupViewModel;\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass Gap extends Component<IGapProps> {\r\n    userAnswerGroup: UserSubtaskAnswerGroupViewModel = new UserSubtaskAnswerGroupViewModel();\r\n    answerGroup : SubtaskAnswerGroupViewModel = new SubtaskAnswerGroupViewModel();\r\n    update: boolean;\r\n\r\n    constructor(props: IGapProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            userAnswerGroup: observable,\r\n            answerGroup: observable,\r\n            update: observable\r\n        });\r\n        this.setUserAnswerGroup();\r\n        this.answerGroup = this.props.answerGroup;\r\n    }\r\n\r\n    \r\n    componentDidUpdate(prevProps: Readonly<IGapProps>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        if(prevProps.userAnswerGroup !== this.props.userAnswerGroup) {\r\n            this.setUserAnswerGroup();\r\n        }\r\n    }\r\n\r\n    setUserAnswerGroup() {\r\n        if(this.props.userAnswerGroup !== undefined) {\r\n            this.userAnswerGroup = this.props.userAnswerGroup;\r\n        } else {\r\n            let userAnswerGroup = new UserSubtaskAnswerGroupViewModel();\r\n            userAnswerGroup.status = CompletingStatus.NotCompleted;\r\n            this.userAnswerGroup = userAnswerGroup;\r\n        }\r\n    }\r\n\r\n    toggleUpdate() {\r\n        this.update = !this.update;\r\n    }\r\n\r\n    inputChange(event: React.FormEvent<HTMLInputElement>) {\r\n        this.userAnswerGroup.lastAnswer = event.currentTarget.value;\r\n    }\r\n\r\n    handleKeyPress(target: React.KeyboardEvent<HTMLInputElement>) {\r\n        if(target.charCode === 13) {//todo: возможно, устарело и надо поменять\r\n            this.checkAnswer();\r\n        }\r\n    }\r\n\r\n    checkAnswer() {\r\n        let lastAnswer = this.userAnswerGroup.lastAnswer.toLowerCase().trim();\r\n        let rightAnswers = this.answerGroup.answers\r\n            .filter(ans => ans.isRight)\r\n            .filter(ans => ans.answer.toLowerCase());\r\n       let userRightAnswer = rightAnswers.filter(ans => ans.answer === lastAnswer);\r\n        if(userRightAnswer === null || userRightAnswer.length === 0) {//todo: возможно здесь undefined или length = 0\r\n            this.userAnswerGroup.status = this.userAnswerGroup.status === 0 ? 1 : 2;\r\n        } else {\r\n            this.userAnswerGroup.status = 4;\r\n        }\r\n        this.addOrUpdateUserAnswerGroup();\r\n    }\r\n\r\n    renderInput(update: boolean) {\r\n        let answers = this.answerGroup.answers;\r\n        let status = this.userAnswerGroup.status;\r\n        return(\r\n            <input placeholder={answers[0].answer}\r\n                type=\"text\"\r\n                className={status === 4 || status === 3 ? \"fillGapInputRight\" : status === 2 || status === 1 ? \"fillGapInputWrong\" : \"fillGapInputPrimary\"}\r\n                disabled={status === 4 || status === 2}\r\n                onChange={(e) => this.inputChange(e)}\r\n                /* onBlur={() => this.checkAnswer()}*/\r\n                defaultValue={this.userAnswerGroup.lastAnswer !== undefined ? this.userAnswerGroup.lastAnswer : \"\"}\r\n                onKeyPress={(e) => this.handleKeyPress(e)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderInput(this.update)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    addOrUpdateUserAnswerGroup() {\r\n        if(this.props.store.userStore.currentUser.role !== UserRole.Admin) {\r\n            let answerGroupReadModel = mapToUserSubtaskAnswerGroupReadModel(this.userAnswerGroup);\r\n            answerGroupReadModel.answerGroupId = this.answerGroup.id;\r\n            answerGroupReadModel.userId = this.props.store.userStore.currentUser.id;\r\n            this.props.store.taskStore.addOrUpdateUserSubtaskAnswerGroup(answerGroupReadModel);\r\n        }\r\n        this.toggleUpdate();\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\TaskEdit.tsx",["781","782","783","784","785"],"﻿import React, {Component} from 'react';\r\nimport TaskStore from \"../../../stores/TaskStore\";\r\nimport { TaskViewModel } from \"../../../Typings/viewModels/TaskViewModel\";\r\nimport { Button, Modal, ModalHeader } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport TaskUploadWindow from \"./TaskUploadWindow\";\r\nimport { mapToTaskReadModel } from \"../../../functions/mapper\";\r\nimport {toJS} from \"mobx\";\r\nimport LessonStore from \"../../../stores/LessonStore\";\r\nimport TagStore from \"../../../stores/TagStore\";\r\n\r\nclass ITaskEditProps {\r\n    taskStore: TaskStore;\r\n    tagStore: TagStore;\r\n    task: TaskViewModel;\r\n    toggle: any;\r\n    lessonId: number;\r\n}\r\n\r\n@observer\r\nexport class TaskEdit extends Component<ITaskEditProps> {\r\n    taskToEdit: TaskViewModel;\r\n\r\n    componentDidMount(): void {\r\n        this.taskToEdit = this.props.task;\r\n    }\r\n\r\n    renderBody() {\r\n        return(\r\n            <TaskUploadWindow taskStore={this.props.taskStore} lessonId={this.props.lessonId} task={this.props.task}  tagStore={this.props.tagStore}/>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Modal\r\n                centered={true}\r\n                size=\"lg\"\r\n                isOpen={true}\r\n                toggle={() => this.props.toggle()}\r\n            >\r\n                <i style={{marginLeft: '96%', width: '2%'}}\r\n                   onClick={() => this.props.toggle()}\r\n                   className=\"fa fa-window-close fa-2x\" aria-hidden=\"true\"/>\r\n                <div className=\"row justify-content-center\">\r\n                    РЕДАКТИРОВАНИЕ УПРАЖНЕНИЯ\r\n                </div>\r\n                {this.renderBody()}\r\n                <Button color=\"primary\"\r\n                        onClick={() => this.props.toggle()}>\r\n                    ОТМЕНИТЬ РЕДАКТИРОВАНИЕ\r\n                </Button>\r\n            </Modal>\r\n        );\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\LessonsMenu.tsx",["786","787","788","789"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { LessonViewModel } from \"../../../Typings/viewModels/LessonViewModel\";\r\nimport { observer } from \"mobx-react\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport { Tab, Nav } from \"react-bootstrap\";\r\nimport { Alert, Button, Col, Collapse, Row } from \"reactstrap\";\r\nimport { renderSpinner } from \"../../../functions/renderSpinner\";\r\nimport { AddOrUpdateNewLesson } from \"./AddOrUpdateNewLesson\";\r\nimport { LessonPage } from \"./LessonPage\";\r\n\r\nclass ILessonsMenuProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nexport class LessonsMenu extends Component<ILessonsMenuProps> {\r\n    editLesson: boolean = false;\r\n    lessonToEdit: LessonViewModel = new LessonViewModel();\r\n    notDeleted: boolean = false;\r\n    deleted: boolean = false;\r\n    isNavOpen: boolean = true;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            editLesson: observable,\r\n            lessonToEdit: observable,\r\n            notDeleted: observable,\r\n            deleted: observable,\r\n            isNavOpen: observable\r\n        });\r\n    }\r\n\r\n    toggleNav() {\r\n        this.isNavOpen = !this.isNavOpen;\r\n    }\r\n\r\n    editToggle = () => {\r\n        this.editLesson = !this.editLesson;\r\n    };\r\n\r\n    editLessonToggle(lesson: LessonViewModel) {\r\n        this.editLesson = true;\r\n        this.lessonToEdit = lesson;\r\n    }\r\n\r\n    lessonToggle(lesson: LessonViewModel) {\r\n        this.props.store.lessonStore.setChoosenLesson(lesson);\r\n        this.props.store.taskStore.getTasksByLesson(lesson.id);\r\n    }\r\n\r\n    renderCautions() {\r\n        setTimeout(() => {\r\n            this.notDeleted = false;\r\n        }, 6000);\r\n        return (\r\n            <>\r\n                {this.notDeleted && <Alert color=\"danger\">Что-то пошло не так и урок не удалился</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderLessonsList(lessons: LessonViewModel[]) {\r\n        let defaultActiveKey = lessons[0] !== undefined ? lessons[0].id : 0;\r\n        return (\r\n           <>\r\n               {lessons.map((lesson) => {\r\n                   // @ts-ignore\r\n                   let isDisabled = new Date() < Date.parse(lesson.expireDate)  && new Date() > Date.parse(lesson.startDate);\r\n                   return (\r\n                       <Nav.Item key={lesson.id}>\r\n                           <div className=\"row\" key={lesson.id} style={{height: \"auto\"}}>\r\n                               <div className=\"col-8\" style={{height: \"auto\"}}>\r\n                                   <Nav.Link\r\n                                       style={{height: \"auto\"}}\r\n                                       eventKey={lesson.id}\r\n                                       className=\"nav-link lesson\"\r\n                                       onClick={() => this.lessonToggle(lesson)}>\r\n                                       {lesson.name}\r\n                                   </Nav.Link>\r\n                               </div>\r\n                               <div className=\"col-2 col-lg-offset-10\">\r\n                                   <i className=\"fa fa-window-close fa-2x\"\r\n                                      aria-hidden=\"true\"\r\n                                      onClick={() => this.deleteLesson(lesson.id)}/>\r\n                                   <i className=\"fa fa-edit fa-2x\"\r\n                                      aria-hidden=\"true\"\r\n                                      onClick={() => this.editLessonToggle(lesson)}/>\r\n                               </div>\r\n                           </div>\r\n                       </Nav.Item>\r\n                   );\r\n               })}\r\n           </>\r\n        );\r\n    }\r\n\r\n    renderLessonsMenu(lessons: LessonViewModel[]) {\r\n        let rowHeight = this.isNavOpen ? lessons.length * 80 + 50 : 60;\r\n        let defaultActiveKey = lessons[0] !== undefined ? lessons[0].id : 0;\r\n        return(\r\n            <Tab.Container id=\"left-tabs-example\" defaultActiveKey={defaultActiveKey}>\r\n                {this.renderCautions()}\r\n                <Row>\r\n                    <Col sm={3} style={{height: `${rowHeight}px`, marginTop: \"10px\"}}>\r\n                        <Button color=\"primary\" onClick={() => this.toggleNav()}>УРОКИ</Button>\r\n                        <Collapse isOpen={this.isNavOpen}>\r\n                            <Nav variant=\"pills\" className=\"flex-column\" defaultActiveKey={defaultActiveKey}>\r\n                                <div className=\"container-fluid\">\r\n                                    {lessons.length > 0 && this.renderLessonsList(lessons)}\r\n                                    <AddOrUpdateNewLesson store={this.props.store} edit={false} lessonToEdit={undefined} cancelEdit={undefined}/>\r\n                                </div>\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </Col>\r\n                    <Col sm={9}>\r\n                        {this.renderLessonPage()}\r\n                    </Col>\r\n                    {this.editLesson && <AddOrUpdateNewLesson store={this.props.store} edit={true} lessonToEdit={this.lessonToEdit} cancelEdit={this.editToggle}/>}\r\n                </Row>\r\n            </Tab.Container>\r\n        );\r\n    }\r\n\r\n    renderLessonPage() {\r\n        let lessonChoosen = this.props.store.lessonStore.choosenLesson !== undefined;\r\n        return(\r\n            <>\r\n                {lessonChoosen && <LessonPage store={this.props.store} lessonActive={true}/>}\r\n                {!lessonChoosen && <Alert color=\"success\">Выберите или добавьте урок:)</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let lessons = this.props.store.lessonStore.lessonsByChoosenCourse;\r\n        return(\r\n            <>\r\n                {lessons !== undefined && this.renderLessonsMenu(lessons)}\r\n                {lessons === undefined && renderSpinner()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    deleteLesson(lessonId: number) {\r\n        let result = window.confirm('Вы уверены, что хотите удалить этот урок?');\r\n        if(result) {\r\n            this.props.store.lessonStore.deleteLesson(lessonId, this.props.store.courseStore.choosenCourse.id)\r\n                .then((status) => {\r\n                    this.notDeleted = status !== 200;\r\n                    this.deleted = status === 200;\r\n            });\r\n        }\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\DetailedAnswerSubtask.tsx",["790","791"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserSubtaskAnswerGroupReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\TaskReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\SubtaskReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\CommentedEntityType.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\TrackerByDayViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserWordReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\WordTrainingType.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\CourseRole.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\Tarif.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\WordsOfADay\\UserAnswers.tsx",["792","793","794"],"﻿import React, { Component } from 'react';\r\nimport { observer } from \"mobx-react\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { UserViewModel } from \"../../../Typings/viewModels/UserViewModel\";\r\nimport { Accordion } from \"react-bootstrap\";\r\nimport UserAnswer from \"./UserAnswer\";\r\nimport { UserWordViewModel } from \"../../../Typings/viewModels/UserWordViewModel\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport {renderSpinner} from \"../../../functions/renderSpinner\";\r\n\r\nclass IUserAnswersProps {\r\n    store: RootStore;\r\n    wordId: number;\r\n}\r\n\r\n@observer\r\nclass UserAnswers extends Component<IUserAnswersProps> {\r\n    userWords: UserWordViewModel[] = new Array<UserWordViewModel>();\r\n    loaded: boolean = false;\r\n\r\n    constructor() {\r\n        //@ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            userWords: observable,\r\n            loaded: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.getUserWords();\r\n    }\r\n\r\n    renderUsers(users: UserViewModel[]) {\r\n        return(\r\n            <Accordion defaultActiveKey=\"0\">\r\n                {users.map((user) => {\r\n                    let userWord = this.getUserWord(user.id);\r\n                    if(userWord.userId !== this.props.store.userStore.currentUser.id) {\r\n                        return <UserAnswer user={user} store={this.props.store} userWord={userWord}/>\r\n                    }\r\n                })}\r\n            </Accordion>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let users = this.getUsers();\r\n        return (\r\n            <div className=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n                {this.loaded && this.renderUsers(users)}\r\n                {!this.loaded && renderSpinner()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getUsers(): UserViewModel[] {\r\n        let usersByCourse = this.props.store.courseStore.usersByCourse;\r\n        return this.props.store.userStore.users\r\n            .filter(u => usersByCourse\r\n                .map(uc => uc.userId)\r\n                .includes(u.id));\r\n    }\r\n\r\n    getUserWords() {\r\n        this.props.store.wordStore.getAnswersToWordOfADayByWord(this.props.wordId, this.props.store.courseStore.choosenCourse.id)\r\n            .then((userWords) => {\r\n                this.userWords = userWords;\r\n                this.loaded = true;\r\n            });\r\n    }\r\n\r\n    getUserWord(userId: number): UserWordViewModel {\r\n        let userWord = this.userWords.filter(uw => uw.userId === userId)[0];\r\n        if(userWord === undefined) {\r\n            userWord = new UserWordViewModel();\r\n            userWord.userId = userId;\r\n        }\r\n        \r\n        return userWord;\r\n    }\r\n}\r\n\r\nexport default UserAnswers;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\WordsOfADay\\AnswerToWordOfADay.tsx",["795","796","797"],"﻿import React, { Component } from \"react\";\r\nimport { CardFooter, Button, Input, Alert } from \"reactstrap\";\r\nimport WordStore from \"../../../stores/WordStore\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { UserWordReadModel } from \"../../../Typings/readModels/UserWordReadModel\";\r\nimport { mapToUserAnswerReadModel } from \"../../../functions/mapper\";\r\n\r\nclass IAnswerToWordOfADayProps {\r\n    wordId: number;\r\n    wordStore: WordStore;\r\n    userId: number;\r\n}\r\n\r\n@observer\r\nclass AnswerToWordOfADay extends Component <IAnswerToWordOfADayProps> {\r\n    userAnswer: UserWordReadModel = new UserWordReadModel();\r\n    addOrUpdateAnswer: boolean;\r\n    notSaved: boolean;\r\n\r\n    constructor(props: IAnswerToWordOfADayProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            userAnswer: observable,\r\n            addOrUpdateAnswer: observable,\r\n            notSaved: observable\r\n        });\r\n        this.setUserAnswerProgress();\r\n    }\r\n\r\n    setUserAnswerProgress() {\r\n        this.props.wordStore.getUserWordsProgress(this.props.wordId, this.props.userId)\r\n            .then((userAnswer) => {\r\n                this.userAnswer = mapToUserAnswerReadModel(userAnswer);\r\n                this.userAnswer.userId = this.props.userId;\r\n                this.userAnswer.word.id = this.props.wordId;\r\n                this.addOrUpdateAnswer = userAnswer.answer === \"\" || userAnswer.answer === null;\r\n            });\r\n    }\r\n\r\n    renderCautions() {\r\n        setTimeout(() => {\r\n            this.notSaved = false;\r\n        }, 6000);\r\n        return(\r\n            <>\r\n                {this.notSaved && <Alert color=\"danger\">Не удалось сохранить ответ:( Попробуйте ещё раз!</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderAddOrUpdateAnswerInput() {\r\n        if(this.addOrUpdateAnswer) {\r\n            return (\r\n                <>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Input type=\"text\"\r\n                            style={{width: \"85%\"}}\r\n                            value={this.userAnswer.answer} onChange={(e) => this.handleChange(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Button\r\n                            outline color=\"success\"\r\n                            style={{width: \"80%\", marginTop: \"10px\", marginBottom: \"10px\"}}\r\n                            onClick={() => this.handleSave()}>\r\n                            Сохранить\r\n                        </Button>\r\n                    </div>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderAnswer() {\r\n        if(!this.addOrUpdateAnswer) {\r\n            return (\r\n                <div className=\"row justify-content-center\"\r\n                    onClick={() => this.addOrUpdateAnswerToggle()}>\r\n                    {this.userAnswer.answer}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderCautions()}\r\n                {this.renderAnswer()}\r\n                {this.renderAddOrUpdateAnswerInput()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    addOrUpdateAnswerToggle() {\r\n        this.addOrUpdateAnswer = !this.addOrUpdateAnswer;\r\n    }\r\n\r\n    handleChange(event: React.FormEvent<HTMLInputElement>) {\r\n        this.userAnswer.answer = event.currentTarget.value;\r\n    }\r\n\r\n    handleSave() {\r\n        this.props.wordStore.addOrUpdateUserWordProgress(this.userAnswer)\r\n            .then((status) => {\r\n                this.notSaved = status !== 200;\r\n                if(status === 200) {\r\n                    this.setUserAnswerProgress();\r\n                }\r\n            });\r\n    }\r\n}\r\n\r\nexport default AnswerToWordOfADay;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Comments\\CommentGroup.tsx",["798","799"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Lesson\\Material.tsx",["800","801","802","803"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserSubtaskReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserSubtaskAnswerGroupViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\SubtaskViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\SubtaskAnswerGroupViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserCourseViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\renderLoadingProgress.tsx",["804"],"﻿import React from \"react\";\r\nimport { Spinner } from 'reactstrap';\r\n\r\nexport function renderLoadingProgress() {\r\n    return(\r\n        <Spinner color=\"primary\"/>\r\n    );\r\n}\r\n\r\n//<Progress striped bar color=\"warning\" value=\"80\"/>","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\SubtaskUploadWindow.tsx",["805"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\LessonPage.tsx",["806"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { Tab, Nav } from \"react-bootstrap\";\r\nimport { Card, CardHeader } from \"reactstrap\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { Lesson } from \"../../Common/Lesson/Lesson\";\r\nimport HomeworkPage from \"../Homework/HomeworkPage\";\r\nimport { CompletedHomeworkPage } from \"../CompletedHomework/CompletedHomeworkPage\";\r\n\r\nclass ILessonPageProps {\r\n    store: RootStore;\r\n    lessonActive: boolean;\r\n}\r\n\r\n@observer\r\nexport class LessonPage extends Component<ILessonPageProps> {\r\n    lessonActive: boolean;\r\n    homeworkActive: boolean;\r\n    completedHomeworkActive: boolean;\r\n    constructor(props: ILessonPageProps) {\r\n        super(props);\r\n        makeObservable(this, {\r\n            lessonActive: observable,\r\n            homeworkActive: observable,\r\n            completedHomeworkActive: observable\r\n        });\r\n        this.lessonActive = this.props.lessonActive;\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ILessonPageProps>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        if(prevProps.lessonActive !== this.props.lessonActive) {\r\n            this.lessonActive = this.props.lessonActive;\r\n        }\r\n    }\r\n\r\n    renderLessonMenu() {\r\n        return(\r\n            <Tab.Container defaultActiveKey=\"lesson\">\r\n                <Card>\r\n                    <CardHeader className=\"menuHeader\">\r\n                        <Nav variant=\"pills\" defaultActiveKey=\"lesson\">\r\n                            <Nav.Item>\r\n                                <Nav.Link\r\n                                     className=\"nav-link\"\r\n                                     eventKey=\"lesson\"\r\n                                     onClick={() => this.toggleMenu(\"lesson\")}>\r\n                                    УРОК\r\n                                </Nav.Link>\r\n                            </Nav.Item>\r\n                            <Nav.Item>\r\n                                <Nav.Link\r\n                                     className=\"nav-link\"\r\n                                     eventKey=\"homework\"\r\n                                     onClick={() => this.toggleMenu(\"homework\")}>\r\n                                    ДОМАШНЯЯ РАБОТА\r\n                                </Nav.Link>\r\n                            </Nav.Item>\r\n                            <Nav.Item>\r\n                                <Nav.Link\r\n                                     className=\"nav-link\"\r\n                                     eventKey=\"completedHomework\"\r\n                                     onClick={() => this.toggleMenu(\"completedHomework\")}>\r\n                                    ВЫПОЛНЕННЫЕ ДОМАШНИЕ РАБОТЫ\r\n                                </Nav.Link>\r\n                            </Nav.Item>\r\n                        </Nav>\r\n                    </CardHeader>\r\n                    {this.lessonActive && <Lesson store={this.props.store}/>}\r\n                    {this.homeworkActive && <HomeworkPage store={this.props.store}/>}\r\n                    {this.completedHomeworkActive && <CompletedHomeworkPage store={this.props.store}/>}\r\n                </Card>\r\n            </Tab.Container>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderLessonMenu()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    toggleMenu(turnOn: string) {\r\n        this.lessonActive = false;\r\n        this.homeworkActive = false;\r\n        this.completedHomeworkActive = false;\r\n        if(turnOn === \"lesson\") {\r\n            this.lessonActive = true;\r\n        } else if (turnOn === \"homework\") {\r\n            this.homeworkActive = true;\r\n        } else if (turnOn === \"completedHomework\") {\r\n            this.completedHomeworkActive = true;\r\n        }\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\AddOrUpdateNewLesson.tsx",["807","808","809"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { LessonViewModel } from \"../../../Typings/viewModels/LessonViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Alert, Button, Modal, ModalBody, ModalFooter, ModalHeader, Label, Input } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport Calendar from \"react-calendar\";\r\n\r\nclass IAddOrUpdateNewLessonProps {\r\n    store: RootStore;\r\n    edit: boolean = false;\r\n    lessonToEdit: LessonViewModel | undefined;\r\n    cancelEdit: any | undefined;\r\n}\r\n\r\n@observer\r\nexport class AddOrUpdateNewLesson extends Component<IAddOrUpdateNewLessonProps> {\r\n    addOrUpdateNewLesson: boolean;\r\n    id: number = 0;\r\n    order: number = 0;\r\n    description: string = \"\";\r\n    startDate: Date | Date[] = new Date();\r\n    expireDate: Date | Date[] = new Date();\r\n    notSaved: boolean = false;\r\n    saved: boolean = false;\r\n    name: string = \"\";\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addOrUpdateNewLesson: observable,\r\n            id: observable,\r\n            order: observable,\r\n            description: observable,\r\n            startDate: observable,\r\n            expireDate: observable,\r\n            notSaved: observable,\r\n            saved: observable,\r\n            name: observable,\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if(this.props.edit) {\r\n            this.fillData()\r\n        } else {\r\n            this.order = this.props.store.lessonStore.lessonsByChoosenCourse.length + 1;\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<IAddOrUpdateNewLessonProps>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        if (prevProps.lessonToEdit !== this.props.lessonToEdit) {\r\n            this.fillData()\r\n        }\r\n    }\r\n\r\n    fillData() {\r\n        let lessonToEdit = this.props.lessonToEdit;\r\n        if(lessonToEdit !== undefined) {\r\n            this.id = lessonToEdit.id;\r\n            this.order = lessonToEdit.order;\r\n            this.description = lessonToEdit.description;\r\n            this.startDate = lessonToEdit.startDate;\r\n            this.expireDate = lessonToEdit.expireDate;\r\n            this.name = lessonToEdit.name;\r\n        }\r\n        this.addOrUpdateNewLesson = true;\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <Button \r\n                style={{marginTop: \"10px\"}}\r\n                outline color=\"primary\" onClick={() => this.addOrUpdateNewLessonToggle()}>\r\n                Добавить урок\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderLessonDescription() {\r\n        return(\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">\r\n                    Введите описание урока\r\n                </Label>\r\n                <Input\r\n                    style={{width: \"70%\"}}\r\n                    value={this.description}\r\n                    onChange={(e) => this.inputDescription(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderNameDescription() {\r\n        return(\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">\r\n                    Введите название урока\r\n                </Label>\r\n                <Input\r\n                    style={{width: \"70%\"}}\r\n                    value={this.name}\r\n                    onChange={(e) => this.inputName(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderOrderInput() {\r\n        return(\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">Напишите номер урока(в каком порядке он должен идти)</Label>\r\n                <Input\r\n                    style={{width: \"70%\"}}\r\n                    value={this.order}\r\n                    onChange={(e) => this.inputOrder(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderStartDateInput() {\r\n        const startDate = typeof this.startDate === \"string\" ? new Date(this.startDate) : this.startDate;\r\n        return(\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">Выберите дату начала доступа урока</Label>\r\n                <Calendar\r\n                    value={startDate}\r\n                    onChange={(date) => this.inputDate(date, \"startDate\")}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderEndDateInput() {\r\n        const expireDate = typeof this.expireDate === \"string\" ? new Date(this.expireDate) : this.expireDate;\r\n        return(\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">Выберите дату окончания доступа урока</Label>\r\n                <Calendar\r\n                    value={expireDate}\r\n                    onChange={(date) => this.inputDate(date, \"expireDate\")}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderSaveLessonButton() {\r\n        return (\r\n            <Button\r\n                outline color=\"success\"\r\n                style={{width: \"80%\", marginBottom: \"10px\"}}\r\n                onClick={() => this.addOrUpdateLesson()}>\r\n                Сохранить урок\r\n            </Button>\r\n        );\r\n    }\r\n \r\n    renderCautions() {\r\n        return (\r\n            <>\r\n                {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и урок не сохранился</Alert>}\r\n                {this.saved && <Alert color=\"success\">Урок успешно сохранился!</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderBody() {\r\n        return(\r\n            <>\r\n                <ModalBody>\r\n                    {this.renderCautions()}\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderNameDescription()}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderLessonDescription()}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderOrderInput()}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-6\">\r\n                            {this.renderStartDateInput()}\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            {this.renderEndDateInput()}\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderSaveLessonButton()}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderCancelButton() {\r\n        return(\r\n            <Button\r\n                color=\"primary\"\r\n                onClick={() => this.addOrUpdateNewLessonToggle()}>\r\n                ОТМЕНИТЬ\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderAddOrUpdateNewLessonWindow() {\r\n        return(\r\n            <Modal\r\n                centered={true}\r\n                size=\"lg\"\r\n                isOpen={this.addOrUpdateNewLesson}\r\n                toggle={() => this.addOrUpdateNewLessonToggle()}\r\n            >\r\n                <i style={{marginLeft: '96%', width: '2%'}}\r\n                   onClick={() => this.addOrUpdateNewLessonToggle()}\r\n                   className=\"fa fa-window-close fa-2x\" aria-hidden=\"true\"/>\r\n            <div className=\"row justify-content-center\">\r\n                УРОК\r\n            </div>\r\n                {this.renderBody()}\r\n                {this.renderCancelButton()}\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.addOrUpdateNewLesson && this.renderAddOrUpdateNewLessonWindow()}\r\n                {!this.props.edit && this.renderButton()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    addOrUpdateNewLessonToggle() {\r\n        if(this.props.cancelEdit !== undefined) {\r\n            this.props.cancelEdit();\r\n        }\r\n        this.initialState();\r\n        this.addOrUpdateNewLesson = !this.addOrUpdateNewLesson;\r\n    }\r\n\r\n    initialState() {\r\n        this.id = 0;\r\n        this.order = 0;\r\n        this.description = \"\";\r\n        this.startDate = new Date();\r\n        this.expireDate = new Date();\r\n        this.notSaved = false;\r\n        this.saved = false;\r\n        this.name = \"\";\r\n    }\r\n\r\n    addOrUpdateLesson() {\r\n        let courseId = this.props.store.courseStore.choosenCourse.id;\r\n        this.props.store.lessonStore\r\n            .addOrUpdateLesson(this.id, this.order, courseId, this.name, this.description, this.startDate, this.expireDate)\r\n            .then((status) => {\r\n                this.notSaved = status !== 200;\r\n                this.saved = status === 200;\r\n        });\r\n    }\r\n\r\n    inputDescription(event: React.FormEvent<HTMLInputElement>) {\r\n        this.description = event.currentTarget.value;\r\n    }\r\n\r\n    inputOrder(event: React.FormEvent<HTMLInputElement>) {\r\n        this.order = Number(event.currentTarget.value);\r\n    }\r\n\r\n    inputName(event: React.FormEvent<HTMLInputElement>) {\r\n        this.name = event.currentTarget.value;\r\n    }\r\n\r\n    inputDate(date: Date | Date[], dateType: string) {\r\n        if(dateType === \"startDate\") {\r\n            this.startDate = date;\r\n        } else if(dateType === \"expireDate\") {\r\n            this.expireDate = date;\r\n        }\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\TaskUploadWindow.tsx",["810","811"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Participants\\Participants.tsx",["812"],"﻿import React, { Component } from 'react';\r\nimport { observer } from \"mobx-react\";\r\nimport { UserViewModel } from \"../../../Typings/viewModels/UserViewModel\";\r\nimport CourseStore from \"../../../stores/CourseStore\";\r\nimport Participant from \"./Participant\";\r\nimport { Table } from \"reactstrap\";\r\n\r\nclass IParticipantsProps {\r\n    participants: UserViewModel[];\r\n    deleteParticipant: any;\r\n    courseStore: CourseStore;\r\n}\r\n\r\n@observer\r\nclass Participants extends Component<IParticipantsProps>{\r\n    renderParticipants(participants: UserViewModel[]) {\r\n        return(\r\n            <Table style={{marginTop: \"10px\"}}>\r\n                <thead>\r\n                    <tr>\r\n                        <td>ФИО</td>\r\n                        <td>Тариф</td>\r\n                        <td>Дата начала</td>\r\n                        <td>Дата окончания</td>\r\n                        <td>Роль</td>\r\n                        <td></td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {participants.map(p => {\r\n                    return(\r\n                        <Participant key={p.id} participant={p} courseStore={this.props.courseStore} deleteParticipant={this.props.deleteParticipant} />\r\n                    );\r\n                })}\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderParticipants(this.props.participants)}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Participants;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentGroupViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\WordsOfADay\\UserAnswer.tsx",["813"],"﻿import React, {Component} from 'react';\r\nimport { Accordion, Card, Button as ButtonR } from \"react-bootstrap\";\r\nimport { Button } from \"reactstrap\";\r\nimport {observer} from \"mobx-react\";\r\nimport { UserViewModel } from \"../../../Typings/viewModels/UserViewModel\";\r\nimport { UserWordViewModel } from \"../../../Typings/viewModels/UserWordViewModel\";\r\nimport {makeObservable, observable} from \"mobx\";\r\nimport CommentGroup from \"../../Common/Comments/CommentGroup\";\r\nimport { CommentedEntityType } from \"../../../Typings/enums/CommentedEntityType\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { Alert } from \"reactstrap\";\r\n\r\nclass IUserAnswerProps {\r\n    userWord: UserWordViewModel;\r\n    user: UserViewModel;\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass UserAnswer extends Component<IUserAnswerProps> {\r\n    showComments: boolean;\r\n    answersLoaded: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            showComments: observable,\r\n            answersLoaded: observable\r\n        });\r\n    }\r\n\r\n    renderUserName(user: UserViewModel) {\r\n        return (\r\n            <Accordion.Toggle style={{width: \"90%\"}} as={ButtonR} variant=\"link\" eventKey={user.id.toString()} onClick={() => this.setState({userAnswersLoad: true})}>\r\n                <span>{user.firstName + ' ' + user.lastName}</span>\r\n            </Accordion.Toggle>\r\n        );\r\n    }\r\n\r\n    renderComments() {\r\n        return(\r\n            <>\r\n                <Button\r\n                    outline color=\"primary\"\r\n                    onClick={() => this.toggleComments()}>\r\n                    Комментарии\r\n                </Button>\r\n                {this.showComments && \r\n                <CommentGroup commentedEntityType={CommentedEntityType.WordOfADay} commentedEntityId={this.props.userWord.wordId} userId={this.props.user.id} onToggle={this.toggleComments} store={this.props.store}/>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderAnswer(answer: UserWordViewModel) {\r\n        if (answer !== undefined) {\r\n            return(\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-8\">\r\n                        <span>{answer.answer}</span>\r\n                    </div>\r\n                    <div className=\"col-4\">\r\n                        {this.renderComments()}\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <Alert color=\"primary\">Пользователь пока не добавил ответ.</Alert>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Card>\r\n                <Card.Header style={{backgroundColor: 'white'}}>\r\n                    {this.renderUserName(this.props.user)}\r\n                </Card.Header>\r\n                <Accordion.Collapse eventKey={this.props.user.id.toString()}>\r\n                    <Card.Body>\r\n                        {this.renderAnswer(this.props.userWord)}\r\n                    </Card.Body>\r\n                </Accordion.Collapse>\r\n            </Card>\r\n        );\r\n    }\r\n\r\n    toggleComments = () => {\r\n        this.showComments = !this.showComments;\r\n    }\r\n}\r\n\r\nexport default UserAnswer;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\CommentReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Comments\\Comment.tsx",["814","815"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\getTooltipText.tsx",["816"],"﻿import { SubtaskType } from \"../Typings/enums/SubtaskType\";\r\n\r\nexport function getTooltipText(subtaskType: SubtaskType): string {\r\n    if(subtaskType === SubtaskType.FillGaps) {\r\n        return \"Подсказка\\n \\\"Поставить слово в нужную форму\\\": запишите в квадратных скобках начальную форму слова, слэш, затем правильную форму слова и пометьте её знаком *. Если есть несколько правильных вариантов ответа. то их надо записать все через слэш со знаком *.\\n Пример:\\n 1. I [to play/am playing*] tennis.\\n 2. This flower is [better] than that. \\n 3. I [do not/did not*/didn't*]\";\r\n    } else if(subtaskType === SubtaskType.RightVerbForm) {\r\n        return \"Подсказка\\n Запишите варианты ответа в квадратных скобках и отметьте правильный вариант звездочкой *.\\n Если вы хотите добавить объяснение, то напишите его в скобочках сразу после ответа\\n Пример:\\n They [is(because bla-bla-bla)/are/was/were*(it is right!because...)] on holiday yesterday\";\r\n    } else if(subtaskType === SubtaskType.InsertWordsIntoGaps) {\r\n        return \"Подсказка\\n Напишите текст. Слова и фразы, которые нужно вставить из рамочки, заключите в квадратные скобки.\\n Пример:\\n I like [walking] in the park in the morning.\";\r\n    }\r\n    return \"\";\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\subtaskTranspiler.tsx",["817"],"﻿import { TaskType } from \"../Typings/enums/TaskType\";\r\nimport { SubtaskType } from \"../Typings/enums/SubtaskType\";\r\n\r\nexport function subtaskTranspiler(taskType: TaskType): SubtaskType {\r\n    if(taskType === TaskType.InsertWordsIntoGaps) {\r\n        return SubtaskType.InsertWordsIntoGaps;\r\n    } else if(taskType === TaskType.LoadFile) {\r\n        return SubtaskType.LoadFile;\r\n    } else if(taskType === TaskType.LoadAudio) {\r\n        return SubtaskType.LoadAudio;\r\n    } else if(taskType === TaskType.FillGaps) {\r\n        return SubtaskType.FillGaps;\r\n    } else if(taskType === TaskType.RightVerbForm) {\r\n        return SubtaskType.RightVerbForm;\r\n    } else if(taskType === TaskType.DetailedAnswer) {\r\n        return SubtaskType.DetailedAnswer;\r\n    }\r\n    return SubtaskType.FillGaps;//todo: плохо, лучше сделать None\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\getTaskTitle.tsx",["818"],"﻿import {TaskType} from \"../Typings/enums/TaskType\";\r\n\r\nexport function getTaskTitle(taskType: TaskType): string {\r\n    if(taskType === TaskType.DetailedAnswer) {\r\n        return \"Задание на загрузку развёрнутого ответа\";\r\n    } else if(taskType === TaskType.RightVerbForm) {\r\n        return \"Выбрать правильную форму глагола\";\r\n    } else if(taskType === TaskType.LoadAudio) {\r\n        return \"Задание на загрузку аудио\";\r\n    } else if(taskType === TaskType.FillGaps) {\r\n        return \"Задание на заполнение пропусков\";\r\n    } else if(taskType === TaskType.LoadFile) {\r\n        return \"Задание на загрузку файла\";\r\n    } else if(taskType === TaskType.InsertWordsIntoGaps) {\r\n        return \"Задание расставить слова в нужном порядке\";\r\n    }\r\n    return \"\";\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Participants\\Participant.tsx",["819","820","821","822"],"﻿import React, {Component} from 'react';\r\nimport {observer} from \"mobx-react\";\r\nimport {UserViewModel} from \"../../../Typings/viewModels/UserViewModel\";\r\nimport CourseStore from \"../../../stores/CourseStore\";\r\nimport {UserCourseViewModel} from \"../../../Typings/viewModels/UserCourseViewModel\";\r\nimport { Button, Dropdown, DropdownItem, DropdownMenu, DropdownToggle, Label, Alert } from \"reactstrap\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport Calendar from \"react-calendar\";\r\nimport {UserRole} from \"../../../Typings/enums/UserRole\";\r\nimport {Tarif} from \"../../../Typings/enums/Tarif\";\r\nimport {translateCourseRole, translateRole, translateTarif} from \"../../../functions/translater\";\r\nimport {renderSpinner} from \"../../../functions/renderSpinner\";\r\nimport {CourseRole} from \"../../../Typings/enums/CourseRole\";\r\n\r\nclass IParticipantProps {\r\n    participant: UserViewModel;\r\n    courseStore: CourseStore;\r\n    deleteParticipant: any;\r\n}\r\n\r\n@observer\r\nclass Participant extends Component<IParticipantProps> {\r\n    notSaved: boolean;\r\n    saved: boolean;\r\n    details: UserCourseViewModel;\r\n    roleMenuOpen: boolean;\r\n    tarifOpen: boolean;\r\n    startDateCalendarOpen: boolean;\r\n    expireDateCalendarOpen: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            notSaved: observable,\r\n            saved: observable,\r\n            details: observable,\r\n            roleMenuOpen: observable,\r\n            tarifOpen: observable,\r\n            startDateCalendarOpen: observable,\r\n            expireDateCalendarOpen: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        let participant = this.props.participant;\r\n        this.details = this.props.courseStore.usersByCourse.filter(u => u.userId === participant.id)[0];\r\n    }\r\n\r\n    renderWarnings() {\r\n        setTimeout(() => {\r\n            this.notSaved = false;\r\n            this.saved = false;\r\n        }, 6000);\r\n        return(\r\n            <>\r\n                {this.notSaved && <Alert color=\"danger\">Не удалось обновить данные</Alert>}\r\n                {this.saved && <Alert color=\"success\">Данные успешно обновились :)</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderParticipant(participant: UserViewModel, details: UserCourseViewModel) {\r\n        return(\r\n            <>\r\n                {this.renderWarnings()}\r\n                <tr>\r\n                    <td>\r\n                        {this.renderName(participant)}\r\n                    </td>\r\n                    <td>\r\n                        {this.renderTarif(details)}\r\n                    </td>\r\n                    <td>\r\n                        {this.renderStartDate(details)}\r\n                    </td>\r\n                    <td>\r\n                        {this.renderEndDate(details)}\r\n                    </td>\r\n                    <td>\r\n                        {this.renderRole(details)}\r\n                    </td>\r\n                    <td>\r\n                        {this.renderControlButtons()}\r\n                    </td>\r\n                </tr>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderName(participant: UserViewModel) {\r\n        return(\r\n            <Label>\r\n                {participant.lastName} {participant.firstName}\r\n            </Label>\r\n        );\r\n    }\r\n\r\n    renderTarif(details: UserCourseViewModel) {\r\n        return(\r\n            <Dropdown isOpen={this.tarifOpen} toggle={() => this.toggleTarif()}>\r\n                <DropdownToggle caret>\r\n                    {translateTarif(details.tarif)}\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem key=\"1\" id=\"1\" onClick={() => this.tarifChange(Tarif.Usual)}>{translateTarif(Tarif.Usual)}</DropdownItem>\r\n                    <DropdownItem key=\"2\" id=\"2\" onClick={() => this.tarifChange(Tarif.Premium)}>{translateTarif(Tarif.Premium)}</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderStartDate(details: UserCourseViewModel) {\r\n        return (\r\n            <>\r\n                {<span onClick={() => this.toggleStartDate()}>{new Date(details.startDate).toLocaleDateString()}</span>}\r\n                {this.startDateCalendarOpen && this.renderStartDateCalendar(details)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderStartDateCalendar(details: UserCourseViewModel) {\r\n        const startDate = typeof details.startDate === \"string\" ? new Date(details.startDate) : details.startDate;\r\n        return(\r\n            <Calendar\r\n                minDate={new Date(2021)}\r\n                value={startDate}\r\n                onChange={(date) => this.inputDate(date, \"startDate\")}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderEndDate(details: UserCourseViewModel) {\r\n        return (\r\n            <>\r\n                {<span onClick={() => this.toggleExpireDate()}>{new Date(details.expireDate).toLocaleDateString()}</span>}\r\n                {this.expireDateCalendarOpen && this.renderEndDateCalendar(details)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderEndDateCalendar(details: UserCourseViewModel) {\r\n        const expireDate = typeof details.expireDate === \"string\" ? new Date(details.expireDate) : details.expireDate;\r\n        return(\r\n            <Calendar\r\n                minDate={new Date(2021)}\r\n                value={expireDate}\r\n                onChange={(date) => this.inputDate(date, \"expireDate\")}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderRole(details: UserCourseViewModel) {\r\n        return(\r\n            <Dropdown isOpen={this.roleMenuOpen} toggle={() => this.toggleRoleMenu()}>\r\n                <DropdownToggle caret>\r\n                    {translateCourseRole(details.courseRole)}\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem id=\"1\" key=\"1\" onClick={() => this.roleCourseChange(CourseRole.Teacher)}>{translateCourseRole(CourseRole.Teacher)}</DropdownItem>\r\n                    <DropdownItem id=\"2\" key=\"2\" onClick={() => this.roleCourseChange(CourseRole.Pupil)}>{translateCourseRole(CourseRole.Pupil)}</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderControlButtons() {\r\n        return(\r\n            <>\r\n                <Button \r\n                    style={{width: \"90%\", marginBottom: \"4px\"}}\r\n                    outline color=\"success\" onClick={() => this.updateParticipant()}>\r\n                    СОХРАНИТЬ\r\n                </Button>\r\n                <Button\r\n                    style={{width: \"90%\", marginBottom: \"10px\"}}\r\n                    outline color=\"danger\" onClick={() => this.props.deleteParticipant(this.props.participant)}>\r\n                    УДАЛИТЬ\r\n                </Button>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.details !== undefined && this.renderParticipant(this.props.participant, this.details)}\r\n                {this.details === undefined && renderSpinner()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    updateParticipant() {\r\n        this.props.courseStore.addOrUpdateUserCourseDetails(this.details)\r\n            .then((status) => {\r\n                this.notSaved = status !== 200;\r\n                this.saved = status === 200;\r\n            });\r\n    }\r\n\r\n    inputDate(date: Date | Date[], type: string) {\r\n        if (type === \"startDate\") {\r\n            this.details.startDate = date;\r\n        } else if (type === \"expireDate\") {\r\n            this.details.expireDate = date;\r\n        }\r\n    }\r\n\r\n    toggleRoleMenu() {\r\n        this.roleMenuOpen = !this.roleMenuOpen;\r\n    }\r\n\r\n    roleCourseChange(role: CourseRole) {\r\n        this.details.courseRole = role;\r\n    }\r\n\r\n    tarifChange(tarif: Tarif) {\r\n        this.details.tarif = tarif;\r\n    }\r\n\r\n    toggleTarif() {\r\n        this.tarifOpen = !this.tarifOpen;\r\n    }\r\n\r\n    toggleStartDate() {\r\n        this.startDateCalendarOpen = !this.startDateCalendarOpen;\r\n    }\r\n\r\n    toggleExpireDate() {\r\n        this.expireDateCalendarOpen = !this.expireDateCalendarOpen;\r\n    }\r\n}\r\n\r\nexport default Participant;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\CompletedHomeworkPage.tsx",["823","824"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { Accordion } from \"react-bootstrap\";\r\nimport UserHomework from \"./UserHomework\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nclass ICompletedHomeworkPageProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nexport class CompletedHomeworkPage extends Component<ICompletedHomeworkPageProps> {\r\n    renderUsers() {\r\n       let users = this.props.store.courseStore.usersByCourse;\r\n        return(\r\n            <Accordion defaultActiveKey=\"0\">\r\n                {users.map((user) => {\r\n                    if(user.userId !== this.props.store.userStore.currentUser.id) {\r\n                        return <UserHomework userId={user.userId} store={this.props.store} />\r\n                    }\r\n                })}\r\n            </Accordion>\r\n        );\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderUsers()}\r\n            </>\r\n        );\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Homework\\HomeworkPage.tsx",["825"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskType.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\UserHomework.tsx",["826"],"﻿import React, { Component } from 'react';\r\nimport { Accordion, Button } from \"react-bootstrap\";\r\nimport { Card, CardHeader, CardBody } from \"reactstrap\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport CompletedHomework from './CompletedHomework';\r\n\r\nclass IUserHomeworkProps {\r\n    store: RootStore;\r\n    userId: number;\r\n}\r\n\r\n@observer\r\nclass UserHomework extends Component<IUserHomeworkProps> {\r\n    loadHomework: boolean = false;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            loadHomework: observable\r\n        });\r\n    }\r\n\r\n    loadHomeworkToggle() {\r\n        this.loadHomework = !this.loadHomework;\r\n    }\r\n\r\n    render() {\r\n        let user = this.props.store.userStore.users.find(u => u.id === this.props.userId);\r\n        return(\r\n            <>\r\n                {user !== undefined && <Card>\r\n                    <CardHeader style={{backgroundColor: 'white'}}>\r\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey={user.id.toString()} onClick={() => this.loadHomeworkToggle()}>\r\n                            <span>{user.firstName + ' ' + user.lastName}</span>\r\n                        </Accordion.Toggle>\r\n                    </CardHeader>\r\n                    <Accordion.Collapse eventKey={user.id.toString()} key={user.id.toString()}>\r\n                        <CardBody>\r\n                            {this.loadHomework && <CompletedHomework userId={user.id} store={this.props.store} />}\r\n                        </CardBody>\r\n                    </Accordion.Collapse>\r\n                </Card>}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserHomework;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\TaskUpload.tsx",["827","828","829"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\CompletedHomework.tsx",["830"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport CompletedTask from \"./CompletedTask\";\r\nimport { TaskViewModel } from \"../../../Typings/viewModels/TaskViewModel\";\r\n\r\nclass ICompletedHomeworkProps {\r\n    store: RootStore;\r\n    userId: number;\r\n}\r\n\r\n@observer\r\nclass CompletedHomework  extends Component<ICompletedHomeworkProps> {\r\n    renderTasks(tasks: TaskViewModel[]) {\r\n        return(\r\n            <div className=\"container-fluid\">\r\n                {tasks.map((task) => {\r\n                    return (\r\n                        <>\r\n                            <div className=\"row\">\r\n                                <CompletedTask task={task} userId={this.props.userId} store={this.props.store} key={task.id}/>\r\n                            </div>\r\n                            <hr />\r\n                        </>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let tasks = this.props.store.taskStore.tasksByChoosenLesson;\r\n        return(\r\n            <>\r\n                {this.renderTasks(tasks)}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CompletedHomework;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\consts\\TaskTypeTranslater.tsx",["831"],"﻿import { TaskType } from \"../Typings/enums/TaskType\";\r\n\r\nexport const TaskTypeTranslater = [\r\n    { type: TaskType.InsertWordsIntoGaps, russian: 'Расставить слова в нужном порядке' },\r\n    { type: TaskType.RightVerbForm, russian: 'Выбрать правильную форму глагола' },\r\n    { type: TaskType.FillGaps, russian: 'Заполнить пропуски' },\r\n    { type: TaskType.LoadAudio, russian: 'Загрузить аудио' },\r\n    { type: TaskType.LoadFile, russian: 'Прикрепить файл' },\r\n    { type: TaskType.DetailedAnswer, russian: 'Развернутый ответ' }\r\n];","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\CompletedTask.tsx",["832"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\getFileName.tsx",["833"],"﻿export function getFileName(path: string): string {\r\n    let pathParts = path.split(\"/\");\r\n    let fileName = \"\";\r\n    if(pathParts.length > 0) {\r\n        fileName = pathParts[pathParts.length - 1];\r\n    } else {\r\n        fileName = path;\r\n    }\r\n\r\n    return fileName;\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\FeedbackStore.tsx",["834"],"﻿import { makeObservable, observable } from \"mobx\";\r\nimport { FeedbackReadModel } from \"../Typings/readModels/FeedbackReadModel\";\r\nimport {FeedbackViewModel} from \"../Typings/viewModels/FeedbackViewModel\";\r\n\r\nclass FeedbackStore {\r\n    feedbacks: FeedbackViewModel[] = new Array<FeedbackViewModel>();\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            feedbacks: observable\r\n        });\r\n    }\r\n\r\n    async getFeedbacks(old: boolean): Promise<number> {\r\n        const response = await fetch(\"getfeedbacks\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({old: old})\r\n        });\r\n        if(response.status === 200) {\r\n            this.feedbacks = await response.json();\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async addOrUpdateFeedback(feedback: FeedbackReadModel): Promise<number> {\r\n        const response = await fetch(\"addorupdatefeedback\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                id: feedback.id, name: feedback.name,\r\n                email: feedback.email, message: feedback.message, old: feedback.old})\r\n        });\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default FeedbackStore;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Feedback\\AddFeedbackWindow.tsx",["835","836","837","838","839","840","841","842","843","844","845","846","847"],"﻿import React, { Component } from \"react\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Button, Modal, ModalBody, Alert, Label, Input } from \"reactstrap\";\r\nimport {FeedbackReadModel} from \"../../../Typings/readModels/FeedbackReadModel\";\r\nimport FeedbackStore from \"../../../stores/FeedbackStore\";\r\n\r\nclass IAddFeedbackProps {\r\n    feedbackStore: FeedbackStore;\r\n}\r\n\r\n@observer\r\nclass AddFeedbackWindow extends Component<IAddFeedbackProps> {\r\n    addFeedback: boolean;\r\n    name: string = \"\";\r\n    email: string = \"\";\r\n    message: string = \"\";\r\n    notSaved: boolean;\r\n    saved: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addFeedback: observable,\r\n            name: observable,\r\n            email: observable,\r\n            message: observable,\r\n            notSaved: observable,\r\n            saved: observable\r\n        });\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <i className=\"fa fa-commenting fa-2x\" aria-hidden=\"true\" onClick={() =>  this.addFeedbackToggle()}/>\r\n        );\r\n    }\r\n\r\n    renderCautions() {\r\n        return (\r\n            <>\r\n                {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и Ваш комментарий не сохранился. Попробуйте ещё раз!</Alert>}\r\n                {this.saved && <Alert color=\"success\">Спасибо за Ваш комментарий!</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    getLabel(type: FeedbackDataType): string {\r\n        let label = \"\";\r\n        if(type === FeedbackDataType.Name) {\r\n            label = \"Ваше имя:\"\r\n        } else if(type === FeedbackDataType.Email) {\r\n            label = \"Email:\";\r\n        } else if(type === FeedbackDataType.Message) {\r\n            label = \"Комментарий:\";\r\n        }\r\n\r\n        return label;\r\n    }\r\n\r\n    getDefaultInputValue(type: FeedbackDataType): string {\r\n        let value = \"\";\r\n        if(type === FeedbackDataType.Name) {\r\n            value = this.name;\r\n        } else if(type === FeedbackDataType.Email) {\r\n            value = this.email;\r\n        } else if(type === FeedbackDataType.Message) {\r\n            value = this.message;\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    renderDataInput(type: FeedbackDataType) {\r\n        let defaultValue = this.getDefaultInputValue(type);\r\n        return(\r\n            <>\r\n                <Label className=\"inputLabel\" align=\"center\">\r\n                    {this.getLabel(type)}\r\n                </Label>\r\n                <Input\r\n                    style={{width: \"70%\"}}\r\n                    defaultValue={defaultValue}\r\n                    onChange={(e) => this.inputData(e, type)}/>\r\n            </>\r\n        );\r\n    }\r\n    \r\n    renderBody() {\r\n        return(\r\n            <>\r\n                <ModalBody>\r\n                    {this.renderCautions()}\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderDataInput(FeedbackDataType.Name)}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderDataInput(FeedbackDataType.Email)}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderDataInput(FeedbackDataType.Message)}\r\n                    </div>\r\n                </ModalBody>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderSaveButton()}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderSaveButton() {\r\n        return (\r\n            <Button\r\n                outline color=\"success\"\r\n                style={{width: \"80%\", marginBottom: \"10px\"}}\r\n                onClick={() => this.saveFeedback()}>\r\n                Сохранить\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderCancelButton() {\r\n        return(\r\n            <Button\r\n                color=\"primary\"\r\n                onClick={() => this.addFeedbackToggle()}>\r\n                ОТМЕНИТЬ\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderAddFeedbackWindow() {\r\n        return(\r\n            <Modal\r\n                centered={true}\r\n                size=\"lg\"\r\n                isOpen={this.addFeedback}\r\n                toggle={() => this.addFeedbackToggle()}\r\n            >\r\n                <i style={{marginLeft: '96%', width: '2%'}}\r\n                   onClick={() => this.addFeedbackToggle()}\r\n                   className=\"fa fa-window-close\" aria-hidden=\"true\"/>\r\n                <div className=\"row justify-content-center\">\r\n                    ОБРАТНАЯ СВЯЗЬ\r\n                </div>\r\n                {this.renderBody()}\r\n                {this.renderCancelButton()}\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"row justify-content-center\" style={{marginTop: \"15px\"}}>\r\n                {this.addFeedback && this.renderAddFeedbackWindow()}\r\n                {this.renderButton()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    addFeedbackToggle() {\r\n        this.addFeedback = !this.addFeedback;\r\n    }\r\n\r\n    inputData(event: React.FormEvent<HTMLInputElement>, type: FeedbackDataType) {\r\n        if(type === FeedbackDataType.Name) {\r\n            this.name = event.currentTarget.value;\r\n        } else if(type === FeedbackDataType.Email) {\r\n            this.email = event.currentTarget.value;\r\n        } else if(type === FeedbackDataType.Message) {\r\n            this.message = event.currentTarget.value;\r\n        }\r\n    }\r\n\r\n    saveFeedback() {\r\n        let feedbackReadModel = new FeedbackReadModel();\r\n        feedbackReadModel.email = this.email;\r\n        feedbackReadModel.name = this.name;\r\n        feedbackReadModel.message = this.message;\r\n        this.props.feedbackStore\r\n            .addOrUpdateFeedback(feedbackReadModel)\r\n            .then((status) => {\r\n                this.notSaved = status !== 200;\r\n                this.saved = status === 200;\r\n            });\r\n    }\r\n}\r\n\r\nenum FeedbackDataType {\r\n    Name,\r\n    Email,\r\n    Message\r\n}\r\nexport default AddFeedbackWindow;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\FeedbackReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Feedback\\FeedbackPage.tsx",["848","849","850","851","852","853"],"﻿import React, { Component } from \"react\";\r\nimport {makeObservable, observable, toJS} from \"mobx\";\r\nimport FeedbackStore from \"../../../stores/FeedbackStore\";\r\nimport {  Card, Alert, NavItem, NavLink } from \"reactstrap\";\r\nimport { Nav } from \"react-bootstrap\";\r\nimport {observer} from \"mobx-react\";\r\nimport {FeedbackViewModel} from \"../../../Typings/viewModels/FeedbackViewModel\";\r\nimport Feedback from \"../../Common/Feedback/Feedback\";\r\n\r\nclass IFeedbackPageProps {\r\n    feedbackStore: FeedbackStore;\r\n}\r\n\r\n@observer\r\nclass FeedbackPage extends Component<IFeedbackPageProps> {\r\n    showNew: boolean;\r\n    showOld: boolean;\r\n    activeKey: string;\r\n\r\n    constructor(props: IFeedbackPageProps) {\r\n        super(props);\r\n        this.props.feedbackStore.getFeedbacks(false);\r\n        makeObservable(this, {\r\n            showNew: observable,\r\n            showOld: observable\r\n        })\r\n    }\r\n\r\n    renderMenu() {\r\n        return (\r\n            <Card>\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row justify-content-center\">\r\n                        <Nav variant=\"tabs\" defaultActiveKey=\"new\" activeKey={this.activeKey} style={{marginTop: \"10px\"}}>\r\n                            <Nav.Item>\r\n                                <Nav.Link\r\n                                    eventKey=\"new\"\r\n                                    className=\"nav-link\" style={{fontSize: \"1.5em\"}}\r\n                                    onClick={() =>  this.feedbackToggle(ShowType.New)}\r\n                                >Новые</Nav.Link>\r\n                            </Nav.Item>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    eventKey=\"old\"\r\n                                    className=\"nav-link\"\r\n                                    style={{fontSize: \"1.5em\"}}\r\n                                    onClick={() =>  this.feedbackToggle(ShowType.Old)}>Старые</NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                    </div>\r\n                 </div>\r\n            </Card>\r\n        );\r\n    }\r\n\r\n    renderFeedbacks(feedbacks: FeedbackViewModel[]) {\r\n        if(feedbacks.length === 0) {\r\n            return (\r\n                <Alert style={{marginTop: \"10px\"}}>\r\n                    Пока нет никаких фидбеков.\r\n                </Alert>\r\n            );\r\n        } else {\r\n            return(\r\n                <>\r\n                    {feedbacks.map((f) => {\r\n                        return (\r\n                            <Feedback key={f.id} feedback={f} feedbackStore={this.props.feedbackStore} old={this.showOld}/>\r\n                        )})}\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.renderMenu()}\r\n                {this.renderFeedbacks(this.props.feedbackStore.feedbacks)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    feedbackToggle(type: ShowType) {\r\n        if(type === ShowType.New) {\r\n            this.showNew = true;\r\n            this.showOld = false;\r\n            this.activeKey = \"new\";\r\n            this.props.feedbackStore.getFeedbacks(false);\r\n        } else if(type === ShowType.Old) {\r\n            this.showNew = false;\r\n            this.showOld = true;\r\n            this.activeKey = \"old\";\r\n            this.props.feedbackStore.getFeedbacks(true);\r\n        }\r\n    }\r\n}\r\n\r\nenum ShowType {\r\n    New, \r\n    Old\r\n}\r\n\r\nexport default FeedbackPage;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Feedback\\Feedback.tsx",["854"],"﻿import React, { Component } from \"react\";\r\nimport { FeedbackViewModel } from \"../../../Typings/viewModels/FeedbackViewModel\";\r\nimport { observer } from \"mobx-react\";\r\nimport FeedbackStore from \"../../../stores/FeedbackStore\";\r\nimport { Button } from \"reactstrap\";\r\nimport { mapToFeedbackReadModel } from \"../../../functions/mapper\";\r\n\r\nclass IFeedbackProps {\r\n    feedback: FeedbackViewModel;\r\n    feedbackStore: FeedbackStore;\r\n    old: boolean;\r\n}\r\n\r\n@observer\r\nclass Feedback extends Component<IFeedbackProps> {\r\n    renderFeedback(feedback: FeedbackViewModel) {\r\n        return (\r\n            <div className=\"row\" style={{border: \"1px solid black\", marginTop: \"5px\", marginBottom: \"5px\", marginLeft: \"5px\"}}>\r\n                <div className=\"col-lg-3 col-md-3 col-sm-12\">\r\n                    <span><b>{feedback.name} {feedback.email}</b></span>\r\n                </div>\r\n                <div className=\"col-lg-7 col-md-7 col-sm-12\" style={{marginBottom: \"10px\", marginTop: \"10px\"}}>\r\n                    <span style={{fontSize: \"0.8em\"}}>{feedback.message}</span>\r\n                </div>\r\n                <div className=\"col-lg-2 col-md-2 col-sm-12\" style={{marginBottom: \"10px\", marginTop: \"10px\"}}>\r\n                    <Button\r\n                        style={{marginLeft: \"10px\"}}\r\n                        outline color=\"secondary\"\r\n                        onClick={() => this.addOrUpdateFeedback(feedback)}>\r\n                        {this.getButtonName()}\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderFeedback(this.props.feedback)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    addOrUpdateFeedback(feedback: FeedbackViewModel) {\r\n        let feedbackReadModel = mapToFeedbackReadModel(feedback, !this.props.old);\r\n        this.props.feedbackStore\r\n            .addOrUpdateFeedback(feedbackReadModel)\r\n            .then(() => {\r\n                this.props.feedbackStore.getFeedbacks(this.props.old)\r\n            });\r\n    }\r\n\r\n    getButtonName(): string {\r\n        let name = \"\";\r\n        if(this.props.old) {\r\n            name = \"Разархивировать\";\r\n        } else {\r\n            name = \"Архивировать\"\r\n        }\r\n        \r\n        return name;\r\n    }\r\n}\r\n\r\nexport default Feedback;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\TaskFromPoolUpload.tsx",["855","856","857"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Progress\\CourseProgress.tsx",["858","859"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Progress\\LessonProgress.tsx",["860","861","862","863","864"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tags\\TagsControlWindow.tsx",["865"],"﻿import React, { Component } from \"react\";\r\nimport TagStore from \"../../../stores/TagStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { TagViewModel } from \"../../../Typings/viewModels/TagViewModel\";\r\nimport { Button, Modal, ModalBody, Input } from \"reactstrap\";\r\nimport {TagReadModel} from \"../../../Typings/readModels/TagReadModel\";\r\n\r\nclass ITagsControlWindowProps {\r\n    tagStore: TagStore;\r\n    toggle: any;\r\n}\r\n\r\n@observer\r\nclass TagsControlWindow extends Component<ITagsControlWindowProps> {\r\n    notDeleted: boolean;\r\n    notAdded: boolean;\r\n    addTagInputOpen: boolean;\r\n    newTagName: string = \"\";\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            notDeleted: observable,\r\n            notAdded: observable,\r\n            addTagInputOpen: observable,\r\n            newTagName: observable,\r\n        });\r\n    }\r\n\r\n    renderTags(tags: TagViewModel[]) {\r\n        return (\r\n            <>\r\n                {tags.map((tag) => {\r\n                    return(\r\n                        <div className=\"row justify-content-center\" key={tag.id}>\r\n                            <i style={{marginLeft: '88%', width: '2%'}}\r\n                               onClick={() => this.deleteTag(tag.id)}\r\n                               className=\"fa fa-window-close fa-2x\" aria-hidden=\"true\"/>\r\n                            <Button\r\n                                outline color=\"secondary\"\r\n                                style={{width: \"70%\", fontSize: \"0.8em\"}}>\r\n                                {tag.name}\r\n                            </Button>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderAddTagButton() {\r\n        return (\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row justify-content-center\">\r\n                    <Button\r\n                        style={{marginTop: \"10px\"}}\r\n                        outline color=\"secondary\"\r\n                        onClick={() => this.addTagInputOpenToggle()}>\r\n                        Добавить тег\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderAddTagInput() {\r\n        return(\r\n            <>\r\n                <i style={{marginLeft: '96%', width: '2%'}}\r\n                   onClick={() => this.addTagInputOpenToggle()}\r\n                   className=\"fa fa-window-close fa-2x\" aria-hidden=\"true\"/>\r\n                <Input style={{width: \"90%\"}}\r\n                    placeholder=\"Введите название тега\"\r\n                    onChange={(e) => this.handleChange(e)}/>\r\n                    <div className=\"container\">\r\n                        <div className=\"row justify-content-center\">\r\n                            <Button\r\n                                color=\"success\"\r\n                                style={{marginTop: \"10px\", width: \"80%\"}}\r\n                                onClick={() => this.saveNewTag()}>\r\n                                Сохранить\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderAddTagWindow() {\r\n        return (\r\n            <>\r\n                {!this.addTagInputOpen && this.renderAddTagButton()}\r\n                {this.addTagInputOpen && this.renderAddTagInput()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderBody() {\r\n        return(\r\n            <ModalBody>\r\n                {this.renderTags(this.props.tagStore.tags)}\r\n                {this.renderAddTagWindow()}\r\n            </ModalBody>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Modal\r\n                centered={true}\r\n                size=\"lg\"\r\n                isOpen={true}\r\n                toggle={() => this.props.toggle()}\r\n            >\r\n                <i style={{marginLeft: '93%', width: '2%'}}\r\n                   onClick={() => this.props.toggle()}\r\n                   className=\"fa fa-window-close fa-2x\" aria-hidden=\"true\"/>\r\n                <div className=\"row justify-content-center\" style={{fontSize: \"1.3em\"}}>\r\n                   ТЕГИ\r\n                </div>\r\n                {this.renderBody()}\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    deleteTag(tagId: number) {\r\n        this.props.tagStore.deleteTag(tagId)\r\n            .then((status) => {\r\n                this.notDeleted = status !== 200;\r\n            });\r\n    }\r\n\r\n    saveNewTag() {\r\n        let tagReadModel = new TagReadModel();\r\n        tagReadModel.name = this.newTagName;\r\n        this.props.tagStore\r\n            .addOrUpdateTag(tagReadModel)\r\n            .then((status) => {\r\n                this.notAdded = status !== 200;\r\n                if(status === 200) {\r\n                    this.newTagName = \"\";\r\n                    this.addTagInputOpen = false;\r\n                }\r\n            });\r\n    }\r\n\r\n    addTagInputOpenToggle() {\r\n        this.addTagInputOpen = !this.addTagInputOpen;\r\n    }\r\n\r\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        this.newTagName = event.currentTarget.value;\r\n    }\r\n}\r\n\r\nexport default TagsControlWindow;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\TagStore.tsx",["866"],"﻿import { makeObservable, observable } from \"mobx\";\r\nimport { TagViewModel } from \"../Typings/viewModels/TagViewModel\";\r\nimport {TagReadModel} from \"../Typings/readModels/TagReadModel\";\r\n\r\nclass TagStore {\r\n    tags: TagViewModel[] = new Array<TagViewModel>();\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            tags: observable\r\n        });\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        this.getTags();\r\n    }\r\n\r\n    async getTags() {\r\n        const response = await fetch(\"/gettags\");\r\n        if(response.status === 200) {\r\n            this.tags = await response.json();\r\n        }\r\n    }\r\n\r\n    async deleteTag(tagId: number): Promise<number> {\r\n        const response = await fetch(\"/deletetag\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                id: tagId\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            this.getTags();\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async addOrUpdateTag(tag: TagReadModel): Promise<number> {\r\n        const response = await fetch(\"/addorupdatetag\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                id: tag.id, name: tag.name\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            this.getTags();\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default TagStore;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\CommentStore.tsx",["867"],{"ruleId":"868","replacedBy":"869"},{"ruleId":"870","replacedBy":"871"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"876"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"877"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"878"},{"ruleId":"879","severity":1,"message":"880","line":2,"column":37,"nodeType":"881","messageId":"882","endLine":2,"endColumn":41},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"883"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"884"},{"ruleId":"879","severity":1,"message":"880","line":1,"column":37,"nodeType":"881","messageId":"882","endLine":1,"endColumn":41},{"ruleId":"879","severity":1,"message":"885","line":5,"column":9,"nodeType":"881","messageId":"882","endLine":5,"endColumn":21},{"ruleId":"879","severity":1,"message":"886","line":9,"column":9,"nodeType":"881","messageId":"882","endLine":9,"endColumn":40},{"ruleId":"879","severity":1,"message":"887","line":59,"column":15,"nodeType":"881","messageId":"882","endLine":59,"endColumn":23},{"ruleId":"879","severity":1,"message":"888","line":268,"column":13,"nodeType":"881","messageId":"882","endLine":268,"endColumn":18},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"889"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"890"},{"ruleId":"879","severity":1,"message":"880","line":2,"column":37,"nodeType":"881","messageId":"882","endLine":2,"endColumn":41},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"891"},{"ruleId":"879","severity":1,"message":"887","line":31,"column":15,"nodeType":"881","messageId":"882","endLine":31,"endColumn":23},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"892"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"893"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"894"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"895"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"896"},{"ruleId":"879","severity":1,"message":"897","line":3,"column":110,"nodeType":"881","messageId":"882","endLine":3,"endColumn":120},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"898"},{"ruleId":"879","severity":1,"message":"899","line":5,"column":38,"nodeType":"881","messageId":"882","endLine":5,"endColumn":44},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"900"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"901"},{"ruleId":"879","severity":1,"message":"880","line":6,"column":37,"nodeType":"881","messageId":"882","endLine":6,"endColumn":41},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"902"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"903"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"904"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"905"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"906"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"907"},{"ruleId":"879","severity":1,"message":"880","line":5,"column":37,"nodeType":"881","messageId":"882","endLine":5,"endColumn":41},{"ruleId":"908","severity":1,"message":"909","line":59,"column":36,"nodeType":"910","messageId":"911","endLine":59,"endColumn":38},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"912"},{"ruleId":"879","severity":1,"message":"913","line":34,"column":13,"nodeType":"881","messageId":"882","endLine":34,"endColumn":20},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"914"},{"ruleId":"879","severity":1,"message":"880","line":5,"column":38,"nodeType":"881","messageId":"882","endLine":5,"endColumn":42},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"915"},{"ruleId":"879","severity":1,"message":"880","line":4,"column":37,"nodeType":"881","messageId":"882","endLine":4,"endColumn":41},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"916"},{"ruleId":"879","severity":1,"message":"880","line":6,"column":37,"nodeType":"881","messageId":"882","endLine":6,"endColumn":41},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"917"},{"ruleId":"879","severity":1,"message":"880","line":9,"column":9,"nodeType":"881","messageId":"882","endLine":9,"endColumn":13},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"918"},{"ruleId":"879","severity":1,"message":"880","line":4,"column":37,"nodeType":"881","messageId":"882","endLine":4,"endColumn":41},{"ruleId":"879","severity":1,"message":"919","line":5,"column":24,"nodeType":"881","messageId":"882","endLine":5,"endColumn":32},{"ruleId":"879","severity":1,"message":"897","line":5,"column":34,"nodeType":"881","messageId":"882","endLine":5,"endColumn":44},{"ruleId":"879","severity":1,"message":"920","line":16,"column":35,"nodeType":"881","messageId":"882","endLine":16,"endColumn":53},{"ruleId":"921","severity":1,"message":"922","line":110,"column":53,"nodeType":"923","messageId":"875","endLine":110,"endColumn":55},{"ruleId":"921","severity":1,"message":"922","line":189,"column":67,"nodeType":"923","messageId":"875","endLine":189,"endColumn":69},{"ruleId":"921","severity":1,"message":"922","line":195,"column":38,"nodeType":"923","messageId":"875","endLine":195,"endColumn":40},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"924"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"925"},{"ruleId":"879","severity":1,"message":"880","line":6,"column":37,"nodeType":"881","messageId":"882","endLine":6,"endColumn":41},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"926"},{"ruleId":"879","severity":1,"message":"880","line":6,"column":45,"nodeType":"881","messageId":"882","endLine":6,"endColumn":49},{"ruleId":"927","severity":1,"message":"928","line":71,"column":47,"nodeType":"881","messageId":"929","endLine":71,"endColumn":58},{"ruleId":"927","severity":1,"message":"928","line":72,"column":47,"nodeType":"881","messageId":"929","endLine":72,"endColumn":58},{"ruleId":"927","severity":1,"message":"928","line":73,"column":47,"nodeType":"881","messageId":"929","endLine":73,"endColumn":58},{"ruleId":"927","severity":1,"message":"928","line":74,"column":47,"nodeType":"881","messageId":"929","endLine":74,"endColumn":58},{"ruleId":"927","severity":1,"message":"928","line":75,"column":47,"nodeType":"881","messageId":"929","endLine":75,"endColumn":58},{"ruleId":"927","severity":1,"message":"928","line":121,"column":21,"nodeType":"881","messageId":"929","endLine":121,"endColumn":32},{"ruleId":"927","severity":1,"message":"928","line":123,"column":28,"nodeType":"881","messageId":"929","endLine":123,"endColumn":39},{"ruleId":"927","severity":1,"message":"928","line":125,"column":28,"nodeType":"881","messageId":"929","endLine":125,"endColumn":39},{"ruleId":"927","severity":1,"message":"928","line":127,"column":28,"nodeType":"881","messageId":"929","endLine":127,"endColumn":39},{"ruleId":"927","severity":1,"message":"928","line":129,"column":28,"nodeType":"881","messageId":"929","endLine":129,"endColumn":39},{"ruleId":"927","severity":1,"message":"928","line":139,"column":21,"nodeType":"881","messageId":"929","endLine":139,"endColumn":32},{"ruleId":"927","severity":1,"message":"928","line":141,"column":28,"nodeType":"881","messageId":"929","endLine":141,"endColumn":39},{"ruleId":"927","severity":1,"message":"928","line":143,"column":28,"nodeType":"881","messageId":"929","endLine":143,"endColumn":39},{"ruleId":"927","severity":1,"message":"928","line":145,"column":28,"nodeType":"881","messageId":"929","endLine":145,"endColumn":39},{"ruleId":"927","severity":1,"message":"928","line":147,"column":28,"nodeType":"881","messageId":"929","endLine":147,"endColumn":39},{"ruleId":"927","severity":1,"message":"928","line":155,"column":21,"nodeType":"881","messageId":"929","endLine":155,"endColumn":32},{"ruleId":"927","severity":1,"message":"928","line":157,"column":28,"nodeType":"881","messageId":"929","endLine":157,"endColumn":39},{"ruleId":"927","severity":1,"message":"928","line":159,"column":28,"nodeType":"881","messageId":"929","endLine":159,"endColumn":39},{"ruleId":"927","severity":1,"message":"928","line":161,"column":28,"nodeType":"881","messageId":"929","endLine":161,"endColumn":39},{"ruleId":"927","severity":1,"message":"928","line":163,"column":28,"nodeType":"881","messageId":"929","endLine":163,"endColumn":39},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"930"},{"ruleId":"879","severity":1,"message":"931","line":3,"column":43,"nodeType":"881","messageId":"882","endLine":3,"endColumn":54},{"ruleId":"879","severity":1,"message":"932","line":3,"column":56,"nodeType":"881","messageId":"882","endLine":3,"endColumn":67},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"933"},{"ruleId":"879","severity":1,"message":"880","line":7,"column":9,"nodeType":"881","messageId":"882","endLine":7,"endColumn":13},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"934"},{"ruleId":"879","severity":1,"message":"931","line":15,"column":5,"nodeType":"881","messageId":"882","endLine":15,"endColumn":16},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"935"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"936"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"937"},{"ruleId":"879","severity":1,"message":"880","line":6,"column":37,"nodeType":"881","messageId":"882","endLine":6,"endColumn":41},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"938"},{"ruleId":"879","severity":1,"message":"880","line":15,"column":10,"nodeType":"881","messageId":"882","endLine":15,"endColumn":14},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"939"},{"ruleId":"879","severity":1,"message":"880","line":4,"column":37,"nodeType":"881","messageId":"882","endLine":4,"endColumn":41},{"ruleId":"879","severity":1,"message":"940","line":12,"column":9,"nodeType":"881","messageId":"882","endLine":12,"endColumn":22},{"ruleId":"921","severity":1,"message":"941","line":100,"column":50,"nodeType":"923","messageId":"875","endLine":100,"endColumn":52},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"942"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"943"},{"ruleId":"879","severity":1,"message":"880","line":6,"column":37,"nodeType":"881","messageId":"882","endLine":6,"endColumn":41},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"944"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"945"},{"ruleId":"921","severity":1,"message":"922","line":42,"column":63,"nodeType":"923","messageId":"875","endLine":42,"endColumn":65},{"ruleId":"921","severity":1,"message":"922","line":43,"column":61,"nodeType":"923","messageId":"875","endLine":43,"endColumn":63},{"ruleId":"921","severity":1,"message":"922","line":77,"column":47,"nodeType":"923","messageId":"875","endLine":77,"endColumn":49},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"946"},{"ruleId":"921","severity":1,"message":"922","line":41,"column":63,"nodeType":"923","messageId":"875","endLine":41,"endColumn":65},{"ruleId":"921","severity":1,"message":"922","line":42,"column":61,"nodeType":"923","messageId":"875","endLine":42,"endColumn":63},{"ruleId":"921","severity":1,"message":"922","line":76,"column":47,"nodeType":"923","messageId":"875","endLine":76,"endColumn":49},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"947"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"948"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"949"},{"ruleId":"879","severity":1,"message":"880","line":6,"column":37,"nodeType":"881","messageId":"882","endLine":6,"endColumn":41},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"950"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"951"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"952"},{"ruleId":"879","severity":1,"message":"880","line":9,"column":9,"nodeType":"881","messageId":"882","endLine":9,"endColumn":13},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"953"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"954"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"955"},{"ruleId":"879","severity":1,"message":"880","line":5,"column":37,"nodeType":"881","messageId":"882","endLine":5,"endColumn":41},{"ruleId":"879","severity":1,"message":"956","line":10,"column":9,"nodeType":"881","messageId":"882","endLine":10,"endColumn":22},{"ruleId":"957","severity":1,"message":"958","line":87,"column":115,"nodeType":"959","endLine":87,"endColumn":130},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"960"},{"ruleId":"879","severity":1,"message":"880","line":4,"column":37,"nodeType":"881","messageId":"882","endLine":4,"endColumn":41},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"961"},{"ruleId":"879","severity":1,"message":"880","line":4,"column":37,"nodeType":"881","messageId":"882","endLine":4,"endColumn":41},{"ruleId":"879","severity":1,"message":"962","line":7,"column":9,"nodeType":"881","messageId":"882","endLine":7,"endColumn":29},{"ruleId":"879","severity":1,"message":"963","line":11,"column":9,"nodeType":"881","messageId":"882","endLine":11,"endColumn":40},{"ruleId":"921","severity":1,"message":"922","line":202,"column":62,"nodeType":"923","messageId":"875","endLine":202,"endColumn":64},{"ruleId":"921","severity":1,"message":"922","line":203,"column":54,"nodeType":"923","messageId":"875","endLine":203,"endColumn":56},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"964"},{"ruleId":"879","severity":1,"message":"880","line":5,"column":37,"nodeType":"881","messageId":"882","endLine":5,"endColumn":41},{"ruleId":"879","severity":1,"message":"956","line":10,"column":9,"nodeType":"881","messageId":"882","endLine":10,"endColumn":22},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"965"},{"ruleId":"879","severity":1,"message":"966","line":2,"column":26,"nodeType":"881","messageId":"882","endLine":2,"endColumn":31},{"ruleId":"879","severity":1,"message":"880","line":4,"column":37,"nodeType":"881","messageId":"882","endLine":4,"endColumn":41},{"ruleId":"879","severity":1,"message":"963","line":11,"column":9,"nodeType":"881","messageId":"882","endLine":11,"endColumn":40},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"967"},{"ruleId":"879","severity":1,"message":"932","line":4,"column":25,"nodeType":"881","messageId":"882","endLine":4,"endColumn":36},{"ruleId":"879","severity":1,"message":"968","line":7,"column":10,"nodeType":"881","messageId":"882","endLine":7,"endColumn":28},{"ruleId":"879","severity":1,"message":"880","line":8,"column":9,"nodeType":"881","messageId":"882","endLine":8,"endColumn":13},{"ruleId":"879","severity":1,"message":"969","line":9,"column":8,"nodeType":"881","messageId":"882","endLine":9,"endColumn":19},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"970"},{"ruleId":"879","severity":1,"message":"880","line":5,"column":37,"nodeType":"881","messageId":"882","endLine":5,"endColumn":41},{"ruleId":"879","severity":1,"message":"971","line":66,"column":13,"nodeType":"881","messageId":"882","endLine":66,"endColumn":29},{"ruleId":"879","severity":1,"message":"972","line":71,"column":24,"nodeType":"881","messageId":"882","endLine":71,"endColumn":34},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"973"},{"ruleId":"957","severity":1,"message":"958","line":79,"column":111,"nodeType":"959","endLine":79,"endColumn":126},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"974"},{"ruleId":"879","severity":1,"message":"880","line":8,"column":37,"nodeType":"881","messageId":"882","endLine":8,"endColumn":41},{"ruleId":"908","severity":1,"message":"909","line":37,"column":35,"nodeType":"910","messageId":"911","endLine":37,"endColumn":37},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"975"},{"ruleId":"879","severity":1,"message":"897","line":2,"column":10,"nodeType":"881","messageId":"882","endLine":2,"endColumn":20},{"ruleId":"879","severity":1,"message":"880","line":4,"column":37,"nodeType":"881","messageId":"882","endLine":4,"endColumn":41},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"976"},{"ruleId":"879","severity":1,"message":"880","line":4,"column":37,"nodeType":"881","messageId":"882","endLine":4,"endColumn":41},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"977"},{"ruleId":"978","severity":1,"message":"979","line":45,"column":21,"nodeType":"980","endLine":47,"endColumn":70},{"ruleId":"978","severity":1,"message":"979","line":64,"column":21,"nodeType":"980","endLine":64,"endColumn":70},{"ruleId":"957","severity":1,"message":"958","line":73,"column":115,"nodeType":"959","endLine":73,"endColumn":130},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"981"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"982"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"983"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"984"},{"ruleId":"879","severity":1,"message":"931","line":5,"column":43,"nodeType":"881","messageId":"882","endLine":5,"endColumn":54},{"ruleId":"879","severity":1,"message":"932","line":5,"column":56,"nodeType":"881","messageId":"882","endLine":5,"endColumn":67},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"985"},{"ruleId":"879","severity":1,"message":"880","line":5,"column":37,"nodeType":"881","messageId":"882","endLine":5,"endColumn":41},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"986"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"987"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"988"},{"ruleId":"879","severity":1,"message":"880","line":3,"column":37,"nodeType":"881","messageId":"882","endLine":3,"endColumn":41},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"989"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"990"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"991"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"992"},{"ruleId":"879","severity":1,"message":"880","line":7,"column":37,"nodeType":"881","messageId":"882","endLine":7,"endColumn":41},{"ruleId":"879","severity":1,"message":"993","line":9,"column":9,"nodeType":"881","messageId":"882","endLine":9,"endColumn":17},{"ruleId":"879","severity":1,"message":"994","line":11,"column":30,"nodeType":"881","messageId":"882","endLine":11,"endColumn":43},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"995"},{"ruleId":"908","severity":1,"message":"909","line":17,"column":35,"nodeType":"910","messageId":"911","endLine":17,"endColumn":37},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"996"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"997"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"998"},{"ruleId":"879","severity":1,"message":"932","line":3,"column":36,"nodeType":"881","messageId":"882","endLine":3,"endColumn":47},{"ruleId":"879","severity":1,"message":"999","line":8,"column":10,"nodeType":"881","messageId":"882","endLine":8,"endColumn":23},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"1000"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"1001"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"1002"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"1003"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"1004"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"1005"},{"ruleId":"927","severity":1,"message":"1006","line":51,"column":21,"nodeType":"881","messageId":"929","endLine":51,"endColumn":37},{"ruleId":"927","severity":1,"message":"1006","line":53,"column":28,"nodeType":"881","messageId":"929","endLine":53,"endColumn":44},{"ruleId":"927","severity":1,"message":"1006","line":55,"column":28,"nodeType":"881","messageId":"929","endLine":55,"endColumn":44},{"ruleId":"927","severity":1,"message":"1006","line":64,"column":21,"nodeType":"881","messageId":"929","endLine":64,"endColumn":37},{"ruleId":"927","severity":1,"message":"1006","line":66,"column":28,"nodeType":"881","messageId":"929","endLine":66,"endColumn":44},{"ruleId":"927","severity":1,"message":"1006","line":68,"column":28,"nodeType":"881","messageId":"929","endLine":68,"endColumn":44},{"ruleId":"927","severity":1,"message":"1006","line":96,"column":47,"nodeType":"881","messageId":"929","endLine":96,"endColumn":63},{"ruleId":"927","severity":1,"message":"1006","line":99,"column":47,"nodeType":"881","messageId":"929","endLine":99,"endColumn":63},{"ruleId":"927","severity":1,"message":"1006","line":102,"column":47,"nodeType":"881","messageId":"929","endLine":102,"endColumn":63},{"ruleId":"927","severity":1,"message":"1006","line":167,"column":21,"nodeType":"881","messageId":"929","endLine":167,"endColumn":37},{"ruleId":"927","severity":1,"message":"1006","line":169,"column":28,"nodeType":"881","messageId":"929","endLine":169,"endColumn":44},{"ruleId":"927","severity":1,"message":"1006","line":171,"column":28,"nodeType":"881","messageId":"929","endLine":171,"endColumn":44},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"1007"},{"ruleId":"879","severity":1,"message":"880","line":2,"column":37,"nodeType":"881","messageId":"882","endLine":2,"endColumn":41},{"ruleId":"927","severity":1,"message":"1008","line":39,"column":73,"nodeType":"881","messageId":"929","endLine":39,"endColumn":81},{"ruleId":"927","severity":1,"message":"1008","line":47,"column":73,"nodeType":"881","messageId":"929","endLine":47,"endColumn":81},{"ruleId":"927","severity":1,"message":"1008","line":85,"column":21,"nodeType":"881","messageId":"929","endLine":85,"endColumn":29},{"ruleId":"927","severity":1,"message":"1008","line":90,"column":28,"nodeType":"881","messageId":"929","endLine":90,"endColumn":36},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"1009"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"1010"},{"ruleId":"879","severity":1,"message":"880","line":2,"column":37,"nodeType":"881","messageId":"882","endLine":2,"endColumn":41},{"ruleId":"908","severity":1,"message":"909","line":106,"column":36,"nodeType":"910","messageId":"911","endLine":106,"endColumn":38},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"1011"},{"ruleId":"879","severity":1,"message":"1012","line":5,"column":10,"nodeType":"881","messageId":"882","endLine":5,"endColumn":19},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"1013"},{"ruleId":"879","severity":1,"message":"880","line":5,"column":37,"nodeType":"881","messageId":"882","endLine":5,"endColumn":41},{"ruleId":"879","severity":1,"message":"1012","line":6,"column":9,"nodeType":"881","messageId":"882","endLine":6,"endColumn":18},{"ruleId":"879","severity":1,"message":"1014","line":6,"column":20,"nodeType":"881","messageId":"882","endLine":6,"endColumn":26},{"ruleId":"879","severity":1,"message":"919","line":8,"column":28,"nodeType":"881","messageId":"882","endLine":8,"endColumn":36},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"1015"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"1016"},{"ruleId":"872","severity":1,"message":"873","line":1,"column":1,"nodeType":"874","messageId":"875","fix":"1017"},"no-native-reassign",["1018"],"no-negated-in-lhs",["1019"],"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"1020","text":"1021"},{"range":"1022","text":"1021"},{"range":"1023","text":"1021"},"@typescript-eslint/no-unused-vars","'toJS' is defined but never used.","Identifier","unusedVar",{"range":"1024","text":"1021"},{"range":"1025","text":"1021"},"'TagViewModel' is defined but never used.","'UserSubtaskAnswerGroupViewModel' is defined but never used.","'response' is assigned a value but never used.","'tasks' is assigned a value but never used.",{"range":"1026","text":"1021"},{"range":"1027","text":"1021"},{"range":"1028","text":"1021"},{"range":"1029","text":"1021"},{"range":"1030","text":"1021"},{"range":"1031","text":"1021"},{"range":"1032","text":"1021"},{"range":"1033","text":"1021"},"'CardFooter' is defined but never used.",{"range":"1034","text":"1021"},"'action' is defined but never used.",{"range":"1035","text":"1021"},{"range":"1036","text":"1021"},{"range":"1037","text":"1021"},{"range":"1038","text":"1021"},{"range":"1039","text":"1021"},{"range":"1040","text":"1021"},{"range":"1041","text":"1021"},{"range":"1042","text":"1021"},"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",{"range":"1043","text":"1021"},"'message' is assigned a value but never used.",{"range":"1044","text":"1021"},{"range":"1045","text":"1021"},{"range":"1046","text":"1021"},{"range":"1047","text":"1021"},{"range":"1048","text":"1021"},"'CardBody' is defined but never used.","'mapToUserReadModel' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression",{"range":"1049","text":"1021"},{"range":"1050","text":"1021"},{"range":"1051","text":"1021"},"@typescript-eslint/no-use-before-define","'TrackerType' was used before it was defined.","noUseBeforeDefine",{"range":"1052","text":"1021"},"'ModalFooter' is defined but never used.","'ModalHeader' is defined but never used.",{"range":"1053","text":"1021"},{"range":"1054","text":"1021"},{"range":"1055","text":"1021"},{"range":"1056","text":"1021"},{"range":"1057","text":"1021"},{"range":"1058","text":"1021"},{"range":"1059","text":"1021"},"'WordReadModel' is defined but never used.","Expected '!==' and instead saw '!='.",{"range":"1060","text":"1021"},{"range":"1061","text":"1021"},{"range":"1062","text":"1021"},{"range":"1063","text":"1021"},{"range":"1064","text":"1021"},{"range":"1065","text":"1021"},{"range":"1066","text":"1021"},{"range":"1067","text":"1021"},{"range":"1068","text":"1021"},{"range":"1069","text":"1021"},{"range":"1070","text":"1021"},{"range":"1071","text":"1021"},{"range":"1072","text":"1021"},{"range":"1073","text":"1021"},"'renderSpinner' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute",{"range":"1074","text":"1021"},{"range":"1075","text":"1021"},"'UserSubtaskReadModel' is defined but never used.","'UserSubtaskAnswerGroupReadModel' is defined but never used.",{"range":"1076","text":"1021"},{"range":"1077","text":"1021"},"'Input' is defined but never used.",{"range":"1078","text":"1021"},"'mapToTaskReadModel' is defined but never used.","'LessonStore' is defined but never used.",{"range":"1079","text":"1021"},"'defaultActiveKey' is assigned a value but never used.","'isDisabled' is assigned a value but never used.",{"range":"1080","text":"1021"},{"range":"1081","text":"1021"},{"range":"1082","text":"1021"},{"range":"1083","text":"1021"},{"range":"1084","text":"1021"},"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement",{"range":"1085","text":"1021"},{"range":"1086","text":"1021"},{"range":"1087","text":"1021"},{"range":"1088","text":"1021"},{"range":"1089","text":"1021"},{"range":"1090","text":"1021"},{"range":"1091","text":"1021"},{"range":"1092","text":"1021"},{"range":"1093","text":"1021"},{"range":"1094","text":"1021"},{"range":"1095","text":"1021"},{"range":"1096","text":"1021"},"'UserRole' is defined but never used.","'translateRole' is defined but never used.",{"range":"1097","text":"1021"},{"range":"1098","text":"1021"},{"range":"1099","text":"1021"},{"range":"1100","text":"1021"},"'TaskReadModel' is defined but never used.",{"range":"1101","text":"1021"},{"range":"1102","text":"1021"},{"range":"1103","text":"1021"},{"range":"1104","text":"1021"},{"range":"1105","text":"1021"},{"range":"1106","text":"1021"},"'FeedbackDataType' was used before it was defined.",{"range":"1107","text":"1021"},"'ShowType' was used before it was defined.",{"range":"1108","text":"1021"},{"range":"1109","text":"1021"},{"range":"1110","text":"1021"},"'Accordion' is defined but never used.",{"range":"1111","text":"1021"},"'Button' is defined but never used.",{"range":"1112","text":"1021"},{"range":"1113","text":"1021"},{"range":"1114","text":"1021"},"no-global-assign","no-unsafe-negation",[-1,0],"",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]]