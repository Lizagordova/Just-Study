[{"C:\\SuperSoft\\SuperSoft\\client\\src\\index.tsx":"1","C:\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts":"2","C:\\SuperSoft\\SuperSoft\\client\\src\\App.tsx":"3","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx":"4","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx":"5","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Main\\Main.tsx":"6","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyWorkPage.tsx":"7","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\ProjectsPage.tsx":"8","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\UsersPage.tsx":"9","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\ProjectStore.tsx":"10","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx":"11","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\CommentsStore.tsx":"12","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyTasks.tsx":"13","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskStatus.ts":"14","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddProject.tsx":"15","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Projects.tsx":"16","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Project.tsx":"17","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddUserToProject.tsx":"18","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\AddTask.tsx":"19","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Tasks.tsx":"20","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskRole.ts":"21","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\Users.tsx":"22","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentGroupViewModel.ts":"23","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserReadModel.ts":"24","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\Role.ts":"25","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\User.tsx":"26","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\AddUser.tsx":"27","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\ProjectViewModel.ts":"28","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserViewModel.ts":"29","C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\renderSpinner.tsx":"30","C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\translater.tsx":"31","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Authorization.tsx":"32","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Task.tsx":"33","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\TaskViewModel.ts":"34","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskPriority.ts":"35","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskType.ts":"36","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\ProjectRole.ts":"37","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Comments\\Comments.tsx":"38","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Comments\\AddComment.tsx":"39","C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\formatDate.tsx":"40","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\index.tsx":"41","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts":"42","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\App.tsx":"43","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx":"44","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx":"45","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Authorization.tsx":"46","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\ProjectViewModel.ts":"47","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserReadModel.ts":"48","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentGroupViewModel.ts":"49","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserViewModel.ts":"50","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\formatDate.tsx":"51","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\renderSpinner.tsx":"52","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\translater.tsx":"53","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\TaskViewModel.ts":"54","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Registration.tsx":"55","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Main\\AdminMain.tsx":"56","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Main\\UserMain.tsx":"57","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\CourseStore.tsx":"58","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\LessonStore.tsx":"59","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CourseViewModel.ts":"60","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserCourseViewModel.ts":"61","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\LessonViewModel.ts":"62","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx":"63","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\UserRole.ts":"64","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserSubtaskViewModel.ts":"65","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\CommentStore.tsx":"66","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\WordStore.tsx":"67","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Courses\\CoursesPage.tsx":"68","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\DictionaryPage.tsx":"69","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Courses\\Course.tsx":"70","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Courses\\AddNewCourse.tsx":"71","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\LessonsMenu.tsx":"72","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\LessonPage.tsx":"73","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\CompletedHomeworkPage.tsx":"74","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Homework\\HomeworkPage.tsx":"75","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Lesson\\Lesson.tsx":"76","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\AddOrUpdateNewLesson.tsx":"77","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\UserHomework.tsx":"78","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Lesson\\Content.tsx":"79","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\ContentUpload.tsx":"80","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\TaskUpload.tsx":"81","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\Task.tsx":"82","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\CompletedHomework.tsx":"83","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\SubtaskType.ts":"84","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserTaskViewModel.ts":"85","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Lesson\\Material.tsx":"86","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\TaskReadModel.ts":"87","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\TaskUploadWindow.tsx":"88","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\DetailedAnswerSubtask.tsx":"89","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\TaskEdit.tsx":"90","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\FillGapsSubtask.tsx":"91","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\LoadAudioSubtask.tsx":"92","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\RightVerbFormSubtask.tsx":"93","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\LoadFileSubtask.tsx":"94","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\consts\\TaskTypeTranslater.tsx":"95","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\CompletedTask.tsx":"96","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserSubtaskReadModel.ts":"97","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\SubtaskReadModel.ts":"98","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\SubtaskViewModel.ts":"99","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserSubtaskAnswerGroupReadModel.ts":"100","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskType.ts":"101","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\SubtaskUploadWindow.tsx":"102","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\getTaskTitle.tsx":"103","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\subtaskTranspiler.tsx":"104","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\getTooltipText.tsx":"105","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\WordReadModel.ts":"106","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserWordViewModel.ts":"107","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\WordsTrainingPage.tsx":"108","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\Words.tsx":"109","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\Word.tsx":"110","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\WordViewModel.ts":"111","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\AddOrUpdateWord.tsx":"112","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\PartOfSpeech.ts":"113","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\transformer.tsx":"114","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\ExampleReadModel.ts":"115","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\WordTrainingType.ts":"116","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\Settings.tsx":"117","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\CompletingStatus.ts":"118","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\TrainingTypes\\ShowWordTraining.tsx":"119","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\TrainingStore.tsx":"120","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Training\\TrainingPage.tsx":"121","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Training\\TrainingContent.tsx":"122","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\Search.tsx":"123","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\TagReadModel.ts":"124","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserWordReadModel.ts":"125","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\TrainingTypes\\EnglishWordRussianMeaningTraining.tsx":"126","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\TrainingTypes\\RussianWordEnglishWordTraining.tsx":"127","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\shuffleWords.tsx":"128","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\AddSubtask.tsx":"129","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Users\\UsersPage.tsx":"130","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Users\\Users.tsx":"131","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Participants\\ParticipantsPage.tsx":"132","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\WordsOfADay\\WordsOfADay.tsx":"133","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Participants\\Participants.tsx":"134","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Participants\\Participant.tsx":"135","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\WordsOfADay\\WordOfADay.tsx":"136","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\CommentedEntityType.ts":"137","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\WordsOfADay\\AnswerToWordOfADay.tsx":"138","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\WordsOfADay\\AddOrUpdateWordOfADay.tsx":"139","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\WordsOfADay\\UserAnswers.tsx":"140","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Comments\\CommentGroup.tsx":"141","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\WordOfADayReadModel.ts":"142","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentViewModel.ts":"143","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\CommentReadModel.ts":"144","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\mapper.tsx":"145","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\WordsOfADay\\UserAnswer.tsx":"146","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Comments\\Comment.tsx":"147","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\Tarif.ts":"148"},{"size":704,"mtime":1607787725088,"results":"149","hashOfConfig":"150"},{"size":425,"mtime":1607420618541,"results":"151","hashOfConfig":"150"},{"size":1092,"mtime":1608407182954,"results":"152","hashOfConfig":"150"},{"size":1207,"mtime":1608718514662,"results":"153","hashOfConfig":"150"},{"size":2405,"mtime":1608718319712,"results":"154","hashOfConfig":"150"},{"size":2558,"mtime":1608717577926,"results":"155","hashOfConfig":"150"},{"size":3541,"mtime":1608557262746,"results":"156","hashOfConfig":"150"},{"size":1005,"mtime":1608490669706,"results":"157","hashOfConfig":"150"},{"size":673,"mtime":1608370217935,"results":"158","hashOfConfig":"150"},{"size":3086,"mtime":1608720092368,"results":"159","hashOfConfig":"150"},{"size":2923,"mtime":1608619065455,"results":"160","hashOfConfig":"150"},{"size":1835,"mtime":1608718968831,"results":"161","hashOfConfig":"150"},{"size":4419,"mtime":1608733592437,"results":"162","hashOfConfig":"150"},{"size":256,"mtime":1608743121589,"results":"163","hashOfConfig":"150"},{"size":6943,"mtime":1608709178403,"results":"164","hashOfConfig":"150"},{"size":3253,"mtime":1608618370542,"results":"165","hashOfConfig":"150"},{"size":8107,"mtime":1608719005032,"results":"166","hashOfConfig":"150"},{"size":6274,"mtime":1608734357365,"results":"167","hashOfConfig":"150"},{"size":12974,"mtime":1608743524781,"results":"168","hashOfConfig":"150"},{"size":3481,"mtime":1608744419351,"results":"169","hashOfConfig":"150"},{"size":252,"mtime":1608743121581,"results":"170","hashOfConfig":"150"},{"size":1206,"mtime":1608370045224,"results":"171","hashOfConfig":"150"},{"size":366,"mtime":1608743121494,"results":"172","hashOfConfig":"150"},{"size":399,"mtime":1608743121559,"results":"173","hashOfConfig":"150"},{"size":290,"mtime":1608743121586,"results":"174","hashOfConfig":"150"},{"size":3678,"mtime":1608530673218,"results":"175","hashOfConfig":"150"},{"size":6700,"mtime":1608617434826,"results":"176","hashOfConfig":"150"},{"size":376,"mtime":1608743121526,"results":"177","hashOfConfig":"150"},{"size":403,"mtime":1608743121537,"results":"178","hashOfConfig":"150"},{"size":164,"mtime":1608361997793,"results":"179","hashOfConfig":"150"},{"size":2531,"mtime":1608734413778,"results":"180","hashOfConfig":"150"},{"size":3093,"mtime":1608489549893,"results":"181","hashOfConfig":"150"},{"size":11518,"mtime":1608555987750,"results":"182","hashOfConfig":"150"},{"size":665,"mtime":1608743121531,"results":"183","hashOfConfig":"150"},{"size":247,"mtime":1608743121594,"results":"184","hashOfConfig":"150"},{"size":230,"mtime":1608743121591,"results":"185","hashOfConfig":"150"},{"size":268,"mtime":1608743121583,"results":"186","hashOfConfig":"150"},{"size":2264,"mtime":1608719008227,"results":"187","hashOfConfig":"150"},{"size":2052,"mtime":1608718971081,"results":"188","hashOfConfig":"150"},{"size":237,"mtime":1608621198055,"results":"189","hashOfConfig":"150"},{"size":704,"mtime":1607787725088,"results":"190","hashOfConfig":"191"},{"size":425,"mtime":1607420618541,"results":"192","hashOfConfig":"191"},{"size":3061,"mtime":1609927449532,"results":"193","hashOfConfig":"191"},{"size":1852,"mtime":1610974098523,"results":"194","hashOfConfig":"191"},{"size":1829,"mtime":1610358768890,"results":"195","hashOfConfig":"191"},{"size":3030,"mtime":1609926194055,"results":"196","hashOfConfig":"191"},{"size":376,"mtime":1608743121526,"results":"197","hashOfConfig":"191"},{"size":399,"mtime":1608743121559,"results":"198","hashOfConfig":"191"},{"size":338,"mtime":1609924088938,"results":"199","hashOfConfig":"191"},{"size":388,"mtime":1609924088964,"results":"200","hashOfConfig":"191"},{"size":237,"mtime":1608621198055,"results":"201","hashOfConfig":"191"},{"size":164,"mtime":1608361997793,"results":"202","hashOfConfig":"191"},{"size":813,"mtime":1611485522186,"results":"203","hashOfConfig":"191"},{"size":470,"mtime":1609924088959,"results":"204","hashOfConfig":"191"},{"size":3769,"mtime":1609926194193,"results":"205","hashOfConfig":"191"},{"size":3951,"mtime":1611482508646,"results":"206","hashOfConfig":"191"},{"size":3684,"mtime":1609928311653,"results":"207","hashOfConfig":"191"},{"size":3737,"mtime":1611484287092,"results":"208","hashOfConfig":"191"},{"size":3971,"mtime":1610093126137,"results":"209","hashOfConfig":"191"},{"size":286,"mtime":1611484910732,"results":"210","hashOfConfig":"191"},{"size":385,"mtime":1610279419634,"results":"211","hashOfConfig":"191"},{"size":338,"mtime":1611484910736,"results":"212","hashOfConfig":"191"},{"size":7189,"mtime":1611218274743,"results":"213","hashOfConfig":"191"},{"size":229,"mtime":1611484910795,"results":"214","hashOfConfig":"191"},{"size":567,"mtime":1611484910749,"results":"215","hashOfConfig":"191"},{"size":295,"mtime":1610440144599,"results":"216","hashOfConfig":"191"},{"size":7704,"mtime":1611408353646,"results":"217","hashOfConfig":"191"},{"size":4025,"mtime":1610011110587,"results":"218","hashOfConfig":"191"},{"size":4125,"mtime":1610961293611,"results":"219","hashOfConfig":"191"},{"size":3544,"mtime":1611480265378,"results":"220","hashOfConfig":"191"},{"size":3970,"mtime":1610529118267,"results":"221","hashOfConfig":"191"},{"size":5552,"mtime":1610095807977,"results":"222","hashOfConfig":"191"},{"size":3457,"mtime":1610465801881,"results":"223","hashOfConfig":"191"},{"size":688,"mtime":1610358768866,"results":"224","hashOfConfig":"191"},{"size":1218,"mtime":1610465786838,"results":"225","hashOfConfig":"191"},{"size":1578,"mtime":1610357685459,"results":"226","hashOfConfig":"191"},{"size":6441,"mtime":1610018805150,"results":"227","hashOfConfig":"191"},{"size":1739,"mtime":1610359651594,"results":"228","hashOfConfig":"191"},{"size":1159,"mtime":1610039766849,"results":"229","hashOfConfig":"191"},{"size":2196,"mtime":1610093343411,"results":"230","hashOfConfig":"191"},{"size":4065,"mtime":1610267256393,"results":"231","hashOfConfig":"191"},{"size":7564,"mtime":1611218620209,"results":"232","hashOfConfig":"191"},{"size":1219,"mtime":1610439306270,"results":"233","hashOfConfig":"191"},{"size":330,"mtime":1611484910794,"results":"234","hashOfConfig":"191"},{"size":332,"mtime":1611484910750,"results":"235","hashOfConfig":"191"},{"size":1570,"mtime":1610021337152,"results":"236","hashOfConfig":"191"},{"size":563,"mtime":1611484910770,"results":"237","hashOfConfig":"191"},{"size":5415,"mtime":1611429584881,"results":"238","hashOfConfig":"191"},{"size":4754,"mtime":1611216908493,"results":"239","hashOfConfig":"191"},{"size":1915,"mtime":1610269543295,"results":"240","hashOfConfig":"191"},{"size":8223,"mtime":1611216928894,"results":"241","hashOfConfig":"191"},{"size":5628,"mtime":1611217000975,"results":"242","hashOfConfig":"191"},{"size":8785,"mtime":1611216944612,"results":"243","hashOfConfig":"191"},{"size":5624,"mtime":1611217014704,"results":"244","hashOfConfig":"191"},{"size":637,"mtime":1610097038609,"results":"245","hashOfConfig":"191"},{"size":1644,"mtime":1610438869790,"results":"246","hashOfConfig":"191"},{"size":443,"mtime":1611484910775,"results":"247","hashOfConfig":"191"},{"size":419,"mtime":1611484910766,"results":"248","hashOfConfig":"191"},{"size":531,"mtime":1611484910740,"results":"249","hashOfConfig":"191"},{"size":367,"mtime":1611484910773,"results":"250","hashOfConfig":"191"},{"size":327,"mtime":1611484910796,"results":"251","hashOfConfig":"191"},{"size":3946,"mtime":1611132015745,"results":"252","hashOfConfig":"191"},{"size":922,"mtime":1610266646824,"results":"253","hashOfConfig":"191"},{"size":844,"mtime":1610267491403,"results":"254","hashOfConfig":"191"},{"size":1826,"mtime":1610268304124,"results":"255","hashOfConfig":"191"},{"size":509,"mtime":1611484910781,"results":"256","hashOfConfig":"191"},{"size":454,"mtime":1611484910753,"results":"257","hashOfConfig":"191"},{"size":7937,"mtime":1610909520461,"results":"258","hashOfConfig":"191"},{"size":1526,"mtime":1610699172367,"results":"259","hashOfConfig":"191"},{"size":5163,"mtime":1610969449253,"results":"260","hashOfConfig":"191"},{"size":445,"mtime":1611484910754,"results":"261","hashOfConfig":"191"},{"size":8134,"mtime":1610614121978,"results":"262","hashOfConfig":"191"},{"size":265,"mtime":1611484910798,"results":"263","hashOfConfig":"191"},{"size":471,"mtime":1611132687334,"results":"264","hashOfConfig":"191"},{"size":260,"mtime":1611484910761,"results":"265","hashOfConfig":"191"},{"size":242,"mtime":1611484910800,"results":"266","hashOfConfig":"191"},{"size":4575,"mtime":1610878752632,"results":"267","hashOfConfig":"191"},{"size":249,"mtime":1611484910793,"results":"268","hashOfConfig":"191"},{"size":1290,"mtime":1610907301339,"results":"269","hashOfConfig":"191"},{"size":409,"mtime":1610974495381,"results":"270","hashOfConfig":"191"},{"size":3719,"mtime":1611134740355,"results":"271","hashOfConfig":"191"},{"size":3103,"mtime":1611218817608,"results":"272","hashOfConfig":"191"},{"size":3032,"mtime":1610961477487,"results":"273","hashOfConfig":"191"},{"size":253,"mtime":1611484910768,"results":"274","hashOfConfig":"191"},{"size":509,"mtime":1611484910778,"results":"275","hashOfConfig":"191"},{"size":3021,"mtime":1610908909781,"results":"276","hashOfConfig":"191"},{"size":3095,"mtime":1610908908507,"results":"277","hashOfConfig":"191"},{"size":335,"mtime":1610907535944,"results":"278","hashOfConfig":"191"},{"size":2063,"mtime":1611132984953,"results":"279","hashOfConfig":"191"},{"size":742,"mtime":1611481035441,"results":"280","hashOfConfig":"191"},{"size":157,"mtime":1611480513659,"results":"281","hashOfConfig":"191"},{"size":4335,"mtime":1611483860525,"results":"282","hashOfConfig":"191"},{"size":1611,"mtime":1611406709625,"results":"283","hashOfConfig":"191"},{"size":1356,"mtime":1611484287105,"results":"284","hashOfConfig":"191"},{"size":5563,"mtime":1611485522146,"results":"285","hashOfConfig":"191"},{"size":8108,"mtime":1611406708717,"results":"286","hashOfConfig":"191"},{"size":264,"mtime":1611484910797,"results":"287","hashOfConfig":"191"},{"size":2918,"mtime":1611401458129,"results":"288","hashOfConfig":"191"},{"size":7568,"mtime":1611405075472,"results":"289","hashOfConfig":"191"},{"size":2096,"mtime":1611408053216,"results":"290","hashOfConfig":"191"},{"size":6369,"mtime":1610465486765,"results":"291","hashOfConfig":"191"},{"size":345,"mtime":1611484910779,"results":"292","hashOfConfig":"191"},{"size":309,"mtime":1611484910731,"results":"293","hashOfConfig":"191"},{"size":309,"mtime":1611484910757,"results":"294","hashOfConfig":"191"},{"size":1297,"mtime":1611401075126,"results":"295","hashOfConfig":"191"},{"size":2865,"mtime":1611407514875,"results":"296","hashOfConfig":"191"},{"size":3999,"mtime":1610465486807,"results":"297","hashOfConfig":"191"},{"size":229,"mtime":1611484910792,"results":"298","hashOfConfig":"191"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"301"},"18g08rn",{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"301"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"301"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"308","usedDeprecatedRules":"301"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"311","usedDeprecatedRules":"301"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"314","usedDeprecatedRules":"301"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"317","usedDeprecatedRules":"301"},{"filePath":"318","messages":"319","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"320","usedDeprecatedRules":"301"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"323","usedDeprecatedRules":"301"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"326","usedDeprecatedRules":"301"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"329","usedDeprecatedRules":"301"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"332","usedDeprecatedRules":"301"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"335","usedDeprecatedRules":"301"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"301"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"340","usedDeprecatedRules":"301"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"343","usedDeprecatedRules":"301"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"346","usedDeprecatedRules":"301"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"349","usedDeprecatedRules":"301"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"352","usedDeprecatedRules":"301"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"355","usedDeprecatedRules":"301"},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"301"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"360","usedDeprecatedRules":"301"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"301"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"301"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"301"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"369","usedDeprecatedRules":"301"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"372","usedDeprecatedRules":"301"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"301"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"301"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"379","usedDeprecatedRules":"301"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"382","usedDeprecatedRules":"301"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"385","usedDeprecatedRules":"301"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"388","usedDeprecatedRules":"301"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"301"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"301"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"301"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"301"},{"filePath":"397","messages":"398","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"399","usedDeprecatedRules":"301"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"402","usedDeprecatedRules":"403"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"406","usedDeprecatedRules":"301"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},"1pty4v8",{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"416","usedDeprecatedRules":"409"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"419","usedDeprecatedRules":"409"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"422","usedDeprecatedRules":"409"},{"filePath":"423","messages":"424","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"425","messages":"426","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"427","messages":"428","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"429","messages":"430","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"431","messages":"432","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"433","messages":"434","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"379","usedDeprecatedRules":"409"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"437","messages":"438","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"439","messages":"440","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"441","usedDeprecatedRules":"409"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"444","messages":"445","errorCount":4,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"446","usedDeprecatedRules":"409"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"449","messages":"450","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"451","usedDeprecatedRules":"409"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"458","messages":"459","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"460","usedDeprecatedRules":"409"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"463","messages":"464","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"465","messages":"466","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"467","usedDeprecatedRules":"409"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"470","messages":"471","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"472","usedDeprecatedRules":"409"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"475","usedDeprecatedRules":"409"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"478","messages":"479","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"480","usedDeprecatedRules":"409"},{"filePath":"481","messages":"482","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"483","usedDeprecatedRules":"409"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"486","usedDeprecatedRules":"409"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"489","usedDeprecatedRules":"409"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"492","usedDeprecatedRules":"409"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"495","usedDeprecatedRules":"409"},{"filePath":"496","messages":"497","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"498","usedDeprecatedRules":"409"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"501","usedDeprecatedRules":"409"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"504","usedDeprecatedRules":"409"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"507","usedDeprecatedRules":"409"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"510","usedDeprecatedRules":"409"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"513","usedDeprecatedRules":"409"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"516","usedDeprecatedRules":"409"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"519","messages":"520","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"521","messages":"522","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"523","usedDeprecatedRules":"409"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"526","messages":"527","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"528","messages":"529","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"530","usedDeprecatedRules":"409"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"533","usedDeprecatedRules":"409"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"536","usedDeprecatedRules":"409"},{"filePath":"537","messages":"538","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"539","usedDeprecatedRules":"409"},{"filePath":"540","messages":"541","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"542","usedDeprecatedRules":"409"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"545","usedDeprecatedRules":"409"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"548","usedDeprecatedRules":"409"},{"filePath":"549","messages":"550","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"551","usedDeprecatedRules":"409"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"554","messages":"555","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"556","messages":"557","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"558","messages":"559","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"560","messages":"561","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"562","messages":"563","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"564","usedDeprecatedRules":"409"},{"filePath":"565","messages":"566","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"567","usedDeprecatedRules":"409"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"570","usedDeprecatedRules":"409"},{"filePath":"571","messages":"572","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"573","usedDeprecatedRules":"409"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"576","messages":"577","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"578","messages":"579","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"580","usedDeprecatedRules":"409"},{"filePath":"581","messages":"582","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"583","usedDeprecatedRules":"409"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"586","usedDeprecatedRules":"409"},{"filePath":"587","messages":"588","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"589","messages":"590","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"591","usedDeprecatedRules":"409"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"594","messages":"595","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"596","usedDeprecatedRules":"409"},{"filePath":"597","messages":"598","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"599","messages":"600","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"601","messages":"602","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"603","usedDeprecatedRules":"409"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"606","messages":"607","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"608","usedDeprecatedRules":"409"},{"filePath":"609","messages":"610","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"611","usedDeprecatedRules":"409"},{"filePath":"612","messages":"613","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"614","usedDeprecatedRules":"409"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"617","usedDeprecatedRules":"409"},{"filePath":"618","messages":"619","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"620","usedDeprecatedRules":"409"},{"filePath":"621","messages":"622","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"623","messages":"624","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"625","messages":"626","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"627","usedDeprecatedRules":"409"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"630","usedDeprecatedRules":"409"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"633","usedDeprecatedRules":"409"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"409"},{"filePath":"636","messages":"637","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"638","messages":"639","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"640","messages":"641","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"642","messages":"643","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"644","messages":"645","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"646","messages":"647","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"648"},{"filePath":"649","messages":"650","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"651","messages":"652","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"653","messages":"654","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"655","messages":"656","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"657","messages":"658","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"659","messages":"660","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"661","messages":"662","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"663","messages":"664","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"665","messages":"666","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"667","messages":"668","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"669","messages":"670","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"671","messages":"672","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"673","messages":"674","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\SuperSoft\\SuperSoft\\client\\src\\index.tsx",[],["675","676"],"C:\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\App.tsx",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx",["677","678"],"﻿import {observable, makeObservable, extendObservable} from \"mobx\";\r\nimport UserStore from \"./UserStore\";\r\nimport ProjectStore from \"./ProjectStore\";\r\nimport TaskStore from \"./TaskStore\";\r\nimport CommentsStore from \"./CommentsStore\";\r\n\r\nexport class RootStore {\r\n    userStore: UserStore;\r\n    taskStore: TaskStore;\r\n    projectStore: ProjectStore;\r\n    commentStore: CommentsStore;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            userStore: observable,\r\n            taskStore: observable,\r\n            projectStore: observable,\r\n            commentStore: observable\r\n        });\r\n        this.userStore = new UserStore();\r\n        this.taskStore = new TaskStore();\r\n        this.projectStore = new ProjectStore();\r\n        this.commentStore = new CommentsStore();\r\n    }\r\n\r\n    reset() {\r\n        this.exit().then(() => {\r\n            this.userStore = new UserStore();\r\n            this.taskStore = new TaskStore();\r\n            this.projectStore = new ProjectStore();\r\n            this.commentStore = new CommentsStore();\r\n        });\r\n    }\r\n\r\n    async exit() {\r\n        const response = await fetch(\"/exit\");\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default RootStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx",["679"],"﻿import { UserViewModel } from \"../Typings/viewModels/UserViewModel\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport { UserReadModel } from \"../Typings/viewModels/UserReadModel\";\r\n\r\nclass UserStore {\r\n    currentUser: UserViewModel;\r\n    users: UserViewModel[];\r\n    authorizationRequired: boolean = true;\r\n    wrongCredetianals: boolean = false;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            users: observable,\r\n            currentUser: observable,\r\n            authorizationRequired: observable,\r\n            wrongCredetianals: observable,\r\n        });\r\n        this.users = new Array<UserViewModel>();\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        this.getCurrentUser();\r\n        this.getUsers();\r\n    }\r\n\r\n    async getCurrentUser() {\r\n        const response = await fetch(\"/getcurrentuser\");\r\n        if(response.status === 200) {\r\n            this.currentUser = await response.json();\r\n            this.authorizationRequired = false;\r\n        } else {\r\n            this.authorizationRequired = true;\r\n        }\r\n    }\r\n\r\n    async getUsers() {\r\n        const response = await fetch(\"/getusers\");\r\n        this.users = await response.json();\r\n    }\r\n\r\n    async deleteUser(userId: number) {\r\n        const response = await fetch(\"/deleteuser\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: userId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getUsers();\r\n        }\r\n    }\r\n\r\n    async addOrUpdateUser(user: UserReadModel) {\r\n        const response = await fetch(\"/addorupdateuser\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: user.id, firstName: user.firstName, lastName: user.lastName, email: user.email, role: user.role, password: user.password})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getUsers();\r\n        }\r\n        return response.status;\r\n    }\r\n\r\n    @action\r\n    authorizationRequire(required: boolean) {\r\n        this.authorizationRequired = required;\r\n    }\r\n\r\n    @action\r\n    wrongCredetianalsToggle(turn: boolean) {\r\n        this.wrongCredetianals = turn;\r\n    }\r\n}\r\n\r\nexport default UserStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Main\\Main.tsx",["680"],"﻿import React from \"react\";\r\nimport { IMainProps } from \"./IMainProps\";\r\nimport { Card, CardHeader, Nav, NavItem, Button } from \"reactstrap\";\r\nimport { NavLink, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { MyWorkPage } from \"../MyWork/MyWorkPage\";\r\nimport { ProjectsPage } from \"../Projects/ProjectsPage\";\r\nimport { UsersPage } from \"../Users/UsersPage\";\r\nimport { observer } from  \"mobx-react\";\r\nimport 'react-calendar/dist/Calendar.css'\r\n\r\n@observer\r\nexport class Main extends React.Component<IMainProps> {\r\n    render() {\r\n        return(\r\n            <>\r\n                <Card>\r\n                    <CardHeader>\r\n                        <Nav tabs className=\"nav\">\r\n                              <NavItem>\r\n                                  <NavLink to=\"/mywork\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}} activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>МОЯ РАБОТА</NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink to=\"/projects\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}} activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>ПРОЕКТЫ</NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink to=\"/users\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}} activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>ПОЛЬЗОВАТЕЛИ</NavLink>\r\n                              </NavItem>\r\n                            <Button\r\n                                outline color=\"primary\"\r\n                                onClick={() => this.exit()}>\r\n                                ВЫЙТИ\r\n                            </Button>\r\n                        </Nav>\r\n                    </CardHeader>\r\n                </Card>\r\n                <Switch>\r\n                    <Route exact path=\"/mywork\" \r\n                         render={(props) => <MyWorkPage store={this.props.store} />} />\r\n                    <Route exact path=\"/projects\"\r\n                         render={(props) => <ProjectsPage store={this.props.store} />} />\r\n                    <Route exact path=\"/users\"\r\n                         render={(props) => <UsersPage store={this.props.store} />} />\r\n                    <Redirect to=\"/mywork\" />\r\n                </Switch>\r\n            </>\r\n        );\r\n    }\r\n\r\n    exit() {\r\n        this.props.store.reset();\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyWorkPage.tsx",["681"],"﻿import React from \"react\";\r\nimport { Col, Nav, NavItem, Row, TabContent, TabPane, NavLink } from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\nimport { MyTasks } from \"./MyTasks\";\r\nimport { observer } from \"mobx-react\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport { IMyWorkProps } from \"./IMyWorkProps\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\n\r\n@observer\r\nexport class  MyWorkPage extends React.Component<IMyWorkProps> {\r\n    activeTab: string = \"1\";\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n           activeTab: observable\r\n       });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{marginTop: 35}} className=\"container-fluid\">\r\n            <Row>\r\n                <Col sm=\"12\">\r\n                    <Nav tabs style={{fontSize: \"1.4em\"}}>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                to=\"#\"\r\n                                activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                className={classnames({ active: this.activeTab === \"1\"})}\r\n                                onClick={(e) => this.toggleTab(\"1\")}\r\n                            >Текущие</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                to=\"#\"\r\n                                activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                className={classnames({ active: this.activeTab === \"2\"})}\r\n                                onClick={(e) => this.toggleTab(\"2\")}>Законченные</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                to=\"#\"\r\n                                activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                className={classnames({ active: this.activeTab === \"3\"})}\r\n                                onClick={(e) => this.toggleTab(\"3\")}>Будущие</NavLink>\r\n                        </NavItem>\r\n                    </Nav>\r\n                    <TabContent activeTab={this.activeTab}>\r\n                        <TabPane tabId=\"1\">\r\n                            <Row>\r\n                                <Col sm=\"12\">\r\n                                    <MyTasks store={this.props.store} tasksStatus={TaskStatus.InProgress}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </TabPane>\r\n                        <TabPane tabId=\"2\">\r\n                            <Row>\r\n                                <Col sm=\"12\">\r\n                                    <MyTasks store={this.props.store} tasksStatus={TaskStatus.Completed}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </TabPane>\r\n                        <TabPane tabId=\"3\">\r\n                            <Row>\r\n                                <Col sm=\"12\">\r\n                                    <MyTasks store={this.props.store} tasksStatus={TaskStatus.Future}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </TabPane>\r\n                    </TabContent>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n    }\r\n\r\n    @action\r\n    toggleTab(activeTab: string): void {\r\n        this.activeTab = activeTab;\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\ProjectsPage.tsx",["682"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { AddProject } from \"./AddProject\";\r\nimport { Projects } from \"./Projects\";\r\nimport { makeObservable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nexport class  ProjectsPage extends React.Component<IProjectsProps> {\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\" style={{marginTop: \"30px\"}}>\r\n                <div className=\"row justify-content-center\">\r\n                    <AddProject store={this.props.store} />\r\n                </div>\r\n                <div className=\"row justify-content-center\" style={{marginTop: \"20px\"}}>\r\n                    <div className=\"col-lg-12 col-sm-12\">\r\n                        <Projects store={this.props.store} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\UsersPage.tsx",["683"],"﻿import React from \"react\";\r\nimport { IUsersProps } from \"./IUsersProps\";\r\nimport { Users } from \"./Users\";\r\nimport {AddUser} from \"./AddUser\";\r\n\r\nexport class  UsersPage extends React.Component<IUsersProps> {\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\" style={{marginTop: \"30px\"}}>\r\n                <div className=\"row justify-content-center\">\r\n                    <AddUser store={this.props.store}/>\r\n                </div>\r\n                <div className=\"row justify-content-center\" style={{marginTop: \"20px\"}}>\r\n                    <Users store={this.props.store}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\ProjectStore.tsx",["684"],"﻿import { ProjectViewModel } from \"../Typings/viewModels/ProjectViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { ProjectRole } from \"../Typings/enums/ProjectRole\";\r\nimport { UserViewModel } from \"../Typings/viewModels/UserViewModel\";\r\n\r\nclass ProjectStore {\r\n    public projects: ProjectViewModel[] = new Array<ProjectViewModel>(0);\r\n    public choosenProject: ProjectViewModel = new ProjectViewModel();\r\n    public choosenProjectUsers: UserViewModel[] = new Array<UserViewModel>(0);\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            projects: observable,\r\n            choosenProject: observable,\r\n            choosenProjectUsers: observable\r\n        });\r\n        this.getProjects();\r\n    }\r\n\r\n    setChoosenProject(project: ProjectViewModel): void {\r\n        this.choosenProject = project;\r\n    }\r\n\r\n    async getProjectUsers(projectId: number) {\r\n        const response = await fetch(\"/getprojectusers\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: projectId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.choosenProjectUsers = await response.json();\r\n        }\r\n    }\r\n\r\n    async getProjects() {\r\n        const response = await fetch(\"/getprojects\");\r\n        if(response.status === 200) {\r\n            let projects = await response.json();\r\n            this.projects = projects;\r\n            this.choosenProject = projects[0];\r\n        } else {\r\n            return new Array<ProjectViewModel>(0);\r\n        }\r\n    }\r\n\r\n    async addNewProject(name: string, description: string, startDate: Date | Date[], deadlineDate: Date | Date[], responsibleId: number) {\r\n        const response = await fetch(\"/addorupdateproject\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({ name: name, description: description,startDate: startDate, deadlineDate: deadlineDate, responsiblePerson: responsibleId })\r\n        });\r\n        if(response.status === 200) {\r\n            this.getProjects();\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n    \r\n    async attachUserToProject(projectId: number, userId: number, projectRole: ProjectRole) {\r\n        const response = await fetch(\"/attachusertoproject\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({userId: userId, role: projectRole, projectId: projectId})\r\n        });\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async deleteProject(projectId: number) {\r\n        const response = await fetch(\"/deleteproject\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: projectId})\r\n        });\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default ProjectStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx",["685"],"﻿import { makeObservable, observable } from \"mobx\";\r\nimport { UserTaskViewModel } from \"../Typings/viewModels/UserTaskViewModel\";\r\nimport { TaskViewModel } from \"../Typings/viewModels/TaskViewModel\";\r\nimport { TaskStatus } from \"../Typings/enums/TaskStatus\";\r\nimport { TaskType } from \"../Typings/enums/TaskType\";\r\nimport {TaskPriority} from \"../Typings/enums/TaskPriority\";\r\n\r\nclass TaskStore {\r\n    currentUserTasks: UserTaskViewModel[];\r\n    currentProjectTasks: TaskViewModel[] = new Array<TaskViewModel>();\r\n    public completedPercentage: number = 0;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            currentUserTasks: observable,\r\n            currentProjectTasks: observable,\r\n            completedPercentage: observable\r\n        });\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        this.getCurrentUserTasks();\r\n    }\r\n\r\n    async getCurrentUserTasks() {\r\n        const response = await fetch(\"/getusertasks\");\r\n        if(response.status === 200) {\r\n            this.currentUserTasks = await response.json();\r\n        } else {\r\n            this.currentUserTasks = new Array<UserTaskViewModel>(0);\r\n        }\r\n    }\r\n\r\n    async getTasks(projectId: number) {\r\n        const response = await fetch(\"/gettasks\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: projectId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.currentProjectTasks = await response.json();\r\n            this.computeCompletedPercentage();\r\n        }\r\n    }\r\n\r\n    computeCompletedPercentage() {\r\n        let completedTasks = this.currentProjectTasks.filter(t => t.status === TaskStatus.Completed);\r\n        let percentage = completedTasks.length / this.currentProjectTasks.length * 100;\r\n        this.completedPercentage = isNaN(percentage) ? 100 : percentage;\r\n    }\r\n\r\n    async addOrUpdateTask(header: string, description: string, startDate: Date | Date[], deadlineDate: Date | Date[], taskType: TaskType, status: TaskStatus, priority: TaskPriority, tester: number, responsible: number, author: number, id: number = 0, projectId: number = 0) {\r\n        const response = await fetch(\"/addorupdatetask\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: id, projectId: projectId, header: header, description: description, startDate: startDate, deadlineDate: deadlineDate, taskType: taskType, status: status, priority: priority, tester: tester, responsible: responsible, author: author})\r\n        });\r\n        if(response.status === 200) {\r\n            const task = await response.json();\r\n            this.currentProjectTasks.push(task);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default TaskStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\CommentsStore.tsx",["686"],"﻿import { CommentGroupViewModel } from \"../Typings/viewModels/CommentGroupViewModel\";\r\nimport { UserReadModel } from \"../Typings/viewModels/UserReadModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\n\r\nclass CommentsStore {\r\n    currentCommentGroup: CommentGroupViewModel = new CommentGroupViewModel();\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            currentCommentGroup: observable\r\n        });\r\n    }\r\n\r\n    async getCurrentTaskComments(taskId: number) {\r\n        const response = await fetch(\"/getcurrenttaskcommentgroup\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({taskId: taskId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.currentCommentGroup = await response.json();\r\n        } else {\r\n            this.currentCommentGroup = new CommentGroupViewModel();\r\n        }\r\n    }\r\n\r\n    async addComment(text: string, userId: number, groupId: number): Promise<number> {\r\n        const user = new UserReadModel();\r\n        user.id = userId;\r\n        const response = await fetch(\"/addorupdatecomment\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({text: text, groupId: groupId, user: user})\r\n        });\r\n        return response.status;\r\n    }\r\n\r\n    async deleteComment(commentId: number) {\r\n        const response = await fetch(\"/deletecomment\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: commentId})\r\n        });\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default CommentsStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyTasks.tsx",["687","688"],"﻿import React from \"react\";\r\nimport { IMyTasksProps } from \"./IMyTasksProps\";\r\nimport { Alert, Modal, Table } from 'reactstrap';\r\nimport { TaskViewModel } from \"../../Typings/viewModels/TaskViewModel\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { Task } from \"../Tasks/Task\";\r\nimport { UserTaskViewModel } from \"../../Typings/viewModels/UserTaskViewModel\";\r\nimport { translatePriority, translateTaskRole, translateTaskType } from \"../../functions/translater\";\r\nimport { formatDate } from \"../../functions/formatDate\";\r\n\r\n@observer\r\nexport class MyTasks extends React.Component<IMyTasksProps> {\r\n    taskOpen: boolean;\r\n    taskToRender: TaskViewModel;\r\n    sortDescendent: boolean = false;\r\n\r\n    componentDidMount(): void {\r\n        this.props.store.taskStore.getCurrentUserTasks();\r\n    }\r\n\r\n    sort() {\r\n        this.props.store.taskStore.currentUserTasks.sort();\r\n        this.sortDescendent = !this.sortDescendent;\r\n    }\r\n    renderSortIcon() {\r\n        return (\r\n            <>\r\n                {this.sortDescendent\r\n                    ? <i className=\"fa fa-chevron-circle-down\" aria-hidden=\"true\" onClick={() => this.sort()}/>\r\n                    : <i className=\"fa fa-chevron-circle-up\" aria-hidden=\"true\" onClick={() => this.sort()}/>\r\n                }\r\n                </>\r\n        );\r\n    }\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            taskOpen: observable\r\n        });\r\n    }\r\n\r\n    filterTasks(taskStatus: TaskStatus, currentUserTasks: UserTaskViewModel[]): UserTaskViewModel[] {\r\n        return currentUserTasks?.\r\n            filter(ut => ut.task.status === taskStatus);\r\n    }\r\n\r\n    renderAlert() {\r\n        return(\r\n            <Alert color=\"primary\">Задач пока нет!!!</Alert>\r\n        );\r\n    }\r\n\r\n    renderMyTasks(userTasks: UserTaskViewModel[]) {\r\n        return(\r\n            <Table bordered style={{backgroundColor: \"#fff\", color:\"#003B46\", marginTop: \"2%\", fontSize: \"1.2em\"}}>\r\n                {userTasks.length === 0 && this.renderAlert()}\r\n                {userTasks.length !== 0 && <thead style={{color:\"fff\"}}>\r\n                    <tr>\r\n                        <th>Номер</th>\r\n                        <th>Задача</th>\r\n                        <th>Дедлайн</th>\r\n                        <th>Приоритет{this.renderSortIcon()}</th>\r\n                        <th>Роль</th>\r\n                        <th>Тип</th>\r\n                    </tr>\r\n                </thead>}\r\n                {userTasks.length !== 0 && <tbody>\r\n                    {userTasks.map((ut) => {\r\n                        return(\r\n                            <tr key={ut.task.id} onClick={() => this.taskOpenToggle(ut.task)}>\r\n                                <th>{ut.task.id}</th>\r\n                                <th>{ut.task.header}</th>\r\n                                <th>{formatDate(ut.task.deadlineDate)}</th>\r\n                                <th>{translatePriority(ut.task.priority)}</th>\r\n                                <th>{translateTaskRole(ut.role)}</th>\r\n                                <th>{translateTaskType(ut.task.taskType)}</th>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>}\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    renderTask() {\r\n        return(\r\n            <Modal\r\n                isOpen={this.taskOpen}\r\n                toggle={() => this.taskOpenToggle()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                   onClick={() => this.taskOpenToggle()}/>\r\n                <Task store={this.props.store} task={this.taskToRender}/>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let currentTasks = this.props.store.taskStore.currentUserTasks;\r\n        let tasks = this.filterTasks(this.props.tasksStatus, currentTasks);\r\n        return(\r\n            <>\r\n                {tasks !== undefined && this.renderMyTasks(tasks)}\r\n                {tasks === undefined && this.renderAlert()}\r\n                {this.taskOpen && this.renderTask()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    taskOpenToggle(task: TaskViewModel = new TaskViewModel()) {\r\n        this.taskOpen = !this.taskOpen;\r\n        this.taskToRender = task;\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskStatus.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddProject.tsx",["689"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input, Dropdown, DropdownToggle, DropdownItem, DropdownMenu, Label } from \"reactstrap\";\r\nimport Calendar from \"react-calendar\";\r\nimport {UserViewModel} from \"../../Typings/viewModels/UserViewModel\";\r\n\r\n@observer\r\nexport class AddProject extends React.Component<IProjectsProps> {\r\n    addProjectWindowOpen: boolean;\r\n    projectName: string = \"\";\r\n    description: string = \"\";\r\n    responsibleDropdownOpen: boolean;\r\n    startDate: Date | Date[] = new Date();\r\n    deadline: Date | Date[] = new Date();\r\n    responsiblePerson: UserViewModel = new UserViewModel();\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addProjectWindowOpen: observable,\r\n            projectName: observable,\r\n            description: observable,\r\n            responsibleDropdownOpen: observable,\r\n            startDate: observable,\r\n            deadline: observable,\r\n            responsiblePerson: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.responsiblePerson = this.props.store.userStore.users[0];\r\n    }\r\n\r\n    toggleAddProjectWindow() {\r\n        this.addProjectWindowOpen = !this.addProjectWindowOpen;\r\n    }\r\n\r\n    toggleResponsibleDropdown() {\r\n        this.responsibleDropdownOpen = !this.responsibleDropdownOpen;\r\n    }\r\n\r\n    renderAddProjectWindow() {\r\n        let users = this.props.store.userStore.users;\r\n        let responsible = this.responsiblePerson;\r\n        return(\r\n            <Modal isOpen={this.addProjectWindowOpen} toggle={() => this.toggleAddProjectWindow()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                   onClick={() => this.toggleAddProjectWindow()}/>\r\n                <ModalHeader>\r\n                    СОЗДАНИЕ ПРОЕКТА\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label style={{width: \"100%\"}} align=\"center\">Название проекта</Label>\r\n                        <Input style={{width: \"90%\"}} onChange={(e) => this.inputProjectName(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\" style={{marginTop: \"10px\"}}>\r\n                        <Label style={{width: \"100%\"}} align=\"center\">Описание проекта</Label>\r\n                        <textarea style={{width: \"90%\"}} onChange={(e) => this.inputDescription(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">Дата начала</Label>\r\n                            <div style={{width: \"100%\", paddingLeft: \"15%\"}}>\r\n                                <Calendar\r\n                                    value={this.startDate}\r\n                                    onChange={(date) => this.inputDate(date, \"startDate\")}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">Дедлайн</Label>\r\n                            <div style={{width: \"100%\", paddingLeft: \"15%\"}}>\r\n                                <Calendar\r\n                                    value={this.deadline}\r\n                                    onChange={(date) => this.inputDate(date, \"deadline\")}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label style={{width: \"100%\"}} align=\"center\">Ответственный</Label>\r\n                        <Dropdown isOpen={this.responsibleDropdownOpen} toggle={() => this.toggleResponsibleDropdown()}>\r\n                            <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{responsible !== undefined ? `${responsible.firstName} ${responsible.lastName}` : \"Пока нет пользователей\"}</DropdownToggle>\r\n                            <DropdownMenu>\r\n                                {users.map((user, index) => {\r\n                                    return(\r\n                                        <>\r\n                                            <DropdownItem key={index} onClick={() => this.chooseResponsiblePerson(user)}>{user.firstName + \" \" + user.lastName}</DropdownItem>\r\n                                        </>\r\n                                    );\r\n                                })}\r\n                            </DropdownMenu>\r\n                        </Dropdown>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.saveProject()}>\r\n                        СОХРАНИТЬ\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <>\r\n                <div className=\"col-6\"/>\r\n                <div className=\"col-6\">\r\n                    <Button\r\n                        style={{width: \"100%\", borderColor: \"#66A5AD\", color: \"#66A5AD\", backgroundColor: \"#fff\"}}\r\n                        onClick={() => this.toggleAddProjectWindow()}>Создать проект</Button>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.addProjectWindowOpen && this.renderAddProjectWindow()}\r\n                {!this.addProjectWindowOpen && this.renderButton()}\r\n            </>\r\n        )\r\n    }\r\n\r\n    inputProjectName(event: React.FormEvent<HTMLInputElement>) {\r\n        this.projectName = event.currentTarget.value;\r\n    }\r\n\r\n    inputDescription(event: React.FormEvent<HTMLTextAreaElement>) {\r\n        this.description = event.currentTarget.value;\r\n    }\r\n\r\n    inputDate(date: Date | Date[], dateType: string) {\r\n        if(dateType === \"startDate\") {\r\n            this.startDate = date;\r\n        } else if(dateType === \"deadline\") {\r\n            this.deadline = date;\r\n        }\r\n    }\r\n\r\n    chooseResponsiblePerson(user: UserViewModel) {\r\n        this.responsiblePerson = user;\r\n    }\r\n\r\n    saveProject() {\r\n        this.props.store.projectStore\r\n            .addNewProject(this.projectName, this.description, this.startDate, this.deadline, this.responsiblePerson.id)\r\n            .then(() => this.addProjectWindowOpen = false);\r\n}\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Projects.tsx",["690"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { ProjectViewModel } from \"../../Typings/viewModels/ProjectViewModel\";\r\nimport { Tab, Nav, Alert } from \"react-bootstrap\";\r\nimport { Project } from \"./Project\";\r\nimport { observer } from \"mobx-react\";\r\nimport { renderSpinner } from \"../../functions/renderSpinner\";\r\n\r\n@observer\r\nexport class Projects extends React.Component<IProjectsProps> {\r\n    renderMenu(projects: ProjectViewModel[], choosenProject: ProjectViewModel) {\r\n        // @ts-ignore\r\n        return(\r\n            <Tab.Container defaultActiveKey={`${choosenProject.id === undefined ? 0 : choosenProject.id.toString()}`}>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-4\">\r\n                        <Nav variant=\"pills\" className=\"flex-column\" activeKey={`${choosenProject.id === undefined ? 0 : choosenProject.id.toString()}`}>\r\n                            <div className=\"container\">\r\n                                {projects.map((project) => {\r\n                                    return (\r\n                                        <div className=\"row\">\r\n                                            <Nav.Item key={project.id}\r\n                                                 style={{width: \"100%\"}}\r\n                                                 onClick={() => {this.changeData(project)}}>\r\n                                                <Nav.Link eventKey={project.id}>{project.name}</Nav.Link>\r\n                                            </Nav.Item>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </Nav>\r\n                    </div>\r\n                    <div className=\"col-8\">\r\n                        <Tab.Content>\r\n                            {projects.map((project) => {\r\n                                return (\r\n                                    <Tab.Pane eventKey={project.id}\r\n                                         key={project.id}>\r\n                                        <Project store={this.props.store} />\r\n                                    </Tab.Pane>\r\n                                );\r\n                            })}\r\n                        </Tab.Content>\r\n                    </div>\r\n                </div>\r\n            </Tab.Container>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let projects = this.props.store.projectStore.projects;\r\n        let choosenProject =  this.props.store.projectStore.choosenProject;\r\n        return(\r\n            <>\r\n                {projects.length === 0 && <Alert variant=\"primary\">\r\n                    <span>Пока нет никаких проектов</span>\r\n                </Alert>}\r\n                {choosenProject !== undefined && this.renderMenu(projects, choosenProject)}\r\n                {choosenProject === undefined && renderSpinner()}\r\n            </>\r\n        )\r\n    }\r\n\r\n    changeData(project: ProjectViewModel) {\r\n        this.props.store.projectStore.setChoosenProject(project);\r\n        this.props.store.projectStore.getProjectUsers(project.id);\r\n        this.props.store.taskStore.getTasks(project.id)\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Project.tsx",["691"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { AddTask } from \"../Tasks/AddTask\";\r\nimport { AddUserToProject } from \"./AddUserToProject\";\r\nimport { Tasks } from \"../Tasks/Tasks\";\r\nimport { ProjectViewModel } from \"../../Typings/viewModels/ProjectViewModel\";\r\nimport { Card, CardText, CardTitle, Label } from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\nimport { Col, Nav, NavItem, Row, TabContent, TabPane, NavLink, Alert } from \"reactstrap\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { renderSpinner } from \"../../functions/renderSpinner\";\r\nimport { observer } from \"mobx-react\";\r\nimport Circle from \"react-circle\";\r\nimport { formatDate } from \"../../functions/formatDate\";\r\n\r\n@observer\r\nexport class Project extends React.Component<IProjectsProps> {\r\n    activeTab: string = \"1\";\r\n    loaded: boolean;\r\n    notDeleted: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            activeTab: observable,\r\n            loaded: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.props.store.projectStore.getProjects();\r\n        this.props.store.taskStore.getTasks(this.props.store.projectStore.choosenProject.id)\r\n            .then(() => this.loaded = true);\r\n    }\r\n\r\n    renderProjectDiagram() {\r\n        let completedPercentage = this.props.store.taskStore.completedPercentage;\r\n        return (\r\n            <Circle\r\n                size=\"300\"\r\n                progress={completedPercentage}\r\n                />\r\n        );\r\n    }\r\n\r\n    getResponsible(responsibleId: number) {\r\n        let responsible = this.props.store.userStore.users.filter(u => u.id === responsibleId)[0];\r\n        if(responsible === undefined) {\r\n            return undefined;\r\n        } else {\r\n            return responsible;\r\n        }\r\n    }\r\n\r\n    renderResponsible(responsible: UserViewModel | undefined) {\r\n        if(responsible === undefined) {\r\n            return(\r\n                <Alert>Руководитель не выбран</Alert>\r\n            );\r\n        } else {\r\n            return(\r\n                <CardText>Руководитель: <span>{responsible?.firstName} {responsible?.lastName}</span></CardText>\r\n            )\r\n        }\r\n    }\r\n\r\n    renderProjectInfo(project: ProjectViewModel) {\r\n        let responsible = this.getResponsible(project.responsiblePerson);\r\n        return (\r\n            <div className=\"row justify-content-center\" style={{marginTop: \"35px\"}}>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                    <Card style={{backgroundColor: \"#66A5AD\", color: \"#fff\"}}>\r\n                        <CardTitle style={{fontSize: \"1.3em\"}}>{project.name}</CardTitle>\r\n                        {this.renderResponsible(responsible)}\r\n                        <CardText><Label style={{width: \"100%\", fontSize: \"1.2em\"}}>Дата начала:</Label> {formatDate(project.startDate)}</CardText>\r\n                        <CardText><Label style={{width: \"100%\", fontSize: \"1.2em\"}}>Дедлайн:</Label> {formatDate(project.deadlineDate)}</CardText>\r\n                        <CardText><Label style={{width: \"100%\", fontSize: \"1.2em\"}}>Описание:</Label> {project.description}</CardText>\r\n                    </Card>\r\n                </div>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                    {this.renderProjectDiagram()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderTasksMenu() {\r\n        return(\r\n            <div style={{marginTop: 35}} className=\"container-fluid\">\r\n                <Row>\r\n                    <Col sm=\"12\">\r\n                        <Nav tabs>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    className={classnames({ active: this.activeTab === \"1\"})}\r\n                                    onClick={(e) => this.toggleTab(\"1\")}\r\n                                >Текущие</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    className={classnames({ active: this.activeTab === \"2\"})}\r\n                                    onClick={(e) => this.toggleTab(\"2\")}>Законченные</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    className={classnames({ active: this.activeTab === \"3\"})}\r\n                                    onClick={(e) => this.toggleTab(\"3\")}>Будущие</NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                        <TabContent activeTab={this.activeTab}>\r\n                            <TabPane tabId=\"1\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <Tasks store={this.props.store} status={TaskStatus.InProgress}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                            <TabPane tabId=\"2\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <Tasks store={this.props.store} status={TaskStatus.Completed}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                            <TabPane tabId=\"3\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <Tasks store={this.props.store} status={TaskStatus.Future}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                        </TabContent>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row justify-content-center\">\r\n                    {this.notDeleted && <Alert color=\"danger\">Что-то пошло не так и проект не удалился :(</Alert>}\r\n                    <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                       onClick={() => this.deleteProject(this.props.store.projectStore.choosenProject.id)}/>\r\n                </div>\r\n                {this.renderProjectInfo(this.props.store.projectStore.choosenProject)}\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-lg-3 col-sm-6\">\r\n                        <AddTask store={this.props.store}/>\r\n                    </div>\r\n                    <div className=\"col-lg-3 col-sm-6\">\r\n                        <AddUserToProject store={this.props.store}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.loaded && this.renderTasksMenu()}\r\n                    {!this.loaded && renderSpinner()}\r\n                </div>\r\n            </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    @action\r\n    toggleTab(activeTab: string): void {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    deleteProject(projectId: number) {\r\n        this.props.store.projectStore.deleteProject(projectId)\r\n            .then((status) => {\r\n                if(status === 200) {\r\n                    this.props.store.projectStore.getProjects();\r\n                    this.notDeleted = false;\r\n                } else {\r\n                    this.notDeleted = true;\r\n                }\r\n            });\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddUserToProject.tsx",["692"],"﻿import React from \"react\";\r\nimport RootStore from \"../../stores/RootStore\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport {\r\n    Button,\r\n    Dropdown,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    Modal,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalHeader,\r\n    Alert\r\n} from \"reactstrap\";\r\nimport { ProjectRole } from \"../../Typings/enums/ProjectRole\";\r\nimport { translateProjectRole } from \"../../functions/translater\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\n\r\nexport interface IAddUserToProjectProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nexport class AddUserToProject extends React.Component<IAddUserToProjectProps> {\r\n    addUserToProjectWindowOpen: boolean;\r\n    roleDropdownOpen: boolean;\r\n    usersDropdownOpen: boolean;\r\n    choosenUser: UserViewModel;\r\n    role: ProjectRole = ProjectRole.Head;\r\n    notAttached: boolean;\r\n\r\n    componentDidMount(): void {\r\n        this.choosenUser = this.props.store.userStore.users[0];\r\n    }\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addUserToProjectWindowOpen: observable,\r\n            usersDropdownOpen: observable,\r\n            roleDropdownOpen: observable\r\n        })\r\n    }\r\n\r\n    toggleWindow() {\r\n        this.addUserToProjectWindowOpen = !this.addUserToProjectWindowOpen;\r\n    }\r\n\r\n    toggleUserDropdown() {\r\n        this.usersDropdownOpen = !this.usersDropdownOpen;\r\n    }\r\n\r\n    toggleRoleDropdown() {\r\n        this.roleDropdownOpen = !this.roleDropdownOpen;\r\n    }\r\n\r\n    renderAddUserToProjectWindow() {\r\n        let users = this.props.store.userStore.users;\r\n        let choosenUser = this.choosenUser;\r\n        return(\r\n            <Modal\r\n                style={{backgroundColor: \"#003b46\", color: \"#003b46\", fontSize: \"1.4em\"}}\r\n                isOpen={this.addUserToProjectWindowOpen}\r\n                toggle={() => this.toggleWindow()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                   onClick={() => this.toggleWindow()}/>\r\n                {this.notAttached && <Alert color=\"primary\">Что-то пошло не так и пользователь не прикрепился :(</Alert>}\r\n                <ModalHeader>ПРИКРЕПЛЕНИЕ ПОЛЬЗОВАТЕЛЯ</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-sm-6\">\r\n                            <Dropdown isOpen={this.usersDropdownOpen} toggle={() => this.toggleUserDropdown()}>\r\n                                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{choosenUser !== undefined ? `${choosenUser.firstName} ${choosenUser.lastName}` : \"Пока нет пользователей\"}</DropdownToggle>\r\n                                <DropdownMenu>\r\n                                    {users.map((user, index) => {\r\n                                        return(\r\n                                            <>\r\n                                                {<DropdownItem onClick={() => this.choosenUser = user}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                                            </>\r\n                                        );\r\n                                    })}\r\n                                </DropdownMenu>\r\n                            </Dropdown>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-sm-6\">\r\n                            <Dropdown isOpen={this.roleDropdownOpen} toggle={() => this.toggleRoleDropdown()}>\r\n                                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateProjectRole(this.role)}</DropdownToggle>\r\n                                <DropdownMenu>\r\n                                    <DropdownItem onClick={() => this.role = ProjectRole.Head}>{translateProjectRole(ProjectRole.Head)}</DropdownItem>\r\n                                    <DropdownItem onClick={() => this.role = ProjectRole.Executor}>{translateProjectRole(ProjectRole.Executor)}</DropdownItem>\r\n                                    <DropdownItem onClick={() => this.role = ProjectRole.Developer}>{translateProjectRole(ProjectRole.Developer)}</DropdownItem>\r\n                                    <DropdownItem onClick={() => this.role = ProjectRole.Tester}>{translateProjectRole(ProjectRole.Tester)}</DropdownItem>\r\n                                </DropdownMenu>\r\n                            </Dropdown>\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.attach()}\r\n                    >\r\n                        Прикрепить\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <div className=\"row justify-content-center\" style={{marginTop: \"5%\"}}>\r\n                <Button\r\n                    style={{width: \"80%\", borderColor: \"#66A5AD\", color: \"#66A5AD\", backgroundColor: \"#fff\"}}\r\n                    onClick={() => this.toggleWindow()}>Прикрепить участников</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {!this.addUserToProjectWindowOpen && this.renderButton()}\r\n                {this.addUserToProjectWindowOpen && this.renderAddUserToProjectWindow()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    attach() {\r\n        this.props.store.projectStore.attachUserToProject(this.props.store.projectStore.choosenProject.id, this.choosenUser.id, this.role)\r\n            .then((status) => {\r\n                if(status === 200) {\r\n                    this.props.store.projectStore.getProjectUsers(this.props.store.projectStore.choosenProject.id);\r\n                    this.addUserToProjectWindowOpen = false;\r\n                    this.notAttached = false;\r\n                } else {\r\n                    this.notAttached = true;\r\n                }\r\n            });\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\AddTask.tsx",["693"],"﻿import React from \"react\";\r\nimport { IAddTasksProps } from \"./IAddTasksProps\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport {\r\n    Button,\r\n    Dropdown,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    Input,\r\n    Label,\r\n    Modal,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalHeader,\r\n    Alert\r\n} from \"reactstrap\";\r\nimport Calendar from \"react-calendar\";\r\nimport { TaskType } from \"../../Typings/enums/TaskType\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\nimport { observer } from \"mobx-react\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { TaskPriority } from \"../../Typings/enums/TaskPriority\";\r\nimport { translatePriority, translateTaskType } from \"../../functions/translater\";\r\n\r\n@observer\r\nexport class AddTask extends React.Component<IAddTasksProps> {\r\n    addTaskWindowOpen: boolean;\r\n    responsibleDropdownOpen: boolean;\r\n    testerDropdownOpen: boolean;\r\n    taskTypeDropdownOpen: boolean;\r\n    priorityDropdownOpen: boolean;\r\n    taskName: string;\r\n    description: string;\r\n    startDate: Date | Date[] = new Date();\r\n    deadline: Date | Date[] = new Date();\r\n    priority: TaskPriority = TaskPriority.Average;\r\n    responsiblePerson: UserViewModel;\r\n    tester: UserViewModel;\r\n    taskType: TaskType = TaskType.Feature;\r\n    taskStatus: TaskStatus;\r\n    notSaved: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addTaskWindowOpen: observable,\r\n            responsibleDropdownOpen: observable,\r\n            testerDropdownOpen: observable,\r\n            taskTypeDropdownOpen: observable,\r\n            priorityDropdownOpen: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.responsiblePerson = this.props.store.projectStore.choosenProjectUsers[0];\r\n        this.tester = this.props.store.projectStore.choosenProjectUsers[0];\r\n    }\r\n\r\n    @action\r\n    toggleAddTaskWindow() {\r\n        this.addTaskWindowOpen = !this.addTaskWindowOpen;\r\n    }\r\n\r\n    @action\r\n    toggleResponsibleDropdown() {\r\n        this.responsibleDropdownOpen = !this.responsibleDropdownOpen;\r\n    }\r\n\r\n    toggleTesterDropdown() {\r\n        this.testerDropdownOpen = !this.testerDropdownOpen;\r\n    }\r\n\r\n    toggleTaskTypeDropdown() {\r\n        this.taskTypeDropdownOpen = !this.taskTypeDropdownOpen;\r\n    }\r\n\r\n    togglePriorityDropdown() {\r\n        this.priorityDropdownOpen = !this.priorityDropdownOpen;\r\n    }\r\n\r\n    renderTaskType() {\r\n        return(\r\n            <Dropdown \r\n                isOpen={this.taskTypeDropdownOpen}\r\n                toggle={() => this.toggleTaskTypeDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateTaskType(this.taskType)}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem onClick={() => this.taskType = TaskType.Feature}>Фича</DropdownItem>\r\n                    <DropdownItem onClick={() => this.taskType = TaskType.Bug}>Баг</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderPriority() {\r\n        return(\r\n            <Dropdown\r\n                isOpen={this.priorityDropdownOpen}\r\n                toggle={() => this.togglePriorityDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translatePriority(this.priority)}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem onClick={() => this.priority = TaskPriority.Average}>Средняя</DropdownItem>\r\n                    <DropdownItem onClick={() => this.priority = TaskPriority.High}>Высокая</DropdownItem>\r\n                    <DropdownItem onClick={() => this.priority = TaskPriority.Low}>Низкая</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        )\r\n    }\r\n\r\n    renderResponsibleDropdown() {\r\n        let users = this.props.store.projectStore.choosenProjectUsers;\r\n        let responsible = this.responsiblePerson;\r\n        return(\r\n            <Dropdown isOpen={this.responsibleDropdownOpen} toggle={() => this.toggleResponsibleDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{responsible !== undefined ? `${responsible.firstName} ${responsible.lastName}` : \"Пока нет пользователей\"}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    {users.map((user, index) => {\r\n                        return(\r\n                            <>\r\n                              {<DropdownItem key={index}  onClick={() => this.choosePerson(user, \"responsible\")}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                            </>\r\n                        );\r\n                    })}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderTesterDropdown() {\r\n        let users = this.props.store.projectStore.choosenProjectUsers;\r\n        let tester = this.tester;\r\n        return(\r\n            <Dropdown isOpen={this.testerDropdownOpen} toggle={() => this.toggleTesterDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{tester !== undefined ? `${tester.firstName} ${tester.lastName}` : \"Пока нет пользователей\"}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    {users.map((user, index) => {\r\n                        return(\r\n                            <>\r\n                                {<DropdownItem key={index}  onClick={() => this.choosePerson(user, \"tester\")}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                            </>\r\n                        );\r\n                    })}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderAddTaskWindow() {\r\n        let currentUser = this.props.store.userStore.currentUser;\r\n        return(\r\n            <Modal \r\n                style={{backgroundColor: \"#003b46\", color: \"#003b46\", fontSize: \"1.4em\"}}\r\n                isOpen={this.addTaskWindowOpen}\r\n                size=\"lg\"\r\n                centered\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n                toggle={() => this.toggleAddTaskWindow()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                   onClick={() => this.toggleAddTaskWindow()}/>\r\n                <ModalHeader closeButton>СОЗДАНИЕ ЗАДАЧИ</ModalHeader>\r\n                {this.notSaved && <Alert color=\"primary\">Что-то пошло не так и задача не сохранилась!!!</Alert>}\r\n                <ModalBody>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label style={{width: \"100%\"}} align=\"center\">НАЗВАНИЕ</Label>\r\n                        <Input style={{width: \"90%\"}} onChange={(e) => this.inputTaskName(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\" style={{marginTop: \"10px\"}}>\r\n                        <Label style={{width: \"100%\"}} align=\"center\">ОПИСАНИЕ</Label>\r\n                        <textarea style={{width: \"90%\"}} onChange={(e) => this.inputDescription(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ДАТА НАЧАЛА</Label>\r\n                            <div style={{width: \"100%\", paddingLeft: \"15%\"}}>\r\n                                <Calendar\r\n                                    value={this.startDate}\r\n                                    onChange={(date) => this.inputDate(date, \"startDate\")}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ДЕДЛАЙН</Label>\r\n                            <div style={{width: \"100%\", paddingLeft: \"15%\"}}>\r\n                                <Calendar\r\n                                    value={this.deadline}\r\n                                    onChange={(date) => this.inputDate(date, \"deadline\")}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ТЕСТИРОВЩИК</Label>\r\n                            <div className=\"row justify-content-center\">\r\n                                {this.renderTesterDropdown()}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ОТВЕТСТВЕННЫЙ</Label>\r\n                            <div className=\"row justify-content-center\">\r\n                                {this.renderResponsibleDropdown()}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ТИП</Label>\r\n                            <div className=\"row justify-content-center\">\r\n                                {this.renderTaskType()}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">ПРИОРИТЕТ</Label>\r\n                            <div className=\"row justify-content-center\">\r\n                                {this.renderPriority()}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label style={{width: \"100%\"}} align=\"center\">Автор:\r\n                            <span>{currentUser.firstName} {currentUser.lastName}</span>\r\n                        </Label>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.saveTask()}>\r\n                        СОХРАНИТЬ\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <div className=\"row justify-content-center\" style={{marginTop: \"5%\"}}>\r\n                <Button\r\n                    style={{width: \"80%\", borderColor: \"#66A5AD\", color: \"#66A5AD\", backgroundColor: \"#fff\"}}\r\n                    onClick={() => this.toggleAddTaskWindow()}>Создать задачу</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.addTaskWindowOpen && this.renderAddTaskWindow()}\r\n                {!this.addTaskWindowOpen && this.renderButton()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    inputTaskName(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.taskName = event.currentTarget.value;\r\n    }\r\n\r\n    inputDescription(event: React.FormEvent<HTMLTextAreaElement>): void {\r\n        this.description = event.currentTarget.value;\r\n    }\r\n\r\n    inputDate(date: Date | Date[], dateType: string): void {\r\n        if(dateType === \"startDate\") {\r\n            this.startDate = date;\r\n        } else if(dateType === \"deadline\") {\r\n            this.deadline = date;\r\n        }\r\n    }\r\n\r\n    choosePerson(user: UserViewModel, type: string): void {\r\n        if(type === \"responsible\") {\r\n            this.responsiblePerson = user;\r\n        } else if(type === \"tester\") {\r\n            this.tester = user;\r\n        }\r\n    }\r\n\r\n    saveTask() {\r\n        this.props.store.taskStore.addOrUpdateTask(this.taskName, this.description, this.startDate, this.deadline, this.taskType, this.taskStatus, this.priority, this.tester.id, this.responsiblePerson.id, this.props.store.userStore.currentUser.id, 0, this.props.store.projectStore.choosenProject.id)\r\n            .then((status) => {\r\n                if(status === 200) {\r\n                    this.props.store.taskStore.getTasks(this.props.store.projectStore.choosenProject.id);\r\n                    this.addTaskWindowOpen = false;\r\n                    this.notSaved = false;\r\n                } else {\r\n                    this.notSaved = true;\r\n                    this.addTaskWindowOpen = false;\r\n                }\r\n            });\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Tasks.tsx",["694","695"],"﻿import React from \"react\";\r\nimport { ITasksProps } from \"./ITasksProps\";\r\nimport { TaskViewModel } from \"../../Typings/viewModels/TaskViewModel\";\r\nimport { Table, Modal, Alert } from \"reactstrap\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { makeObservable, observable, toJS } from \"mobx\";\r\nimport { Task } from \"./Task\";\r\nimport { observer } from \"mobx-react\";\r\nimport { translateTaskType } from \"../../functions/translater\";\r\nimport { formatDate } from \"../../functions/formatDate\";\r\n\r\n@observer\r\nexport class Tasks extends React.Component<ITasksProps> {\r\n    taskOpen: boolean;\r\n    taskToRender: TaskViewModel;\r\n\r\n    getResponsible(responsible: number): UserViewModel {\r\n        return this.props.store.userStore.users\r\n            .filter(u => u.id === responsible)[0];\r\n    }\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            taskOpen: observable\r\n        });\r\n    }\r\n\r\n    renderTask() {\r\n        return(\r\n            <Modal\r\n                isOpen={this.taskOpen}\r\n                toggle={() => this.taskOpenToggle()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                   onClick={() => this.taskOpenToggle()}/>\r\n                <Task store={this.props.store} task={this.taskToRender}/>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    renderAlert() {\r\n        return(\r\n            <Alert color=\"primary\">Задач пока нет!!!</Alert>\r\n        );\r\n    }\r\n\r\n    renderTasks(tasks: TaskViewModel[]) {\r\n        return(\r\n            <Table bordered style={{backgroundColor: \"#fff\", color:\"#003B46\", marginTop: \"2%\", fontSize: \"1.2em\"}}>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Номер</th>\r\n                        <th>Задача</th>\r\n                        <th>Дедлайн</th>\r\n                        <th>Тип задачи</th>\r\n                        <th>Ответственный</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {tasks.map((task) => {\r\n                    let responsible = this.getResponsible(task.responsible);//вообще здесь лучше дропдаун сделать\r\n                    return(\r\n                        <tr key={task.id} onClick={() => this.taskOpenToggle(task)}>\r\n                            <th>{task.id}</th>\r\n                            <th>{task.header}</th>\r\n                            <th>{formatDate(task.deadlineDate)}</th>\r\n                            <th>{translateTaskType(task.taskType)}</th>\r\n                            <th>{responsible?.firstName + \" \" + responsible?.lastName}</th>\r\n                        </tr>\r\n                    );\r\n                })}\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let currentProjectTasks = this.props.store.taskStore.currentProjectTasks;\r\n        let tasks = currentProjectTasks.filter(t => t.status === this.props.status);\r\n        return(\r\n            <>\r\n                {tasks !== undefined && this.renderTasks(tasks)}\r\n                {(tasks === undefined || tasks.length === 0) && this.renderAlert()}\r\n                {this.taskOpen && this.renderTask()}\r\n            </>\r\n        )\r\n    }\r\n\r\n    taskOpenToggle(task: TaskViewModel = new TaskViewModel()) {\r\n        this.taskOpen = !this.taskOpen;\r\n        this.taskToRender = task;\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskRole.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\Users.tsx",["696"],"﻿import React from \"react\";\r\nimport { IUsersProps } from \"./IUsersProps\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { Table } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport { User } from \"./User\";\r\n\r\n@observer\r\nexport class  Users extends React.Component<IUsersProps> {\r\n    renderUsers(users: UserViewModel[]) {\r\n        return(\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Id</th>\r\n                        <th>Имя Фамилия</th>\r\n                        <th>Email</th>\r\n                        <th>Роль</th>\r\n                        <th>Управление</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {users.map(user => {\r\n                        return(\r\n                           <User store={this.props.store} currentUser={user}/>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderUsers(this.props.store.userStore.users)}\r\n            </>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentGroupViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserReadModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\Role.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\User.tsx",["697"],"﻿import React from \"react\";\r\nimport { IUserProps } from \"./IUserProps\";\r\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Button } from \"reactstrap\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Role } from \"../../Typings/enums/Role\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { observer } from \"mobx-react\";\r\nimport {UserReadModel} from \"../../Typings/viewModels/UserReadModel\";\r\nimport {translateRole} from \"../../functions/translater\";\r\n\r\n@observer\r\nexport class User extends React.Component<IUserProps> {\r\n    roleDropdownOpen: boolean;\r\n    role: Role;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            roleDropdownOpen: observable,\r\n            role: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.role = this.props.currentUser.role;\r\n    }\r\n\r\n    toggleRoleDropdown() {\r\n        this.roleDropdownOpen = !this.roleDropdownOpen;\r\n    }\r\n\r\n    chooseUserRole(role: Role) {\r\n        this.role = role;\r\n    }\r\n\r\n    renderRoleDropdown(role: Role) {\r\n        return(\r\n            <Dropdown isOpen={this.roleDropdownOpen} toggle={() => this.toggleRoleDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateRole(role)}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Developer)}>{translateRole(Role.Developer)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Tester)}>{translateRole(Role.Tester)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Administrator)}>{translateRole(Role.Administrator)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Accounter)}>{translateRole(Role.Accounter)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Marketolog)}>{translateRole(Role.Marketolog)}</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderUser(user: UserViewModel) {\r\n        return(\r\n            <tr>\r\n                <th>{user.id}</th>\r\n                <th>{user.firstName} {user.lastName}</th>\r\n                <th>{user.email}</th>\r\n                <th>{this.renderRoleDropdown(this.role)}</th>\r\n                <th>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Button color=\"success\" \r\n                            className=\"controlButton\"\r\n                            onClick={() => this.updateUser()}>СОХРАНИТЬ</Button>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Button color=\"danger\"\r\n                            className=\"controlButton\"\r\n                            onClick={() => this.deleteUser()}>УДАЛИТЬ</Button>\r\n                    </div>\r\n                </th>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let user = this.props.currentUser;\r\n        return(\r\n            <>{this.renderUser(user)}</>\r\n        );\r\n    }\r\n\r\n    updateUser() {\r\n        let currentUser = this.props.currentUser;\r\n        let user = new UserReadModel();\r\n        user.id = currentUser.id;\r\n        user.role = this.role;\r\n        user.firstName = currentUser.firstName;\r\n        user.lastName = currentUser.lastName;\r\n        user.email = currentUser.email;\r\n        this.props.store.userStore.addOrUpdateUser(user);\r\n    }\r\n\r\n    deleteUser() {\r\n        this.props.store.userStore.deleteUser(this.props.currentUser.id);\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\AddUser.tsx",["698"],"﻿import React from \"react\";\r\nimport {IUsersProps} from \"./IUsersProps\";\r\nimport {makeObservable, observable} from \"mobx\";\r\nimport {\r\n    Button,\r\n    Dropdown,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    Input,\r\n    Label,\r\n    Modal,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalHeader\r\n} from \"reactstrap\";\r\nimport {Alert} from \"react-bootstrap\";\r\nimport {Role} from \"../../Typings/enums/Role\";\r\nimport {observer} from \"mobx-react\";\r\nimport {UserReadModel} from \"../../Typings/viewModels/UserReadModel\";\r\nimport {translateRole} from \"../../functions/translater\";\r\n\r\n@observer\r\nexport class AddUser extends React.Component<IUsersProps>{\r\n    addUserWindowOpen: boolean;\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    password: string;\r\n    roleDropdownOpen: boolean;\r\n    role: Role;\r\n    notSaved: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addUserWindowOpen: observable,\r\n            roleDropdownOpen: observable\r\n        });\r\n        this.role = Role.Developer;\r\n    }\r\n\r\n    isAuthor(role: Role) {\r\n        return role === Role.Administrator;\r\n    }\r\n\r\n    toggleAddUserWindow() {\r\n        this.addUserWindowOpen = !this.addUserWindowOpen;\r\n    }\r\n\r\n    toggleRoleDropdown() {\r\n        this.roleDropdownOpen = !this.roleDropdownOpen;\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <>\r\n                <div className=\"col-6\">\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.toggleAddUserWindow()}>Добавить пользователя</Button>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderRoleDropdown() {\r\n        return(\r\n            <Dropdown isOpen={this.roleDropdownOpen} toggle={() => this.toggleRoleDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateRole(this.role)}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Developer)}>{translateRole(Role.Developer)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Administrator)}>{translateRole(Role.Administrator)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Tester)}>{translateRole(Role.Tester)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Accounter)}>{translateRole(Role.Accounter)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Marketolog)}>{translateRole(Role.Marketolog)}</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderAddUserWindow() {\r\n        return(\r\n            <Modal\r\n                isOpen={this.addUserWindowOpen}\r\n                toggle={() => this.toggleAddUserWindow()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                onClick={() => this.toggleAddUserWindow()}/>\r\n                {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и пользователь не сохранился!</Alert>}\r\n                <ModalHeader closeButton>ДОБАВЛЕНИЕ НОВОГО ПОЛЬЗОВАТЕЛЯ</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                            <Label>Имя</Label>\r\n                            <Input onChange={(e) => this.inputFirstName(e)}/>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                            <Label>Фамилия</Label>\r\n                            <Input onChange={(e) => this.inputLastName(e)}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                            <Label>Email</Label>\r\n                            <Input onChange={(e) => this.inputEmail(e)}/>\r\n                        </div>\r\n                        {this.isAuthor(this.props.store.userStore.currentUser?.role) &&\r\n                            <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                                <Label>Password</Label>\r\n                                <Input onChange={(e) => this.inputPassword(e)}/>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                            {this.renderRoleDropdown()}\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.saveUser()}>\r\n                        СОХРАНИТЬ\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.addUserWindowOpen && this.renderAddUserWindow()}\r\n                {!this.addUserWindowOpen && this.renderButton()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    inputFirstName(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.firstName = event.currentTarget.value;\r\n    }\r\n\r\n    inputLastName(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.lastName = event.currentTarget.value;\r\n    }\r\n\r\n    inputEmail(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.email = event.currentTarget.value;\r\n    }\r\n\r\n    inputPassword(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.password = event.currentTarget.value;\r\n    }\r\n\r\n    chooseRole(role: Role) {\r\n        this.role = role;\r\n    }\r\n\r\n    saveUser() {\r\n        let user = new UserReadModel();\r\n        user.firstName = this.firstName;\r\n        user.lastName = this.lastName;\r\n        user.email = this.email;\r\n        user.role = this.role;\r\n        user.password = this.password;\r\n        this.props.store.userStore.addOrUpdateUser(user)\r\n            .then(status => {\r\n                if(status !== 200) {\r\n                    this.notSaved = true;\r\n                } else {\r\n                    this.notSaved = false;\r\n                    this.addUserWindowOpen = false;\r\n                }\r\n            });\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\ProjectViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\renderSpinner.tsx",["699"],"﻿import React from \"react\";\r\nimport { Spinner } from 'reactstrap';\r\n\r\nexport function renderSpinner() {\r\n    return(\r\n        <Spinner color=\"primary\"/>\r\n    )\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\translater.tsx",["700"],"﻿import {Role} from \"../Typings/enums/Role\";\r\nimport {TaskType} from \"../Typings/enums/TaskType\";\r\nimport {TaskPriority} from \"../Typings/enums/TaskPriority\";\r\nimport {ProjectRole} from \"../Typings/enums/ProjectRole\";\r\nimport {TaskRole} from \"../Typings/enums/TaskRole\";\r\nimport {TaskStatus} from \"../Typings/enums/TaskStatus\";\r\n\r\nexport function translateRole(role: Role): string {\r\n    if(role === Role.Developer) {\r\n        return \"Разработчик\";\r\n    } else if(role === Role.Marketolog) {\r\n        return \"Маркетолог\";\r\n    } else if(role === Role.Accounter) {\r\n        return \"Бухгалтер\";\r\n    } else if(role === Role.Administrator) {\r\n        return \"Администратор\";\r\n    } else if(role === Role.Tester) {\r\n        return \"Тестировщик\";\r\n    } \r\n    return \"\";\r\n}\r\n\r\nexport function translateTaskType(taskType: TaskType): string {\r\n    if(taskType === TaskType.Bug) {\r\n        return \"Баг\"\r\n    } else if(taskType === TaskType.Feature) {\r\n        return \"Фича\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport function translatePriority(priority: TaskPriority): string {\r\n    if(priority === TaskPriority.High) {\r\n        return \"Высокая\";\r\n    } else if(priority === TaskPriority.Average) {\r\n        return \"Средняя\";\r\n    } else if(priority === TaskPriority.Low) {\r\n        return \"Низкая\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport function translateProjectRole(role: ProjectRole): string {\r\n    if(role === ProjectRole.Head) {\r\n        return \"Руководитель\";\r\n    } else if(role === ProjectRole.Executor) {\r\n        return \"Исполнитель\";\r\n    } else if(role === ProjectRole.Developer) {\r\n        return \"Разработчик\";\r\n    } else if(role === ProjectRole.Tester) {\r\n        return \"Тестировщик\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport function translateTaskRole(role: TaskRole) : string {\r\n    if(role === TaskRole.Responsible) {\r\n        return \"Ответственный\";\r\n    } else if(role === TaskRole.Author) {\r\n        return \"Автор\";\r\n    } else if(role === TaskRole.Tester) {\r\n        return \"Тестировщик\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport function translateStatus(status: TaskStatus): string {\r\n    if(status ===  TaskStatus.InProgress) {\r\n        return \"В прогрессе\";\r\n    } else if(status === TaskStatus.Completed) {\r\n        return \"Завершена\";\r\n    } else if(status === TaskStatus.Future) {\r\n        return \"Еще не начата\";\r\n    }\r\n    return \"\";\r\n} ","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Authorization.tsx",["701"],"﻿import React from \"react\";\r\nimport RootStore from \"../../stores/RootStore\";\r\nimport { Label, Input, Button, Alert }from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\n\r\ninterface IAuthorizationProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nexport class Authorization extends React.Component<IAuthorizationProps> {\r\n    email: string;\r\n    password: string;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            email: observable,\r\n            password: observable\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container\" style={{backgroundColor:\"#66A5AD\", marginTop: \"5%\", color: \"#fff\", fontSize: \"1.5em\"}}>\r\n                {this.props.store.userStore.wrongCredetianals && <div className=\"row justify-content-center\">\r\n                    <Alert color=\"danger\">Пользователя с такими данными не существует. Попробуйте ещё раз</Alert>\r\n                </div> }\r\n                <div className=\"row justify-content-center\">\r\n                    <Label style={{width: \"100%\", marginTop: \"10px\"}}>EMAIL</Label>\r\n                    <Input\r\n                        style={{width: \"80%\"}}\r\n                        onChange={(e) => this.inputEmail(e)}/>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <Label style={{width: \"100%\"}}>ПАРОЛЬ</Label>\r\n                    <Input\r\n                        style={{width: \"80%\"}}\r\n                        type=\"password\"\r\n                        onChange={(e) => this.inputPassword(e)}/>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <Button\r\n                        style={{width: \"80%\", backgroundColor: \"#07575b\", marginTop: \"25px\", marginBottom: \"15px\"}}\r\n                        onClick={() => this.authorize()}>\r\n                        ВОЙТИ\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    inputEmail(event: React.FormEvent<HTMLInputElement>) {\r\n        this.email = event.currentTarget.value;\r\n    }\r\n\r\n    inputPassword(event: React.FormEvent<HTMLInputElement>) {\r\n        this.password = event.currentTarget.value;\r\n    }\r\n\r\n    async authorize() {\r\n        const response = await fetch(\"/authorization\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({email: this.email, password: this.password})\r\n        });\r\n        if(response.status === 200) {\r\n            this.props.store.userStore.authorizationRequire(false);\r\n            this.props.store.userStore.wrongCredetianalsToggle(false);\r\n            this.props.store.userStore.getCurrentUser();\r\n        } else {\r\n            this.props.store.userStore.authorizationRequire(true);\r\n            this.props.store.userStore.wrongCredetianalsToggle(true);\r\n        }\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Task.tsx",["702"],"﻿import React from \"react\";\r\nimport { ITaskProps } from \"../MyWork/ITaskProps\";\r\nimport {\r\n    Button,\r\n    Dropdown,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalHeader,\r\n    Label\r\n} from \"reactstrap\";\r\nimport { TaskViewModel } from \"../../Typings/viewModels/TaskViewModel\";\r\nimport { renderSpinner } from \"../../functions/renderSpinner\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\nimport { TaskType } from \"../../Typings/enums/TaskType\";\r\nimport { TaskPriority } from \"../../Typings/enums/TaskPriority\";\r\nimport { translatePriority, translateStatus, translateTaskType } from \"../../functions/translater\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport Calendar from \"react-calendar\";\r\nimport {Comments} from \"../Comments/Comments\";\r\n\r\n@observer\r\nexport class Task extends React.Component<ITaskProps> {\r\n    task: TaskViewModel;\r\n    statusDropdownOpen: boolean;\r\n    priorityDropdownOpen: boolean;\r\n    typeDropdownOpen: boolean;\r\n    testerDropdownOpen: boolean;\r\n    responsibleDropdownOpen: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            statusDropdownOpen: observable,\r\n            priorityDropdownOpen: observable,\r\n            typeDropdownOpen: observable,\r\n            task: observable,\r\n            testerDropdownOpen: observable,\r\n            responsibleDropdownOpen: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.task = this.props.task;\r\n    }\r\n\r\n    renderStatusDropdown() {\r\n        return(\r\n            <>\r\n                <Dropdown\r\n                    isOpen={this.statusDropdownOpen}\r\n                    toggle={() => this.toggleStatus()}>\r\n                    <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateStatus(this.task.status)}</DropdownToggle>\r\n                    <DropdownMenu>\r\n                        <DropdownItem onClick={() => this.task.status = TaskStatus.InProgress}>{translateStatus(TaskStatus.InProgress)}</DropdownItem>\r\n                        <DropdownItem onClick={() => this.task.status = TaskStatus.Completed}>{translateStatus(TaskStatus.Completed)}</DropdownItem>\r\n                        <DropdownItem onClick={() => this.task.status = TaskStatus.Future}>{translateStatus(TaskStatus.Future)}</DropdownItem>\r\n                    </DropdownMenu>\r\n                </Dropdown>\r\n            </>\r\n        );\r\n    }\r\n\r\n    toggleStatus() {\r\n        this.statusDropdownOpen = !this.statusDropdownOpen;\r\n    }\r\n\r\n    togglePriority() {\r\n        this.priorityDropdownOpen = !this.priorityDropdownOpen;\r\n    }\r\n\r\n    toggleTypeDropdown() {\r\n        this.typeDropdownOpen = !this.typeDropdownOpen;\r\n    }\r\n\r\n    toggleResponsibleDropdown() {\r\n        this.responsibleDropdownOpen = !this.responsibleDropdownOpen;\r\n    }\r\n\r\n    toggleTesterDropdown() {\r\n        this.testerDropdownOpen = !this.testerDropdownOpen;\r\n    }\r\n\r\n    renderResponsible() {\r\n        let users = this.props.store.userStore.users;\r\n        let responsible = this.props.store.userStore.users.filter(u => u.id === this.task.responsible)[0];\r\n        return(\r\n            <Dropdown isOpen={this.responsibleDropdownOpen} toggle={() => this.toggleResponsibleDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{responsible !== undefined ? `${responsible.firstName} ${responsible.lastName}` : \"Пока нет пользователей\"}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    {users.map((user, index) => {\r\n                        return(\r\n                            <>\r\n                                {<DropdownItem key={index} onClick={() => this.task.responsible = user.id}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                            </>\r\n                        );\r\n                    })}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n    \r\n    renderTester() {\r\n        let users = this.props.store.userStore.users;\r\n        let tester = this.props.store.userStore.users.filter(u => u.id === this.task.tester)[0];\r\n        return(\r\n            <Dropdown isOpen={this.testerDropdownOpen} toggle={() => this.toggleTesterDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{tester !== undefined ? `${tester.firstName} ${tester.lastName}` : \"Пока нет пользователей\"}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    {users.map((user, index) => {\r\n                        return(\r\n                            <>\r\n                                {<DropdownItem key={index}  onClick={() => this.task.tester = user.id}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                            </>\r\n                        );\r\n                    })}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderTaskPriority() {\r\n        return(\r\n            <>\r\n                <Dropdown\r\n                    isOpen={this.priorityDropdownOpen}\r\n                    toggle={() => this.togglePriority()}>\r\n                    <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translatePriority(this.task.priority)}</DropdownToggle>\r\n                    <DropdownMenu>\r\n                        <DropdownItem onClick={() => this.task.priority = TaskPriority.Average}>{translatePriority(TaskPriority.Average)}</DropdownItem>\r\n                        <DropdownItem onClick={() => this.task.priority = TaskPriority.Low}>{translatePriority(TaskPriority.Low)}</DropdownItem>\r\n                        <DropdownItem onClick={() => this.task.priority = TaskPriority.High}>{translatePriority(TaskPriority.High)}</DropdownItem>\r\n                    </DropdownMenu>\r\n                </Dropdown>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderTypeDropdown() {\r\n        return(\r\n            <>\r\n                <Dropdown\r\n                    isOpen={this.typeDropdownOpen}\r\n                    toggle={() => this.toggleTypeDropdown()}>\r\n                    <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateTaskType(this.task.taskType)}</DropdownToggle>\r\n                    <DropdownMenu>\r\n                        <DropdownItem onClick={() => this.task.taskType = TaskType.Feature}>{translateTaskType(TaskType.Feature)}</DropdownItem>\r\n                        <DropdownItem onClick={() => this.task.taskType = TaskType.Bug}>{translateTaskType(TaskType.Bug)}</DropdownItem>\r\n                    </DropdownMenu>\r\n                </Dropdown>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderTask(task: TaskViewModel) {\r\n        let author = this.props.store.userStore.users.filter(u => u.id === task.author)[0];\r\n        return(\r\n            <>\r\n                <ModalHeader style={{fontSize: \"1.5em\"}}>{task.header}</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"container-fluid\">\r\n                        <div className=\"row justify-content-center\">\r\n                                <div className=\"col-12\">\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <p style={{fontSize: \"1.2em\"}}>{task.description}</p>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-lg-3 col-md-3 col-sm-12 col-xs-12\">\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <Label style={{width: \"100%\"}} align=\"center\">Приоритет: </Label>\r\n                                        {this.renderTaskPriority()}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-lg-3 col-md-3 col-sm-12 col-xs-12\">\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <Label style={{width: \"100%\"}} align=\"center\">Статус: </Label>\r\n                                        {this.renderStatusDropdown()}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-lg-3 col-md-3 col-sm-12 col-xs-12\">\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <Label style={{width: \"100%\"}} align=\"center\">Тип: </Label>\r\n                                        {this.renderTypeDropdown()}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"row justify-content-center\">\r\n                                    <Label style={{width: \"100%\"}} align=\"center\">Ответственный: </Label>\r\n                                    {this.renderResponsible()}\r\n                                </div>\r\n                                <div className=\"row justify-content-center\">\r\n                                    <Label style={{width: \"100%\"}} align=\"center\">Тестировщик: </Label>\r\n                                    {this.renderTester()}\r\n                                </div>\r\n                                <div className=\"row justify-content-center\">\r\n                                    <Label>Автор: </Label>\r\n                                    {author.firstName} {author.lastName}\r\n                                </div>\r\n                                <div className=\"row justify-content-center\">\r\n                                    <Label style={{width: \"100%\"}} align=\"center\">Дата начала: </Label>\r\n                                    <Calendar\r\n                                        value={new Date(this.task.startDate)}\r\n                                        onChange={(date) => this.task.startDate = date}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"row justify-content-center\">\r\n                                    <Label style={{width: \"100%\"}} align=\"center\">Дедлайн: </Label>\r\n                                    <Calendar\r\n                                        value={new Date(this.task.deadlineDate)}\r\n                                        onChange={(date) => this.task.deadlineDate = date}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                    </div>\r\n                    <Comments taskId={this.props.task.id} store={this.props.store}/>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.save()}>\r\n                        СОХРАНИТЬ\r\n                    </Button>\r\n                </ModalFooter>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.task !== undefined && this.renderTask(this.task)}\r\n                {this.task === undefined && renderSpinner()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    save() {\r\n        let task = this.task;\r\n        this.props.store.taskStore.addOrUpdateTask(task.header, task.description, task.startDate, task.deadlineDate, task.taskType, task.status, task.priority, task.tester,task.responsible,task.author, task.id, 0)\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\TaskViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskPriority.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskType.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\ProjectRole.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Comments\\Comments.tsx",["703"],"﻿import React from \"react\";\r\nimport { ICommentsProps } from \"./ICommentsProps\";\r\nimport { CommentViewModel } from \"../../Typings/viewModels/CommentViewModel\";\r\nimport { observer } from \"mobx-react\";\r\nimport { AddComment } from \"./AddComment\";\r\nimport { Card, CardText, CardTitle, Label } from \"reactstrap\";\r\n\r\n@observer\r\nexport class Comments extends React.Component<ICommentsProps> {\r\n    componentDidMount(): void {\r\n        this.props.store.commentStore.getCurrentTaskComments(this.props.taskId);\r\n    }\r\n\r\n    deleteComment(commentId: number) {\r\n        this.props.store.commentStore.deleteComment(commentId)\r\n            .then(() => this.props.store.commentStore.getCurrentTaskComments(this.props.taskId));\r\n    }\r\n\r\n    isAuthor(userId: number): boolean {\r\n        return this.props.store.userStore.currentUser.id === userId;\r\n    }\r\n\r\n    renderComments(comments: CommentViewModel[]) {\r\n        return (\r\n            <>\r\n                {comments.map(comment => {\r\n                    return(\r\n                        <Card sm=\"12\">\r\n                            <div className=\"row justify-content-center\">\r\n                                {this.isAuthor(comment.user.id) && <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                                   onClick={() => this.deleteComment(comment.id)}/>}\r\n                                <CardTitle>{comment.user.firstName} {comment.user.lastName}</CardTitle>\r\n                            </div>\r\n                            <div className=\"row justify-content-center\">\r\n                                <CardText>{comment.text}</CardText>\r\n                            </div>\r\n                        </Card>\r\n                    );\r\n                })}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let commentGroup = this.props.store.commentStore.currentCommentGroup;\r\n        let comments = commentGroup.comments;\r\n        return(\r\n            <>\r\n                <Label style={{width: \"100%\"}} align=\"center\">КОММЕНТАРИИ</Label>\r\n                <AddComment store={this.props.store} taskId={this.props.taskId} groupId={commentGroup.id}/>\r\n                {comments.length > 0 && this.renderComments(comments)}\r\n            </>\r\n        )\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Comments\\AddComment.tsx",["704"],"﻿import React from \"react\";\r\nimport { Input, Button, Alert } from \"reactstrap\";\r\nimport { IAddCommentsProps } from \"./IAddCommentsProps\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\n\r\n@observer\r\nexport class AddComment extends React.Component<IAddCommentsProps>{\r\n    commentText: string;\r\n    notSaved: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            commentText: observable\r\n        })\r\n    }\r\n    render() {\r\n        return(\r\n            <>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-9\">\r\n                        <Input placeholder=\"Добавить комментарий\" value={this.commentText} onChange={(e) => { this.inputComment(e) }}/>\r\n                    </div>\r\n                    <div className=\"col-3\">\r\n                        <Button style={{width: \"100%\", backgroundColor: \"#07575b\"}} \r\n                             onClick={() => this.addComment()}>Добавить</Button>\r\n                    </div>\r\n                    {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и комментарий не сохранился</Alert>}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    inputComment(event: React.FormEvent<HTMLInputElement>) {\r\n        this.commentText = event.currentTarget.value;\r\n    }\r\n\r\n    addComment() {\r\n        let commentStore = this.props.store.commentStore;\r\n        let userStore = this.props.store.userStore;\r\n        commentStore.addComment(this.commentText, userStore.currentUser.id, this.props.groupId)\r\n            .then((status) => {\r\n                if (status === 200) {\r\n                    \r\n                    commentStore.getCurrentTaskComments(this.props.taskId);\r\n                    this.commentText = \"\";\r\n                    this.notSaved = false;\r\n                } else {\r\n                    this.notSaved = true;\r\n                }\r\n            });\r\n    }\r\n}",["705","706"],"C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\formatDate.tsx",["707"],"﻿export function formatDate(dateStr: string) {\r\n    let date = new Date(dateStr);\r\n\r\n    let year = date.getFullYear();\r\n    let month = date.getMonth() + 1;\r\n    let day = date.getDate();\r\n    return day + '-' + month + '-' + year;\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\index.tsx",[],["708","709"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\App.tsx",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx",["710"],"﻿import { observable, makeObservable } from \"mobx\";\r\nimport UserStore from \"./UserStore\";\r\nimport CourseStore from \"./CourseStore\";\r\nimport LessonStore from \"./LessonStore\";\r\nimport TaskStore from \"./TaskStore\";\r\nimport CommentStore from \"./CommentStore\";\r\nimport WordStore from \"./WordStore\";\r\nimport TrainingStore from \"./TrainingStore\";\r\n\r\nexport class RootStore {\r\n    userStore: UserStore;\r\n    courseStore: CourseStore;\r\n    lessonStore: LessonStore;\r\n    taskStore: TaskStore;\r\n    commentStore: CommentStore;\r\n    wordStore: WordStore;\r\n    trainingStore: TrainingStore;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            userStore: observable,\r\n            courseStore: observable,\r\n            lessonStore: observable,\r\n            taskStore: observable,\r\n            commentStore: observable,\r\n            wordStore: observable,\r\n            trainingStore: observable\r\n        });\r\n        this.userStore = new UserStore();\r\n        this.courseStore = new CourseStore();\r\n        this.lessonStore = new LessonStore();\r\n        this.taskStore = new TaskStore();\r\n        this.commentStore = new CommentStore();\r\n        this.wordStore = new WordStore();\r\n        this.trainingStore = new TrainingStore();\r\n    }\r\n\r\n    reset() {\r\n        this.exit()\r\n            .then(() => {\r\n                this.userStore = new UserStore();\r\n                this.courseStore = new CourseStore();\r\n                this.lessonStore = new LessonStore();\r\n                this.taskStore = new TaskStore();\r\n                this.commentStore = new CommentStore();\r\n                this.wordStore = new WordStore();\r\n                this.trainingStore = new TrainingStore();\r\n            });\r\n    }\r\n\r\n    async exit() {\r\n        const response = await fetch(\"/exit\");\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default RootStore;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx",["711"],"﻿import { UserViewModel } from \"../Typings/viewModels/UserViewModel\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\n\r\nclass UserStore {\r\n    currentUser: UserViewModel;\r\n    authorizationRequired: boolean = true;\r\n    registrationRequired: boolean = false;\r\n    wrongCredetianals: boolean = false;\r\n    users: UserViewModel[] = new Array<UserViewModel>();\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            currentUser: observable,\r\n            authorizationRequired: observable,\r\n            wrongCredetianals: observable,\r\n            registrationRequired: observable\r\n        });\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        this.getCurrentUser();\r\n        this.getUsers();\r\n    }\r\n\r\n    async getCurrentUser() {\r\n        const response = await fetch(\"/getcurrentuser\");\r\n        if(response.status === 200) {\r\n            this.currentUser = await response.json();\r\n            this.authorizationRequired = false;\r\n        } else {\r\n            this.authorizationRequired = true;\r\n        }\r\n    }\r\n\r\n    async getUsers() {\r\n        const response = await fetch(\"/getusers\");//todo: реализовть\r\n        if(response.status === 200) {\r\n            this.users = await response.json();\r\n        }\r\n    }\r\n\r\n    @action\r\n    authorizationRequire(required: boolean) {\r\n        this.authorizationRequired = required;\r\n    }\r\n\r\n    @action\r\n    registrationRequire(required: boolean) {\r\n        this.registrationRequired = required;\r\n    }\r\n\r\n    @action\r\n    registrationToggle() {\r\n        this.registrationRequired = !this.registrationRequired;\r\n        this.authorizationRequired = !this.authorizationRequired;\r\n    }\r\n\r\n    @action\r\n    wrongCredetianalsToggle(turn: boolean) {\r\n        this.wrongCredetianals = turn;\r\n    }\r\n}\r\n\r\nexport default UserStore;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Authorization.tsx",["712"],"﻿import React from \"react\";\r\nimport RootStore from \"../../stores/RootStore\";\r\nimport { Label, Input, Button, Alert }from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\n\r\ninterface IAuthorizationProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nexport class Authorization extends React.Component<IAuthorizationProps> {\r\n    email: string;\r\n    password: string;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            email: observable,\r\n            password: observable\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid authorizationForm\">\r\n                {this.props.store.userStore.wrongCredetianals && <div className=\"row justify-content-center\">\r\n                    <Alert color=\"danger\">Пользователя с такими данными не существует. Попробуйте ещё раз</Alert>\r\n                </div> }\r\n                <div className=\"row justify-content-center\">\r\n                    <Label style={{width: \"100%\", marginTop: \"10px\"}}>EMAIL</Label>\r\n                    <Input\r\n                        style={{width: \"80%\"}}\r\n                        onChange={(e) => this.inputEmail(e)}/>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <Label style={{width: \"100%\"}}>ПАРОЛЬ</Label>\r\n                    <Input\r\n                        style={{width: \"80%\"}}\r\n                        type=\"password\"\r\n                        onChange={(e) => this.inputPassword(e)}/>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <Button\r\n                        style={{width: \"80%\", backgroundColor: \"#07575b\", marginTop: \"25px\", marginBottom: \"15px\"}}\r\n                        onClick={() => this.authorize()}>\r\n                        ВОЙТИ\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    inputEmail(event: React.FormEvent<HTMLInputElement>) {\r\n        this.email = event.currentTarget.value;\r\n    }\r\n\r\n    inputPassword(event: React.FormEvent<HTMLInputElement>) {\r\n        this.password = event.currentTarget.value;\r\n    }\r\n\r\n    async authorize() {\r\n        const response = await fetch(\"/authorization\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({email: this.email, password: this.password})\r\n        });\r\n        if(response.status === 200) {\r\n            this.props.store.userStore.authorizationRequire(false);\r\n            this.props.store.userStore.wrongCredetianalsToggle(false);\r\n            this.props.store.userStore.getCurrentUser();\r\n        } else {\r\n            this.props.store.userStore.authorizationRequire(true);\r\n            this.props.store.userStore.wrongCredetianalsToggle(true);\r\n        }\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\ProjectViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentGroupViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\formatDate.tsx",["713"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\renderSpinner.tsx",["714"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\translater.tsx",["715"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\TaskViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Registration.tsx",["716","717"],"﻿import React from \"react\";\r\nimport RootStore from \"../../stores/RootStore\";\r\nimport { Label, Input, Button, Alert }from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\n\r\ninterface IRegistrationProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nexport class Registration extends React.Component<IRegistrationProps> {\r\n    email: string;\r\n    password: string;\r\n    firstName: string;\r\n    lastName: string;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            email: observable,\r\n            password: observable,\r\n            firstName: observable,\r\n            lastName: observable,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"col-12 authorizationForm\">\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label style={{width: \"100%\"}}>ИМЯ</Label>\r\n                        <Input\r\n                            style={{width: \"80%\"}}\r\n                            type=\"password\"\r\n                            onChange={(e) => this.inputFirstName(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label style={{width: \"100%\"}}>ФАМИЛИЯ</Label>\r\n                        <Input\r\n                            style={{width: \"80%\"}}\r\n                            type=\"password\"\r\n                            onChange={(e) => this.inputLastName(e)}/>\r\n                    </div>\r\n                    <Label style={{width: \"100%\", marginTop: \"10px\"}}>EMAIL</Label>\r\n                    <Input\r\n                        style={{width: \"80%\"}}\r\n                        onChange={(e) => this.inputEmail(e)}/>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <Label style={{width: \"100%\"}}>ПАРОЛЬ</Label>\r\n                    <Input\r\n                        style={{width: \"80%\"}}\r\n                        type=\"password\"\r\n                        onChange={(e) => this.inputPassword(e)}/>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <Button\r\n                        style={{width: \"80%\", backgroundColor: \"#07575b\", marginTop: \"25px\", marginBottom: \"15px\"}}\r\n                        onClick={() => this.register()}>\r\n                        ЗАРЕГИСТРИРОВАТЬСЯ\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    inputEmail(event: React.FormEvent<HTMLInputElement>) {\r\n        this.email = event.currentTarget.value;\r\n    }\r\n\r\n    inputPassword(event: React.FormEvent<HTMLInputElement>) {\r\n        this.password = event.currentTarget.value;\r\n    }\r\n\r\n    inputFirstName(event: React.FormEvent<HTMLInputElement>) {\r\n        this.firstName = event.currentTarget.value;\r\n    }\r\n\r\n    inputLastName(event: React.FormEvent<HTMLInputElement>) {\r\n        this.lastName = event.currentTarget.value;\r\n    }\r\n\r\n    async register() {\r\n        const response = await fetch(\"/registration\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({email: this.email, password: this.password, firstName: this.firstName, lastName: this.lastName})\r\n        });\r\n        if(response.status === 200) {\r\n            this.props.store.userStore.registrationRequire(false);\r\n            this.props.store.userStore.wrongCredetianalsToggle(false);\r\n            this.props.store.userStore.getCurrentUser();\r\n        } else {\r\n            \r\n        }\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Main\\AdminMain.tsx",["718"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Main\\UserMain.tsx",["719","720","721","722","723"],"﻿import React from \"react\";\r\nimport { observer } from  \"mobx-react\";\r\nimport { Card, CardHeader, Nav, NavItem, Button } from \"reactstrap\";\r\nimport { NavLink, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { IUserMainProps } from \"./IUserMainProps\";\r\n\r\n@observer\r\nexport class UserMain extends React.Component<IUserMainProps> {\r\n    render() {\r\n        return (\r\n            <>\r\n                <Card>\r\n                    <CardHeader>\r\n                        <Nav tabs className=\"nav\">\r\n                            <NavItem>\r\n                                <NavLink to=\"/home\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}}\r\n                                     activeStyle={{\r\n                                         color: '#ffffff',\r\n                                         backgroundColor: '#003B46',\r\n                                         textDecoration: 'none'\r\n                                     }}>ГЛАВНАЯ</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink to=\"/mylessons\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}}\r\n                                         activeStyle={{\r\n                                             color: '#ffffff',\r\n                                             backgroundColor: '#003B46',\r\n                                             textDecoration: 'none'\r\n                                         }}>МОИ УРОКИ</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink to=\"/dictionary\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}}\r\n                                         activeStyle={{\r\n                                            color: '#ffffff',\r\n                                             backgroundColor: '#003B46',\r\n                                             textDecoration: 'none'\r\n                                         }}>СЛОВАРЬ</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink to=\"/trainings\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}}\r\n                                         activeStyle={{\r\n                                             color: '#ffffff',\r\n                                             backgroundColor: '#003B46',\r\n                                             textDecoration: 'none'\r\n                                         }}>ТРЕНИРОВКИ</NavLink>\r\n                            </NavItem>\r\n                            <Button\r\n                                outline color=\"primary\"\r\n                                onClick={() => this.exit()}>\r\n                                ВЫЙТИ\r\n                            </Button>\r\n                        </Nav>\r\n                    </CardHeader>\r\n                </Card>\r\n                <Switch>\r\n                    <Route exact path=\"/home\"\r\n                           render={(props) => <MyWorkPage store={this.props.store} />} />\r\n                    <Route exact path=\"/mylessons\"\r\n                           render={(props) => <ProjectsPage store={this.props.store} />} />\r\n                    <Route exact path=\"/dictionary\"\r\n                           render={(props) => <UsersPage store={this.props.store} />} />\r\n                    <Route exact path=\"/trainings\"\r\n                           render={(props) => <UsersPage store={this.props.store} />} />\r\n                    <Redirect to=\"/mywork\" />\r\n                </Switch>\r\n            </>\r\n        );\r\n    }\r\n\r\n    exit() {\r\n        this.props.store.reset();\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\CourseStore.tsx",["724"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\LessonStore.tsx",["725"],"﻿import { makeObservable, observable } from \"mobx\";\r\nimport { LessonViewModel } from \"../Typings/viewModels/LessonViewModel\";\r\nimport { LessonMaterialViewModel } from \"../Typings/viewModels/LessonMaterialViewModel\";\r\n\r\nclass LessonStore {\r\n    lessonsByChoosenCourse: LessonViewModel[] = new Array<LessonViewModel>();\r\n    choosenLesson: LessonViewModel = new LessonViewModel();\r\n    materialsByChoosenLesson: LessonMaterialViewModel[] = new Array<LessonMaterialViewModel>();\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            lessonsByChoosenCourse: observable,\r\n            choosenLesson: observable,\r\n            materialsByChoosenLesson: observable,\r\n        });\r\n    }\r\n\r\n    setChoosenLesson(lesson: LessonViewModel) {\r\n        this.choosenLesson = lesson;\r\n        this.getMaterialsByLesson(lesson.id);\r\n    }\r\n\r\n    async getLessonsByCourse(courseId: number) {\r\n        const response = await fetch(\"getlessonsbycourse\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: courseId})\r\n        });\r\n        if(response.status === 200) {\r\n            const data = await response.json();\r\n            this.lessonsByChoosenCourse = data;\r\n            this.choosenLesson = data[0];\r\n        }\r\n    }\r\n\r\n    async addOrUpdateLesson(id: number, order: number, courseId: number, description: string, startDate: Date | Date[], expireDate: Date | Date[]): Promise<number> {\r\n        const response = await fetch(\"addorupdatelesson\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: id, courseId: courseId, description: description, startDate: startDate, expireDate: expireDate})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getLessonsByCourse(courseId);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async deleteLesson(lessonId: number, courseId: number): Promise<number> {\r\n        const response = await fetch(\"deletelesson\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: lessonId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getLessonsByCourse(courseId);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async getMaterialsByLesson(lessonId: number) {\r\n        const response = await fetch(\"getmaterialsbylesson\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: lessonId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.materialsByChoosenLesson = await response.json();\r\n        }\r\n\r\n        return response.json();\r\n    }\r\n\r\n    async deleteMaterial(materialId: number): Promise<number> {\r\n        const response = await fetch(\"deletematerial\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: materialId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getMaterialsByLesson(this.choosenLesson.id);\r\n        }\r\n\r\n        return response.json();\r\n    }\r\n\r\n    async addOrUpdateMaterial(file: File): Promise<number> {\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n        formData.append(\"lessonId\", this.choosenLesson.id.toString());\r\n        const response = await fetch(\"/addorupdatematerial\", {\r\n            body: formData,\r\n            method: \"POST\"\r\n        });\r\n        if(response.status === 200) {\r\n            this.getMaterialsByLesson(this.choosenLesson.id);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default LessonStore;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CourseViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserCourseViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\LessonViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx",["726","727"],"﻿import { makeObservable, observable } from \"mobx\";\r\nimport { TaskViewModel } from \"../Typings/viewModels/TaskViewModel\";\r\nimport {TaskReadModel} from \"../Typings/readModels/TaskReadModel\";\r\nimport {SubtaskReadModel} from \"../Typings/readModels/SubtaskReadModel\";\r\nimport {TagViewModel} from \"../Typings/viewModels/TagViewModel\";\r\nimport {UserSubtaskReadModel} from \"../Typings/readModels/UserSubtaskReadModel\";\r\nimport {UserSubtaskAnswerGroupReadModel} from \"../Typings/readModels/UserSubtaskAnswerGroupReadModel\";\r\nimport {UserSubtaskViewModel} from \"../Typings/viewModels/UserSubtaskViewModel\";\r\nimport {UserSubtaskAnswerGroupViewModel} from \"../Typings/viewModels/UserSubtaskAnswerGroupViewModel\";\r\nimport {TagReadModel} from \"../Typings/readModels/TagReadModel\";\r\n\r\nclass TaskStore {\r\n    tasksByChoosenLesson: TaskViewModel[] = new Array<TaskViewModel>();\r\n    tags: TagViewModel[];\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            tasksByChoosenLesson: observable\r\n        });\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        this.getTags();\r\n    }\r\n\r\n    async getTags() {\r\n        const response = await fetch(\"/gettags\");\r\n        if(response.status === 200) {\r\n            this.tags = await response.json();\r\n        }\r\n    }\r\n\r\n    async getTasksByLesson(lessonId: number) {\r\n        const response = await fetch(\"/gettasksbychoosenlesson\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({lessonId: lessonId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.tasksByChoosenLesson = await response.json();\r\n        }\r\n    }\r\n\r\n    async addOrUpdateTask(task: TaskReadModel, lessonId: number): Promise<number> {\r\n        const response = await fetch(\"/addorupdatetask\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({lessonId: lessonId,\r\n                id: task.id, taskType: task.taskType, \r\n                instruction: task.instruction, text: task.text,\r\n                subtasks: task.subtasks, tags: task.tags\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            this.getTasksByLesson(lessonId);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async addOrUpdateSubtask(subtask: SubtaskReadModel): Promise<number> {\r\n        const response = await fetch(\"/addorupdatesubtask\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                id: subtask.id, taskId: subtask.taskId,\r\n                subtaskType: subtask.subtaskType, order: subtask.order,\r\n                text: subtask.text, path: subtask.path /*todo: зачем path нужен???*/\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            this.updateTaskByTaskId(subtask.taskId);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async deleteTask(taskId: number, lessonId: number) {\r\n        const response = await fetch(\"/deletetask\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                id: taskId\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            this.getTasksByLesson(lessonId);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async deleteSubtask(subtaskId: number, taskId: number) {\r\n        const response = await fetch(\"/deletesubtask\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                id: taskId\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            this.updateTaskByTaskId(taskId);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async addOrUpdateUserSubtask(userSubtask: UserSubtaskReadModel): Promise<number> {\r\n        const response = await fetch(\"/addorupdateusersubtask\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                userId: userSubtask.userId, answer: userSubtask.answer,\r\n                status: userSubtask.status, subtaskId: userSubtask.subtaskId,\r\n                taskId: userSubtask.taskId, files: userSubtask.files\r\n            })\r\n        });\r\n\r\n        return response.status;\r\n    }\r\n\r\n    async addOrUpdateUserSubtaskAnswerGroup(userSubtaskAnswerGroup: UserSubtaskAnswerGroupReadModel): Promise<number> {\r\n        const response = await fetch(\"/addorupdateusersubtaskanswergroup\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                userId: userSubtaskAnswerGroup.userId, answerGroupId: userSubtaskAnswerGroup.answerGroupId,\r\n                subtaskId: userSubtaskAnswerGroup.subtaskId, status: userSubtaskAnswerGroup.status,\r\n                lastAnswer: userSubtaskAnswerGroup.lastAnswer\r\n            })\r\n        });\r\n        return response.status;\r\n    }\r\n\r\n    async getUserSubtask(subtaskId: number, userId: number): Promise<UserSubtaskViewModel> {\r\n        let userSubtask =  new UserSubtaskViewModel();\r\n        const response = await fetch(\"/getusersubtask\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                userId: userId, subtaskId: subtaskId\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            userSubtask = await response.json();\r\n        }\r\n\r\n        return userSubtask;\r\n    }\r\n\r\n    async getTasks(tags: TagReadModel[]): Promise<TaskViewModel[]> {\r\n        let tagIds = tags.map(t => t.id);\r\n        let tasks = new Array<TaskViewModel>();\r\n        const response = await fetch(\"/gettasks\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                tagIds: tagIds\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            tasks = await response.json();\r\n        }\r\n\r\n        return tasks;\r\n    }\r\n\r\n    async updateTaskByTaskId(taskId: number) {\r\n        const response = await fetch(\"/gettaskbyid\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({\r\n                id: taskId\r\n            })\r\n        });\r\n        if(response.status === 200) {\r\n            let taskIndex = this.tasksByChoosenLesson.findIndex(t => t.id === taskId);\r\n            this.tasksByChoosenLesson[taskIndex] = await response.json();\r\n        }\r\n    }\r\n}\r\n\r\nexport default TaskStore;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\UserRole.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserSubtaskViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\CommentStore.tsx",["728"],"﻿import { CommentedEntityType } from \"../Typings/enums/CommentedEntityType\";\r\n\r\nclass CommentStore {\r\n    \r\n    async getCommentGroup(commentedEntityType: CommentedEntityType, commentedEntityId: number, userId: number, groupId: number = 0) {\r\n        \r\n    }\r\n}\r\n\r\nexport default CommentStore;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\WordStore.tsx",["729"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Courses\\CoursesPage.tsx",["730","731","732"],"﻿import React, { Component } from 'react';\r\nimport  { Tab, Nav } from \"react-bootstrap\";\r\nimport { Alert, Button, Col, Row }from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport { observable, makeObservable, action } from \"mobx\";\r\nimport { CourseViewModel } from \"../../../Typings/viewModels/CourseViewModel\";\r\nimport { renderSpinner } from \"../../../functions/renderSpinner\";\r\nimport { AddNewCourse } from \"./AddNewCourse\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport {Course} from \"./Course\";\r\n\r\nclass ICoursesPageProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass CoursesPage extends Component<ICoursesPageProps> {\r\n    notDeleted: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            notDeleted: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.props.store.courseStore.getCoursesForTeacher();\r\n    }\r\n\r\n    renderCoursesMenu(courses: CourseViewModel[]) {\r\n        return(\r\n            <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\r\n                {this.notDeleted && <Alert>Что-то пошло не так и курс не удалился</Alert>}\r\n                <Row>\r\n                    <Col sm={2}>\r\n                        <Nav  variant=\"pills\" className=\"flex-column\">\r\n                            <div className=\"container-fluid\">\r\n                            {courses.map((course) => {\r\n                                return (\r\n                                    <Nav.Item key={course.id}>\r\n                                        <div className=\"row\" key={course.id}>\r\n                                            <div className=\"col-8\">\r\n                                                <Nav.Link\r\n                                                      eventKey={course.id}\r\n                                                      className=\"nav-link lesson\"\r\n                                                      onClick={() => this.changeCourse(course)}>\r\n                                                    {course.name}\r\n                                                </Nav.Link>\r\n                                            </div>\r\n                                            <div className=\"col-2 col-lg-offset-10\">\r\n                                                <i className=\"fa fa-window-close\"\r\n                                                   aria-hidden=\"true\"\r\n                                                   onClick={() => this.deleteCourse(course.id)}/>\r\n                                            </div>\r\n                                        </div>\r\n                                    </Nav.Item>\r\n                                );\r\n                            })}\r\n                            {<AddNewCourse courseStore={this.props.store.courseStore}/>}\r\n                            </div>\r\n                        </Nav>\r\n                    </Col>\r\n                    <Col sm={10}>\r\n                        <Course store={this.props.store}/>\r\n                    </Col>\r\n                </Row>\r\n            </Tab.Container>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let courses = this.props.store.courseStore.coursesForTeacher;\r\n        return (\r\n            <>\r\n                {courses !== undefined && this.renderCoursesMenu(courses)}\r\n                {courses === undefined && renderSpinner()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    deleteCourse(courseId: number) {\r\n        let result = window.confirm('Вы уверены, что хотите удалить этот курс?');\r\n        if(result) {\r\n            this.props.store.courseStore.deleteCourse(courseId)\r\n                .then((status) => {\r\n                    this.notDeleted = status !== 200;\r\n            });\r\n        }\r\n    }\r\n\r\n    changeCourse(course: CourseViewModel) {\r\n        this.props.store.courseStore.setChoosenCourse(course);\r\n        this.props.store.courseStore.getUsersByCourse(course.id);\r\n    }\r\n}\r\n\r\nexport default CoursesPage;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\DictionaryPage.tsx",["733"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport { Button } from 'reactstrap';\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { UserRole } from \"../../../Typings/enums/UserRole\";\r\nimport Word from \"./Word\";\r\nimport Words from \"./Words\";\r\nimport { UserWordViewModel } from \"../../../Typings/viewModels/UserWordViewModel\";\r\nimport WordsTrainingPage from \"../../User/Dictionary/WordsTrainingPage\";\r\nimport Search from \"./Search\";\r\n\r\nclass IDictionaryPageProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass DictionaryPage extends Component<IDictionaryPageProps> {\r\n    addNewWord: boolean;\r\n    training: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addNewWord: observable,\r\n            training: observable,\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        let role = this.props.store.userStore.currentUser.role;\r\n        this.props.store.wordStore.getDictionary();\r\n        if(role === UserRole.User) {\r\n            let userId = this.props.store.userStore.currentUser.id;\r\n            this.props.store.wordStore.getUserDictionary(userId);\r\n        }\r\n    }\r\n\r\n    addNewWordToggle() {\r\n        this.addNewWord = !this.addNewWord;\r\n    }\r\n\r\n    trainingToggle() {\r\n        this.training = !this.training;\r\n    }\r\n\r\n    renderSearch() {\r\n        return(\r\n            <div className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                <Search wordStore={this.props.store.wordStore} user={this.props.store.userStore.currentUser} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderAddNewWordButton() {\r\n        return(\r\n            <div className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                {!this.addNewWord && <Button\r\n                    outline\r\n                    color=\"primary\"\r\n                    onClick={() => this.addNewWordToggle()}>\r\n                    Добавить новое слово\r\n                </Button>}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderAddNewWordWindow() {\r\n        return(\r\n            <>\r\n                {this.addNewWord && <div className=\"row justify-content-center\">\r\n                    <Word userStore={this.props.store.userStore} userWord={new UserWordViewModel()} wordStore={this.props.store.wordStore}/>\r\n                </div>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderTrainingButton() {\r\n        let role = this.props.store.userStore.currentUser.role;\r\n        if(role === UserRole.User) {\r\n            return(\r\n                <div className=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\" style={{marginTop: 10}}>\r\n                    <Button\r\n                        disabled={false}\r\n                        color=\"primary trainingButton\"\r\n                        onClick={() => this.trainingToggle()}>\r\n                        Тренировка\r\n                    </Button>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderWordTrainingPage() {\r\n        return(\r\n            <>\r\n                {this.training && <WordsTrainingPage onToggle={this.trainingToggle} wordStore={this.props.store.wordStore} userId={this.props.store.userStore.currentUser.id}/>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderWords() {\r\n        return(\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-12\">\r\n                    <Words userStore={this.props.store.userStore} wordStore={this.props.store.wordStore}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row justify-content-center\">\r\n                    {this.renderSearch()}\r\n                    {this.renderAddNewWordButton()}\r\n                    {this.renderTrainingButton()}\r\n                    {this.renderWordTrainingPage()}\r\n                </div>\r\n                {this.renderAddNewWordWindow()}\r\n                {this.renderWords()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DictionaryPage;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Courses\\Course.tsx",["734"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Courses\\AddNewCourse.tsx",["735"],"﻿import React, { Component } from \"react\";\r\nimport CourseStore from \"../../../stores/CourseStore\";\r\nimport { Alert, Button, Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nclass IAddNewCourseProps {\r\n    courseStore: CourseStore;\r\n}\r\n\r\n@observer\r\nexport class AddNewCourse extends Component<IAddNewCourseProps> {\r\n    addNewCourse: boolean = true;\r\n    id: number = 0;\r\n    name: string = \"\";\r\n    description: string = \"\";\r\n    notSaved: boolean = false;\r\n    saved: boolean = true;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addNewCourse: observable,\r\n            id: observable,\r\n            name: observable,\r\n            description: observable,\r\n            notSaved: observable,\r\n            saved: observable\r\n        });\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <>\r\n                <Button outline color=\"primary\" onClick={() => this.addNewCourseToggle()}>\r\n                    Добавить курс\r\n                </Button>\r\n            </>\r\n        )\r\n    }\r\n\r\n    renderBody() {\r\n        return(\r\n            <>\r\n                <ModalBody>\r\n                    {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и курс не сохранилось</Alert>}\r\n                    {this.saved && <Alert color=\"success\">Всё удачно сохранилось</Alert>}\r\n                    <div className=\"row justify-content-center\">\r\n                        <label className=\"instruction\">\r\n                            Введите название курса\r\n                        </label>\r\n                        <input\r\n                            onChange={(e) => this.inputName(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <label>Введите описание курса</label>\r\n                        <input onChange={(e) => this.inputDescription(e)}/>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        className=\"saveLessonButton\"\r\n                        onClick={() => this.addCourse()}>\r\n                        Сохранить курс\r\n                    </Button>\r\n                </ModalFooter>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderAddNewCourseWindow() {\r\n        return(\r\n            <Modal\r\n                centered={true}\r\n                size=\"lg\"\r\n                isOpen={this.addNewCourse}\r\n                toggle={() => this.addNewCourseToggle()}\r\n            >\r\n                <ModalHeader >\r\n                    СОЗДАНИЕ НОВОГО КУРСА\r\n                </ModalHeader>\r\n                {this.renderBody()}\r\n                <Button\r\n                    color=\"primary\"\r\n                    onClick={() => this.addNewCourseToggle()}>\r\n                    ОТМЕНИТЬ\r\n                </Button>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {!this.addNewCourse && this.renderButton()}\r\n                {this.addNewCourse && this.renderAddNewCourseWindow()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    @action\r\n    addNewCourseToggle() {\r\n        this.addNewCourse = !this.addNewCourse;\r\n    }\r\n\r\n    addCourse() {\r\n        this.props.courseStore\r\n            .addOrUpdateCourse(this.id, this.name, this.description)\r\n            .then((status) => {\r\n                this.notSaved = status !== 200;\r\n                this.saved = status === 200;\r\n        });\r\n    }\r\n\r\n    inputName(event: React.FormEvent<HTMLInputElement>) {\r\n        this.name = event.currentTarget.value;\r\n    }\r\n\r\n    inputDescription(event: React.FormEvent<HTMLInputElement>) {\r\n        this.description = event.currentTarget.value;\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\LessonsMenu.tsx",["736","737"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { LessonViewModel } from \"../../../Typings/viewModels/LessonViewModel\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Tab, Nav } from \"react-bootstrap\";\r\nimport { Alert, Button, Col, Collapse, Row } from \"reactstrap\";\r\nimport { renderSpinner } from \"../../../functions/renderSpinner\";\r\nimport {AddOrUpdateNewLesson} from \"./AddOrUpdateNewLesson\";\r\nimport {LessonPage} from \"./LessonPage\";\r\n\r\nclass ILessonsMenuProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nexport class LessonsMenu extends Component<ILessonsMenuProps> {\r\n    editLesson: boolean = false;\r\n    lessonToEdit: LessonViewModel;\r\n    notDeleted: boolean = false;\r\n    deleted: boolean = false;\r\n    isNavOpen: boolean = true;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            editLesson: observable,\r\n            lessonToEdit: observable,\r\n            notDeleted: observable,\r\n            deleted: observable,\r\n            isNavOpen: observable,\r\n        });\r\n    }\r\n\r\n    toggleNav() {\r\n        this.isNavOpen = !this.isNavOpen;\r\n    }\r\n\r\n    editLessonToggle(lesson: LessonViewModel) {\r\n        this.editLesson = true;\r\n        this.lessonToEdit = lesson;\r\n    }\r\n\r\n    lessonToggle(lesson: LessonViewModel) {\r\n        this.props.store.lessonStore.setChoosenLesson(lesson);\r\n        this.props.store.taskStore.getTasksByLesson(lesson.id);\r\n    }\r\n\r\n    renderLessonsMenu(lessons: LessonViewModel[]) {\r\n        return(\r\n            <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\r\n                {this.notDeleted && <Alert>Что-то пошло не так и урок не удалился</Alert>}\r\n                <Row>\r\n                    <Col sm={2}>\r\n                        <Button color=\"primary\" className=\"lessonToggle\" onClick={() => this.toggleNav()}>УРОКИ</Button>\r\n                        <Collapse isOpen={this.isNavOpen}>\r\n                            <Nav variant=\"pills\" className=\"flex-column\">\r\n                                {lessons.map((lesson) => {\r\n                                    // @ts-ignore\r\n                                    let isDisabled = new Date() < Date.parse(lesson.expireDate)  && new Date() > Date.parse(lesson.startDate);\r\n                                    return (\r\n                                        <>\r\n                                            <Nav.Item>\r\n                                                <div className=\"row\">\r\n                                                    <div className=\"col-8\">\r\n                                                        <Nav.Link\r\n                                                             eventKey={lesson.id}\r\n                                                             className=\"nav-link lesson\"\r\n                                                             onClick={() => this.lessonToggle(lesson)}>\r\n                                                            Урок {lesson.order}\r\n                                                        </Nav.Link>\r\n                                                    </div>\r\n                                                    <div className=\"col-4 col-lg-offset-8\">\r\n                                                        <i className=\"fa fa-window-close deleteLesson\"\r\n                                                           aria-hidden=\"true\"\r\n                                                           onClick={() => this.deleteLesson(lesson.id)}/>\r\n                                                        <i className=\"fa fa-edit\"\r\n                                                           aria-hidden=\"true\"\r\n                                                           onClick={() => this.editLessonToggle(lesson)}/>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </Nav.Item>\r\n                                        </>\r\n                                    )\r\n                                })}\r\n                                <AddOrUpdateNewLesson store={this.props.store} edit={false} lessonToEdit={undefined}/>\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </Col>\r\n                    <Col sm={10}>\r\n                        <LessonPage store={this.props.store}/>\r\n                    </Col>\r\n                    {this.editLesson && <AddOrUpdateNewLesson store={this.props.store} edit={true} lessonToEdit={this.lessonToEdit}  />}\r\n                </Row>\r\n            </Tab.Container>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        let lessons = this.props.store.lessonStore.lessonsByChoosenCourse;\r\n        return(\r\n            <>\r\n                {lessons !== undefined && lessons.length > 0 && this.renderLessonsMenu(lessons)}\r\n                {(lessons === undefined || lessons.length === 0) && renderSpinner()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    deleteLesson(lessonId: number) {\r\n        let result = window.confirm('Вы уверены, что хотите удалить этот урок?');\r\n        if(result) {\r\n            this.props.store.lessonStore.deleteLesson(lessonId, this.props.store.courseStore.choosenCourse.id)\r\n                .then((status) => {\r\n                    this.notDeleted = status !== 200;\r\n                    this.deleted = status === 200;\r\n            });\r\n        }\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\LessonPage.tsx",["738"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { Tab, Nav } from \"react-bootstrap\";\r\nimport { Card, CardHeader } from \"reactstrap\";\r\nimport \"./lesson.css\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { Lesson } from \"../../Common/Lesson/Lesson\";\r\nimport HomeworkPage from \"../Homework/HomeworkPage\";\r\nimport { CompletedHomeworkPage } from \"../CompletedHomework/CompletedHomeworkPage\";\r\n\r\nclass ILessonPageProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nexport class LessonPage extends Component<ILessonPageProps> {\r\n    lessonActive: boolean;\r\n    homeworkActive: boolean;\r\n    completedHomeworkActive: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            lessonActive: observable,\r\n            homeworkActive: observable,\r\n            completedHomeworkActive: observable,\r\n        });\r\n    }\r\n\r\n    renderLessonMenu() {\r\n        return(\r\n            <Tab.Container>\r\n                <Card>\r\n                    <CardHeader>\r\n                        <Nav variant=\"pills\">\r\n                            <Nav.Item>\r\n                                <Nav.Link\r\n                                     className=\"nav-link\"\r\n                                     eventKey=\"lesson\"\r\n                                     onClick={() => this.toggleMenu(\"lesson\")}>\r\n                                    УРОК\r\n                                </Nav.Link>\r\n                            </Nav.Item>\r\n                            <Nav.Item>\r\n                                <Nav.Link\r\n                                     className=\"nav-link\"\r\n                                     eventKey=\"homework\"\r\n                                     onClick={() => this.toggleMenu(\"homework\")}>\r\n                                    ДОМАШНЯЯ РАБОТА\r\n                                </Nav.Link>\r\n                            </Nav.Item>\r\n                            <Nav.Item>\r\n                                <Nav.Link\r\n                                     className=\"nav-link\"\r\n                                     eventKey=\"completedHomework\"\r\n                                     onClick={() => this.toggleMenu(\"completedHomework\")}>\r\n                                    ВЫПОЛНЕННЫЕ ДОМАШНИЕ РАБОТЫ\r\n                                </Nav.Link>\r\n                            </Nav.Item>\r\n                        </Nav>\r\n                    </CardHeader>\r\n                    {this.lessonActive && <Lesson store={this.props.store}/>}\r\n                    {this.homeworkActive && <HomeworkPage store={this.props.store}/>}\r\n                    {this.completedHomeworkActive && <CompletedHomeworkPage store={this.props.store}/>}\r\n                </Card>\r\n            </Tab.Container>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderLessonMenu()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    toggleMenu(turnOn: string) {\r\n        this.lessonActive = false;\r\n        this.homeworkActive = false;\r\n        this.completedHomeworkActive = false;\r\n        if(turnOn === \"lesson\") {\r\n            this.lessonActive = true;\r\n        } else if (turnOn === \"homework\") {\r\n            this.homeworkActive = true;\r\n        } else if (turnOn === \"completedHomework\") {\r\n            this.completedHomeworkActive = true;\r\n        }\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\CompletedHomeworkPage.tsx",["739"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { Accordion } from \"react-bootstrap\";\r\nimport UserHomework from \"./UserHomework\";\r\n\r\nclass ICompletedHomeworkPageProps {\r\n    store: RootStore;\r\n}\r\n\r\n\r\nexport class CompletedHomeworkPage extends Component<ICompletedHomeworkPageProps> {\r\n    renderUsers() {\r\n        let users = this.props.store.courseStore.usersByCourse;\r\n        return(\r\n            <Accordion defaultActiveKey=\"0\">\r\n                {users.map((user) => {\r\n                    return <UserHomework userId={user.userId} store={this.props.store}/>\r\n                })}\r\n            </Accordion>\r\n        );\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Homework\\HomeworkPage.tsx",["740"],"﻿import React, {Component} from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { TaskViewModel } from \"../../../Typings/viewModels/TaskViewModel\";\r\nimport { renderSpinner } from \"../../../functions/renderSpinner\";\r\nimport TaskUpload from \"../Tasks/TaskUpload\";\r\nimport { Task } from \"../../Common/Tasks/Task\";\r\n\r\nclass IHomeworkPageProps {\r\n    store: RootStore;\r\n}\r\n\r\nclass HomeworkPage extends Component<IHomeworkPageProps> {\r\n    renderTasks(tasks: TaskViewModel[]) {\r\n        return (\r\n            <>\r\n                {tasks.map((task) => {\r\n                    return(\r\n                        <Task store={this.props.store} task={task}  userId={this.props.store.userStore.currentUser.id}/>\r\n                    );\r\n                })}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let tasks = this.props.store.taskStore.tasksByChoosenLesson;\r\n        return(\r\n            <>\r\n                {(tasks === undefined || tasks.length === 0) && renderSpinner()}\r\n                {(tasks !== undefined && tasks.length > 0) && this.renderTasks(tasks)}\r\n                <TaskUpload store={this.props.store}/>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomeworkPage;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Lesson\\Lesson.tsx",["741"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { UserRole } from \"../../../Typings/enums/UserRole\";\r\nimport { Content } from \"./Content\";\r\nimport { ContentUpload } from \"../../Admin/Lessons/ContentUpload\";\r\nimport { Label } from \"reactstrap\";\r\n\r\nclass ILessonProps {\r\n    store: RootStore;\r\n}\r\n\r\nexport class Lesson extends Component<ILessonProps> {\r\n    renderContentUpload() {\r\n        let role = this.props.store.userStore.currentUser.role;\r\n        if(role === UserRole.Admin) {\r\n            return(\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-lg-12 col-sm-12\">\r\n                        <ContentUpload lessonStore={this.props.store.lessonStore} courseId={this.props.store.courseStore.choosenCourse.id}/>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderLessonDescription() {\r\n        return(\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-lg-12 col-sm-12\">\r\n                    <Label>{this.props.store.lessonStore.choosenLesson.description}</Label>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\">\r\n                {this.renderLessonDescription()}\r\n                <Content lessonStore={this.props.store.lessonStore} courseId={this.props.store.courseStore.choosenCourse.id}/>\r\n                {this.renderContentUpload()}\r\n            </div>\r\n        )\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\AddOrUpdateNewLesson.tsx",["742"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { LessonViewModel } from \"../../../Typings/viewModels/LessonViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Alert, Button, Modal, ModalBody, ModalFooter, ModalHeader, Label } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport Calendar from \"react-calendar\";\r\n\r\nclass IAddOrUpdateNewLessonProps {\r\n    store: RootStore;\r\n    edit: boolean = false;\r\n    lessonToEdit: LessonViewModel | undefined;\r\n}\r\n\r\n@observer\r\nexport class AddOrUpdateNewLesson extends Component<IAddOrUpdateNewLessonProps> {\r\n    addOrUpdateNewLesson: boolean;\r\n    id: number = 0;\r\n    order: number = 0;\r\n    description: string = \"\";\r\n    startDate: Date | Date[] = new Date();\r\n    expireDate: Date | Date[] = new Date();\r\n    notSaved: boolean = false;\r\n    saved: boolean = false;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addOrUpdateNewLesson: observable,\r\n            id: observable,\r\n            order: observable,\r\n            description: observable,\r\n            startDate: observable,\r\n            expireDate: observable,\r\n            notSaved: observable,\r\n            saved: observable\r\n        });\r\n    }\r\n    \r\n    componentDidMount(): void {\r\n        if(this.props.edit) {\r\n            let lessonToEdit = this.props.lessonToEdit;\r\n            if(lessonToEdit !== undefined) {\r\n                this.id = lessonToEdit.id;\r\n                this.order = lessonToEdit.order;\r\n                this.description = lessonToEdit.description;\r\n                this.startDate = lessonToEdit.startDate;\r\n                this.expireDate = lessonToEdit.expireDate;\r\n            }\r\n            this.addOrUpdateNewLesson = true;\r\n        } else {\r\n            this.order = this.props.store.lessonStore.lessonsByChoosenCourse.length + 1;\r\n        }\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <Button outline color=\"primary\" onClick={() => this.addOrUpdateNewLessonToggle()}>\r\n                Добавить урок\r\n            </Button>\r\n        )\r\n    }\r\n\r\n    renderBody() {\r\n        return(\r\n            <>\r\n                <ModalBody>\r\n                    {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и урок не сохранилось</Alert>}\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label className=\"instruction\" style={{width: \"100%\"}} align=\"center\">\r\n                            Введите описание урока\r\n                        </Label>\r\n                        <input\r\n                            value={this.description}\r\n                            onChange={(e) => this.inputDescription(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label style={{width: \"100%\"}} align=\"center\">Напишите номер урока(в каком порядке он должен идти)</Label>\r\n                        <input\r\n                            value={this.order}\r\n                            onChange={(e) => this.inputOrder(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-6\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">Выберите дату начала доступа урока</Label>\r\n                            <Calendar\r\n                                value={this.startDate}\r\n                                onChange={(date) => this.inputDate(date, \"startDate\")}\r\n                            /></div>\r\n                        <div className=\"col-6\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">Выберите дату окончания доступа урока</Label>\r\n                            <Calendar\r\n                                value={this.expireDate}\r\n                                onChange={(date) => this.inputDate(date, \"expireDate\")}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        className=\"saveLessonButton\"\r\n                        onClick={() => this.addOrUpdateLesson()}>\r\n                        Сохранить урок\r\n                    </Button>\r\n                </ModalFooter>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderAddOrUpdateNewLessonWindow() {\r\n        return(\r\n            <Modal\r\n                centered={true}\r\n                size=\"lg\"\r\n                isOpen={this.addOrUpdateNewLesson}\r\n                toggle={() => this.addOrUpdateNewLessonToggle()}\r\n            >\r\n                <ModalHeader>\r\n                    УРОК\r\n                </ModalHeader>\r\n                {this.renderBody()}\r\n                <Button\r\n                    color=\"primary\"\r\n                    onClick={() => this.addOrUpdateNewLessonToggle()}>ОТМЕНИТЬ</Button>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.addOrUpdateNewLesson && this.renderAddOrUpdateNewLessonWindow()}\r\n                {!this.addOrUpdateNewLesson && this.renderButton()}\r\n            </>\r\n        )\r\n    }\r\n\r\n    addOrUpdateNewLessonToggle() {\r\n        this.addOrUpdateNewLesson = !this.addOrUpdateNewLesson;\r\n    }\r\n\r\n    addOrUpdateLesson() {\r\n        let courseId = this.props.store.courseStore.choosenCourse.id;\r\n        this.props.store.lessonStore\r\n            .addOrUpdateLesson(this.id, this.order, courseId, this.description, this.startDate, this.expireDate)\r\n            .then((status) => {\r\n                this.notSaved = status !== 200;\r\n                this.saved = status === 200;\r\n        });\r\n    }\r\n\r\n    inputDescription(event: React.FormEvent<HTMLInputElement>) {\r\n        this.description = event.currentTarget.value;\r\n    }\r\n\r\n    inputOrder(event: React.FormEvent<HTMLInputElement>) {\r\n        this.order = Number(event.currentTarget.value);\r\n    }\r\n\r\n    inputDate(date: Date | Date[], dateType: string) {\r\n        if(dateType === \"startDate\") {\r\n            this.startDate = date;\r\n        } else if(dateType === \"expireDate\") {\r\n            this.expireDate = date;\r\n        }\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\UserHomework.tsx",["743","744"],"﻿import React, { Component } from 'react';\r\nimport { Accordion } from \"react-bootstrap\";\r\nimport { Button, Card, CardHeader, CardBody, Alert } from \"reactstrap\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport CompletedHomework from './CompletedHomework';\r\n\r\nclass IUserHomeworkProps {\r\n    store: RootStore;\r\n    userId: number;\r\n}\r\n\r\n@observer\r\nclass UserHomework extends Component<IUserHomeworkProps> {\r\n    loadHomework: boolean;\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            loadHomework: observable\r\n        })\r\n    }\r\n\r\n    loadHomeworkToggle() {\r\n        this.loadHomework = !this.loadHomework;\r\n    }\r\n\r\n    render() {\r\n        let user = this.props.store.userStore.users.find(u => u.id === this.props.userId);\r\n        return(\r\n            <>\r\n                {user !== undefined && <Card>\r\n                    <CardHeader style={{backgroundColor: 'white'}}>\r\n                        <Accordion.Toggle as={Button} variant=\"link\" eventKey={user.id.toString()} onClick={() => this.loadHomeworkToggle()}>\r\n                            <span>{user.firstName + ' ' + user.lastName}</span>\r\n                        </Accordion.Toggle>\r\n                    </CardHeader>\r\n                    <Accordion.Collapse eventKey={user.id.toString()}>\r\n                        <CardBody>\r\n                            {this.loadHomework && <CompletedHomework userId={user.id} store={this.props.store} />}\r\n                        </CardBody>\r\n                    </Accordion.Collapse>\r\n                </Card>}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserHomework;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Lesson\\Content.tsx",["745"],"﻿import React, { Component } from 'react';\r\nimport LessonStore from \"../../../stores/LessonStore\";\r\nimport {LessonMaterialViewModel} from \"../../../Typings/viewModels/LessonMaterialViewModel\";\r\nimport {Material} from \"./Material\";\r\nimport {renderSpinner} from \"../../../functions/renderSpinner\";\r\n\r\nclass IContentProps {\r\n    lessonStore: LessonStore;\r\n    courseId: number;\r\n}\r\n\r\nexport class Content extends Component<IContentProps> {\r\n    renderMaterials(materials: LessonMaterialViewModel[]) {\r\n        return(\r\n            <>\r\n                {materials.map((material) => {\r\n                    return(\r\n                        <Material key={material.id} material={material} lessonStore={this.props.lessonStore} />\r\n                    );\r\n                })}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let materials = this.props.lessonStore.materialsByChoosenLesson;\r\n        return(\r\n            <>\r\n                {materials !== undefined && materials.length > 0 && this.renderMaterials(materials)}\r\n                {(materials === undefined || materials.length === 0) && renderSpinner()}\r\n            </>\r\n        );\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Lessons\\ContentUpload.tsx",["746"],"﻿import React, { Component } from 'react';\r\nimport LessonStore from \"../../../stores/LessonStore\";\r\nimport { Alert, Button } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\n\r\nclass IContentProps {\r\n    lessonStore: LessonStore;\r\n    courseId: number;\r\n}\r\n\r\n@observer\r\nexport class ContentUpload extends Component<IContentProps> {\r\n    file: File;\r\n    notLoaded: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            file: observable,\r\n            notLoaded: observable,\r\n        });\r\n    }\r\n\r\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        event.preventDefault();\r\n        let reader = new FileReader();\r\n        // @ts-ignore\r\n        let file = event.target.files[0];\r\n        reader.onloadend = () => {\r\n            this.file = file;\r\n        };\r\n        reader.readAsDataURL(file)\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.notLoaded && <Alert color=\"danger\">Не удалось загрузить материал:(</Alert>}\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-lg-8 col-md-8 col-sm-12 col-xs-12\">\r\n                        <input className=\"fileInput\"\r\n                            type=\"file\"\r\n                            onChange={(e) => this.handleChange(e)} />\r\n                    </div>\r\n                    <div className=\"col-lg-4 col-md-4 col-sm-12 col-xs-12\">\r\n                        <Button outline color=\"primary\"\r\n                             type=\"submit\"\r\n                             onClick={(e) => this.addOrUpdateMaterial(e)}>\r\n                            <i className=\"fa fa-plus\" aria-hidden=\"true\"/>\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    addOrUpdateMaterial(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\r\n        event.preventDefault();\r\n        this.props.lessonStore.addOrUpdateMaterial(this.file)\r\n            .then((status) => {\r\n                this.notLoaded = status !== 200;\r\n        });\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\TaskUpload.tsx",["747"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { Button, Modal, ModalBody, ModalHeader } from \"reactstrap\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { TaskTypeTranslater } from \"../../../consts/TaskTypeTranslater\";\r\nimport { TaskType } from \"../../../Typings/enums/TaskType\";\r\nimport { observer } from \"mobx-react\";\r\nimport { TaskReadModel } from \"../../../Typings/readModels/TaskReadModel\";\r\nimport TaskUploadWindow from \"./TaskUploadWindow\";\r\n\r\nclass ITaskUploadProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass TaskUpload extends Component<ITaskUploadProps> {\r\n    taskUploadWindowOpen: boolean;\r\n    taskType: TaskType;\r\n    showMenu: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            taskUploadWindowOpen: observable,\r\n            taskType: observable,\r\n            showMenu: observable,\r\n        });\r\n    }\r\n\r\n    modalToggle(taskType: TaskType) {\r\n        this.taskType = taskType;\r\n        this.showMenu = false;\r\n    }\r\n\r\n    renderMenu() {\r\n        return(\r\n            <ModalBody>\r\n                <div className=\"container-fluid\">\r\n                    <div className=\"row justify-content-center\">\r\n                        {TaskTypeTranslater.map(type => {\r\n                            return (\r\n                                <div className=\"col-6 align-items-center\">\r\n                                    <div className=\"row justify-content-center\">\r\n                                        <Button className=\"modalButton\" outline color=\"secondary\"\r\n                                                onClick={() => this.modalToggle(type.type)}>\r\n                                            {type.russian}\r\n                                        </Button>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </ModalBody>\r\n        );\r\n    }\r\n\r\n    renderBody() {\r\n        return(\r\n            <>\r\n                {this.showMenu && this.renderMenu()}\r\n                {!this.showMenu && this.renderTaskUploadWindowByType()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderTaskUploadWindowByType() {\r\n        let task = new TaskReadModel();\r\n        task.taskType = this.taskType;\r\n       return(\r\n           <TaskUploadWindow store={this.props.store.taskStore} lessonId={this.props.store.lessonStore.choosenLesson.id} toggle={this.toggleTaskUploadWindow} task={task} />\r\n       );\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <div className=\"row justify-content-center\">\r\n                <Button className=\"addTask\"\r\n                        onClick={() => this.toggleTaskUploadWindow()}\r\n                        outline color=\"secondary\">\r\n                    <span className=\"addTaskText\">ДОБАВИТЬ УПРАЖНЕНИЕ</span>\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderTaskUploadWindow() {\r\n        return (\r\n            <Modal\r\n                centered={true}\r\n                size=\"lg\"\r\n                isOpen={this.taskUploadWindowOpen}\r\n                toggle={() => this.toggleTaskUploadWindow()}\r\n            >\r\n                <ModalHeader >\r\n                    СОЗДАТЬ НОВОЕ УПРАЖНЕНИЕ\r\n                </ModalHeader>\r\n                {this.renderBody()}\r\n                <Button\r\n                    color=\"primary\"\r\n                    onClick={() => this.toggleTaskUploadWindow()}>\r\n                    СКРЫТЬ УПРАЖНЕНИЯ\r\n                </Button>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\">\r\n                {this.renderButton()}\r\n                {this.renderTaskUploadWindow()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    toggleTaskUploadWindow() {\r\n        this.taskUploadWindowOpen = !this.taskUploadWindowOpen;\r\n    }\r\n}\r\n\r\nexport default TaskUpload;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\Task.tsx",["748"],"﻿import React, {Component} from 'react';\r\nimport {TaskViewModel} from \"../../../Typings/viewModels/TaskViewModel\";\r\nimport {Alert, Button, Card, CardBody, CardTitle} from 'reactstrap';\r\nimport {UserRole} from \"../../../Typings/enums/UserRole\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport {makeObservable, observable} from \"mobx\";\r\nimport {observer} from \"mobx-react\";\r\nimport {SubtaskViewModel} from \"../../../Typings/viewModels/SubtaskViewModel\";\r\nimport {SubtaskType} from \"../../../Typings/enums/SubtaskType\";\r\nimport {DetailedAnswerSubtask} from \"./DetailedAnswerSubtask\";\r\nimport {TaskEdit} from \"../../Admin/Tasks/TaskEdit\";\r\nimport {FillGapsSubtask} from \"./FillGapsSubtask\";\r\nimport {LoadAudioSubtask} from \"./LoadAudioSubtask\";\r\nimport {RightVerbFormSubtask} from \"./RightVerbFormSubtask\";\r\nimport {LoadFileSubtask} from \"./LoadFileSubtask\";\r\nimport {UserTaskViewModel} from \"../../../Typings/viewModels/UserTaskViewModel\";\r\nimport {UserSubtaskViewModel} from \"../../../Typings/viewModels/UserSubtaskViewModel\";\r\nimport AddSubtask from \"../../Admin/Tasks/AddSubtask\";\r\n\r\nclass ITaskProps {\r\n    store: RootStore;\r\n    task: TaskViewModel;\r\n    userId: number;\r\n}\r\n\r\n@observer\r\nexport class Task extends Component<ITaskProps> {\r\n    notDeleted: boolean;\r\n    editTaskWindowOpen: boolean;\r\n    addSubtask: boolean;\r\n    userTask: UserTaskViewModel = new UserTaskViewModel();\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            notDeleted: observable,\r\n            editTaskWindowOpen: observable,\r\n            addSubtask: observable,\r\n        });\r\n    }\r\n\r\n    addSubtaskToggle() {\r\n        this.addSubtask = !this.addSubtask;\r\n    }\r\n\r\n    renderControlButtons() {\r\n        let role = this.props.store.userStore.currentUser.role;\r\n        if(role === UserRole.Admin) {\r\n            return(\r\n            <>\r\n                <i style={{marginLeft: '98%', width: '2%'}}\r\n                   onClick={() => this.deleteTask()}\r\n                   className=\"fa fa-window-close\" aria-hidden=\"true\"/>\r\n                <i style={{marginLeft: '98%', width: '2%'}}\r\n                    onClick={() => this.editTaskToggle()}\r\n                    className=\"fa fa-edit\" aria-hidden=\"true\"/>\r\n            </>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderAddSubtaskButton() {\r\n        let role = this.props.store.userStore.currentUser.role;\r\n        if(role === UserRole.Admin) {\r\n            return(\r\n                <Button className=\"addTask\"\r\n                     onClick={() => this.addSubtaskToggle()}\r\n                     outline color=\"secondary\">\r\n                    <span className=\"addTaskText\">\r\n                        {!this.addSubtask ? 'ДОБАВИТЬ ПОДЗАДАНИЕ' : 'ОТМЕНИТЬ'}\r\n                    </span>\r\n                </Button>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderAddSubtask() {\r\n        let role = this.props.store.userStore.currentUser.role;\r\n        if(role === UserRole.Admin) {\r\n            let order = this.props.task.subtasks.length;\r\n            let taskId = this.props.task.id;\r\n            let taskType = this.props.task.taskType;\r\n            return(\r\n                <>\r\n                    {this.addSubtask && <AddSubtask order={order} taskId={taskId} taskStore={this.props.store.taskStore} taskType={taskType} toggle={this.addSubtaskToggle}/>}\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderInstruction(task: TaskViewModel) {\r\n        return(\r\n            <CardTitle className=\"text-center\" dangerouslySetInnerHTML={{__html: task.instruction}}/>\r\n        );\r\n    }\r\n\r\n    renderText(task: TaskViewModel) {\r\n        if(task.text !== undefined && task.text !== \"\") {\r\n            return(\r\n                <CardTitle className=\"text-center\" dangerouslySetInnerHTML={{__html: task.text}}/>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderTask(task: TaskViewModel) {\r\n        return(\r\n            <Card style={{width: '100%'}}>\r\n                {this.renderControlButtons()}\r\n                {this.renderInstruction(task)}\r\n                {this.renderText(task)}\r\n                <CardBody style={{marginLeft: '5%'}}>\r\n                    {this.renderSubtasks(task.subtasks)}\r\n                </CardBody>\r\n                {this.renderAddSubtask()}\r\n            </Card>\r\n        )\r\n    }\r\n\r\n    renderSubtasks(subtasks: SubtaskViewModel[]) {\r\n       return(\r\n           <>\r\n               {subtasks.map((subtask) => {\r\n                   return(\r\n                       <>{this.renderSubtask(subtask)}</>\r\n                   );\r\n               })}\r\n               {this.renderAddSubtaskButton()}\r\n           </>\r\n       );\r\n    }\r\n\r\n    renderSubtask(subtask: SubtaskViewModel) {\r\n        let userId = this.props.userId;\r\n        let userSubtask = this.userTask.userSubtasks.find(u => u.subtaskId === subtask.id);\r\n        let taskId = this.props.task.id;\r\n        if(userSubtask === undefined) {\r\n            userSubtask = new UserSubtaskViewModel();\r\n        }\r\n        if(subtask.subtaskType === SubtaskType.DetailedAnswer) {\r\n            return(\r\n                <DetailedAnswerSubtask subtask={subtask} store={this.props.store} userId={userId} userSubtask={userSubtask} taskId={taskId}/>\r\n            );\r\n        } else if(subtask.subtaskType === SubtaskType.FillGaps) {\r\n            return(\r\n                <FillGapsSubtask subtask={subtask} store={this.props.store} userId={userId} userSubtask={userSubtask} taskId={taskId}/>\r\n            );\r\n        } /*else if(subtask.subtaskType === SubtaskType.InsertWordsIntoGaps) {\r\n            return(\r\n                <InsertWordsIntoGapsSubtask subtask={subtask} store={this.props.store} userSubtask={userSubtask} />\r\n            );\r\n        }*/ else if(subtask.subtaskType === SubtaskType.LoadAudio) {\r\n            return(\r\n                <LoadAudioSubtask subtask={subtask} store={this.props.store} userId={userId} userSubtask={userSubtask} taskId={taskId}/>\r\n            );\r\n        } else if(subtask.subtaskType === SubtaskType.RightVerbForm) {\r\n            return(\r\n                <RightVerbFormSubtask subtask={subtask} store={this.props.store} userId={userId} userSubtask={userSubtask} taskId={taskId}/>\r\n            );\r\n        } else if(subtask.subtaskType === SubtaskType.LoadFile) {\r\n            return(\r\n                <LoadFileSubtask subtask={subtask} store={this.props.store} userId={userId} userSubtask={userSubtask} taskId={taskId}/>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let task = this.props.task;\r\n        return(\r\n            <>\r\n                {this.renderTask(task)}\r\n                {this.notDeleted &&  <Alert className=\"alertSaved\" color=\"danger\">Что-то пошло не так, задание не удалилось:(</Alert>}\r\n                {this.editTaskWindowOpen && <TaskEdit task={task} taskStore={this.props.store.taskStore} toggle={this.editTaskToggle} lessonId={this.props.store.lessonStore.choosenLesson.id}/>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    deleteTask() {\r\n        let result = window.confirm('Вы уверены, что хотите удалить ВСЁ задание?');\r\n        if(result) {\r\n            this.props.store.taskStore\r\n                .deleteTask(this.props.task.id, this.props.store.lessonStore.choosenLesson.id)\r\n                    .then((status) => {\r\n                        this.notDeleted = status !== 200;\r\n                    });\r\n            }\r\n    }\r\n\r\n    editTaskToggle() {\r\n        this.editTaskWindowOpen = !this.editTaskWindowOpen;\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\CompletedHomework.tsx",["749"],"﻿import React, { Component } from 'react';\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport CompletedTask from \"./CompletedTask\";\r\nimport { TaskViewModel } from \"../../../Typings/viewModels/TaskViewModel\";\r\n\r\nclass ICompletedHomeworkProps {\r\n    store: RootStore;\r\n    userId: number;\r\n}\r\n\r\n@observer\r\nclass CompletedHomework  extends Component<ICompletedHomeworkProps> {\r\n    renderTasks(tasks: TaskViewModel[]) {\r\n        return(\r\n            <div className=\"container-fluid\">\r\n                {tasks.map((task) => {\r\n                    return (\r\n                        <>\r\n                            <div className=\"row\">\r\n                                <CompletedTask task={task} userId={this.props.userId} store={this.props.store}/>\r\n                            </div>\r\n                            <hr />\r\n                        </>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let tasks = this.props.store.taskStore.tasksByChoosenLesson;\r\n        return(\r\n            <>\r\n                {this.renderTasks(tasks)}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CompletedHomework;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\SubtaskType.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserTaskViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Lesson\\Material.tsx",["750"],"﻿import React, { Component } from 'react';\r\nimport { LessonMaterialViewModel } from \"../../../Typings/viewModels/LessonMaterialViewModel\";\r\nimport { observer } from \"mobx-react\";\r\nimport  { Alert } from \"reactstrap\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport LessonStore from \"../../../stores/LessonStore\";\r\n\r\nclass IMaterialProps {\r\n    lessonStore: LessonStore;\r\n    material: LessonMaterialViewModel;\r\n}\r\n\r\n@observer\r\nexport class Material extends Component<IMaterialProps> {\r\n    notDeleted: boolean = false;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            notDeleted: observable\r\n        });\r\n    }\r\n\r\n    renderMaterial(material: LessonMaterialViewModel) {\r\n        return(\r\n            <>\r\n                {material.id} {material.path} {material.url}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderMaterial(this.props.material)}\r\n                {this.notDeleted && <Alert color=\"danger\">Что-то пошло не так и материал не удалился</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    delete(materialId: number) {\r\n        let result = window.confirm('Вы уверены, что хотите удалить этот материал урока?');\r\n        if(result) {\r\n            this.props.lessonStore\r\n                .deleteMaterial(materialId)\r\n                .then((status) => {\r\n                    this.notDeleted = status !== 200;\r\n            });\r\n        }\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\TaskReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\TaskUploadWindow.tsx",["751"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\DetailedAnswerSubtask.tsx",["752"],"﻿import React, { Component } from 'react';\r\nimport { Alert, Button, CardImg, CardText } from \"reactstrap\";\r\nimport { ISubtaskProps } from \"./ISubtaskProps\";\r\nimport { SubtaskViewModel } from \"../../../Typings/viewModels/SubtaskViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { UserRole } from \"../../../Typings/enums/UserRole\";\r\nimport { UserSubtaskReadModel } from \"../../../Typings/readModels/UserSubtaskReadModel\";\r\n\r\n@observer\r\nexport class DetailedAnswerSubtask extends Component<ISubtaskProps> {\r\n    notSaved: boolean;\r\n    userAnswer: UserSubtaskReadModel = new UserSubtaskReadModel();\r\n    saved: boolean;\r\n    notDeleted: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            notSaved: observable,\r\n            userAnswer: observable,\r\n            saved: observable,\r\n            notDeleted: observable,\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        let userSubtask = this.props.userSubtask;\r\n        this.userAnswer.answer = userSubtask.answer;\r\n        this.userAnswer.status = userSubtask.status;\r\n        this.userAnswer.subtaskId = this.props.subtask.id;\r\n        this.userAnswer.userId = this.props.store.userStore.currentUser.id;\r\n    }\r\n\r\n    renderControlButton() {\r\n        if(this.props.store.userStore.currentUser.role === UserRole.Admin) {\r\n            return(\r\n                <i style={{marginLeft: '98%', width: '2%'}}\r\n                   onClick={() => this.deleteSubtask()}\r\n                   className=\"fa fa-window-close\" aria-hidden=\"true\"/>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderSubtaskText(subtask: SubtaskViewModel) {\r\n        return(\r\n            <>\r\n                {subtask.text !== null && <CardText>\r\n                    {subtask.text}\r\n                </CardText>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderImage(subtask: SubtaskViewModel) {\r\n        return (\r\n            <>\r\n                {subtask.path !== null &&\r\n                <CardImg src={subtask.path.replace('ClientApp/build', './')} alt=\"Loading...\"/>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderInputAnswerArea() {\r\n        return(\r\n            <div className=\"col-12\">\r\n                <textarea\r\n                    value={this.userAnswer.answer}\r\n                    className=\"answerInput\"\r\n                    onChange={(e) => this.inputAnswer(e)}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderSaveButton() {\r\n        return(\r\n            <div className=\"col-lg-offset-10 col-lg-2\">\r\n                <Button outline color=\"success\" onClick={() => this.save()}>СОХРАНИТЬ</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderCautions() {\r\n        return(\r\n            <>\r\n                {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и задание не сохранилось</Alert>}\r\n                {this.saved && <Alert color=\"success\">Задание успешно сохранилось</Alert>}\r\n                {this.notDeleted && <Alert color=\"danger\">Что-то пошло не так и задание не удалилось</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderSubtask(subtask: SubtaskViewModel) {\r\n        return(\r\n            <>\r\n                {this.renderSubtaskText(subtask)}\r\n                {this.renderImage(subtask)}\r\n                <CardText>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderControlButton()}\r\n                        {this.renderInputAnswerArea()}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderSaveButton()}\r\n                        {this.renderCautions()}\r\n                    </div>\r\n                </CardText>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderSubtask(this.props.subtask)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    inputAnswer(event: React.FormEvent<HTMLTextAreaElement>) {\r\n        this.userAnswer.answer = event.currentTarget.value;\r\n    }\r\n\r\n    save() {\r\n        if(this.props.store.userStore.currentUser.role !== UserRole.Admin) {\r\n            this.props.store.taskStore.addOrUpdateUserSubtask(this.userAnswer)\r\n                .then((status) => {\r\n                    this.notSaved = status !== 200;\r\n                    this.saved = status === 200;\r\n            });\r\n        }\r\n    }\r\n\r\n    deleteSubtask() {\r\n        this.props.store.taskStore\r\n            .deleteSubtask(this.props.subtask.id, this.props.taskId)\r\n            .then((status) => {\r\n                this.notDeleted = status !== 200;\r\n        });\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\TaskEdit.tsx",["753","754"],"﻿import React, {Component} from 'react';\r\nimport TaskStore from \"../../../stores/TaskStore\";\r\nimport { TaskViewModel } from \"../../../Typings/viewModels/TaskViewModel\";\r\nimport { Button, Modal, ModalHeader } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport { TaskType } from \"../../../Typings/enums/TaskType\";\r\nimport TaskUploadWindow from \"./TaskUploadWindow\";\r\nimport {TaskReadModel} from \"../../../Typings/readModels/TaskReadModel\";\r\n\r\nclass ITaskEditProps {\r\n    taskStore: TaskStore;\r\n    task: TaskViewModel;\r\n    toggle: any;\r\n    lessonId: number;\r\n}\r\n\r\n@observer\r\nexport class TaskEdit extends Component<ITaskEditProps> {\r\n    taskToEdit: TaskViewModel;\r\n\r\n    componentDidMount(): void {\r\n        this.taskToEdit = this.props.task;\r\n    }\r\n\r\n    renderBody() {\r\n        let task = this.props.task;\r\n        let taskReadModel = new TaskReadModel();\r\n        taskReadModel.instruction = task.instruction;\r\n        taskReadModel.text = task.text;\r\n        taskReadModel.taskType = task.taskType;\r\n        taskReadModel.subtasks = task.subtasks;\r\n        taskReadModel.tags = task.tags;\r\n        return(\r\n            <TaskUploadWindow store={this.props.taskStore} lessonId={this.props.lessonId} toggle={this.props.toggle} task={taskReadModel} />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Modal\r\n                centered={true}\r\n                size=\"lg\"\r\n                isOpen={true}\r\n                toggle={() => this.props.toggle()}\r\n            >\r\n                <ModalHeader>\r\n                    РЕДАКТИРОВАНИЕ УПРАЖНЕНИЯ\r\n                </ModalHeader>\r\n                {this.renderBody()}\r\n                <Button color=\"primary\"\r\n                        onClick={() => this.props.toggle()}>\r\n                    ОТМЕНИТЬ РЕДАКТИРОВАНИЕ\r\n                </Button>\r\n            </Modal>\r\n        );\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\FillGapsSubtask.tsx",["755"],"﻿import React, { Component } from 'react';\r\nimport {Badge, CardText} from \"reactstrap\";\r\nimport {ISubtaskProps} from \"./ISubtaskProps\";\r\nimport {makeObservable, observable} from \"mobx\";\r\nimport {observer} from \"mobx-react\";\r\nimport {UserRole} from \"../../../Typings/enums/UserRole\";\r\nimport {UserSubtaskReadModel} from \"../../../Typings/readModels/UserSubtaskReadModel\";\r\nimport {SubtaskViewModel} from \"../../../Typings/viewModels/SubtaskViewModel\";\r\nimport {SubtaskAnswerGroupViewModel} from \"../../../Typings/viewModels/SubtaskAnswerGroupViewModel\";\r\nimport {UserSubtaskAnswerGroupViewModel} from \"../../../Typings/viewModels/UserSubtaskAnswerGroupViewModel\";\r\nimport {UserSubtaskAnswerGroupReadModel} from \"../../../Typings/readModels/UserSubtaskAnswerGroupReadModel\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\n\r\n@observer\r\nexport class FillGapsSubtask extends Component<ISubtaskProps> {\r\n    notSaved: boolean;\r\n    userAnswer: UserSubtaskReadModel = new UserSubtaskReadModel();\r\n    saved: boolean;\r\n    notDeleted: boolean;\r\n    partsOfSentence: string [] = new Array<string>();\r\n    answerGroupIds: RegExpMatchArray | null;\r\n    userAnswerGroups: UserSubtaskAnswerGroupViewModel[] = new Array<UserSubtaskAnswerGroupViewModel>();\r\n    subtask: SubtaskViewModel = new SubtaskViewModel();\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            notSaved: observable,\r\n            userAnswer: observable,\r\n            saved: observable,\r\n            notDeleted: observable,\r\n            partsOfSentence: observable,\r\n            answerGroupIds: observable,\r\n        });\r\n        this.subtask = this.props.subtask;\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.parseSubtask(this.subtask);\r\n        this.userAnswerGroups = this.props.userSubtask.userSubtaskAnswerGroups;\r\n    }\r\n\r\n    parseSubtask(subtask: SubtaskViewModel) {\r\n        let regExp = /\\[\\d+\\]/g;\r\n        let text = subtask.text;\r\n        let groupIds = text.match(regExp);\r\n        let partsOfSentence = new Array<string>();\r\n        if (groupIds !== null) {\r\n            for(let i = 0; i < groupIds.length; i++) {\r\n                groupIds[i] = groupIds[i].replace(\"[\", \"\").replace(\"]\", \"\");\r\n                text = text.replace(groupIds[i], \"-\").replace(\"[\", \"\").replace(\"]\", \"\");\r\n            }\r\n            partsOfSentence = text.split(\"-\");\r\n            this.setState({answerGroupIds: groupIds, partsOfSentence: partsOfSentence});\r\n        }\r\n        this.answerGroupIds = groupIds;\r\n        this.partsOfSentence = partsOfSentence;\r\n    }\r\n\r\n    renderControlButton() {\r\n        if(this.props.store.userStore.currentUser.role === UserRole.Admin) {\r\n            return(\r\n                <i style={{marginLeft: '98%', width: '2%'}}\r\n                   onClick={() => this.deleteSubtask()}\r\n                   className=\"fa fa-window-close\" aria-hidden=\"true\"/>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderBadge(subtask: SubtaskViewModel) {\r\n        return(\r\n            <Badge outline color=\"primary\">{subtask.order + 1 }</Badge>\r\n        );\r\n    }\r\n\r\n    getUserAnswerGroup(groupId: string): UserSubtaskAnswerGroupViewModel {\r\n        return this.userAnswerGroups.filter(ug => ug.answerGroupId === Number(groupId))[0];\r\n    }\r\n\r\n    getAnswerGroup(groupId: string): SubtaskAnswerGroupViewModel {\r\n        return this.subtask.answerGroups.filter(ag => ag.id === Number(groupId))[0];\r\n    }\r\n\r\n    renderSentence() {\r\n        let partsOfSentence = this.partsOfSentence;\r\n        let groupIds = this.answerGroupIds;\r\n        return(\r\n            <>\r\n                {partsOfSentence.map((p, i ) => {\r\n                    return (\r\n                        <>\r\n                            <span style={{clear: 'both'}}>{p}</span>\r\n                            {groupIds !== null && i < groupIds.length && <Gap answerGroup={this.getAnswerGroup(groupIds[0])} store={this.props.store} userAnswerGroup={this.getUserAnswerGroup(groupIds[0])}/>}\r\n                        </>\r\n                    )\r\n                })}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderSubtask(subtask: SubtaskViewModel) {\r\n        return (\r\n            <>\r\n                <CardText>\r\n                    {this.renderControlButton()}\r\n                    {this.renderBadge(subtask)}\r\n                    {this.renderSentence()}\r\n                </CardText>\r\n            </>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderSubtask(this.props.subtask)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    save() {\r\n        if(this.props.store.userStore.currentUser.role !== UserRole.Admin) {\r\n            this.props.store.taskStore.addOrUpdateUserSubtask(this.userAnswer)\r\n                .then((status) => {\r\n                    this.notSaved = status !== 200;\r\n                    this.saved = status === 200;\r\n                });\r\n        }\r\n    }\r\n\r\n    deleteSubtask() {\r\n        this.props.store.taskStore\r\n            .deleteSubtask(this.props.subtask.id, this.props.taskId)\r\n            .then((status) => {\r\n                this.notDeleted = status !== 200;\r\n            });\r\n    }\r\n}\r\n\r\nclass IGapProps {\r\n    answerGroup: SubtaskAnswerGroupViewModel;\r\n    userAnswerGroup: UserSubtaskAnswerGroupViewModel;\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass Gap extends Component<IGapProps> {\r\n    userAnswerGroup: UserSubtaskAnswerGroupViewModel;\r\n    answerGroup : SubtaskAnswerGroupViewModel;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            userAnswerGroup: observable,\r\n            answerGroup: observable\r\n        });\r\n        this.userAnswerGroup = this.props.userAnswerGroup;\r\n        this.answerGroup = this.props.answerGroup;\r\n    }\r\n\r\n    inputChange(event: React.FormEvent<HTMLInputElement>) {\r\n        this.userAnswerGroup.lastAnswer = event.currentTarget.value;\r\n    }\r\n\r\n    handleKeyPress(target: React.KeyboardEvent<HTMLInputElement>) {\r\n        if(target.charCode === 13) {//todo: возможно, устарело и надо поменять\r\n            this.checkAnswer();\r\n        }\r\n    }\r\n\r\n    checkAnswer() {\r\n        let lastAnswer = this.userAnswerGroup.lastAnswer.toLowerCase().trim();\r\n        let rightAnswers = this.answerGroup.answers.filter(ans => ans.isRight).filter(ans => ans.answer.toLowerCase());\r\n        let userRightAnswer = rightAnswers.filter(ans => ans.answer === lastAnswer);\r\n        if(userRightAnswer === null) {//todo: возможно здесь undefined или length = 0\r\n            this.userAnswerGroup.status = this.userAnswerGroup.status === 0 ? 1 : 2;\r\n        } else {\r\n            this.userAnswerGroup.status = 4;\r\n        }\r\n        this.addOrUpdateUserAnswerGroup();\r\n    }\r\n\r\n    renderInput() {\r\n        let answers = this.answerGroup.answers;\r\n        let status = this.userAnswerGroup.status;\r\n        return(\r\n            <input placeholder={answers[0].answer}\r\n                type=\"text\"\r\n                className={status === 4 || status === 3 ? \"fillGapInputRight\" : status === 2 || status === 1 ? \"fillGapInputWrong\" : \"fillGapInputPrimary\"}\r\n                disabled={status === 4 || status === 2}\r\n                onChange={(e) => this.inputChange(e)}\r\n                /* onBlur={() => this.checkAnswer()}*/\r\n                value={this.userAnswerGroup.lastAnswer}\r\n                onKeyPress={(e) => this.handleKeyPress(e)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderInput()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    addOrUpdateUserAnswerGroup() {\r\n        if(this.props.store.userStore.currentUser.role !== UserRole.Admin) {\r\n            let answerGroupReadModel = new UserSubtaskAnswerGroupReadModel();\r\n            answerGroupReadModel.lastAnswer = this.userAnswerGroup.lastAnswer;\r\n            answerGroupReadModel.status = this.userAnswerGroup.status;\r\n            answerGroupReadModel.answerGroupId = this.userAnswerGroup.answerGroupId;\r\n            answerGroupReadModel.userId = this.props.store.userStore.currentUser.id;\r\n            this.props.store.taskStore.addOrUpdateUserSubtaskAnswerGroup(answerGroupReadModel);\r\n        }\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\LoadAudioSubtask.tsx",["756"],"﻿import React, { Component } from 'react';\r\nimport { Alert, Button, CardImg, CardText, Input } from \"reactstrap\";\r\nimport { ISubtaskProps } from \"./ISubtaskProps\";\r\nimport { SubtaskViewModel } from \"../../../Typings/viewModels/SubtaskViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { UserRole } from \"../../../Typings/enums/UserRole\";\r\nimport { UserSubtaskReadModel } from \"../../../Typings/readModels/UserSubtaskReadModel\";\r\nimport { UserSubtaskViewModel } from \"../../../Typings/viewModels/UserSubtaskViewModel\";\r\n\r\n@observer\r\nexport class LoadAudioSubtask extends Component<ISubtaskProps> {\r\n    notSaved: boolean;\r\n    userAnswer: UserSubtaskViewModel = new UserSubtaskViewModel();\r\n    saved: boolean;\r\n    notDeleted: boolean;\r\n    userAnswerReadModel: UserSubtaskReadModel = new UserSubtaskReadModel();\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            notSaved: observable,\r\n            userAnswer: observable,\r\n            saved: observable,\r\n            notDeleted: observable,\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.userAnswerReadModel.userId = this.props.userId;\r\n        this.userAnswerReadModel.subtaskId = this.props.subtask.id;\r\n        let userSubtask = this.props.userSubtask;\r\n        this.userAnswer = userSubtask;\r\n        this.userAnswerReadModel.status = userSubtask.status;\r\n        this.userAnswerReadModel.answer = userSubtask.answer;\r\n    }\r\n\r\n    renderControlButton() {\r\n        if(this.props.store.userStore.currentUser.role === UserRole.Admin) {\r\n            return(\r\n                <i style={{marginLeft: '98%', width: '2%'}}\r\n                   onClick={() => this.deleteSubtask()}\r\n                   className=\"fa fa-window-close\" aria-hidden=\"true\"/>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderSubtaskText(subtask: SubtaskViewModel) {\r\n        return(\r\n            <>\r\n                {subtask.text !== null && <CardText>\r\n                    {subtask.text}\r\n                </CardText>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderImage(subtask: SubtaskViewModel) {\r\n        return (\r\n            <>\r\n                {subtask.path !== null &&\r\n                <CardImg src={subtask.path.replace('ClientApp/build', './')} alt=\"Loading...\"/>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderSaveButton() {\r\n        return(\r\n            <div className=\"col-3\">\r\n                <Button outline color=\"primary\" onClick={() => this.save()}>СОХРАНИТЬ</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderCautions() {\r\n        return(\r\n            <>\r\n                {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и задание не сохранилось</Alert>}\r\n                {this.saved && <Alert color=\"success\">Задание успешно сохранилось</Alert>}\r\n                {this.notDeleted && <Alert color=\"danger\">Что-то пошло не так и задание не удалилось</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderUserAnswers() {\r\n        return(\r\n            <CardText>\r\n                {this.userAnswer.answerFiles.map(ans => {\r\n                    let answerPath = ans.replace('ClientApp/build', '.');\r\n                    return(\r\n                        <div className=\"row justify-content-center\">\r\n                            <audio className=\"audio\" controls>\r\n                                <source src={answerPath} type=\"audio/mpeg\"/>\r\n                            </audio>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </CardText>\r\n        );\r\n    }\r\n\r\n    renderInputFile() {\r\n        return(\r\n            <div className=\"col-9\">\r\n                <Input className=\"fileInput\"\r\n                    type=\"file\"\r\n                    id=\"loadAudioFile\"\r\n                    onChange={(e) => this.inputAnswer(e)}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderSubtask(subtask: SubtaskViewModel) {\r\n        return(\r\n            <>\r\n                {this.renderControlButton()}\r\n                {this.renderSubtaskText(subtask)}\r\n                {this.renderImage(subtask)}\r\n                {this.renderUserAnswers()}\r\n                <CardText>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderInputFile()}\r\n                        {this.renderSaveButton()}\r\n                        {this.renderCautions()}\r\n                    </div>\r\n                </CardText>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderSubtask(this.props.subtask)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    inputAnswer(event: React.ChangeEvent<HTMLInputElement>) {\r\n        // @ts-ignore\r\n        let file = event.target.files[0];\r\n        this.userAnswerReadModel.files.push(file);\r\n    }\r\n\r\n    save() {\r\n        if(this.props.store.userStore.currentUser.role !== UserRole.Admin) {\r\n            this.props.store.taskStore.addOrUpdateUserSubtask(this.userAnswerReadModel)\r\n                .then((status) => {\r\n                    this.notSaved = status !== 200;\r\n                    this.saved = status === 200;\r\n                });\r\n        }\r\n    }\r\n\r\n    deleteAnswer() {//todo: РЕАЛИЗОВАТЬ\r\n        \r\n    }\r\n\r\n    deleteSubtask() {\r\n        this.props.store.taskStore\r\n            .deleteSubtask(this.props.subtask.id, this.props.taskId)\r\n            .then((status) => {\r\n                this.notDeleted = status !== 200;\r\n            });\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\RightVerbFormSubtask.tsx",["757","758","759"],"﻿import React, { Component } from 'react';\r\nimport {Badge, CardText, DropdownItem, DropdownMenu, ButtonDropdown, DropdownToggle} from \"reactstrap\";\r\nimport {ISubtaskProps} from \"./ISubtaskProps\";\r\nimport {makeObservable, observable} from \"mobx\";\r\nimport {observer} from \"mobx-react\";\r\nimport {UserRole} from \"../../../Typings/enums/UserRole\";\r\nimport {UserSubtaskReadModel} from \"../../../Typings/readModels/UserSubtaskReadModel\";\r\nimport {SubtaskViewModel} from \"../../../Typings/viewModels/SubtaskViewModel\";\r\nimport {SubtaskAnswerGroupViewModel} from \"../../../Typings/viewModels/SubtaskAnswerGroupViewModel\";\r\nimport {UserSubtaskAnswerGroupViewModel} from \"../../../Typings/viewModels/UserSubtaskAnswerGroupViewModel\";\r\nimport {UserSubtaskAnswerGroupReadModel} from \"../../../Typings/readModels/UserSubtaskAnswerGroupReadModel\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\n\r\n@observer\r\nexport class RightVerbFormSubtask extends Component<ISubtaskProps> {\r\n    notSaved: boolean;\r\n    userAnswer: UserSubtaskReadModel = new UserSubtaskReadModel();\r\n    saved: boolean;\r\n    notDeleted: boolean;\r\n    partsOfSentence: string [] = new Array<string>();\r\n    answerGroupIds: RegExpMatchArray | null;\r\n    userAnswerGroups: UserSubtaskAnswerGroupViewModel[] = new Array<UserSubtaskAnswerGroupViewModel>();\r\n    subtask: SubtaskViewModel = new SubtaskViewModel();\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            notSaved: observable,\r\n            userAnswer: observable,\r\n            saved: observable,\r\n            notDeleted: observable,\r\n            partsOfSentence: observable,\r\n            answerGroupIds: observable,\r\n        });\r\n        this.subtask = this.props.subtask;\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.parseSubtask(this.subtask);\r\n        this.userAnswerGroups = this.props.userSubtask.userSubtaskAnswerGroups;\r\n    }\r\n\r\n    parseSubtask(subtask: SubtaskViewModel) {\r\n        let regExp = /\\d+/g;\r\n        let text = subtask.text;\r\n        let groupIds = text.match(regExp);\r\n        let partsOfSentence = new Array<string>();\r\n        if (groupIds !== null) {\r\n            for(let i = 0; i < groupIds.length; i++) {\r\n                text = text.replace(groupIds[i], \"-\").replace(\"[\", \"\").replace(\"]\", \"\");\r\n            }\r\n            partsOfSentence = text.split(\"-\");\r\n        }\r\n        this.answerGroupIds = groupIds;\r\n        this.partsOfSentence = partsOfSentence;\r\n    }\r\n\r\n    renderControlButton() {\r\n        if(this.props.store.userStore.currentUser.role === UserRole.Admin) {\r\n            return(\r\n                <i style={{marginLeft: '98%', width: '2%'}}\r\n                   onClick={() => this.deleteSubtask()}\r\n                   className=\"fa fa-window-close\" aria-hidden=\"true\"/>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderBadge(subtask: SubtaskViewModel) {\r\n        return(\r\n            <Badge outline color=\"primary\">{subtask.order + 1 }</Badge>\r\n        );\r\n    }\r\n\r\n    getUserAnswerGroup(groupId: string): UserSubtaskAnswerGroupViewModel {\r\n        return this.userAnswerGroups.filter(ug => ug.answerGroupId === Number(groupId))[0];\r\n    }\r\n\r\n    getAnswerGroup(groupId: string): SubtaskAnswerGroupViewModel {\r\n        return this.subtask.answerGroups.filter(ag => ag.id === Number(groupId))[0];\r\n    }\r\n\r\n    renderSentence() {\r\n        let partsOfSentence = this.partsOfSentence;\r\n        let groupIds = this.answerGroupIds;\r\n        return(\r\n            <>\r\n                {partsOfSentence.map((p, i ) => {\r\n                    return (\r\n                        <>\r\n                            <span style={{clear: 'both'}}>{p}</span>\r\n                            {groupIds !== null && i < groupIds.length && <Dropdown answerGroup={this.getAnswerGroup(groupIds[0])} store={this.props.store} userAnswerGroup={this.getUserAnswerGroup(groupIds[0])}/>}\r\n                        </>\r\n                    )\r\n                })}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderSubtask(subtask: SubtaskViewModel) {\r\n        return (\r\n            <>\r\n                <CardText>\r\n                    {this.renderControlButton()}\r\n                    {this.renderBadge(subtask)}\r\n                    {this.renderSentence()}\r\n                </CardText>\r\n            </>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderSubtask(this.props.subtask)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    save() {\r\n        if(this.props.store.userStore.currentUser.role !== UserRole.Admin) {\r\n            this.props.store.taskStore.addOrUpdateUserSubtask(this.userAnswer)\r\n                .then((status) => {\r\n                    this.notSaved = status !== 200;\r\n                    this.saved = status === 200;\r\n                });\r\n        }\r\n    }\r\n\r\n    deleteSubtask() {\r\n        this.props.store.taskStore\r\n            .deleteSubtask(this.props.subtask.id, this.props.taskId)\r\n            .then((status) => {\r\n                this.notDeleted = status !== 200;\r\n        });\r\n    }\r\n}\r\n\r\nclass IDropdownProps {\r\n    answerGroup: SubtaskAnswerGroupViewModel;\r\n    userAnswerGroup: UserSubtaskAnswerGroupViewModel;\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass Dropdown extends Component<IDropdownProps> {\r\n    userAnswerGroup: UserSubtaskAnswerGroupViewModel;\r\n    answerGroup : SubtaskAnswerGroupViewModel;\r\n    isOpen: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            userAnswerGroup: observable,\r\n            answerGroup: observable,\r\n            isOpen: observable\r\n        });\r\n        this.userAnswerGroup = this.props.userAnswerGroup;\r\n        this.answerGroup = this.props.answerGroup;\r\n    }\r\n\r\n    toggle() {\r\n        this.isOpen = !this.isOpen;\r\n    }\r\n\r\n    click(event: React.MouseEvent<HTMLElement, MouseEvent>) {\r\n        let id = event.currentTarget.id;\r\n        let answer = this.answerGroup.answers.find(a => a.id === Number(id));\r\n        if(answer !== undefined && answer.isRight) {\r\n            this.userAnswerGroup.status = 4;\r\n        } else {\r\n            this.userAnswerGroup.status = this.userAnswerGroup.status === 0 ? 1 : 2;\r\n        }\r\n        this.userAnswerGroup.lastAnswer = id;\r\n        this.addOrUpdateUserAnswerGroup();\r\n    }\r\n\r\n    renderDropdownToggle() {\r\n        let lastAnswerId = this.userAnswerGroup.lastAnswer === undefined ? 0 : this.userAnswerGroup.lastAnswer;\r\n        let status = this.userAnswerGroup.status;\r\n        let answers = this.answerGroup.answers;\r\n        if(lastAnswerId !== 0 && answers.findIndex(a => a.id == lastAnswerId) !== -1) {\r\n            let index =  answers.findIndex(a => a.id == lastAnswerId);\r\n            return (\r\n                <DropdownToggle caret outline color={status === 4 || status === 3 ? \"success\" : status === 2 || status === 1 ? \"danger\" : \"primary\"} disabled={status === 4 || status === 2}>\r\n                    {answers[index].answer}\r\n                </DropdownToggle>\r\n            );\r\n        } else {\r\n            return (\r\n                <DropdownToggle caret outline color=\"primary\">\r\n                    {answers[0] !== undefined && answers[0].answer}\r\n                </DropdownToggle>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderMenu() {\r\n        let answers = this.answerGroup.answers;\r\n        return(\r\n            <>\r\n                <ButtonDropdown isOpen={this.isOpen} toggle={() => this.toggle()}>\r\n                    {this.renderDropdownToggle()}\r\n                    <DropdownMenu>\r\n                        {answers.map((answer) => {\r\n                            return(\r\n                                <DropdownItem\r\n                                    onClick={(e) => this.click(e)}\r\n                                    id={answer.id.toString()}\r\n                                >{answer.answer}</DropdownItem>\r\n                            );\r\n                        })}\r\n                    </DropdownMenu>\r\n                </ButtonDropdown>\r\n            </>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderMenu()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    addOrUpdateUserAnswerGroup() {\r\n        if(this.props.store.userStore.currentUser.role !== UserRole.Admin) {\r\n            let answerGroupReadModel = new UserSubtaskAnswerGroupReadModel();\r\n            answerGroupReadModel.lastAnswer = this.userAnswerGroup.lastAnswer;\r\n            answerGroupReadModel.status = this.userAnswerGroup.status;\r\n            answerGroupReadModel.answerGroupId = this.userAnswerGroup.answerGroupId;\r\n            answerGroupReadModel.userId = this.props.store.userStore.currentUser.id;\r\n            this.props.store.taskStore.addOrUpdateUserSubtaskAnswerGroup(answerGroupReadModel);\r\n        }\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Tasks\\LoadFileSubtask.tsx",["760"],"﻿import React, { Component } from 'react';\r\nimport { Alert, Button, CardImg, CardText, Input } from \"reactstrap\";\r\nimport { ISubtaskProps } from \"./ISubtaskProps\";\r\nimport { SubtaskViewModel } from \"../../../Typings/viewModels/SubtaskViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport { UserRole } from \"../../../Typings/enums/UserRole\";\r\nimport { UserSubtaskReadModel } from \"../../../Typings/readModels/UserSubtaskReadModel\";\r\nimport { UserSubtaskViewModel } from \"../../../Typings/viewModels/UserSubtaskViewModel\";\r\n\r\n@observer\r\nexport class LoadFileSubtask extends Component<ISubtaskProps> {\r\n    notSaved: boolean;\r\n    userAnswer: UserSubtaskViewModel = new UserSubtaskViewModel();\r\n    saved: boolean;\r\n    notDeleted: boolean;\r\n    userAnswerReadModel: UserSubtaskReadModel = new UserSubtaskReadModel();\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            notSaved: observable,\r\n            userAnswer: observable,\r\n            saved: observable,\r\n            notDeleted: observable,\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.userAnswerReadModel.userId = this.props.userId;\r\n        this.userAnswerReadModel.subtaskId = this.props.subtask.id;\r\n        let userSubtask = this.props.userSubtask;\r\n        this.userAnswer = userSubtask;\r\n        this.userAnswerReadModel.status = userSubtask.status;\r\n        this.userAnswerReadModel.answer = userSubtask.answer;\r\n    }\r\n\r\n    renderControlButton() {\r\n        if(this.props.store.userStore.currentUser.role === UserRole.Admin) {\r\n            return(\r\n                <i style={{marginLeft: '98%', width: '2%'}}\r\n                   onClick={() => this.deleteSubtask()}\r\n                   className=\"fa fa-window-close\" aria-hidden=\"true\"/>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderSubtaskText(subtask: SubtaskViewModel) {\r\n        return(\r\n            <>\r\n                {subtask.text !== null && <CardText>\r\n                    {subtask.text}\r\n                </CardText>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderImage(subtask: SubtaskViewModel) {\r\n        return (\r\n            <>\r\n                {subtask.path !== null &&\r\n                <CardImg src={subtask.path.replace('ClientApp/build', './')} alt=\"Loading...\"/>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderSaveButton() {\r\n        return(\r\n            <div className=\"col-3\">\r\n                <Button outline color=\"primary\" onClick={() => this.save()}>СОХРАНИТЬ</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderCautions() {\r\n        return(\r\n            <>\r\n                {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и задание не сохранилось</Alert>}\r\n                {this.saved && <Alert color=\"success\">Задание успешно сохранилось</Alert>}\r\n                {this.notDeleted && <Alert color=\"danger\">Что-то пошло не так и задание не удалилось</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderUserAnswers() {\r\n        return(\r\n            <CardText>\r\n                {this.userAnswer.answerFiles.map(ans => {\r\n                    let answerPath = ans.replace('ClientApp/build', '.');\r\n                    return(\r\n                        <div className=\"row justify-content-center\">\r\n                            <audio className=\"audio\" controls>\r\n                                <source src={answerPath} type=\"audio/mpeg\"/>\r\n                            </audio>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </CardText>\r\n        );\r\n    }\r\n\r\n    renderInputFile() {\r\n        return(\r\n            <div className=\"col-9\">\r\n                <Input className=\"fileInput\"\r\n                       type=\"file\"\r\n                       id=\"loadAudioFile\"\r\n                       onChange={(e) => this.inputAnswer(e)}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderSubtask(subtask: SubtaskViewModel) {\r\n        return(\r\n            <>\r\n                {this.renderControlButton()}\r\n                {this.renderSubtaskText(subtask)}\r\n                {this.renderImage(subtask)}\r\n                {this.renderUserAnswers()}\r\n                <CardText>\r\n                    <div className=\"row justify-content-center\">\r\n                        {this.renderInputFile()}\r\n                        {this.renderSaveButton()}\r\n                        {this.renderCautions()}\r\n                    </div>\r\n                </CardText>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderSubtask(this.props.subtask)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    inputAnswer(event: React.ChangeEvent<HTMLInputElement>) {\r\n        // @ts-ignore\r\n        let file = event.target.files[0];\r\n        this.userAnswerReadModel.files.push(file);\r\n    }\r\n\r\n    save() {\r\n        if(this.props.store.userStore.currentUser.role !== UserRole.Admin) {\r\n            this.props.store.taskStore.addOrUpdateUserSubtask(this.userAnswerReadModel)\r\n                .then((status) => {\r\n                    this.notSaved = status !== 200;\r\n                    this.saved = status === 200;\r\n                });\r\n        }\r\n    }\r\n\r\n    deleteAnswer() {//todo: РЕАЛИЗОВАТЬ\r\n\r\n    }\r\n\r\n    deleteSubtask() {\r\n        this.props.store.taskStore\r\n            .deleteSubtask(this.props.subtask.id, this.props.taskId)\r\n            .then((status) => {\r\n                this.notDeleted = status !== 200;\r\n        });\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\consts\\TaskTypeTranslater.tsx",["761"],"﻿import { TaskType } from \"../Typings/enums/TaskType\";\r\n\r\nexport const TaskTypeTranslater = [\r\n    { type: TaskType.InsertWordsIntoGaps, russian: 'Вставить слова в пропуски' },\r\n    { type: TaskType.RightVerbForm, russian: 'Выбрать правильную форму глагола' },\r\n    { type: TaskType.FillGaps, russian: 'Заполнить пропуски' },\r\n    { type: TaskType.LoadAudio, russian: 'Загрузить аудио' },\r\n    { type: TaskType.LoadFile, russian: 'Прикрепить файл' },\r\n    { type: TaskType.DetailedAnswer, russian: 'Развернутый ответ' }\r\n];","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\CompletedHomework\\CompletedTask.tsx",["762","763"],"﻿import React, { Component } from 'react';\r\nimport { Button } from \"reactstrap\";\r\nimport { Task } from \"../../Common/Tasks/Task\";\r\nimport { observer } from \"mobx-react\";\r\nimport { TaskViewModel } from \"../../../Typings/viewModels/TaskViewModel\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { makeObservable, observable } from \"mobx\";\r\n\r\nclass ICompletedTaskProps {\r\n    task: TaskViewModel;\r\n    store: RootStore;\r\n    userId: number;\r\n}\r\n\r\n@observer\r\nclass CompletedTask extends Component<ICompletedTaskProps> {\r\n    commentsWindowOpen: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            commentsWindowOpen: observable\r\n        })\r\n    }\r\n\r\n    commentsToggle() {\r\n        this.commentsWindowOpen = !this.commentsWindowOpen;\r\n    }\r\n\r\n    renderTask() {\r\n        return (\r\n            <Task task={this.props.task} store={this.props.store} userId={this.props.userId}/>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                <div className=\"col-10\">\r\n                    {this.renderTask()}\r\n                </div>\r\n                <div className=\"col-2\">\r\n                    <Button\r\n                        outline color=\"primary\"\r\n                        onClick={() => this.commentsToggle()}>Комментарии</Button>\r\n                    {this.commentsWindowOpen && <CommentGroup commentedEntityType=\"lessonTask\" commentedEntityId={this.state.task.id} userId={store.getState().choosenUser.id} onToggle={this.onToggle}/>}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CompletedTask;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserSubtaskReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\SubtaskReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\SubtaskViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserSubtaskAnswerGroupReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskType.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\SubtaskUploadWindow.tsx",["764","765"],"﻿import React, { Component } from \"react\";\r\nimport { SubtaskReadModel } from \"../../../Typings/readModels/SubtaskReadModel\";\r\nimport { Input, Label, Tooltip } from \"reactstrap\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { IUploadSubtaskProps } from \"./IUploadSubtaskProps\";\r\nimport { SubtaskType } from \"../../../Typings/enums/SubtaskType\";\r\nimport { getTooltipText } from \"../../../functions/getTooltipText\";\r\n\r\nclass SubtaskUploadWindow extends Component<IUploadSubtaskProps> {\r\n    subtask: SubtaskReadModel;\r\n    tooltipOpen: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            subtask: observable,\r\n            tooltipOpen: observable,\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.subtask = this.props.subtask;\r\n        this.subtask.order = this.props.order;\r\n    }\r\n    \r\n    renderOrderInput() {\r\n        return(\r\n            <div className=\"col-2\">\r\n                <Label>Номер</Label>\r\n                <Input\r\n                    value={this.subtask.order}\r\n                    onChange={(e) => this.inputOrder(e)}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderTooltip() {\r\n        let subtaskType = this.subtask.subtaskType;\r\n        if(subtaskType === SubtaskType.FillGaps || subtaskType === SubtaskType.RightVerbForm) {\r\n            return(\r\n                <>\r\n                    <span id=\"DisabledAutoHideExample\">Введите предложение</span>\r\n                    <Tooltip placement=\"top\" isOpen={this.tooltipOpen} autohide={true} target=\"DisabledAutoHideExample\" toggle={this.tooltipToggle}>\r\n                        {getTooltipText(subtaskType)}\r\n                    </Tooltip>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderInputText() {\r\n        return(\r\n            <>\r\n                <Label className=\"instruction\">\r\n                    Введите текст задания\r\n                </Label>\r\n                <textarea\r\n                    className=\"taskInput\"\r\n                    defaultValue={this.subtask.text}\r\n                    onChange={(e) => this.inputText(e)}/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderInputFile() {\r\n        let subtaskType = this.subtask.subtaskType;\r\n        if(subtaskType === SubtaskType.LoadAudio || subtaskType || SubtaskType.DetailedAnswer) {\r\n            return(\r\n                <Input className=\"fileInput\"\r\n                    type=\"file\"\r\n                    onChange={(e) => this.inputFile(e)}/>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderInput() {\r\n        return(\r\n            <div className=\"row justify-content-center\">\r\n                {this.renderOrderInput()}\r\n                <div className=\"col-10\">\r\n                    {this.renderTooltip()}\r\n                    {this.renderInputText()}\r\n                    {this.renderInputFile()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderInput()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    updateParentSubtask() {\r\n        this.props.updateSubtask(this.subtask, this.props.order);\r\n    }\r\n\r\n    inputFile(event: React.ChangeEvent<HTMLInputElement>) {\r\n        // @ts-ignore\r\n        let file = event.target.files[0];\r\n        this.updateParentSubtask();\r\n    }\r\n\r\n    inputText(event: React.FormEvent<HTMLTextAreaElement>) {\r\n        this.subtask.text = event.currentTarget.value;\r\n        this.updateParentSubtask();\r\n    }\r\n\r\n    inputOrder(event: React.FormEvent<HTMLInputElement>) {\r\n        let value = event.currentTarget.value;\r\n        if(parseInt(value)) {\r\n            this.subtask.order = Number(value);\r\n        } else {\r\n            this.subtask.order = 0;\r\n        }\r\n        this.updateParentSubtask();\r\n    }\r\n\r\n    tooltipToggle() {\r\n        this.tooltipOpen = !this.tooltipOpen;\r\n    }\r\n}\r\n\r\nexport default SubtaskUploadWindow;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\getTaskTitle.tsx",["766"],"﻿import {TaskType} from \"../Typings/enums/TaskType\";\r\n\r\nexport function getTaskTitle(taskType: TaskType): string {\r\n    if(taskType === TaskType.DetailedAnswer) {\r\n        return \"Задание на загрузку развёрнутого ответа\";\r\n    } else if(taskType === TaskType.RightVerbForm) {\r\n        return \"Выбрать правильную форму глагола\";\r\n    } else if(taskType === TaskType.LoadAudio) {\r\n        return \"Задание на загрузку аудио\";\r\n    } else if(taskType === TaskType.FillGaps) {\r\n        return \"Задание на заполнение пропусков\";\r\n    } else if(taskType === TaskType.LoadFile) {\r\n        return \"Задание на загрузку файла\";\r\n    } else if(taskType === TaskType.InsertWordsIntoGaps) {\r\n        return \"Задание вставить слова в пропуски\";\r\n    }\r\n    return \"\";\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\subtaskTranspiler.tsx",["767"],"﻿import { TaskType } from \"../Typings/enums/TaskType\";\r\nimport { SubtaskType } from \"../Typings/enums/SubtaskType\";\r\n\r\nexport function subtaskTranspiler(taskType: TaskType): SubtaskType {\r\n    if(taskType === TaskType.InsertWordsIntoGaps) {\r\n        return SubtaskType.InsertWordsIntoGaps;\r\n    } else if(taskType === TaskType.LoadFile) {\r\n        return SubtaskType.LoadFile;\r\n    } else if(taskType === TaskType.LoadAudio) {\r\n        return SubtaskType.LoadAudio;\r\n    } else if(taskType === TaskType.FillGaps) {\r\n        return SubtaskType.FillGaps;\r\n    } else if(taskType === TaskType.RightVerbForm) {\r\n        return SubtaskType.RightVerbForm;\r\n    } else if(taskType === TaskType.DetailedAnswer) {\r\n        return SubtaskType.DetailedAnswer;\r\n    }\r\n    return SubtaskType.FillGaps;//todo: плохо, лучше сделать None\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\getTooltipText.tsx",["768"],"﻿import { SubtaskType } from \"../Typings/enums/SubtaskType\";\r\n\r\nexport function getTooltipText(subtaskType: SubtaskType): string {\r\n    if(subtaskType === SubtaskType.FillGaps) {\r\n        return \"Подсказка\\n \\\"Поставить слово в нужную форму\\\": запишите в квадратных скобках начальную форму слова, слэш, затем правильную форму слова. \\\"Заполнить пропуски\\\": запишите в квадратных скобках только правильное слово (выражение). \\\"Заполнить пропуски любым текстом без проверки\\\": просто запишите пустые квадратные скобки на месте пропуска (без пробела).\\n Пример:\\n 1. I [to play/am playing] tennis.\\n 2. This flower is [better] than that.\";\r\n    } else if(subtaskType === SubtaskType.RightVerbForm) {\r\n        return \"Подсказка\\n Запишите варианты ответа в квадратных скобках и отметьте правильный вариант звездочкой *.\\n Если вы хотите добавить объяснение, то напишите его в скобочках сразу после ответа\\n Пример:\\n They [is(because bla-bla-bla)/are/was/were*(it is right!because...)] on holiday yesterday\";\r\n    } else if(subtaskType === SubtaskType.InsertWordsIntoGaps) {\r\n        return \"Подсказка\\n Напишите текст. Слова и фразы, которые нужно вставить из рамочки, заключите в квадратные скобки.\\n Пример:\\n I like [walking] in the park in the morning.\";\r\n    }\r\n    return \"\";\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\WordReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserWordViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\WordsTrainingPage.tsx",["769","770","771","772"],"﻿import React, {Component} from 'react';\r\nimport { observer } from \"mobx-react\";\r\nimport WordStore from \"../../../stores/WordStore\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Button, Card, CardBody, CardFooter, Modal, ModalBody } from \"reactstrap\";\r\nimport { UserWordViewModel } from \"../../../Typings/viewModels/UserWordViewModel\";\r\nimport { WordViewModel } from \"../../../Typings/viewModels/WordViewModel\";\r\nimport { WordTrainingType } from \"../../../Typings/enums/WordTrainingType\";\r\nimport { Settings } from \"./Settings\";\r\nimport { CompletingStatus } from \"../../../Typings/enums/CompletingStatus\";\r\nimport EnglishWordRussianMeaningTraining from \"./TrainingTypes/EnglishWordRussianMeaningTraining\";\r\nimport RussianWordEnglishWordTraining from \"./TrainingTypes/RussianWordEnglishWordTraining\";\r\nimport ShowWordTraining from \"./TrainingTypes/ShowWordTraining\";\r\nimport { UserWordReadModel } from \"../../../Typings/readModels/UserWordReadModel\";\r\n\r\nclass IWordsTrainingPageProps {\r\n    onToggle: any;\r\n    wordStore: WordStore;\r\n    userId: number;\r\n}\r\n\r\n@observer\r\nclass WordsTrainingPage extends Component<IWordsTrainingPageProps> {\r\n    wordsCount: number;\r\n    settingsOpen: boolean;\r\n    userWords: UserWordViewModel[] = new Array<UserWordViewModel>();\r\n    words: WordViewModel[] = new Array<WordViewModel>();\r\n    wordsCountWarning: boolean;\r\n    trainingType: WordTrainingType;\r\n    settings : boolean = true;\r\n    showWords: boolean;\r\n    showOrder: number;\r\n    countLearntWords: number = 0;\r\n    rightAnswersShouldBe: number = 5;\r\n    toggleTrain: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            wordsCount: observable,\r\n            settingsOpen: observable,\r\n            userWords: observable,\r\n            words: observable,\r\n            wordsCountWarning: observable,\r\n            trainingType: observable,\r\n            settings: observable,\r\n            showWords: observable,\r\n            showOrder: observable,\r\n            countLearntWords: observable,\r\n            toggleTrain: observable\r\n        });\r\n    }\r\n\r\n    startTraining(userWords: UserWordViewModel[]) {\r\n        this.userWords = userWords;\r\n        this.settings = false;\r\n        this.showWords = true;\r\n    }\r\n\r\n    getWord(wordId: number): WordViewModel {\r\n        return this.props.wordStore.dictionary.filter(w => w.id === wordId)[0];\r\n    }\r\n \r\n    showWordsTraining(showOrder: number) {\r\n        let word = this.getWord(this.userWords[showOrder].wordId);\r\n        return (\r\n            <ShowWordTraining word={word} continue={this.continueShow} words={new Array<WordViewModel>()}/>\r\n        );\r\n    }\r\n\r\n    continueShow() {\r\n        let showOrder = this.showOrder;\r\n        showOrder = ++showOrder;\r\n        if(showOrder <= this.userWords.length - 1) {\r\n            this.showOrder = showOrder;\r\n        } else {\r\n            this.showWords = false;\r\n        }\r\n    }\r\n\r\n    renderSettings() {\r\n        return(\r\n            <>\r\n                {this.settings && <Settings wordStore={this.props.wordStore} continue={this.startTraining} />}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderShowWordTraining() {\r\n        return (\r\n            <>\r\n                {this.showWords && this.showWordsTraining(this.showOrder)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderTraining(toggleTrain: boolean) {\r\n        if(!this.showWords && this.countLearntWords !== this.userWords.length && !this.settings)\r\n        return (\r\n            <>\r\n                {this.train(toggleTrain)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderFinish() {\r\n        if(!this.showWords && this.countLearntWords == this.userWords.length ) {\r\n            return(\r\n                <Card>\r\n                    <CardBody>\r\n                        Поздравляем! Ты всё выучил!\r\n                    </CardBody>\r\n                    <CardFooter>\r\n                        <Button\r\n                            outline\r\n                            color=\"primary\"\r\n                            onClick={() => this.handleToggle()}>\r\n                            Закрыть\r\n                        </Button>\r\n                    </CardFooter>\r\n                </Card>\r\n            );\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Modal toggle={() => this.props.onToggle()} isOpen={true} size=\"lg\">\r\n                <ModalBody>\r\n                    {this.renderSettings()}\r\n                    {this.renderShowWordTraining()}\r\n                    {this.renderTraining(this.toggleTrain)}\r\n                    {this.renderFinish()}\r\n                </ModalBody>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    train(toggleTrain: boolean) {\r\n        let wordId = this.chooseWord();\r\n        let words = this.chooseWords(wordId);\r\n        let word = this.props.wordStore.dictionary.filter(w => w.id === wordId)[0];\r\n        let trainingType = this.getRandomIntInclusive(1, 2);\r\n        if(trainingType === 1) {\r\n            return(\r\n                <EnglishWordRussianMeaningTraining continue={this.handleAnswer} word={word} words={words}/>\r\n\r\n            );\r\n        } else if(trainingType === 2) {\r\n            return(\r\n                <RussianWordEnglishWordTraining continue={this.handleAnswer} word={word} words={words}/>\r\n            );\r\n        }\r\n    }\r\n\r\n    chooseWord(): number {\r\n        let randomWordIndex = this.getRandomIntInclusive(0, this.userWords.length - 1);\r\n        return this.userWords[randomWordIndex].wordId;\r\n    }\r\n\r\n    getRandomIntInclusive(min: number, max: number): number {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    chooseWords(wordId: number): WordViewModel[] {\r\n        let wordsIds = new Array<number>();\r\n        wordsIds.push(wordId);\r\n        while(wordsIds.length !== 4) {\r\n            let choosenWord = this.chooseWord();\r\n            if(wordId !== choosenWord && wordsIds.find(word => word === choosenWord) === undefined) {\r\n                wordsIds.push(choosenWord);\r\n            }\r\n        }\r\n        let words = new Array<WordViewModel>();\r\n        for(let i = 0; i < wordsIds.length; i++) {\r\n            let word = this.props.wordStore.dictionary.filter(w => w.id === wordsIds[i])[0];\r\n            words.push(word);\r\n        }\r\n\r\n        return words;\r\n    }\r\n\r\n    handleAnswer(wordId: number, right: boolean) {\r\n        let userWords = this.userWords;\r\n        let userWord = userWords.find(userWord => userWord.wordId == wordId);\r\n        let userWordIndex = userWords\r\n            .map((w) => { return w.wordId ;})\r\n            .indexOf(wordId);\r\n        if(right && userWord !== undefined) {\r\n            userWord.rightAnswers = ++userWord.rightAnswers;\r\n            if(userWord.rightAnswers == this.rightAnswersShouldBe) {\r\n                userWord.status = CompletingStatus.Completed;\r\n                this.countLearntWords =  this.countLearntWords + 1;\r\n            }\r\n            userWords[userWordIndex] = userWord;\r\n        }\r\n        this.toggleTrain = !this.toggleTrain;\r\n    }\r\n\r\n    handleToggle() {\r\n        let userWordsReadModels = new Array<UserWordReadModel>();\r\n        let userWords = this.userWords;\r\n        for(let i = 0; i < userWords.length; i++ ) {\r\n            let userWordReadModel = new UserWordReadModel();\r\n            userWordReadModel.word.id = userWords[i].wordId;\r\n            userWordReadModel.rightAnswers = userWords[i].rightAnswers;\r\n            userWordReadModel.countOfAttempts = userWords[i].countOfAttempts;\r\n            userWordReadModel.status = userWords[i].status;\r\n            userWordReadModel.answer = userWords[i].answer;\r\n            userWordsReadModels.push(userWordReadModel)\r\n        }\r\n        this.props.wordStore.addOrUpdateUserWordsProgress(userWordsReadModels);\r\n        this.props.onToggle();\r\n    }\r\n}\r\n\r\nexport default WordsTrainingPage;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\Words.tsx",["773","774"],"﻿import React, { Component } from 'react';\r\nimport { makeObservable } from \"mobx\";\r\nimport UserStore from \"../../../stores/UserStore\";\r\nimport WordStore from \"../../../stores/WordStore\";\r\nimport { UserRole } from \"../../../Typings/enums/UserRole\";\r\nimport { UserWordViewModel } from \"../../../Typings/viewModels/UserWordViewModel\";\r\nimport Word from \"./Word\";\r\nimport { observer } from \"mobx-react\";\r\n\r\nclass IWordsProps {\r\n    userStore: UserStore;\r\n    wordStore: WordStore;\r\n}\r\n\r\n@observer\r\nclass Words extends Component<IWordsProps> {\r\n    getUserWords(): UserWordViewModel[] {\r\n        let role = this.props.userStore.currentUser.role;\r\n        if(role === UserRole.Admin) {\r\n            return this.props.wordStore.dictionary.map(word => {\r\n                let userWord = new UserWordViewModel();\r\n                userWord.wordId = word.id;\r\n                return userWord;\r\n            });\r\n        } else {\r\n            return this.props.wordStore.userDictionary;\r\n        }\r\n    }\r\n\r\n    renderWords() {\r\n        let userWords = this.getUserWords();\r\n        return(\r\n            <>\r\n                {userWords.map((userWord) => {\r\n                    return (\r\n                        <Word userWord={userWord} wordStore={this.props.wordStore} userStore={this.props.userStore} />\r\n                    )\r\n                })}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.renderWords()}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Words;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\Word.tsx",["775"],"﻿import React, { Component } from 'react';\r\nimport { WordViewModel } from \"../../../Typings/viewModels/WordViewModel\";\r\nimport { Card, CardText, Progress } from \"reactstrap\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport WordStore from \"../../../stores/WordStore\";\r\nimport UserStore from \"../../../stores/UserStore\";\r\nimport { UserRole } from \"../../../Typings/enums/UserRole\";\r\nimport { observer } from \"mobx-react\";\r\nimport { UserWordViewModel } from \"../../../Typings/viewModels/UserWordViewModel\";\r\nimport AddOrUpdateWord from \"./AddOrUpdateWord\";\r\n\r\n\r\nclass IWordProps {\r\n    userWord: UserWordViewModel;\r\n    wordStore: WordStore;\r\n    userStore: UserStore;\r\n}\r\n\r\n@observer\r\nclass Word extends Component<IWordProps> {\r\n    word: WordViewModel = new WordViewModel();\r\n    notDeleted: boolean;\r\n    edit: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            word: observable,\r\n            notDeleted: observable,\r\n            edit: observable\r\n        });\r\n        this.setWord();\r\n    }\r\n\r\n    setWord() {\r\n        this.word = this.props.wordStore.dictionary.filter(w => w.id === this.props.userWord.wordId)[0];\r\n    }\r\n\r\n    renderWord() {\r\n        return(\r\n            <div className=\"col-lg-2 col-md-9 col-sm-9 col-xs-9\">\r\n                {this.word.word.toUpperCase()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderPartOfSpeech() {\r\n        return(\r\n            <div className=\"col-lg-2 col-md-9 col-sm-9 col-xs-9\">\r\n                {this.word.partOfSpeech}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderEnglishMeaning() {\r\n        return(\r\n            <div className=\"col-lg-2 col-md-9 col-sm-9 col-xs-9\">\r\n                {this.word.englishMeaning}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderRussianMeaning() {\r\n        return(\r\n            <div className=\"col-lg-2 col-md-9 col-sm-9 col-xs-9\">\r\n                {this.word.russianMeaning}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderControlButtons() {\r\n        return(\r\n            <>\r\n                <div className=\"row justify-content-center\">\r\n                    <p onClick={() => this.handleDelete()}>\r\n                        <i className=\"fa fa-window-close\" aria-hidden=\"true\"/>\r\n                    </p>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <p onClick={() => this.editToggle()}>\r\n                        <i className=\"fa fa-edit\" aria-hidden=\"true\"/>\r\n                    </p>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderProgress() {\r\n        return(\r\n            <Progress color=\"success\" value={this.props.userWord.rightAnswers / 0.05}>выучено на {this.computeProgress()} %</Progress>\r\n        )\r\n    }\r\n\r\n    renderWordCard() {\r\n        return(\r\n            <Card className=\"cardWord\" body>\r\n                <CardText>\r\n                    <div className=\"row justify-content-center rowWord\">\r\n                        <div className=\"col-10\">\r\n                            <div className=\"row justify-content-center\">\r\n                                {this.renderWord()}\r\n                                {this.renderPartOfSpeech()}\r\n                                {this.renderEnglishMeaning()}\r\n                                {this.renderRussianMeaning()}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-2\">\r\n                            {this.renderControlButtons()}\r\n                        </div>\r\n                    </div>\r\n                </CardText>\r\n                <CardText style={{marginTop: '25px'}}>\r\n                    {this.renderProgress()}\r\n                </CardText>\r\n            </Card>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {!this.edit && this.renderWordCard()}\r\n                {this.edit && <AddOrUpdateWord word={this.word} userStore={this.props.userStore} wordStore={this.props.wordStore} addOrUpdateWordToggle={this.editToggle}/>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    handleDelete() {\r\n        let result = window.confirm('Вы уверены, что хотите удалить слово?');\r\n        if(result) {\r\n            this.deleteWord()\r\n                .then((status) => {\r\n                    this.notDeleted = status !== 200;\r\n            });\r\n        }\r\n    }\r\n\r\n    async deleteWord(): Promise<number> {\r\n        let role = this.props.userStore.currentUser.role;\r\n        if(role === UserRole.User) {\r\n            let userId = this.props.userStore.currentUser.id;\r\n           return this.props.wordStore.deleteWordFromUserDictionary(this.word.id, userId);\r\n        } else if(role === UserRole.Admin) {\r\n           return this.props.wordStore.deleteWordFromDictionary(this.word.id);\r\n        }\r\n\r\n        return 401;\r\n    }\r\n\r\n    editToggle() {\r\n        this.edit = !this.edit;\r\n    }\r\n\r\n    computeProgress() {\r\n        let progress = this.props.userWord.rightAnswers / 5 * 100;\r\n        if(progress > 100) {\r\n            progress = 100;\r\n        }\r\n        return progress;\r\n    }\r\n}\r\n\r\nexport default Word;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\WordViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\AddOrUpdateWord.tsx",["776"],"﻿import React, { Component } from 'react';\r\nimport { Button, Card, CardBody, Input, Modal, Alert } from \"reactstrap\";\r\nimport { WordViewModel } from \"../../../Typings/viewModels/WordViewModel\";\r\nimport UserStore from \"../../../stores/UserStore\";\r\nimport WordStore from \"../../../stores/WordStore\";\r\nimport { observer } from \"mobx-react\";\r\nimport { WordReadModel } from \"../../../Typings/readModels/WordReadModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { ExampleReadModel } from \"../../../Typings/readModels/ExampleReadModel\";\r\nimport { translatePartOfSpeech } from \"../../../functions/translater\";\r\nimport { PartOfSpeech } from \"../../../Typings/enums/PartOfSpeech\";\r\nimport { transformValueToPartOfSpeech } from \"../../../functions/transformer\";\r\nimport { UserRole } from \"../../../Typings/enums/UserRole\";\r\n\r\nclass IAddOrUpdateWordProps {\r\n    word: WordViewModel;\r\n    userStore: UserStore;\r\n    wordStore: WordStore;\r\n    addOrUpdateWordToggle: any;\r\n}\r\n\r\n@observer\r\nclass AddOrUpdateWord extends Component<IAddOrUpdateWordProps> {\r\n    word: WordReadModel = new WordReadModel();\r\n    notSaved: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            word: observable,\r\n            notSaved: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        let word = this.props.word;\r\n        this.word.id = word.id;\r\n        this.word.russianMeaning = word.russianMeaning;\r\n        this.word.englishMeaning = word.englishMeaning;\r\n        this.word.partOfSpeech = word.partOfSpeech;\r\n        this.word.examples = word.examples;\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<IAddOrUpdateWordProps>, prevState: Readonly<{}>, snapshot?: any): void {\r\n        this.notSaved = false;\r\n    }\r\n\r\n    renderCloseButton() {\r\n        return (\r\n            <div className=\"row justify-content-end\">\r\n                <Button\r\n                    type=\"submit\"\r\n                    onClick={() => this.props.addOrUpdateWordToggle()}>\r\n                    <i className=\"fa fa-window-close\" aria-hidden=\"true\"/>\r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderWordInput() {\r\n        return (\r\n            <div className=\"col-lg-2\">\r\n                <Input\r\n                    type=\"text\"\r\n                    value={this.word.word}\r\n                    placeholder=\"СЛОВО\"\r\n                    onChange={(e) => this.handleChange(e)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderPartOfSpeechInput() {\r\n        return (\r\n            <div className=\"col-lg-1\">\r\n                <Input type=\"select\" id=\"exampleSelect\" onClick={(e) => this.handlePartOfSpeech(e)}>\r\n                    <option value=\"Noun\">{translatePartOfSpeech(PartOfSpeech.Noun)}</option>\r\n                    <option value=\"Adjective\">{translatePartOfSpeech(PartOfSpeech.Adjective)}</option>\r\n                    <option value=\"Verb\">{translatePartOfSpeech(PartOfSpeech.Verb)}</option>\r\n                    <option value=\"Adverb\">{translatePartOfSpeech(PartOfSpeech.Adverb)}</option>\r\n                </Input>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderRussianMeaningInput() {\r\n        return (\r\n            <div className=\"col-lg-3\">\r\n                <Input\r\n                    type=\"text\"\r\n                    onChange={(e) => this.handleChange(e)}\r\n                    name=\"russianMeaning\"\r\n                    placeholder=\"ЗНАЧЕНИЕ(НА РУССКОМ)\"\r\n                    value={this.word.russianMeaning}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderEnglishMeaningInput() {\r\n        return (\r\n            <div className=\"col-lg-3\">\r\n                <Input\r\n                    type=\"text\"\r\n                    onChange={(e) => this.handleChange(e)}\r\n                    name=\"englishMeaning\"\r\n                    value={this.word.englishMeaning}\r\n                    placeholder=\"ЗНАЧЕНИЕ(НА АНГЛИЙСКОМ)\"\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderExampleInput() {\r\n        return (\r\n            <div className=\"col-lg-2\">\r\n                <Input\r\n                    type=\"text\"\r\n                    placeholder=\"ПРИМЕР\"\r\n                    value={this.word.examples[0].example}\r\n                    onChange={(e) => this.handleChange(e)}\r\n                    name=\"example\"\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderSaveButton() {\r\n        return (\r\n            <Button outline color=\"secondary\"\r\n                    width=\"100%\"\r\n                    type=\"submit\"\r\n                    onClick={() => this.handleSave()}>\r\n                СОХРАНИТЬ\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderBody() {\r\n        return(\r\n            <Card style={{width: '90%', marginBottom: '5px'}}>\r\n                <CardBody>\r\n                    {this.renderCloseButton()}\r\n                    <div className=\"row\" id={this.word.id.toString()}>\r\n                        {this.renderWordInput()}\r\n                        {this.renderPartOfSpeechInput()}\r\n                        {this.renderRussianMeaningInput()}\r\n                        {this.renderEnglishMeaningInput()}\r\n                        {this.renderExampleInput()}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\" style={{marginTop: '3px'}}>\r\n                        {this.renderSaveButton()}\r\n                    </div>\r\n                </CardBody>\r\n            </Card>\r\n        );\r\n    }\r\n\r\n    renderCautions() {\r\n        return(\r\n            <>\r\n                {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и слово не сохранилось:(</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Modal\r\n                centered={true}\r\n                size=\"lg\"\r\n                isOpen={true}\r\n                toggle={() => this.props.addOrUpdateWordToggle()}\r\n            >\r\n                {this.renderBody()}\r\n                <Button\r\n                    color=\"primary\"\r\n                    onClick={() => this.props.addOrUpdateWordToggle()}>\r\n                    ОТМЕНИТЬ\r\n                </Button>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\r\n        let targetName = event.target.name;\r\n        if(targetName === 'word') {\r\n            this.word.word = targetName;\r\n        } else if(targetName === 'russianMeaning') {\r\n            this.word.russianMeaning = targetName;\r\n        } else if(targetName === 'englishMeaning') {\r\n            this.word.englishMeaning = targetName;\r\n        } else if(targetName === 'example') {\r\n            //todo: наверно, проверку надо делать\r\n            if(this.word.examples.length === 0) {\r\n                this.word.examples.push(new ExampleReadModel());\r\n            }\r\n            this.word.examples[0].example= targetName;\r\n        }\r\n    }\r\n\r\n    handlePartOfSpeech(event: React.MouseEvent<HTMLInputElement, MouseEvent>) {\r\n        this.word.partOfSpeech = transformValueToPartOfSpeech(event.currentTarget.value);\r\n    }\r\n\r\n    handleSave() {\r\n        let role = this.props.userStore.currentUser.role;\r\n        if (role === UserRole.Admin) {\r\n            this.props.wordStore.addOrUpdateWordToDictionary(this.word)\r\n                .then((status) => {\r\n                    if(status === 200) {\r\n                        this.props.addOrUpdateWordToggle();\r\n                    }\r\n                    this.notSaved = status !== 200;\r\n            });\r\n        } else if (role === UserRole.User) {\r\n            let userId = this.props.userStore.currentUser.id;\r\n            this.props.wordStore.addOrUpdateWordToUserDictionary(this.word, userId)\r\n                .then((status) => {\r\n                    if(status === 200) {\r\n                        this.props.addOrUpdateWordToggle();\r\n                    }\r\n                    this.notSaved = status !== 200;\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default AddOrUpdateWord;\r\n","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\PartOfSpeech.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\transformer.tsx",["777"],"﻿import { PartOfSpeech } from \"../Typings/enums/PartOfSpeech\";\r\n\r\nexport function transformValueToPartOfSpeech(value: string): PartOfSpeech {\r\n    if(value === \"Noun\") {\r\n        return PartOfSpeech.Noun;\r\n    } else if(value === \"Adverb\") {\r\n        return PartOfSpeech.Adverb;\r\n    } else if(value === \"Adjective\") {\r\n        return PartOfSpeech.Adjective;\r\n    } else if(value === \"Verb\") {\r\n        return PartOfSpeech.Verb;\r\n    }\r\n    return PartOfSpeech.Noun;\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\ExampleReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\WordTrainingType.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\Settings.tsx",["778"],"﻿import React, { Component } from 'react';\r\nimport { WordTrainingType } from \"../../../Typings/enums/WordTrainingType\";\r\nimport { Alert, Button, Card, CardBody, CardFooter, Input } from \"reactstrap\";\r\nimport { UserWordViewModel} from \"../../../Typings/viewModels/UserWordViewModel\";\r\nimport { WordViewModel} from \"../../../Typings/viewModels/WordViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport WordStore from \"../../../stores/WordStore\";\r\nimport { CompletingStatus } from \"../../../Typings/enums/CompletingStatus\";\r\n\r\nclass ISettingsProps {\r\n    wordStore: WordStore;\r\n    continue: any;\r\n}\r\n\r\nexport class Settings extends Component<ISettingsProps> {\r\n    wordsCount: number;\r\n    settingsOpen: boolean;\r\n    userWords: UserWordViewModel[] = new Array<UserWordViewModel>();\r\n    words: WordViewModel[] = new Array<WordViewModel>();\r\n    wordsCountWarning: boolean;\r\n    littleCountWords: boolean;\r\n    trainingType: WordTrainingType;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            wordsCount: observable,\r\n            settingsOpen: observable,\r\n            userWords: observable,\r\n            words: observable,\r\n            wordsCountWarning: observable,\r\n            trainingType: observable\r\n        });\r\n    }\r\n\r\n    renderSettings() {\r\n        return (\r\n            <Card style={{width: '100%'}}>\r\n                <CardBody className=\"text-center\">\r\n                    {this.renderCautions()}\r\n                    {this.renderWordsCountInput()}\r\n                </CardBody>\r\n                <CardBody  className=\"text-center\">\r\n                    {this.renderTrainingTypeInput()}\r\n                </CardBody>\r\n                <CardFooter>\r\n                    {this.renderContinueButton()}\r\n                </CardFooter>\r\n            </Card>\r\n        )\r\n    }\r\n\r\n    renderCautions() {\r\n        return(\r\n            <>\r\n                {this.littleCountWords && <Alert color=\"danger\">У вас в словарике меньше 5 слов. Добавьте ещё несколько слов, чтобы тренировка стала доступной:)</Alert>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderWordsCountInput() {\r\n        return (\r\n            <>\r\n                <Alert outline color={this.wordsCountWarning ? \"danger\" : \"primary\"}>Количество слов не может быть меньше 5</Alert>\r\n                <Input style={{marginTop: '0px'}} type=\"text\" onChange={(e) => this.changeWordsCount(e)} defaultValue={this.wordsCount}>{this.wordsCount}</Input>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderTrainingTypeInput() {\r\n        return (\r\n            <Input type=\"select\" name=\"select\" id=\"exampleSelect\">\r\n                <option key=\"repeat\" onClick={() => this.selectTrainingType(WordTrainingType.Repeat)}>ПОВТОРИТЬ</option>\r\n                <option key=\"learnnew\" onClick={() => this.selectTrainingType(WordTrainingType.LearnNew)}>УЧИТЬ НОВЫЕ</option>\r\n            </Input>\r\n        );\r\n    }\r\n\r\n    renderContinueButton() {\r\n        return(\r\n            <Button disabled={this.wordsCountWarning} outline color=\"primary\" onClick={() => this.continue()}>\r\n                ПРОДОЛЖИТЬ\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.renderSettings()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    selectTrainingType(trainingType: WordTrainingType) {\r\n        this.trainingType = trainingType;\r\n    }\r\n\r\n    changeWordsCount(event: React.FormEvent<HTMLInputElement>) {\r\n        let wordsCount = Number(event.currentTarget.value);\r\n        this.wordsCountWarning = wordsCount < 5;\r\n        this.wordsCount = wordsCount;\r\n    }\r\n\r\n    continue() {\r\n        let userWords = this.chooseWordsForTraining();\r\n        if(userWords.length < 5) {\r\n            this.littleCountWords = true;\r\n        } else {\r\n            this.props.continue(userWords);\r\n        }\r\n    }\r\n\r\n   chooseWordsForTraining(): UserWordViewModel[] {\r\n        let userWords = new Array<UserWordViewModel>();\r\n        if(this.trainingType === WordTrainingType.LearnNew) {\r\n            userWords = this.props.wordStore.userDictionary\r\n                .filter(uw => uw.status === CompletingStatus.NotCompleted)\r\n                .slice(0, 5);\r\n        } else {\r\n            userWords = this.props.wordStore.userDictionary\r\n                .filter(uw => uw.status === CompletingStatus.Completed)\r\n                .slice(0, 5);\r\n        }\r\n\r\n        return userWords;\r\n    }\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\CompletingStatus.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\TrainingTypes\\ShowWordTraining.tsx",["779"],"﻿import React, { Component } from 'react';\r\nimport { Button, Card, CardText, CardFooter, CardTitle } from \"reactstrap\";\r\nimport { ITrainingTypeProps } from \"./ITrainingTypeProps\";\r\n\r\nclass ShowWordTraining extends Component<ITrainingTypeProps> {\r\n    continue() {\r\n        this.props.continueShow();\r\n    }\r\n\r\n    renderWord() {\r\n        let word = this.props.word;\r\n        return (\r\n            <>\r\n                <CardTitle className=\"text-center\">{word.word}</CardTitle>\r\n                <CardText className=\"text-center\">{word.partOfSpeech}</CardText>\r\n                <CardText className=\"text-center\">{word.englishMeaning}</CardText>\r\n                <CardText className=\"text-center\">{word.russianMeaning}</CardText>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderContinueButton() {\r\n        return (\r\n            <Button color=\"success\" onClick={() => this.continue()} style={{width: '100%'}}>ПРОДОЛЖИТЬ</Button>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Card style={{width: '100%'}}>\r\n                     {this.renderWord()}\r\n                <CardFooter className=\"text-center\">\r\n                    {this.renderContinueButton()}\r\n                </CardFooter>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ShowWordTraining;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\stores\\TrainingStore.tsx",["780"],"﻿import { makeObservable, observable } from \"mobx\";\r\nimport { TaskViewModel } from \"../Typings/viewModels/TaskViewModel\";\r\n\r\nclass TrainingStore {\r\n    tasks: TaskViewModel[] = new Array<TaskViewModel>();\r\n    constructor() {\r\n        makeObservable(this, {\r\n            tasks: observable\r\n        });\r\n    }\r\n    \r\n    getTasksByTags(tagIds: number[]) {\r\n        \r\n    }\r\n}\r\n\r\nexport default TrainingStore;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Training\\TrainingPage.tsx",["781","782"],"﻿import React, { Component } from \"react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Nav, Tab, Row, Col, Button }  from \"react-bootstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport TrainingContent from \"./TrainingContent\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\n\r\nclass ITrainingPageProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nclass TrainingPage extends Component<ITrainingPageProps> {\r\n    filtersOpen: boolean;\r\n    mainTag: number;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            filtersOpen: observable\r\n        });\r\n    }\r\n\r\n    renderMenu() {\r\n        return(\r\n            <Tab.Container id=\"left-tabs-example\" defaultActiveKey=\"first\">\r\n                <Row>\r\n                    <Col sm={2}>\r\n                        <Nav  variant=\"pills\" className=\"flex-column\">\r\n                            <div className=\"container-fluid\">\r\n                                <Nav.Item key={1}>\r\n                                    <div className=\"row\" key={1}>\r\n                                        <div className=\"col-8\">\r\n                                            <Nav.Link\r\n                                                eventKey={1}\r\n                                                className=\"nav-link lesson\"\r\n                                                onClick={() => this.changeMainTag(1)}>\r\n                                                ГРАММАТИКА\r\n                                            </Nav.Link>\r\n                                        </div>\r\n                                    </div>\r\n                                </Nav.Item>\r\n                                <Nav.Item key={1}>\r\n                                    <div className=\"row\" key={2}>\r\n                                        <div className=\"col-8\">\r\n                                            <Nav.Link\r\n                                                eventKey={2}\r\n                                                className=\"nav-link lesson\"\r\n                                                onClick={() => this.changeMainTag(2)}>\r\n                                                ЧТЕНИЕ\r\n                                            </Nav.Link>\r\n                                        </div>\r\n                                    </div>\r\n                                </Nav.Item>\r\n                                <Nav.Item key={1}>\r\n                                    <div className=\"row\" key={3}>\r\n                                        <div className=\"col-8\">\r\n                                            <Nav.Link\r\n                                                eventKey={3}\r\n                                                className=\"nav-link lesson\"\r\n                                                onClick={() => this.changeMainTag(3)}>\r\n                                                АУДИРОВАНИЕ\r\n                                            </Nav.Link>\r\n                                        </div>\r\n                                    </div>\r\n                                </Nav.Item>\r\n                            </div>\r\n                        </Nav>\r\n                    </Col>\r\n                    <Col sm={10}>\r\n                        <TrainingContent store={this.props.store} mainTag={this.mainTag}/>\r\n                    </Col>\r\n                </Row>\r\n            </Tab.Container>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\">\r\n                 {this.renderMenu()}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    changeMainTag(tagId: number) {\r\n        this.mainTag = tagId;\r\n    }\r\n}\r\n\r\nexport default TrainingPage;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Training\\TrainingContent.tsx",["783"],"﻿import React, { Component } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\nimport { TagViewModel } from \"../../../Typings/viewModels/TagViewModel\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { TaskViewModel } from \"../../../Typings/viewModels/TaskViewModel\";\r\nimport { Task } from \"../Tasks/Task\";\r\nimport RootStore from \"../../../stores/RootStore\";\r\nimport { TagReadModel } from \"../../../Typings/readModels/TagReadModel\";\r\n\r\nclass ITrainingContentProps {\r\n    store: RootStore;\r\n    mainTag: number;\r\n}\r\n\r\n@observer\r\nclass TrainingContent extends Component<ITrainingContentProps> {\r\n    choosenTags: TagViewModel[];\r\n    relatedTasks: TaskViewModel[];\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            choosenTags: observable,\r\n            relatedTasks: observable\r\n        });\r\n    }\r\n\r\n    renderApplyButton() {\r\n        return (\r\n            <Button\r\n                color=\"primary\"\r\n                style={{width: '100%'}}\r\n                onClick={() => this.applyTags()}>\r\n                ПРИМЕНИТЬ\r\n            </Button>\r\n        );\r\n    }\r\n\r\n    renderFilters(tags: TagViewModel[]) {\r\n        return(\r\n            <div className=\"row\">\r\n                {tags.map((tag) => {\r\n                    return(\r\n                        <Button\r\n                            outline color=\"primary\"\r\n                            style={{width: '15%'}}\r\n                            onClick={() => this.toggleTag(tag)}>\r\n                            {tag.name}\r\n                        </Button>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderTasks(tasks: TaskViewModel[]) {\r\n        return(\r\n            <div className=\"row\">\r\n                {tasks.map((task) => {\r\n                    return(\r\n                        <Task task={task} store={this.props.store} userId={this.props.store.userStore.currentUser.id}/>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let tags = this.props.store.taskStore.tags;\r\n        return(\r\n            <>\r\n                {this.renderFilters(tags)}\r\n                {this.renderApplyButton()}\r\n                {this.renderTasks(this.relatedTasks)}\r\n                {this.addTask()}\r\n            </>\r\n        )\r\n    }\r\n\r\n    toggleTag(tag: TagViewModel) {\r\n        if(this.choosenTags.filter(t => t.id === tag.id).length > 0) {\r\n            let index = this.choosenTags.indexOf(tag);\r\n            this.choosenTags = this.choosenTags.splice(index, 1);\r\n        } else {\r\n            this.choosenTags.push(tag);\r\n        }\r\n    }\r\n\r\n    applyTags() {\r\n        let mainTag = new TagReadModel();\r\n        mainTag.id = this.props.mainTag;\r\n        let choosenTags = this.choosenTags;\r\n        choosenTags.push(mainTag);\r\n        this.props.store.taskStore\r\n            .getTasks(choosenTags)\r\n            .then((tasks) => {\r\n                this.relatedTasks = tasks;\r\n            });\r\n    }\r\n}\r\n\r\nexport default TrainingContent;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Dictionary\\Search.tsx",["784"],"﻿import React, {Component} from 'react';\r\nimport WordStore from \"../../../stores/WordStore\";\r\nimport {observer} from \"mobx-react\";\r\nimport {Input} from \"reactstrap\";\r\nimport {WordViewModel} from \"../../../Typings/viewModels/WordViewModel\";\r\nimport {makeObservable, observable} from \"mobx\";\r\nimport {UserViewModel} from \"../../../Typings/viewModels/UserViewModel\";\r\nimport {UserRole} from \"../../../Typings/enums/UserRole\";\r\n\r\nclass ISearchProps {\r\n    wordStore: WordStore;\r\n    user: UserViewModel;\r\n}\r\n\r\n@observer\r\nclass Search extends Component<ISearchProps> {\r\n    foundWords: WordViewModel[] = new Array<WordViewModel>();\r\n    selectOpen: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            foundWords: observable,\r\n            selectOpen: observable\r\n        });\r\n    }\r\n\r\n    renderSearchBox() {\r\n        return(\r\n            <>\r\n                <Input type=\"text\"\r\n                       className=\"searchInput\"\r\n                       onMouseEnter={() => this.selectOpen = true}\r\n                       onMouseOut={() => this.selectOpen = false}\r\n                       onChange={(e) => this.onChange(e)}\r\n                />\r\n                <button className=\"searchButton\" type=\"submit\"/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderWords() {\r\n        return(\r\n            <select className=\"searchSelect\" size={4}>\r\n                {this.foundWords.map((word) => {\r\n                    return(\r\n                        <>\r\n                            <option\r\n                                value={word.word}\r\n                                id={word.id.toString()}\r\n                                onClick={(e) => this.setState({chosenWord: word})}\r\n                            >{word.word}</option>\r\n                            <i className=\"fa fa-plus\" aria-hidden=\"true\" onClick={() => this.addWordToDictionary(word)}/>\r\n                        </>\r\n                    )\r\n                })}\r\n            </select>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"row\" style={{marginLeft: \"5px\", marginRight: \"5px\"}}>\r\n                <div className=\"col-sm-6\">\r\n                    <div className=\"searchbar searchForm\">\r\n                        {this.renderSearchBox()}\r\n                    </div>\r\n                    {this.selectOpen && this.renderWords()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onChange(event: React.FormEvent<HTMLInputElement>) {\r\n        this.foundWords =  this.props.wordStore.dictionary\r\n            .filter(w => w.word.includes(event.currentTarget.value));//todo: ЗДЕСЬ ЛУЧШЕ ОТФИЛЬТРОВЫВАТЬ ТЕ СЛОВА, КОТОРЫЕ УЖЕ ЕСТЬ В ЮЗЕРСКОМ СЛОВАРЕ\r\n    }\r\n\r\n    addWordToDictionary(word: WordViewModel) {\r\n        if(this.props.user.role === UserRole.User) {\r\n            this.props.wordStore.addOrUpdateWordToUserDictionary(word, this.props.user.id);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Search;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\TagReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\UserWordReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\TrainingTypes\\EnglishWordRussianMeaningTraining.tsx",["785","786","787","788"],"﻿import React, { Component } from \"react\";\r\nimport { Card, CardTitle, CardBody, CardFooter, Button } from \"reactstrap\";\r\nimport { shuffleWords } from \"../../../../functions/shuffleWords\";\r\nimport { ITrainingTypeProps } from \"./ITrainingTypeProps\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\n\r\n@observer\r\nclass EnglishWordRussianMeaningTraining extends Component<ITrainingTypeProps> {\r\n    answered: boolean;\r\n    choosenAnswerId: number;\r\n    rightAnswer: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            answered: observable,\r\n            choosenAnswerId: observable,\r\n            rightAnswer: observable,\r\n        });\r\n    }\r\n\r\n    renderWords() {\r\n        let words = shuffleWords(this.props.words);\r\n        return(\r\n            <>\r\n                {words.map((word) => {\r\n                    return (\r\n                        <div className=\"row justify-content-center\">\r\n                            <Button\r\n                                disabled={this.answered}\r\n                                style={{width: '100%', marginTop: '5px'}}\r\n                                id={word.id.toString()}\r\n                                onClick={(e) => this.chooseAnswer(e)}\r\n                                outline={this.choosenAnswerId == word.id && this.answered ? this.rightAnswer ? false : false : true}\r\n                                color={this.choosenAnswerId == word.id && this.answered ? this.rightAnswer ? \"success\" : \"danger\" : \"primary\"}>\r\n                                {word.russianMeaning}\r\n                            </Button>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </>\r\n        )\r\n    }\r\n\r\n    renderButtons() {\r\n        return(\r\n            <>\r\n                {!this.answered && <Button color=\"success\" onClick={() => this.check()} style={{width: '100%'}}>ПРОВЕРИТЬ</Button>}\r\n                {this.answered && <Button color=\"primary\" onClick={() => this.continue()} style={{width: '100%'}}>ПРОДОЛЖИТЬ</Button>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Card style={{width: '100%'}}>\r\n                <CardTitle className=\"text-center\">{this.props.word.word}</CardTitle>\r\n                <CardBody>\r\n                    {this.renderWords()}\r\n                </CardBody>\r\n                <CardFooter className=\"text-center\">\r\n                    {this.renderButtons()}\r\n                </CardFooter>\r\n            </Card>\r\n        )\r\n    }\r\n\r\n    check() {\r\n        this.rightAnswer = this.props.word.id == this.choosenAnswerId;\r\n        this.answered = true;\r\n    }\r\n\r\n    continue() {\r\n        this.props.continue(this.props.word.id, this.rightAnswer);\r\n    }\r\n\r\n    chooseAnswer(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\r\n        this.choosenAnswerId = Number(event.currentTarget.id);\r\n    }\r\n}\r\n\r\nexport default EnglishWordRussianMeaningTraining;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\User\\Dictionary\\TrainingTypes\\RussianWordEnglishWordTraining.tsx",["789","790","791","792"],"﻿import React, { Component } from \"react\";\r\nimport { ITrainingTypeProps } from \"./ITrainingTypeProps\";\r\nimport { observer } from \"mobx-react\";\r\nimport { Button, Card, CardBody, CardFooter, CardTitle } from \"reactstrap\";\r\nimport { shuffleWords } from \"../../../../functions/shuffleWords\";\r\nimport { WordViewModel } from \"../../../../Typings/viewModels/WordViewModel\";\r\nimport { makeObservable, observable } from \"mobx\";\r\n\r\n@observer\r\nclass RussianWordEnglishWordTraining extends Component<ITrainingTypeProps> {\r\n    answered: boolean;\r\n    choosenAnswerId: number;\r\n    rightAnswer: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            answered: observable,\r\n            choosenAnswerId: observable,\r\n            rightAnswer: observable,\r\n        });\r\n    }\r\n\r\n    renderWords(words: WordViewModel[]) {\r\n        return(\r\n            <>\r\n                {words.map((word) => {\r\n                    return (\r\n                        <div className=\"row justify-content-center\">\r\n                            <Button\r\n                                disabled={this.answered}\r\n                                style={{width: '100%', marginTop: '5px'}}\r\n                                id={word.id.toString()}\r\n                                onClick={(e) => this.chooseAnswer(e)}\r\n                                outline={this.choosenAnswerId == word.id && this.answered ? this.rightAnswer ? false : false : true}\r\n                                color={this.choosenAnswerId == word.id && this.answered ? this.rightAnswer ? \"success\" : \"danger\" : \"primary\"}>\r\n                                {word.word}\r\n                            </Button>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </>\r\n        )\r\n    }\r\n\r\n    renderButtons() {\r\n        return (\r\n            <>\r\n                {!this.answered && <Button color=\"success\" onClick={() => this.check()} style={{width: '100%'}}>ПРОВЕРИТЬ</Button>}\r\n                {this.answered && <Button color=\"primary\" onClick={() => this.continue()} style={{width: '100%'}}>ПРОДОЛЖИТЬ</Button>}\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <Card style={{width: '100%'}}>\r\n                <CardTitle className=\"text-center\">{this.props.word.russianMeaning}</CardTitle>\r\n                <CardBody>\r\n                    {this.renderWords(shuffleWords(this.props.words))}\r\n                </CardBody>\r\n                <CardFooter className=\"text-center\">\r\n                    {this.renderButtons()}\r\n                </CardFooter>\r\n            </Card>\r\n        );\r\n    }\r\n\r\n    check() {\r\n        this.rightAnswer = this.props.word.id == this.choosenAnswerId;\r\n        this.answered = true;\r\n    }\r\n\r\n    continue() {\r\n        this.props.continue(this.props.word.id, this.rightAnswer);\r\n    }\r\n\r\n    chooseAnswer(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\r\n        this.choosenAnswerId = Number(event.currentTarget.id);\r\n    }\r\n}\r\n\r\nexport default RussianWordEnglishWordTraining;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\shuffleWords.tsx",["793"],"﻿import { WordViewModel } from \"../Typings/viewModels/WordViewModel\";\r\n\r\nexport function shuffleWords(array: WordViewModel[]): WordViewModel[] {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n\r\n    return array;\r\n}","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Tasks\\AddSubtask.tsx",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Users\\UsersPage.tsx",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Users\\Users.tsx",["794","795"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Participants\\ParticipantsPage.tsx",["796"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\WordsOfADay\\WordsOfADay.tsx",["797"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Participants\\Participants.tsx",["798"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\Participants\\Participant.tsx",["799","800","801"],"﻿import React, { Component } from 'react';\r\nimport { observer } from \"mobx-react\";\r\nimport { UserViewModel } from \"../../../Typings/viewModels/UserViewModel\";\r\nimport CourseStore from \"../../../stores/CourseStore\";\r\nimport { UserCourseViewModel } from \"../../../Typings/viewModels/UserCourseViewModel\";\r\nimport { Label, Button, Alert, Dropdown, DropdownItem, DropdownMenu, DropdownToggle } from \"reactstrap\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport Calendar from \"react-calendar\";\r\nimport { UserRole } from \"../../../Typings/enums/UserRole\";\r\nimport { Tarif } from \"../../../Typings/enums/Tarif\";\r\nimport { translateTarif } from \"../../../functions/translater\";\r\n\r\nclass IParticipantProps {\r\n    participant: UserViewModel;\r\n    courseStore: CourseStore;\r\n    deleteParticipant: any;\r\n}\r\n\r\n@observer\r\nclass Participant extends Component<IParticipantProps> {\r\n    notSaved: boolean;\r\n    saved: boolean;\r\n    details: UserCourseViewModel;\r\n    roleMenuOpen: boolean;\r\n    tarifOpen: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            notSaved: observable,\r\n            saved: observable,\r\n            details: observable,\r\n            roleMenuOpen: observable,\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        let participant = this.props.participant;\r\n        let details = this.props.courseStore.usersByCourse.filter(u => u.userId === participant.id)[0];\r\n    }\r\n\r\n    renderParticipant(participant: UserViewModel, details: UserCourseViewModel) {\r\n        return(\r\n            <tr>\r\n                <td>\r\n                    {this.renderName(participant)}\r\n                </td>\r\n                <td>\r\n                    {this.renderTarif(details)}\r\n                </td>\r\n                <td>\r\n                    {this.renderStartDate(details)}\r\n                </td>\r\n                <td>\r\n                    {this.renderEndDate(details)}\r\n                </td>\r\n                <td>\r\n                    {this.renderRole(details)}\r\n                </td>\r\n                <td>\r\n                    {this.renderControlButtons()}\r\n                </td>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    renderName(participant: UserViewModel) {\r\n        return(\r\n            <Label>\r\n                {participant.lastName} {participant.firstName}\r\n            </Label>\r\n        );\r\n    }\r\n\r\n    renderTarif(details: UserCourseViewModel) {\r\n        return(\r\n            <Dropdown isOpen={this.tarifOpen} toggle={() => this.toggleTarif()}>\r\n                <DropdownToggle caret>\r\n                    {translateTarif(details.tarif)}\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem id=\"1\" onClick={() => this.tarifChange(Tarif.Usual)}>{translateTarif(Tarif.Usual)}</DropdownItem>\r\n                    <DropdownItem id=\"2\" onClick={() => this.tarifChange(Tarif.Premium)}>{translateTarif(Tarif.Premium)}</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderStartDate(details: UserCourseViewModel) {\r\n        return(\r\n            <Calendar\r\n                value={details.startDate}\r\n                onChange={(date) => this.inputDate(date, \"startDate\")}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderEndDate(details: UserCourseViewModel) {\r\n        return(\r\n            <Calendar\r\n                value={details.expireDate}\r\n                onChange={(date) => this.inputDate(date, \"expireDate\")}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderRole(details: UserCourseViewModel) {\r\n        return(\r\n            <Dropdown isOpen={this.roleMenuOpen} toggle={() => this.toggleRoleMenu()}>\r\n                <DropdownToggle caret>\r\n                    {details.role}\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem id=\"1\" onClick={() => this.roleChange(UserRole.Admin)}>Учитель</DropdownItem>\r\n                    <DropdownItem id=\"2\" onClick={() => this.roleChange(UserRole.User)}>Ученик</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderControlButtons() {\r\n        return(\r\n            <>\r\n                <Button color=\"success\" onClick={() => this.updateParticipant()}>\r\n                    СОХРАНИТЬ\r\n                </Button>\r\n                <Button color=\"danger\" onClick={() => this.props.deleteParticipant()}>\r\n                    УДАЛИТЬ\r\n                </Button>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.renderParticipant(this.props.participant, this.details)}\r\n            </>\r\n        );\r\n    }\r\n\r\n    updateParticipant() {\r\n        this.props.courseStore.addOrUpdateUserCourseDetails(this.details)\r\n            .then((status) => {\r\n                this.notSaved = status !== 200;\r\n                this.saved = status === 200;\r\n            });\r\n    }\r\n\r\n    inputDate(date: Date | Date[], type: string) {\r\n        if (type === \"startDate\") {\r\n            this.details.startDate = date;\r\n        } else if (type === \"expireDate\") {\r\n            this.details.expireDate = date;\r\n        }\r\n    }\r\n\r\n    toggleRoleMenu() {\r\n        this.roleMenuOpen = !this.roleMenuOpen;\r\n    }\r\n\r\n    roleChange(role: UserRole) {\r\n        this.details.role = role;\r\n    }\r\n\r\n    tarifChange(tarif: Tarif) {\r\n        this.details.tarif = tarif;\r\n    }\r\n\r\n    toggleTarif() {\r\n        this.tarifOpen = !this.tarifOpen;\r\n    }\r\n}\r\n\r\nexport default Participant;","C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\WordsOfADay\\WordOfADay.tsx",["802"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\CommentedEntityType.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\WordsOfADay\\AnswerToWordOfADay.tsx",["803"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\WordsOfADay\\AddOrUpdateWordOfADay.tsx",["804"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\WordsOfADay\\UserAnswers.tsx",["805"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Comments\\CommentGroup.tsx",["806"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\WordOfADayReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentViewModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\readModels\\CommentReadModel.ts",[],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\functions\\mapper.tsx",["807"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Admin\\WordsOfADay\\UserAnswer.tsx",["808"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\components\\Common\\Comments\\Comment.tsx",["809"],"C:\\Projects\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\Tarif.ts",[],{"ruleId":"810","replacedBy":"811"},{"ruleId":"812","replacedBy":"813"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"818"},{"ruleId":"819","severity":1,"message":"820","line":1,"column":37,"nodeType":"821","messageId":"822","endLine":1,"endColumn":53},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"823"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"824"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"825"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"826"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"827"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"828"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"829"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"830"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"831"},{"ruleId":"832","severity":1,"message":"833","line":47,"column":32,"nodeType":"834","messageId":"835","endLine":47,"endColumn":34,"fix":"836"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"837"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"838"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"839"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"840"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"841"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"842"},{"ruleId":"819","severity":1,"message":"843","line":6,"column":38,"nodeType":"821","messageId":"822","endLine":6,"endColumn":42},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"844"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"845"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"846"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"847"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"848"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"849"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"850"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"851"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"852"},{"ruleId":"810","replacedBy":"853"},{"ruleId":"812","replacedBy":"854"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"855"},{"ruleId":"810","replacedBy":"856"},{"ruleId":"812","replacedBy":"857"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"858"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"859"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"860"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"861"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"862"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"863"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"864"},{"ruleId":"819","severity":1,"message":"865","line":3,"column":32,"nodeType":"821","messageId":"822","endLine":3,"endColumn":37},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"866"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"867"},{"ruleId":"868","severity":2,"message":"869","line":57,"column":48,"nodeType":"870","endLine":57,"endColumn":58},{"ruleId":"868","severity":2,"message":"871","line":59,"column":48,"nodeType":"870","endLine":59,"endColumn":60},{"ruleId":"868","severity":2,"message":"872","line":61,"column":48,"nodeType":"870","endLine":61,"endColumn":57},{"ruleId":"868","severity":2,"message":"872","line":63,"column":48,"nodeType":"870","endLine":63,"endColumn":57},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"873"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"874"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"875"},{"ruleId":"819","severity":1,"message":"876","line":9,"column":9,"nodeType":"821","messageId":"822","endLine":9,"endColumn":40},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"877"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"878"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"879"},{"ruleId":"819","severity":1,"message":"880","line":3,"column":17,"nodeType":"821","messageId":"822","endLine":3,"endColumn":23},{"ruleId":"819","severity":1,"message":"881","line":5,"column":38,"nodeType":"821","messageId":"822","endLine":5,"endColumn":44},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"882"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"883"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"884"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"885"},{"ruleId":"819","severity":1,"message":"886","line":61,"column":41,"nodeType":"821","messageId":"822","endLine":61,"endColumn":51},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"887"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"888"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"889"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"890"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"891"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"892"},{"ruleId":"819","severity":1,"message":"865","line":3,"column":46,"nodeType":"821","messageId":"822","endLine":3,"endColumn":51},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"893"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"894"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"895"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"896"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"897"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"898"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"899"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"900"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"901"},{"ruleId":"819","severity":1,"message":"902","line":6,"column":10,"nodeType":"821","messageId":"822","endLine":6,"endColumn":18},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"903"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"904"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"905"},{"ruleId":"906","severity":1,"message":"907","line":183,"column":62,"nodeType":"908","messageId":"817","endLine":183,"endColumn":64},{"ruleId":"906","severity":1,"message":"907","line":184,"column":54,"nodeType":"908","messageId":"817","endLine":184,"endColumn":56},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"909"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"910"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"911"},{"ruleId":"868","severity":2,"message":"912","line":47,"column":50,"nodeType":"870","endLine":47,"endColumn":62},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"913"},{"ruleId":"819","severity":1,"message":"914","line":104,"column":13,"nodeType":"821","messageId":"822","endLine":104,"endColumn":17},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"915"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"916"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"917"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"918"},{"ruleId":"906","severity":1,"message":"907","line":108,"column":53,"nodeType":"908","messageId":"817","endLine":108,"endColumn":55},{"ruleId":"906","severity":1,"message":"907","line":188,"column":67,"nodeType":"908","messageId":"817","endLine":188,"endColumn":69},{"ruleId":"906","severity":1,"message":"907","line":194,"column":38,"nodeType":"908","messageId":"817","endLine":194,"endColumn":40},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"919"},{"ruleId":"819","severity":1,"message":"920","line":2,"column":10,"nodeType":"821","messageId":"822","endLine":2,"endColumn":24},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"921"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"922"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"923"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"924"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"925"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"926"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"927"},{"ruleId":"819","severity":1,"message":"880","line":3,"column":30,"nodeType":"821","messageId":"822","endLine":3,"endColumn":36},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"928"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"929"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"930"},{"ruleId":"906","severity":1,"message":"907","line":36,"column":63,"nodeType":"908","messageId":"817","endLine":36,"endColumn":65},{"ruleId":"906","severity":1,"message":"907","line":37,"column":61,"nodeType":"908","messageId":"817","endLine":37,"endColumn":63},{"ruleId":"906","severity":1,"message":"907","line":71,"column":47,"nodeType":"908","messageId":"817","endLine":71,"endColumn":49},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"931"},{"ruleId":"906","severity":1,"message":"907","line":36,"column":63,"nodeType":"908","messageId":"817","endLine":36,"endColumn":65},{"ruleId":"906","severity":1,"message":"907","line":37,"column":61,"nodeType":"908","messageId":"817","endLine":37,"endColumn":63},{"ruleId":"906","severity":1,"message":"907","line":71,"column":47,"nodeType":"908","messageId":"817","endLine":71,"endColumn":49},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"932"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"933"},{"ruleId":"819","severity":1,"message":"934","line":1,"column":8,"nodeType":"821","messageId":"822","endLine":1,"endColumn":13},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"935"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"936"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"937"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"938"},{"ruleId":"819","severity":1,"message":"865","line":6,"column":25,"nodeType":"821","messageId":"822","endLine":6,"endColumn":30},{"ruleId":"819","severity":1,"message":"939","line":40,"column":13,"nodeType":"821","messageId":"822","endLine":40,"endColumn":20},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"940"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"941"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"942"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"943"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"944"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"945"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"946"},{"ruleId":"814","severity":1,"message":"815","line":1,"column":1,"nodeType":"816","messageId":"817","fix":"947"},"no-native-reassign",["948"],"no-negated-in-lhs",["949"],"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"950","text":"951"},"@typescript-eslint/no-unused-vars","'extendObservable' is defined but never used.","Identifier","unusedVar",{"range":"952","text":"951"},{"range":"953","text":"951"},{"range":"954","text":"951"},{"range":"955","text":"951"},{"range":"956","text":"951"},{"range":"957","text":"951"},{"range":"958","text":"951"},{"range":"959","text":"951"},{"range":"960","text":"951"},"dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"961","text":"962"},{"range":"963","text":"951"},{"range":"964","text":"951"},{"range":"965","text":"951"},{"range":"966","text":"951"},{"range":"967","text":"951"},{"range":"968","text":"951"},"'toJS' is defined but never used.",{"range":"969","text":"951"},{"range":"970","text":"951"},{"range":"971","text":"951"},{"range":"972","text":"951"},{"range":"973","text":"951"},{"range":"974","text":"951"},{"range":"975","text":"951"},{"range":"976","text":"951"},{"range":"977","text":"951"},["948"],["949"],{"range":"978","text":"951"},["948"],["949"],{"range":"979","text":"951"},{"range":"980","text":"951"},{"range":"981","text":"951"},{"range":"982","text":"951"},{"range":"983","text":"951"},{"range":"984","text":"951"},{"range":"985","text":"951"},"'Alert' is defined but never used.",{"range":"986","text":"951"},{"range":"987","text":"951"},"react/jsx-no-undef","'MyWorkPage' is not defined.","JSXIdentifier","'ProjectsPage' is not defined.","'UsersPage' is not defined.",{"range":"988","text":"951"},{"range":"989","text":"951"},{"range":"990","text":"951"},"'UserSubtaskAnswerGroupViewModel' is defined but never used.",{"range":"991","text":"951"},{"range":"992","text":"951"},{"range":"993","text":"951"},"'Button' is defined but never used.","'action' is defined but never used.",{"range":"994","text":"951"},{"range":"995","text":"951"},{"range":"996","text":"951"},{"range":"997","text":"951"},"'isDisabled' is assigned a value but never used.",{"range":"998","text":"951"},{"range":"999","text":"951"},{"range":"1000","text":"951"},{"range":"1001","text":"951"},{"range":"1002","text":"951"},{"range":"1003","text":"951"},{"range":"1004","text":"951"},{"range":"1005","text":"951"},{"range":"1006","text":"951"},{"range":"1007","text":"951"},{"range":"1008","text":"951"},{"range":"1009","text":"951"},{"range":"1010","text":"951"},{"range":"1011","text":"951"},{"range":"1012","text":"951"},"'TaskType' is defined but never used.",{"range":"1013","text":"951"},{"range":"1014","text":"951"},{"range":"1015","text":"951"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression",{"range":"1016","text":"951"},{"range":"1017","text":"951"},{"range":"1018","text":"951"},"'CommentGroup' is not defined.",{"range":"1019","text":"951"},"'file' is assigned a value but never used.",{"range":"1020","text":"951"},{"range":"1021","text":"951"},{"range":"1022","text":"951"},{"range":"1023","text":"951"},{"range":"1024","text":"951"},"'makeObservable' is defined but never used.",{"range":"1025","text":"951"},{"range":"1026","text":"951"},{"range":"1027","text":"951"},{"range":"1028","text":"951"},{"range":"1029","text":"951"},{"range":"1030","text":"951"},{"range":"1031","text":"951"},{"range":"1032","text":"951"},{"range":"1033","text":"951"},{"range":"1034","text":"951"},{"range":"1035","text":"951"},{"range":"1036","text":"951"},{"range":"1037","text":"951"},"'React' is defined but never used.",{"range":"1038","text":"951"},{"range":"1039","text":"951"},{"range":"1040","text":"951"},{"range":"1041","text":"951"},"'details' is assigned a value but never used.",{"range":"1042","text":"951"},{"range":"1043","text":"951"},{"range":"1044","text":"951"},{"range":"1045","text":"951"},{"range":"1046","text":"951"},{"range":"1047","text":"951"},{"range":"1048","text":"951"},{"range":"1049","text":"951"},"no-global-assign","no-unsafe-negation",[-1,0],"",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[1712,1728],"\r\n