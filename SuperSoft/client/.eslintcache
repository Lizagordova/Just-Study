[{"C:\\SuperSoft\\SuperSoft\\client\\src\\index.tsx":"1","C:\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts":"2","C:\\SuperSoft\\SuperSoft\\client\\src\\App.tsx":"3","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx":"4","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx":"5","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Main\\Main.tsx":"6","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyWorkPage.tsx":"7","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\ProjectsPage.tsx":"8","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\UsersPage.tsx":"9","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\ProjectStore.tsx":"10","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx":"11","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\CommentsStore.tsx":"12","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyTasks.tsx":"13","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskStatus.ts":"14","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddProject.tsx":"15","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Projects.tsx":"16","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Project.tsx":"17","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddUserToProject.tsx":"18","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\AddTask.tsx":"19","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Tasks.tsx":"20","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskRole.ts":"21","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\Users.tsx":"22","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentGroupViewModel.ts":"23","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserReadModel.ts":"24","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\Role.ts":"25","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\User.tsx":"26","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\AddUser.tsx":"27","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\ProjectViewModel.ts":"28","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserViewModel.ts":"29","C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\renderSpinner.tsx":"30","C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\translater.tsx":"31","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Authorization.tsx":"32","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Task.tsx":"33","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\TaskViewModel.ts":"34","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskPriority.ts":"35","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskType.ts":"36","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\ProjectRole.ts":"37"},{"size":704,"mtime":1607787725088,"results":"38","hashOfConfig":"39"},{"size":425,"mtime":1607420618541,"results":"40","hashOfConfig":"39"},{"size":1092,"mtime":1608407182954,"results":"41","hashOfConfig":"39"},{"size":817,"mtime":1607860334709,"results":"42","hashOfConfig":"39"},{"size":2405,"mtime":1608446902369,"results":"43","hashOfConfig":"39"},{"size":2253,"mtime":1608490109475,"results":"44","hashOfConfig":"39"},{"size":3539,"mtime":1608490153916,"results":"45","hashOfConfig":"39"},{"size":1005,"mtime":1608490669706,"results":"46","hashOfConfig":"39"},{"size":673,"mtime":1608370217935,"results":"47","hashOfConfig":"39"},{"size":2434,"mtime":1608533634985,"results":"48","hashOfConfig":"39"},{"size":2545,"mtime":1608530761688,"results":"49","hashOfConfig":"39"},{"size":1566,"mtime":1608303176650,"results":"50","hashOfConfig":"39"},{"size":3633,"mtime":1608532037580,"results":"51","hashOfConfig":"39"},{"size":256,"mtime":1608532695193,"results":"52","hashOfConfig":"39"},{"size":6822,"mtime":1608530640307,"results":"53","hashOfConfig":"39"},{"size":2646,"mtime":1608530584422,"results":"54","hashOfConfig":"39"},{"size":6959,"mtime":1608530112907,"results":"55","hashOfConfig":"39"},{"size":5679,"mtime":1608530289913,"results":"56","hashOfConfig":"39"},{"size":12880,"mtime":1608533100209,"results":"57","hashOfConfig":"39"},{"size":2047,"mtime":1608146828960,"results":"58","hashOfConfig":"39"},{"size":252,"mtime":1608532695193,"results":"59","hashOfConfig":"39"},{"size":1206,"mtime":1608370045224,"results":"60","hashOfConfig":"39"},{"size":366,"mtime":1608532695165,"results":"61","hashOfConfig":"39"},{"size":399,"mtime":1608532695185,"results":"62","hashOfConfig":"39"},{"size":290,"mtime":1608532695193,"results":"63","hashOfConfig":"39"},{"size":3678,"mtime":1608530673218,"results":"64","hashOfConfig":"39"},{"size":6126,"mtime":1608530667130,"results":"65","hashOfConfig":"39"},{"size":376,"mtime":1608532695173,"results":"66","hashOfConfig":"39"},{"size":403,"mtime":1608368222011,"results":"67","hashOfConfig":"39"},{"size":164,"mtime":1608361997793,"results":"68","hashOfConfig":"39"},{"size":1905,"mtime":1608532003110,"results":"69","hashOfConfig":"39"},{"size":3093,"mtime":1608489549893,"results":"70","hashOfConfig":"39"},{"size":3260,"mtime":1608449761195,"results":"71","hashOfConfig":"39"},{"size":665,"mtime":1608532695173,"results":"72","hashOfConfig":"39"},{"size":247,"mtime":1608532695203,"results":"73","hashOfConfig":"39"},{"size":230,"mtime":1608532695193,"results":"74","hashOfConfig":"39"},{"size":218,"mtime":1608532695193,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"18g08rn",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"85","usedDeprecatedRules":"78"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"88","usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"91","usedDeprecatedRules":"78"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"94","usedDeprecatedRules":"78"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"97","usedDeprecatedRules":"78"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"100","usedDeprecatedRules":"78"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"105","usedDeprecatedRules":"78"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"108","usedDeprecatedRules":"78"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":2,"source":"111","usedDeprecatedRules":"78"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"116","usedDeprecatedRules":"78"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"119","usedDeprecatedRules":"78"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"122","usedDeprecatedRules":"78"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"125","usedDeprecatedRules":"78"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"130","usedDeprecatedRules":"78"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"135","usedDeprecatedRules":"78"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"144","usedDeprecatedRules":"78"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"147","usedDeprecatedRules":"78"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"154","usedDeprecatedRules":"78"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"157","usedDeprecatedRules":"78"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"160","usedDeprecatedRules":"78"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"163","usedDeprecatedRules":"78"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\SuperSoft\\SuperSoft\\client\\src\\index.tsx",[],["172","173"],"C:\\SuperSoft\\SuperSoft\\client\\src\\reportWebVitals.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\App.tsx",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\RootStore.tsx",["174","175"],"﻿import { action, observable, makeObservable } from \"mobx\";\r\nimport UserStore from \"./UserStore\";\r\nimport ProjectStore from \"./ProjectStore\";\r\nimport TaskStore from \"./TaskStore\";\r\nimport CommentsStore from \"./CommentsStore\";\r\n\r\nexport class RootStore {\r\n    userStore: UserStore;\r\n    taskStore: TaskStore;\r\n    projectStore: ProjectStore;\r\n    commentStore: CommentsStore;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            userStore: observable,\r\n            taskStore: observable,\r\n            projectStore: observable,\r\n            commentStore: observable\r\n        });\r\n        this.userStore = new UserStore();\r\n        this.taskStore = new TaskStore();\r\n        this.projectStore = new ProjectStore();\r\n        this.commentStore = new CommentsStore();\r\n    }\r\n}\r\n\r\nexport default RootStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\UserStore.tsx",["176"],"﻿import { UserViewModel } from \"../Typings/viewModels/UserViewModel\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport { UserReadModel } from \"../Typings/viewModels/UserReadModel\";\r\n\r\nclass UserStore {\r\n    currentUser: UserViewModel;\r\n    users: UserViewModel[];\r\n    authorizationRequired: boolean = true;\r\n    wrongCredetianals: boolean = false;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            users: observable,\r\n            currentUser: observable,\r\n            authorizationRequired: observable,\r\n            wrongCredetianals: observable,\r\n        });\r\n        this.users = new Array<UserViewModel>();\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        this.getCurrentUser();\r\n        this.getUsers();\r\n    }\r\n\r\n    async getCurrentUser() {\r\n        const response = await fetch(\"/getcurrentuser\");\r\n        if(response.status === 200) {\r\n            this.currentUser = await response.json();\r\n            this.authorizationRequired = false;\r\n        } else {\r\n            this.authorizationRequired = true;\r\n        }\r\n    }\r\n\r\n    async getUsers() {\r\n        const response = await fetch(\"/getusers\");\r\n        this.users = await response.json();\r\n    }\r\n\r\n    async deleteUser(userId: number) {\r\n        const response = await fetch(\"/deleteuser\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: userId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getUsers();\r\n        }\r\n    }\r\n\r\n    async addOrUpdateUser(user: UserReadModel) {\r\n        const response = await fetch(\"/addorupdateuser\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: user.id, firstName: user.firstName, lastName: user.lastName, email: user.email, role: user.role, password: user.password})\r\n        });\r\n        if(response.status === 200) {\r\n            this.getUsers();\r\n        }\r\n        return response.status;\r\n    }\r\n\r\n    @action\r\n    authorizationRequire(required: boolean) {\r\n        this.authorizationRequired = required;\r\n    }\r\n\r\n    @action\r\n    wrongCredetianalsToggle(turn: boolean) {\r\n        this.wrongCredetianals = turn;\r\n    }\r\n}\r\n\r\nexport default UserStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Main\\Main.tsx",["177"],"﻿import React from \"react\";\r\nimport { IMainProps } from \"./IMainProps\";\r\nimport { Card, CardHeader, Nav, NavItem } from \"reactstrap\";\r\nimport { NavLink, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport { MyWorkPage } from \"../MyWork/MyWorkPage\";\r\nimport { ProjectsPage } from \"../Projects/ProjectsPage\";\r\nimport { UsersPage } from \"../Users/UsersPage\";\r\nimport { observer } from  \"mobx-react\";\r\nimport 'react-calendar/dist/Calendar.css'\r\n\r\n@observer\r\nexport class Main extends React.Component<IMainProps> {\r\n    render() {\r\n        return(\r\n            <>\r\n                <Card>\r\n                    <CardHeader>\r\n                        <Nav tabs className=\"nav\">\r\n                              <NavItem>\r\n                                  <NavLink to=\"/mywork\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}} activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>МОЯ РАБОТА</NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink to=\"/projects\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}} activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>ПРОЕКТЫ</NavLink>\r\n                              </NavItem>\r\n                              <NavItem>\r\n                                  <NavLink to=\"/users\" exact className=\"nav-link\" style={{fontSize: \"1.5em\"}} activeStyle={{color: '#ffffff', backgroundColor:'#003B46', textDecoration: 'none'}}>ПОЛЬЗОВАТЕЛИ</NavLink>\r\n                              </NavItem>\r\n                        </Nav>\r\n                    </CardHeader>\r\n                </Card>\r\n                <Switch>\r\n                    <Route exact path=\"/mywork\" \r\n                         render={(props) => <MyWorkPage store={this.props.store} />} />\r\n                    <Route exact path=\"/projects\"\r\n                         render={(props) => <ProjectsPage store={this.props.store} />} />\r\n                    <Route exact path=\"/users\"\r\n                         render={(props) => <UsersPage store={this.props.store} />} />\r\n                    <Redirect to=\"/mywork\" />\r\n                </Switch>\r\n            </>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyWorkPage.tsx",["178"],"﻿import React from \"react\";\r\nimport { Col, Nav, NavItem, Row, TabContent, TabPane, NavLink } from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\nimport { MyTasks } from \"./MyTasks\";\r\nimport { observer } from \"mobx-react\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport { IMyWorkProps } from \"./IMyWorkProps\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\n\r\n@observer\r\nexport class  MyWorkPage extends React.Component<IMyWorkProps> {\r\n    activeTab: string = \"1\";\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n           activeTab: observable\r\n       });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{marginTop: 35}} className=\"container-fluid\">\r\n            <Row>\r\n                <Col sm=\"12\">\r\n                    <Nav tabs style={{fontSize: \"1.4em\"}}>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                to=\"#\"\r\n                                activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                className={classnames({ active: this.activeTab === \"1\"})}\r\n                                onClick={(e) => this.toggleTab(\"1\")}\r\n                            >Текущие</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                to=\"#\"\r\n                                activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                className={classnames({ active: this.activeTab === \"2\"})}\r\n                                onClick={(e) => this.toggleTab(\"2\")}>Законченные</NavLink>\r\n                        </NavItem>\r\n                        <NavItem>\r\n                            <NavLink\r\n                                to=\"#\"\r\n                                activeStyle={{backgroundColor: \"#66A5AD\", color: \"#FFFFFF\"}}\r\n                                className={classnames({ active: this.activeTab === \"3\"})}\r\n                                onClick={(e) => this.toggleTab(\"3\")}>Будущие</NavLink>\r\n                        </NavItem>\r\n                    </Nav>\r\n                    <TabContent activeTab={this.activeTab}>\r\n                        <TabPane tabId=\"1\">\r\n                            <Row>\r\n                                <Col sm=\"12\">\r\n                                    <MyTasks store={this.props.store} tasksStatus={TaskStatus.InProgress}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </TabPane>\r\n                        <TabPane tabId=\"2\">\r\n                            <Row>\r\n                                <Col sm=\"12\">\r\n                                    <MyTasks store={this.props.store} tasksStatus={TaskStatus.Completed}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </TabPane>\r\n                        <TabPane tabId=\"3\">\r\n                            <Row>\r\n                                <Col sm=\"12\">\r\n                                    <MyTasks store={this.props.store} tasksStatus={TaskStatus.Future}/>\r\n                                </Col>\r\n                            </Row>\r\n                        </TabPane>\r\n                    </TabContent>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n    }\r\n\r\n    @action\r\n    toggleTab(activeTab: string): void {\r\n        this.activeTab = activeTab;\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\ProjectsPage.tsx",["179"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { AddProject } from \"./AddProject\";\r\nimport { Projects } from \"./Projects\";\r\nimport { makeObservable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nexport class  ProjectsPage extends React.Component<IProjectsProps> {\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\" style={{marginTop: \"30px\"}}>\r\n                <div className=\"row justify-content-center\">\r\n                    <AddProject store={this.props.store} />\r\n                </div>\r\n                <div className=\"row justify-content-center\" style={{marginTop: \"20px\"}}>\r\n                    <div className=\"col-lg-12 col-sm-12\">\r\n                        <Projects store={this.props.store} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\UsersPage.tsx",["180"],"﻿import React from \"react\";\r\nimport { IUsersProps } from \"./IUsersProps\";\r\nimport { Users } from \"./Users\";\r\nimport {AddUser} from \"./AddUser\";\r\n\r\nexport class  UsersPage extends React.Component<IUsersProps> {\r\n    render() {\r\n        return(\r\n            <div className=\"container-fluid\" style={{marginTop: \"30px\"}}>\r\n                <div className=\"row justify-content-center\">\r\n                    <AddUser store={this.props.store}/>\r\n                </div>\r\n                <div className=\"row justify-content-center\" style={{marginTop: \"20px\"}}>\r\n                    <Users store={this.props.store}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\ProjectStore.tsx",["181","182"],"C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\TaskStore.tsx",["183"],"﻿import { makeObservable, observable } from \"mobx\";\r\nimport { UserTaskViewModel } from \"../Typings/viewModels/UserTaskViewModel\";\r\nimport { TaskViewModel } from \"../Typings/viewModels/TaskViewModel\";\r\nimport { TaskStatus } from \"../Typings/enums/TaskStatus\";\r\nimport { TaskType } from \"../Typings/enums/TaskType\";\r\nimport {TaskPriority} from \"../Typings/enums/TaskPriority\";\r\n\r\nclass TaskStore {\r\n    currentUserTasks: UserTaskViewModel[];\r\n    currentProjectTasks: TaskViewModel[];\r\n    userTasks: UserTaskViewModel[];\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            currentUserTasks: observable,\r\n            currentProjectTasks: observable\r\n        });\r\n        this.currentProjectTasks = new Array<TaskViewModel>();\r\n        this.setInitialData();\r\n    }\r\n\r\n    setInitialData() {\r\n        this.getCurrentUserTasks();\r\n    }\r\n\r\n    async getCurrentUserTasks() {\r\n        const response = await fetch(\"/getusertasks\");\r\n        if(response.status === 200) {\r\n            this.currentUserTasks = await response.json();\r\n        } else {\r\n            this.currentUserTasks = new Array<UserTaskViewModel>(0);\r\n        }\r\n    }\r\n\r\n    async getTasks(projectId: number) {\r\n        const response = await fetch(\"/gettasks\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: projectId})\r\n        });\r\n        if(response.status === 200) {\r\n            this.currentProjectTasks = await response.json();\r\n        }\r\n    }\r\n\r\n    async addOrUpdateTask(header: string, description: string, startDate: Date | Date[], deadlineDate: Date | Date[], taskType: TaskType, status: TaskStatus, priority: TaskPriority, tester: number, responsible: number, author: number, id: number = 0, projectId: number = 0) {\r\n        const response = await fetch(\"/addorupdatetask\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({id: id, projectId: projectId, header: header, description: description, startDate: startDate, deadlineDate: deadlineDate, taskType: taskType, status: status, priority: priority, tester: tester, responsible: responsible, author: author})\r\n        });\r\n        if(response.status === 200) {\r\n            const task = await response.json();\r\n            this.currentProjectTasks.push(task);\r\n        }\r\n\r\n        return response.status;\r\n    }\r\n}\r\n\r\nexport default TaskStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\stores\\CommentsStore.tsx",["184"],"﻿import { makeObservable, observable } from \"mobx\";\r\nimport { CommentGroupViewModel } from \"../Typings/viewModels/CommentGroupViewModel\";\r\nimport {UserReadModel} from \"../Typings/viewModels/UserReadModel\";\r\n\r\nclass CommentsStore {\r\n    currentTaskCommentGroup: CommentGroupViewModel;\r\n\r\n    constructor() {\r\n        makeObservable(this, {\r\n            currentTaskCommentGroup: observable\r\n        });\r\n    }\r\n\r\n    async getCurrentTaskComments(taskId: number): Promise<CommentGroupViewModel> {\r\n        const response = await fetch(\"/getcurrenttaskcommentgroup\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({taskId: taskId})\r\n        });\r\n        if(response.status === 200) {\r\n            return await response.json();\r\n        } else {\r\n            return new CommentGroupViewModel();\r\n        }\r\n    }\r\n\r\n    async addComment(text: string, userId: number): Promise<number> {\r\n        const user = new UserReadModel();\r\n        user.id = userId;\r\n        const response = await fetch(\"/addorupdatecomment\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({text: text, groupId: this.currentTaskCommentGroup.id, user: user})\r\n        });\r\n        if(response.status === 200) {\r\n            return await response.json();\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n}\r\n\r\nexport default CommentsStore;","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\MyWork\\MyTasks.tsx",["185","186","187","188","189"],"﻿import React from \"react\";\r\nimport {IMyTasksProps} from \"./IMyTasksProps\";\r\nimport {Alert, Modal, Table} from 'reactstrap';\r\nimport {TaskViewModel} from \"../../Typings/viewModels/TaskViewModel\";\r\nimport {TaskStatus} from \"../../Typings/enums/TaskStatus\";\r\nimport {TaskPriority} from \"../../Typings/enums/TaskPriority\";\r\nimport {makeObservable, observable} from \"mobx\";\r\nimport {observer} from \"mobx-react\";\r\nimport {Task} from \"../Tasks/Task\";\r\nimport {UserTaskViewModel} from \"../../Typings/viewModels/UserTaskViewModel\";\r\nimport {translatePriority, translateTaskRole, translateTaskType} from \"../../functions/translater\";\r\nimport {TaskRole} from \"../../Typings/enums/TaskRole\";\r\nimport {TaskType} from \"../../Typings/enums/TaskType\";\r\n\r\n@observer\r\nexport class MyTasks extends React.Component<IMyTasksProps> {\r\n    taskOpen: boolean;\r\n    taskToRender: TaskViewModel;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            taskOpen: observable\r\n        });\r\n    }\r\n\r\n    filterTasks(taskStatus: TaskStatus): UserTaskViewModel[] {\r\n        return this.props.store.taskStore.currentUserTasks?.\r\n            filter(ut => ut.task.status === taskStatus);\r\n    }\r\n\r\n    renderMyTasks(userTasks: UserTaskViewModel[]) {\r\n        return(\r\n            <Table bordered style={{backgroundColor: \"#C4DFE6\", color:\"003b46\", marginTop: \"2%\"}}>\r\n                {userTasks.length === 0 && <Alert color=\"primary\">Задач пока нет!!!</Alert>}\r\n                {userTasks.length !== 0 && <thead>\r\n                    <tr>\r\n                        <th>Номер</th>\r\n                        <th>Задача</th>\r\n                        <th>Дедлайн</th>\r\n                        <th>Приоритет</th>\r\n                        <th>Роль</th>\r\n                        <th>Тип</th>\r\n                    </tr>\r\n                </thead>}\r\n                {userTasks.length !== 0 && <tbody>\r\n                    {userTasks.map((ut) => {\r\n                        return(\r\n                            <tr key={ut.task.id} onClick={() => this.taskOpenToggle(ut.task)}>\r\n                                <th>{ut.task.id}</th>\r\n                                <th>{ut.task.header}</th>\r\n                                <th>{ut.task.deadlineDate}</th>\r\n                                <th>{translatePriority(ut.task.priority)}</th>\r\n                                <th>{translateTaskRole(ut.role)}</th>\r\n                                <th>{translateTaskType(ut.task.taskType)}</th>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>}\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    renderTask() {\r\n        return(\r\n            <Modal\r\n                isOpen={this.taskOpen}\r\n                toggle={() => this.taskOpenToggle()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                   onClick={() => this.taskOpenToggle()}/>\r\n                <Task store={this.props.store} task={this.taskToRender}/>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        let tasks = this.filterTasks(this.props.tasksStatus);\r\n        return(\r\n            <>\r\n                {tasks !== undefined && this.renderMyTasks(tasks)}\r\n                {tasks === undefined && <div><span>Задач пока нет:)</span></div>}\r\n                {this.taskOpen && this.renderTask()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    taskOpenToggle(task: TaskViewModel = new TaskViewModel()) {\r\n        this.taskOpen = !this.taskOpen;\r\n        this.taskToRender = task;\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskStatus.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddProject.tsx",["190"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input, Dropdown, DropdownToggle, DropdownItem, DropdownMenu, Label } from \"reactstrap\";\r\nimport Calendar from \"react-calendar\";\r\n\r\n@observer\r\nexport class AddProject extends React.Component<IProjectsProps> {\r\n    addProjectWindowOpen: boolean;\r\n    projectName: string = \"\";\r\n    description: string = \"\";\r\n    responsibleDropdownOpen: boolean;\r\n    startDate: Date = new Date();\r\n    deadline: Date = new Date();\r\n    responsiblePerson: number = 0;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addProjectWindowOpen: observable,\r\n            projectName: observable,\r\n            description: observable,\r\n            responsibleDropdownOpen: observable,\r\n            startDate: observable,\r\n            deadline: observable,\r\n            responsiblePerson: observable\r\n        });\r\n    }\r\n\r\n    toggleAddProjectWindow() {\r\n        this.addProjectWindowOpen = !this.addProjectWindowOpen;\r\n    }\r\n\r\n    toggleResponsibleDropdown() {\r\n        this.responsibleDropdownOpen = !this.responsibleDropdownOpen;\r\n    }\r\n\r\n    renderAddProjectWindow() {\r\n        let users = this.props.store.userStore.users;\r\n        let user = users[0];\r\n        return(\r\n            <Modal isOpen={this.addProjectWindowOpen} toggle={() => this.toggleAddProjectWindow()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                   onClick={() => this.toggleAddProjectWindow()}/>\r\n                <ModalHeader>\r\n                    СОЗДАНИЕ ПРОЕКТА\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label style={{width: \"100%\"}} align=\"center\">Название проекта</Label>\r\n                        <Input style={{width: \"90%\"}} onChange={(e) => this.inputProjectName(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\" style={{marginTop: \"10px\"}}>\r\n                        <Label style={{width: \"100%\"}} align=\"center\">Описание проекта</Label>\r\n                        <textarea style={{width: \"90%\"}} onChange={(e) => this.inputDescription(e)}/>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">Дата начала</Label>\r\n                            <div style={{width: \"100%\", paddingLeft: \"15%\"}}>\r\n                                <Calendar\r\n                                    value={this.startDate}\r\n                                    onChange={(date) => this.inputDate(date, \"startDate\")}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-sm-12\">\r\n                            <Label style={{width: \"100%\"}} align=\"center\">Дедлайн</Label>\r\n                            <div style={{width: \"100%\", paddingLeft: \"15%\"}}>\r\n                                <Calendar\r\n                                    value={this.deadline}\r\n                                    onChange={(date) => this.inputDate(date, \"deadline\")}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Label style={{width: \"100%\"}} align=\"center\">Ответственный</Label>\r\n                        <Dropdown isOpen={this.responsibleDropdownOpen} toggle={() => this.toggleResponsibleDropdown()}>\r\n                            <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{user !== undefined ? `${user.firstName} ${user.lastName}` : \"Пока нет пользователей\"}</DropdownToggle>\r\n                            <DropdownMenu>\r\n                                {users.map((user, index) => {\r\n                                    return(\r\n                                        <>\r\n                                            {index === 0 && <DropdownItem key={index} header onClick={() => this.chooseResponsiblePerson(user.id)}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                                            {index !== 0 && <DropdownItem key={index} onClick={() => this.chooseResponsiblePerson(user.id)}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                                        </>\r\n                                    );\r\n                                })}\r\n                            </DropdownMenu>\r\n                        </Dropdown>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.saveProject()}>\r\n                        СОХРАНИТЬ\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <>\r\n                <div className=\"col-6\"/>\r\n                <div className=\"col-6\">\r\n                    <Button\r\n                        style={{width: \"100%\", borderColor: \"#66A5AD\", color: \"#66A5AD\", backgroundColor: \"#fff\"}}\r\n                        onClick={() => this.toggleAddProjectWindow()}>Создать проект</Button>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.addProjectWindowOpen && this.renderAddProjectWindow()}\r\n                {!this.addProjectWindowOpen && this.renderButton()}\r\n            </>\r\n        )\r\n    }\r\n\r\n    inputProjectName(event: React.FormEvent<HTMLInputElement>) {\r\n        this.projectName = event.currentTarget.value;\r\n    }\r\n\r\n    inputDescription(event: React.FormEvent<HTMLTextAreaElement>) {\r\n        this.description = event.currentTarget.value;\r\n    }\r\n\r\n    inputDate(date: Date, dateType: string) {\r\n        if(dateType === \"startDate\") {\r\n            this.startDate = date;\r\n        } else if(dateType === \"deadline\") {\r\n            this.deadline = date;\r\n        }\r\n    }\r\n\r\n    chooseResponsiblePerson(userId: number) {\r\n        this.responsiblePerson = userId;\r\n    }\r\n\r\n    saveProject() {\r\n        this.props.store.projectStore\r\n            .addNewProject(this.projectName, this.description, this.startDate, this.deadline, this.responsiblePerson);\r\n}\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Projects.tsx",["191"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { ProjectViewModel } from \"../../Typings/viewModels/ProjectViewModel\";\r\nimport { Tab, Nav, Alert } from \"react-bootstrap\";\r\nimport { Project } from \"./Project\";\r\nimport { observer } from \"mobx-react\";\r\nimport {renderSpinner} from \"../../functions/renderSpinner\";\r\n\r\n@observer\r\nexport class Projects extends React.Component<IProjectsProps> {\r\n    renderMenu(projects: ProjectViewModel[], choosenProject: ProjectViewModel) {\r\n        // @ts-ignore\r\n        return(\r\n            <Tab.Container defaultActiveKey={`${choosenProject.id.toString()}`}>\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-3\">\r\n                        <Nav variant=\"pills\" className=\"flex-column\">\r\n                            {projects.map((project) => {\r\n                                return (\r\n                                    <Nav.Item key={project.id} \r\n                                         onClick={() => {this.props.store.projectStore.setChoosenProject(project)}}>\r\n                                        <Nav.Link eventKey={project.id}\r\n                                             style={{backgroundColor: \"#07575B\", color: \"#fff\"}}>{project.name}</Nav.Link>\r\n                                    </Nav.Item>\r\n                                );\r\n                            })}\r\n                        </Nav>\r\n                    </div>\r\n                    <div className=\"col-9\">\r\n                        <Tab.Content>\r\n                            {projects.map((project) => {\r\n                                return (\r\n                                    <Tab.Pane eventKey={project.id} key={project.id}>\r\n                                        <Project store={this.props.store} />\r\n                                    </Tab.Pane>\r\n                                );\r\n                            })}\r\n                        </Tab.Content>\r\n                    </div>\r\n                </div>\r\n            </Tab.Container>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let projects = this.props.store.projectStore.projects;\r\n        let choosenProject =  this.props.store.projectStore.choosenProject;\r\n        return(\r\n            <>\r\n                {projects.length === 0 && <Alert variant=\"primary\">\r\n                    <span>Пока нет никаких проектов</span>\r\n                </Alert>}\r\n                {choosenProject !== undefined && this.renderMenu(projects, choosenProject)}\r\n                {choosenProject === undefined && renderSpinner()}\r\n            </>\r\n        )\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\Project.tsx",["192"],"﻿import React from \"react\";\r\nimport { IProjectsProps } from \"./IProjectsProps\";\r\nimport { AddTask } from \"../Tasks/AddTask\";\r\nimport { AddUserToProject } from \"./AddUserToProject\";\r\nimport { Tasks } from \"../Tasks/Tasks\";\r\nimport { ProjectViewModel } from \"../../Typings/viewModels/ProjectViewModel\";\r\nimport { Card, CardText, CardTitle, Label } from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\nimport { TaskStatus } from \"../../Typings/enums/TaskStatus\";\r\nimport { Col, Nav, NavItem, Row, TabContent, TabPane, NavLink, Alert } from \"reactstrap\";\r\nimport { action, makeObservable, observable } from \"mobx\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { renderSpinner } from \"../../functions/renderSpinner\";\r\nimport { observer } from \"mobx-react\";\r\n\r\n@observer\r\nexport class Project extends React.Component<IProjectsProps> {\r\n    activeTab: string = \"1\";\r\n    loaded: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            activeTab: observable,\r\n            loaded: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.props.store.taskStore.getTasks(this.props.store.projectStore.choosenProject.id)\r\n            .then(() => this.loaded = true);\r\n    }\r\n\r\n    renderProjectDiagram() {\r\n        return (\r\n            <>Диаграмма. Неважно, что ты не видишь её. Она тебя видит</>\r\n        );\r\n    }\r\n\r\n    getResponsible(responsibleId: number) {\r\n        let responsible = this.props.store.userStore.users.filter(u => u.id === responsibleId)[0];\r\n        if(responsible === undefined) {\r\n            return undefined;\r\n        } else {\r\n            return responsible;\r\n        }\r\n    }\r\n\r\n    renderResponsible(responsible: UserViewModel | undefined) {\r\n        if(responsible === undefined) {\r\n            return(\r\n                <Alert>Руководитель не выбран</Alert>\r\n            );\r\n        } else {\r\n            return(\r\n                <CardText>Руководитель: <span>{responsible?.firstName} {responsible?.lastName}</span></CardText>\r\n            )\r\n        }\r\n    }\r\n\r\n    renderProjectInfo(project: ProjectViewModel) {\r\n        let responsible = this.getResponsible(project.responsiblePerson);\r\n        return (\r\n            <div className=\"row justify-content-center\">\r\n                <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                    <Card style={{backgroundColor: \"#66A5AD\", color: \"#fff\"}}>\r\n                        <CardTitle style={{fontSize: \"1.3em\"}}>{project.name}</CardTitle>\r\n                        {this.renderResponsible(responsible)}\r\n                        <CardText><Label style={{width: \"100%\", fontSize: \"1.2em\"}}>Дата начала:</Label> {project.startDate}</CardText>\r\n                        <CardText><Label style={{width: \"100%\", fontSize: \"1.2em\"}}>Дедлайн:</Label> {project.deadlineDate}</CardText>\r\n                        <CardText><Label style={{width: \"100%\", fontSize: \"1.2em\"}}>Описание:</Label> {project.description}</CardText>\r\n                    </Card>\r\n                </div>\r\n                <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                    {this.renderProjectDiagram()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderTasksMenu() {\r\n        return(\r\n            <div style={{marginTop: 35}} className=\"container-fluid\">\r\n                <Row>\r\n                    <Col sm=\"12\">\r\n                        <Nav tabs>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    className={classnames({ active: this.activeTab === \"1\"})}\r\n                                    onClick={(e) => this.toggleTab(\"1\")}\r\n                                >Текущие</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    className={classnames({ active: this.activeTab === \"2\"})}\r\n                                    onClick={(e) => this.toggleTab(\"2\")}>Законченные</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink\r\n                                    to=\"#\"\r\n                                    className={classnames({ active: this.activeTab === \"3\"})}\r\n                                    onClick={(e) => this.toggleTab(\"3\")}>Будущие</NavLink>\r\n                            </NavItem>\r\n                        </Nav>\r\n                        <TabContent activeTab={this.activeTab}>\r\n                            <TabPane tabId=\"1\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <Tasks store={this.props.store} status={TaskStatus.InProgress}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                            <TabPane tabId=\"2\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <Tasks store={this.props.store} status={TaskStatus.Completed}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                            <TabPane tabId=\"3\">\r\n                                <Row>\r\n                                    <Col sm=\"12\">\r\n                                        <Tasks store={this.props.store} status={TaskStatus.Future}/>\r\n                                    </Col>\r\n                                </Row>\r\n                            </TabPane>\r\n                        </TabContent>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <div className=\"container-fluid\">\r\n                {this.renderProjectInfo(this.props.store.projectStore.choosenProject)}\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-lg-3 col-sm-6\">\r\n                        <AddTask store={this.props.store}/>\r\n                    </div>\r\n                    <div className=\"col-lg-3 col-sm-6\">\r\n                        <AddUserToProject store={this.props.store}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    {this.loaded && this.renderTasksMenu()}\r\n                    {!this.loaded && renderSpinner()}\r\n                </div>\r\n            </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    @action\r\n    toggleTab(activeTab: string): void {\r\n        this.activeTab = activeTab;\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Projects\\AddUserToProject.tsx",["193"],"﻿import React from \"react\";\r\nimport RootStore from \"../../stores/RootStore\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { observer } from \"mobx-react\";\r\nimport {\r\n    Button,\r\n    Dropdown,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    Modal,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalHeader,\r\n    Alert\r\n} from \"reactstrap\";\r\nimport { ProjectRole } from \"../../Typings/enums/ProjectRole\";\r\nimport { translateProjectRole } from \"../../functions/translater\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\n\r\nexport interface IAddUserToProjectProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nexport class AddUserToProject extends React.Component<IAddUserToProjectProps> {\r\n    addUserToProjectWindowOpen: boolean;\r\n    roleDropdownOpen: boolean;\r\n    usersDropdownOpen: boolean;\r\n    choosenUser: UserViewModel;\r\n    role: ProjectRole = ProjectRole.Head;\r\n    notAttached: boolean;\r\n\r\n    componentDidMount(): void {\r\n        this.choosenUser = this.props.store.userStore.users[0];\r\n    }\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addUserToProjectWindowOpen: observable,\r\n            usersDropdownOpen: observable,\r\n            roleDropdownOpen: observable\r\n        })\r\n    }\r\n\r\n    toggleWindow() {\r\n        this.addUserToProjectWindowOpen = !this.addUserToProjectWindowOpen;\r\n    }\r\n\r\n    toggleUserDropdown() {\r\n        this.usersDropdownOpen = !this.usersDropdownOpen;\r\n    }\r\n\r\n    toggleRoleDropdown() {\r\n        this.roleDropdownOpen = !this.roleDropdownOpen;\r\n    }\r\n\r\n    renderAddUserToProjectWindow() {\r\n        let users = this.props.store.userStore.users;\r\n        let choosenUser = this.choosenUser;\r\n        return(\r\n            <Modal\r\n                style={{backgroundColor: \"#003b46\", color: \"#003b46\", fontSize: \"1.4em\"}}\r\n                isOpen={this.addUserToProjectWindowOpen}\r\n                toggle={() => this.toggleWindow()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                   onClick={() => this.toggleWindow()}/>\r\n                {this.notAttached && <Alert color=\"primary\">Что-то пошло не так и пользователь не прикрепился :(</Alert>}\r\n                <ModalHeader>ПРИКРЕПЛЕНИЕ ПОЛЬЗОВАТЕЛЯ</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-sm-6\">\r\n                            <Dropdown isOpen={this.usersDropdownOpen} toggle={() => this.toggleUserDropdown()}>\r\n                                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{choosenUser !== undefined ? `${choosenUser.firstName} ${choosenUser.lastName}` : \"Пока нет пользователей\"}</DropdownToggle>\r\n                                <DropdownMenu>\r\n                                    {users.map((user, index) => {\r\n                                        return(\r\n                                            <>\r\n                                                {<DropdownItem onClick={() => this.choosenUser = user}>{user.firstName + \" \" + user.lastName}</DropdownItem>}\r\n                                            </>\r\n                                        );\r\n                                    })}\r\n                                </DropdownMenu>\r\n                            </Dropdown>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-sm-6\">\r\n                            <Dropdown isOpen={this.roleDropdownOpen} toggle={() => this.toggleRoleDropdown()}>\r\n                                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateProjectRole(this.role)}</DropdownToggle>\r\n                                <DropdownMenu>\r\n                                    <DropdownItem onClick={() => this.role = ProjectRole.Head}>{translateProjectRole(ProjectRole.Head)}</DropdownItem>\r\n                                </DropdownMenu>\r\n                            </Dropdown>\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.attach()}\r\n                    >\r\n                        Прикрепить\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <div className=\"row justify-content-center\" style={{marginTop: \"5%\"}}>\r\n                <Button\r\n                    style={{width: \"80%\", borderColor: \"#66A5AD\", color: \"#66A5AD\", backgroundColor: \"#fff\"}}\r\n                    onClick={() => this.toggleWindow()}>Прикрепить участников</Button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {!this.addUserToProjectWindowOpen && this.renderButton()}\r\n                {this.addUserToProjectWindowOpen && this.renderAddUserToProjectWindow()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    attach() {\r\n        this.props.store.projectStore.attachUserToProject(this.props.store.projectStore.choosenProject.id, this.choosenUser.id, this.role)\r\n            .then((status) => {\r\n                if(status === 200) {\r\n                    this.addUserToProjectWindowOpen = false;\r\n                    this.notAttached = false;\r\n                } else {\r\n                    this.notAttached = true;\r\n                }\r\n            });\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\AddTask.tsx",["194"],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Tasks.tsx",["195"],"﻿import React from \"react\";\r\nimport { ITasksProps } from \"./ITasksProps\";\r\nimport { TaskViewModel } from \"../../Typings/viewModels/TaskViewModel\";\r\nimport { Table } from \"reactstrap\";\r\nimport { TaskRole } from \"../../Typings/enums/TaskRole\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\n\r\nexport class Tasks extends React.Component<ITasksProps> {\r\n    getResponsible(taskId: number): UserViewModel {\r\n        return this.props.store.taskStore.userTasks\r\n            .filter(ut => ut.task.id === taskId)\r\n            .filter(ut => ut.role === TaskRole.Responsible)\r\n            .map(ut => ut.user)[0];\r\n    }\r\n\r\n    renderTasks(tasks: TaskViewModel[]) {\r\n        return(\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Номер</th>\r\n                        <th>Задача</th>\r\n                        <th>Дедлайн</th>\r\n                        <th>Тип задачи</th>\r\n                        <th>Ответственный</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                {tasks.map((task) => {\r\n                    let responsible = this.getResponsible(task.id);//вообще здесь лучше дропдаун сделать\r\n                    return(\r\n                        <tr key={task.id}>\r\n                            <th>{task.id}</th>\r\n                            <th>{task.header}</th>\r\n                            <th>{task.deadlineDate}</th>\r\n                            <th>{task.taskType}</th>\r\n                            <th>{responsible.firstName + \" \" + responsible.lastName}</th>\r\n                        </tr>\r\n                    );\r\n                })}\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let tasks = this.props.store.taskStore.currentProjectTasks.filter(t => t.status === this.props.status);\r\n        return(\r\n            <>\r\n                {this.renderTasks(tasks)}\r\n            </>\r\n        )\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskRole.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\Users.tsx",["196"],"﻿import React from \"react\";\r\nimport { IUsersProps } from \"./IUsersProps\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { Table } from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport { User } from \"./User\";\r\n\r\n@observer\r\nexport class  Users extends React.Component<IUsersProps> {\r\n    renderUsers(users: UserViewModel[]) {\r\n        return(\r\n            <Table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Id</th>\r\n                        <th>Имя Фамилия</th>\r\n                        <th>Email</th>\r\n                        <th>Роль</th>\r\n                        <th>Управление</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {users.map(user => {\r\n                        return(\r\n                           <User store={this.props.store} currentUser={user}/>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </Table>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.renderUsers(this.props.store.userStore.users)}\r\n            </>\r\n        );\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\CommentGroupViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserReadModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\Role.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\User.tsx",["197"],"﻿import React from \"react\";\r\nimport { IUserProps } from \"./IUserProps\";\r\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem, Button } from \"reactstrap\";\r\nimport { makeObservable, observable } from \"mobx\";\r\nimport { Role } from \"../../Typings/enums/Role\";\r\nimport { UserViewModel } from \"../../Typings/viewModels/UserViewModel\";\r\nimport { observer } from \"mobx-react\";\r\nimport {UserReadModel} from \"../../Typings/viewModels/UserReadModel\";\r\nimport {translateRole} from \"../../functions/translater\";\r\n\r\n@observer\r\nexport class User extends React.Component<IUserProps> {\r\n    roleDropdownOpen: boolean;\r\n    role: Role;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            roleDropdownOpen: observable,\r\n            role: observable\r\n        });\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.role = this.props.currentUser.role;\r\n    }\r\n\r\n    toggleRoleDropdown() {\r\n        this.roleDropdownOpen = !this.roleDropdownOpen;\r\n    }\r\n\r\n    chooseUserRole(role: Role) {\r\n        this.role = role;\r\n    }\r\n\r\n    renderRoleDropdown(role: Role) {\r\n        return(\r\n            <Dropdown isOpen={this.roleDropdownOpen} toggle={() => this.toggleRoleDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateRole(role)}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Developer)}>{translateRole(Role.Developer)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Tester)}>{translateRole(Role.Tester)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Administrator)}>{translateRole(Role.Administrator)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Accounter)}>{translateRole(Role.Accounter)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseUserRole(Role.Marketolog)}>{translateRole(Role.Marketolog)}</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderUser(user: UserViewModel) {\r\n        return(\r\n            <tr>\r\n                <th>{user.id}</th>\r\n                <th>{user.firstName} {user.lastName}</th>\r\n                <th>{user.email}</th>\r\n                <th>{this.renderRoleDropdown(this.role)}</th>\r\n                <th>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Button color=\"success\" \r\n                            className=\"controlButton\"\r\n                            onClick={() => this.updateUser()}>СОХРАНИТЬ</Button>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Button color=\"danger\"\r\n                            className=\"controlButton\"\r\n                            onClick={() => this.deleteUser()}>УДАЛИТЬ</Button>\r\n                    </div>\r\n                </th>\r\n            </tr>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let user = this.props.currentUser;\r\n        return(\r\n            <>{this.renderUser(user)}</>\r\n        );\r\n    }\r\n\r\n    updateUser() {\r\n        let currentUser = this.props.currentUser;\r\n        let user = new UserReadModel();\r\n        user.id = currentUser.id;\r\n        user.role = this.role;\r\n        user.firstName = currentUser.firstName;\r\n        user.lastName = currentUser.lastName;\r\n        user.email = currentUser.email;\r\n        this.props.store.userStore.addOrUpdateUser(user);\r\n    }\r\n\r\n    deleteUser() {\r\n        this.props.store.userStore.deleteUser(this.props.currentUser.id);\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Users\\AddUser.tsx",["198"],"﻿import React from \"react\";\r\nimport {IUsersProps} from \"./IUsersProps\";\r\nimport {makeObservable, observable} from \"mobx\";\r\nimport {\r\n    Button,\r\n    Dropdown,\r\n    DropdownItem,\r\n    DropdownMenu,\r\n    DropdownToggle,\r\n    Input,\r\n    Label,\r\n    Modal,\r\n    ModalBody,\r\n    ModalFooter,\r\n    ModalHeader\r\n} from \"reactstrap\";\r\nimport {Alert} from \"react-bootstrap\";\r\nimport {Role} from \"../../Typings/enums/Role\";\r\nimport {observer} from \"mobx-react\";\r\nimport {UserReadModel} from \"../../Typings/viewModels/UserReadModel\";\r\nimport {translateRole} from \"../../functions/translater\";\r\n\r\n@observer\r\nexport class AddUser extends React.Component<IUsersProps>{\r\n    addUserWindowOpen: boolean;\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    roleDropdownOpen: boolean;\r\n    role: Role;\r\n    notSaved: boolean;\r\n    saved: boolean;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            addUserWindowOpen: observable,\r\n            roleDropdownOpen: observable\r\n        });\r\n        this.role = Role.Developer;\r\n    }\r\n\r\n    toggleAddUserWindow() {\r\n        this.addUserWindowOpen = !this.addUserWindowOpen;\r\n    }\r\n\r\n    toggleRoleDropdown() {\r\n        this.roleDropdownOpen = !this.roleDropdownOpen;\r\n    }\r\n\r\n    renderButton() {\r\n        return(\r\n            <>\r\n                <div className=\"col-6\">\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.toggleAddUserWindow()}>Добавить пользователя</Button>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    renderRoleDropdown() {\r\n        return(\r\n            <Dropdown isOpen={this.roleDropdownOpen} toggle={() => this.toggleRoleDropdown()}>\r\n                <DropdownToggle tag=\"a\" className=\"nav-link\" caret>{translateRole(this.role)}</DropdownToggle>\r\n                <DropdownMenu>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Developer)}>{translateRole(Role.Developer)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Administrator)}>{translateRole(Role.Administrator)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Tester)}>{translateRole(Role.Tester)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Accounter)}>{translateRole(Role.Accounter)}</DropdownItem>\r\n                    <DropdownItem onClick={() => this.chooseRole(Role.Marketolog)}>{translateRole(Role.Marketolog)}</DropdownItem>\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        );\r\n    }\r\n\r\n    renderAddUserWindow() {\r\n        return(\r\n            <Modal\r\n                isOpen={this.addUserWindowOpen}\r\n                toggle={() => this.toggleAddUserWindow()}>\r\n                <i className=\"fa fa-window-close cool-close-button\" aria-hidden=\"true\"\r\n                onClick={() => this.toggleAddUserWindow()}/>\r\n                {this.saved && <Alert color=\"success\">Всё успешно сохранилось!</Alert>}\r\n                {this.notSaved && <Alert color=\"danger\">Что-то пошло не так и пользователь не сохранился!</Alert>}\r\n                <ModalHeader closeButton>ДОБАВЛЕНИЕ НОВОГО ПОЛЬЗОВАТЕЛЯ</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                            <Label>Имя</Label>\r\n                            <Input onChange={(e) => this.inputFirstName(e)}/>\r\n                        </div>\r\n                        <div className=\"col-lg-6 col-md-6 col-sm-12\">\r\n                            <Label>Фамилия</Label>\r\n                            <Input onChange={(e) => this.inputLastName(e)}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-8 col-md-8 col-sm-12 col-xs-12\">\r\n                            <Label>Email</Label>\r\n                            <Input onChange={(e) => this.inputEmail(e)}/>\r\n                        </div>\r\n                        <div className=\"col-lg-8 col-md-8 col-sm-12 col-xs-12\">\r\n                            {this.renderRoleDropdown()}\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.saveUser()}>\r\n                        СОХРАНИТЬ\r\n                    </Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.addUserWindowOpen && this.renderAddUserWindow()}\r\n                {!this.addUserWindowOpen && this.renderButton()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    inputFirstName(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.firstName = event.currentTarget.value;\r\n    }\r\n\r\n    inputLastName(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.lastName = event.currentTarget.value;\r\n    }\r\n\r\n    inputEmail(event: React.FormEvent<HTMLInputElement>): void {\r\n        this.email = event.currentTarget.value;\r\n    }\r\n\r\n    chooseRole(role: Role) {\r\n        this.role = role;\r\n    }\r\n\r\n    saveUser() {\r\n        let user = new UserReadModel();\r\n        user.firstName = this.firstName;\r\n        user.lastName = this.lastName;\r\n        user.email = this.email;\r\n        user.role = this.role;\r\n        this.props.store.userStore.addOrUpdateUser(user)\r\n            .then(status => {\r\n                if(status !== 200) {\r\n                    this.notSaved = true;\r\n                } else {\r\n                    this.notSaved = false;\r\n                    this.saved = true;\r\n                    this.addUserWindowOpen = false;\r\n                }\r\n            });\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\ProjectViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\UserViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\renderSpinner.tsx",["199"],"﻿import React from \"react\";\r\nimport { Spinner } from 'reactstrap';\r\n\r\nexport function renderSpinner() {\r\n    return(\r\n        <Spinner color=\"primary\"/>\r\n    )\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\functions\\translater.tsx",["200"],"﻿import {Role} from \"../Typings/enums/Role\";\r\nimport {TaskType} from \"../Typings/enums/TaskType\";\r\nimport {TaskPriority} from \"../Typings/enums/TaskPriority\";\r\nimport {ProjectRole} from \"../Typings/enums/ProjectRole\";\r\n\r\nexport function translateRole(role: Role): string {\r\n    if(role === Role.Developer) {\r\n        return \"Разработчик\";\r\n    } else if(role === Role.Marketolog) {\r\n        return \"Маркетолог\";\r\n    } else if(role === Role.Accounter) {\r\n        return \"Бухгалтер\";\r\n    } else if(role === Role.Administrator) {\r\n        return \"Администратор\";\r\n    } else if(role === Role.Tester) {\r\n        return \"Тестировщик\";\r\n    } \r\n    return \"\";\r\n}\r\n\r\nexport function translateTaskType(taskType: TaskType): string {\r\n    if(taskType === TaskType.Bug) {\r\n        return \"Баг\"\r\n    } else if(taskType === TaskType.Feature) {\r\n        return \"Фича\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport function translatePriority(priority: TaskPriority): string {\r\n    if(priority === TaskPriority.High) {\r\n        return \"Высокая\";\r\n    } else if(priority === TaskPriority.Average) {\r\n        return \"Средняя\";\r\n    } else if(priority === TaskPriority.Low) {\r\n        return \"Низкая\";\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport function translateProjectRole(role: ProjectRole): string {\r\n    if(role === ProjectRole.Head) {\r\n        return \"Руководитель\";\r\n    }\r\n    return \"\";\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Authorization\\Authorization.tsx",["201"],"﻿import React from \"react\";\r\nimport RootStore from \"../../stores/RootStore\";\r\nimport { Label, Input, Button, Alert }from \"reactstrap\";\r\nimport { observer } from \"mobx-react\";\r\nimport { makeObservable, observable } from \"mobx\";\r\n\r\ninterface IAuthorizationProps {\r\n    store: RootStore;\r\n}\r\n\r\n@observer\r\nexport class Authorization extends React.Component<IAuthorizationProps> {\r\n    email: string;\r\n    password: string;\r\n\r\n    constructor() {\r\n        // @ts-ignore\r\n        super();\r\n        makeObservable(this, {\r\n            email: observable,\r\n            password: observable\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container\" style={{backgroundColor:\"#66A5AD\", marginTop: \"5%\", color: \"#fff\", fontSize: \"1.5em\"}}>\r\n                {this.props.store.userStore.wrongCredetianals && <div className=\"row justify-content-center\">\r\n                    <Alert color=\"danger\">Пользователя с такими данными не существует. Попробуйте ещё раз</Alert>\r\n                </div> }\r\n                <div className=\"row justify-content-center\">\r\n                    <Label style={{width: \"100%\", marginTop: \"10px\"}}>EMAIL</Label>\r\n                    <Input\r\n                        style={{width: \"80%\"}}\r\n                        onChange={(e) => this.inputEmail(e)}/>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <Label style={{width: \"100%\"}}>ПАРОЛЬ</Label>\r\n                    <Input\r\n                        style={{width: \"80%\"}}\r\n                        type=\"password\"\r\n                        onChange={(e) => this.inputPassword(e)}/>\r\n                </div>\r\n                <div className=\"row justify-content-center\">\r\n                    <Button\r\n                        style={{width: \"80%\", backgroundColor: \"#07575b\", marginTop: \"25px\", marginBottom: \"15px\"}}\r\n                        onClick={() => this.authorize()}>\r\n                        ВОЙТИ\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    inputEmail(event: React.FormEvent<HTMLInputElement>) {\r\n        this.email = event.currentTarget.value;\r\n    }\r\n\r\n    inputPassword(event: React.FormEvent<HTMLInputElement>) {\r\n        this.password = event.currentTarget.value;\r\n    }\r\n\r\n    async authorize() {\r\n        const response = await fetch(\"/authorization\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                'Content-Type': 'application/json;charset=utf-8'\r\n            },\r\n            body: JSON.stringify({email: this.email, password: this.password})\r\n        });\r\n        if(response.status === 200) {\r\n            this.props.store.userStore.authorizationRequire(false);\r\n            this.props.store.userStore.wrongCredetianalsToggle(false);\r\n            this.props.store.userStore.getCurrentUser();\r\n        } else {\r\n            this.props.store.userStore.authorizationRequire(true);\r\n            this.props.store.userStore.wrongCredetianalsToggle(true);\r\n        }\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\components\\Tasks\\Task.tsx",["202"],"﻿import React from \"react\";\r\nimport { ITaskProps } from \"../MyWork/ITaskProps\";\r\nimport { ModalHeader, ModalBody, ModalFooter, Button } from \"reactstrap\";\r\nimport { TaskViewModel } from \"../../Typings/viewModels/TaskViewModel\";\r\nimport {renderSpinner} from \"../../functions/renderSpinner\";\r\n\r\nexport class Task extends React.Component<ITaskProps> {\r\n    task: TaskViewModel;\r\n\r\n    componentDidMount(): void {\r\n        this.task = this.props.task;\r\n    }\r\n\r\n    renderStatusDropdown() {\r\n        return(\r\n            <></>\r\n        );\r\n    }\r\n\r\n    renderResponsible() {\r\n        return(\r\n            <></>\r\n        );\r\n    }\r\n    \r\n    renderTester() {\r\n        return(\r\n            <></>\r\n        );\r\n    }\r\n\r\n    renderTaskPriority() {\r\n        return(\r\n            <></>\r\n        );\r\n    }\r\n\r\n    renderTask(task: TaskViewModel) {\r\n        let author = this.props.store.userStore.users.filter(u => u.id === task.id)[0];\r\n        return(\r\n            <>\r\n                <ModalHeader>{task.header}</ModalHeader>\r\n                <ModalBody>\r\n                    <div className=\"container\">\r\n                        <div className=\"row justify-content-center\">\r\n                            <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                                {task.description}\r\n                            </div>\r\n                            <div className=\"col-lg-6 col-md-6 col-sm-12 col-xs-12\">\r\n                                <div className=\"row justify-content-center\">\r\n                                    {this.renderTaskPriority()}\r\n                                </div>\r\n                                <div className=\"row justify-content-center\">\r\n                                    {this.renderStatusDropdown()}\r\n                                </div>\r\n                                <div className=\"row justify-content-center\">\r\n                                    {this.renderResponsible()}\r\n                                </div>\r\n                                <div className=\"row justify-content-center\">\r\n                                    {this.renderTester()}\r\n                                </div>\r\n                                <div className=\"row justify-content-center\">\r\n                                    {author.firstName} {author.lastName}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button\r\n                        style={{backgroundColor: \"#66A5AD\", width: \"100%\"}}\r\n                        onClick={() => this.save()}>\r\n                        СОХРАНИТЬ\r\n                    </Button>\r\n                </ModalFooter>\r\n            </>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n                {this.task !== undefined && this.renderTask(this.task)}\r\n                {this.task === undefined && renderSpinner()}\r\n            </>\r\n        );\r\n    }\r\n\r\n    save() {\r\n        let task = this.task;\r\n        this.props.store.taskStore.addOrUpdateTask(task.header, task.description, task.startDate, task.deadlineDate, task.taskType, task.status, task.priority, 0,0,0, task.id, 0)\r\n    }\r\n}","C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\viewModels\\TaskViewModel.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskPriority.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\TaskType.ts",[],"C:\\SuperSoft\\SuperSoft\\client\\src\\Typings\\enums\\ProjectRole.ts",[],{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","severity":1,"message":"208","line":1,"column":1,"nodeType":"209","messageId":"210","fix":"211"},{"ruleId":"212","severity":1,"message":"213","line":1,"column":10,"nodeType":"214","messageId":"215","endLine":1,"endColumn":16},{"ruleId":"207","severity":1,"message":"208","line":1,"column":1,"nodeType":"209","messageId":"210","fix":"216"},{"ruleId":"207","severity":1,"message":"208","line":1,"column":1,"nodeType":"209","messageId":"210","fix":"217"},{"ruleId":"207","severity":1,"message":"208","line":1,"column":1,"nodeType":"209","messageId":"210","fix":"218"},{"ruleId":"207","severity":1,"message":"208","line":1,"column":1,"nodeType":"209","messageId":"210","fix":"219"},{"ruleId":"207","severity":1,"message":"208","line":1,"column":1,"nodeType":"209","messageId":"210","fix":"220"},{"ruleId":"207","severity":1,"message":"208","line":1,"column":1,"nodeType":"209","messageId":"210","fix":"221"},{"ruleId":"212","severity":1,"message":"222","line":51,"column":19,"nodeType":"214","messageId":"215","endLine":51,"endColumn":26},{"ruleId":"207","severity":1,"message":"208","line":1,"column":1,"nodeType":"209","messageId":"210","fix":"223"},{"ruleId":"207","severity":1,"message":"208","line":1,"column":1,"nodeType":"209","messageId":"210","fix":"224"},{"ruleId":"207","severity":1,"message":"208","line":1,"column":1,"nodeType":"209","messageId":"210","fix":"225"},{"ruleId":"212","severity":1,"message":"226","line":6,"column":9,"nodeType":"214","messageId":"215","endLine":6,"endColumn":21},{"ruleId":"212","severity":1,"message":"227","line":12,"column":9,"nodeType":"214","messageId":"215","endLine":12,"endColumn":17},{"ruleId":"212","severity":1,"message":"228","line":13,"column":9,"nodeType":"214","messageId":"215","endLine":13,"endColumn":17},{"ruleId":"229","severity":1,"message":"230","line":29,"column":59,"nodeType":"231","messageId":"232","endLine":29,"endColumn":61,"fix":"233"},{"ruleId":"207","severity":1,"message":"208","line":1,"column":1,"nodeType":"209","messageId":"210","fix":"234"},{"ruleId":"207","severity":1,"message":"208","line":1,"column":1,"nodeType":"209","messageId":"210","fix":"235"},{"ruleId":"207","severity":1,"message":"208","line":1,"column":1,"nodeType":"209","messageId":"210","fix":"236"},{"ruleId":"207","severity":1,"message":"208","line":1,"column":1,"nodeType":"209","messageId":"210","fix":"237"},{"ruleId":"207","severity":1,"message":"208","line":1,"column":1,"nodeType":"209","messageId":"210","fix":"238"},{"ruleId":"207","severity":1,"message":"208","line":1,"column":1,"nodeType":"209","messageId":"210","fix":"239"},{"ruleId":"207","severity":1,"message":"208","line":1,"column":1,"nodeType":"209","messageId":"210","fix":"240"},{"ruleId":"207","severity":1,"message":"208","line":1,"column":1,"nodeType":"209","messageId":"210","fix":"241"},{"ruleId":"207","severity":1,"message":"208","line":1,"column":1,"nodeType":"209","messageId":"210","fix":"242"},{"ruleId":"207","severity":1,"message":"208","line":1,"column":1,"nodeType":"209","messageId":"210","fix":"243"},{"ruleId":"207","severity":1,"message":"208","line":1,"column":1,"nodeType":"209","messageId":"210","fix":"244"},{"ruleId":"207","severity":1,"message":"208","line":1,"column":1,"nodeType":"209","messageId":"210","fix":"245"},{"ruleId":"207","severity":1,"message":"208","line":1,"column":1,"nodeType":"209","messageId":"210","fix":"246"},"no-native-reassign",["247"],"no-negated-in-lhs",["248"],"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"249","text":"250"},"@typescript-eslint/no-unused-vars","'action' is defined but never used.","Identifier","unusedVar",{"range":"251","text":"250"},{"range":"252","text":"250"},{"range":"253","text":"250"},{"range":"254","text":"250"},{"range":"255","text":"250"},{"range":"256","text":"250"},"'project' is assigned a value but never used.",{"range":"257","text":"250"},{"range":"258","text":"250"},{"range":"259","text":"250"},"'TaskPriority' is defined but never used.","'TaskRole' is defined but never used.","'TaskType' is defined but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"260","text":"261"},{"range":"262","text":"250"},{"range":"263","text":"250"},{"range":"264","text":"250"},{"range":"265","text":"250"},{"range":"266","text":"250"},{"range":"267","text":"250"},{"range":"268","text":"250"},{"range":"269","text":"250"},{"range":"270","text":"250"},{"range":"271","text":"250"},{"range":"272","text":"250"},{"range":"273","text":"250"},{"range":"274","text":"250"},"no-global-assign","no-unsafe-negation",[-1,0],"",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[1145,1161],"\r\n            ?.",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]]